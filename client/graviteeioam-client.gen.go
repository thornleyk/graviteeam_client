// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	Basic_authScopes    = "basic_auth.Scopes"
	Gravitee_authScopes = "gravitee_auth.Scopes"
)

// Defines values for AccessPolicyType.
const (
	GROOVY AccessPolicyType = "GROOVY"
)

// Defines values for AlertNotifierReferenceType.
const (
	AlertNotifierReferenceTypeAPPLICATION  AlertNotifierReferenceType = "APPLICATION"
	AlertNotifierReferenceTypeDOMAIN       AlertNotifierReferenceType = "DOMAIN"
	AlertNotifierReferenceTypeENVIRONMENT  AlertNotifierReferenceType = "ENVIRONMENT"
	AlertNotifierReferenceTypeORGANIZATION AlertNotifierReferenceType = "ORGANIZATION"
	AlertNotifierReferenceTypePLATFORM     AlertNotifierReferenceType = "PLATFORM"
)

// Defines values for AlertTriggerReferenceType.
const (
	AlertTriggerReferenceTypeAPPLICATION  AlertTriggerReferenceType = "APPLICATION"
	AlertTriggerReferenceTypeDOMAIN       AlertTriggerReferenceType = "DOMAIN"
	AlertTriggerReferenceTypeENVIRONMENT  AlertTriggerReferenceType = "ENVIRONMENT"
	AlertTriggerReferenceTypeORGANIZATION AlertTriggerReferenceType = "ORGANIZATION"
	AlertTriggerReferenceTypePLATFORM     AlertTriggerReferenceType = "PLATFORM"
)

// Defines values for AlertTriggerType.
const (
	AlertTriggerTypeRISKASSESSMENT       AlertTriggerType = "RISK_ASSESSMENT"
	AlertTriggerTypeTOOMANYLOGINFAILURES AlertTriggerType = "TOO_MANY_LOGIN_FAILURES"
)

// Defines values for ApplicationType.
const (
	ApplicationTypeBROWSER        ApplicationType = "BROWSER"
	ApplicationTypeNATIVE         ApplicationType = "NATIVE"
	ApplicationTypeRESOURCESERVER ApplicationType = "RESOURCE_SERVER"
	ApplicationTypeSERVICE        ApplicationType = "SERVICE"
	ApplicationTypeWEB            ApplicationType = "WEB"
)

// Defines values for AuditReferenceType.
const (
	AuditReferenceTypeAPPLICATION  AuditReferenceType = "APPLICATION"
	AuditReferenceTypeDOMAIN       AuditReferenceType = "DOMAIN"
	AuditReferenceTypeENVIRONMENT  AuditReferenceType = "ENVIRONMENT"
	AuditReferenceTypeORGANIZATION AuditReferenceType = "ORGANIZATION"
	AuditReferenceTypePLATFORM     AuditReferenceType = "PLATFORM"
)

// Defines values for AuditEntityReferenceType.
const (
	AuditEntityReferenceTypeAPPLICATION  AuditEntityReferenceType = "APPLICATION"
	AuditEntityReferenceTypeDOMAIN       AuditEntityReferenceType = "DOMAIN"
	AuditEntityReferenceTypeENVIRONMENT  AuditEntityReferenceType = "ENVIRONMENT"
	AuditEntityReferenceTypeORGANIZATION AuditEntityReferenceType = "ORGANIZATION"
	AuditEntityReferenceTypePLATFORM     AuditEntityReferenceType = "PLATFORM"
)

// Defines values for AuthenticationDeviceNotifierReferenceType.
const (
	AuthenticationDeviceNotifierReferenceTypeAPPLICATION  AuthenticationDeviceNotifierReferenceType = "APPLICATION"
	AuthenticationDeviceNotifierReferenceTypeDOMAIN       AuthenticationDeviceNotifierReferenceType = "DOMAIN"
	AuthenticationDeviceNotifierReferenceTypeENVIRONMENT  AuthenticationDeviceNotifierReferenceType = "ENVIRONMENT"
	AuthenticationDeviceNotifierReferenceTypeORGANIZATION AuthenticationDeviceNotifierReferenceType = "ORGANIZATION"
	AuthenticationDeviceNotifierReferenceTypePLATFORM     AuthenticationDeviceNotifierReferenceType = "PLATFORM"
)

// Defines values for BotDetectionReferenceType.
const (
	BotDetectionReferenceTypeAPPLICATION  BotDetectionReferenceType = "APPLICATION"
	BotDetectionReferenceTypeDOMAIN       BotDetectionReferenceType = "DOMAIN"
	BotDetectionReferenceTypeENVIRONMENT  BotDetectionReferenceType = "ENVIRONMENT"
	BotDetectionReferenceTypeORGANIZATION BotDetectionReferenceType = "ORGANIZATION"
	BotDetectionReferenceTypePLATFORM     BotDetectionReferenceType = "PLATFORM"
)

// Defines values for CertificateEntityStatus.
const (
	EXPIRED    CertificateEntityStatus = "EXPIRED"
	RENEWED    CertificateEntityStatus = "RENEWED"
	VALID      CertificateEntityStatus = "VALID"
	WILLEXPIRE CertificateEntityStatus = "WILL_EXPIRE"
)

// Defines values for CredentialReferenceType.
const (
	CredentialReferenceTypeAPPLICATION  CredentialReferenceType = "APPLICATION"
	CredentialReferenceTypeDOMAIN       CredentialReferenceType = "DOMAIN"
	CredentialReferenceTypeENVIRONMENT  CredentialReferenceType = "ENVIRONMENT"
	CredentialReferenceTypeORGANIZATION CredentialReferenceType = "ORGANIZATION"
	CredentialReferenceTypePLATFORM     CredentialReferenceType = "PLATFORM"
)

// Defines values for DomainReferenceType.
const (
	DomainReferenceTypeAPPLICATION  DomainReferenceType = "APPLICATION"
	DomainReferenceTypeDOMAIN       DomainReferenceType = "DOMAIN"
	DomainReferenceTypeENVIRONMENT  DomainReferenceType = "ENVIRONMENT"
	DomainReferenceTypeORGANIZATION DomainReferenceType = "ORGANIZATION"
	DomainReferenceTypePLATFORM     DomainReferenceType = "PLATFORM"
)

// Defines values for EmailReferenceType.
const (
	EmailReferenceTypeAPPLICATION  EmailReferenceType = "APPLICATION"
	EmailReferenceTypeDOMAIN       EmailReferenceType = "DOMAIN"
	EmailReferenceTypeENVIRONMENT  EmailReferenceType = "ENVIRONMENT"
	EmailReferenceTypeORGANIZATION EmailReferenceType = "ORGANIZATION"
	EmailReferenceTypePLATFORM     EmailReferenceType = "PLATFORM"
)

// Defines values for EnrolledFactorStatus.
const (
	ACTIVATED         EnrolledFactorStatus = "ACTIVATED"
	NULL              EnrolledFactorStatus = "NULL"
	PENDINGACTIVATION EnrolledFactorStatus = "PENDING_ACTIVATION"
	REVOKED           EnrolledFactorStatus = "REVOKED"
)

// Defines values for EnrolledFactorChannelType.
const (
	EnrolledFactorChannelTypeCALL  EnrolledFactorChannelType = "CALL"
	EnrolledFactorChannelTypeEMAIL EnrolledFactorChannelType = "EMAIL"
	EnrolledFactorChannelTypeHTTP  EnrolledFactorChannelType = "HTTP"
	EnrolledFactorChannelTypeSMS   EnrolledFactorChannelType = "SMS"
)

// Defines values for FactorFactorType.
const (
	FactorFactorTypeCALL         FactorFactorType = "CALL"
	FactorFactorTypeEMAIL        FactorFactorType = "EMAIL"
	FactorFactorTypeFIDO2        FactorFactorType = "FIDO2"
	FactorFactorTypeHTTP         FactorFactorType = "HTTP"
	FactorFactorTypeOTP          FactorFactorType = "OTP"
	FactorFactorTypeRECOVERYCODE FactorFactorType = "RECOVERY_CODE"
	FactorFactorTypeSMS          FactorFactorType = "SMS"
)

// Defines values for FlowType.
const (
	FlowTypeCONSENT                  FlowType = "CONSENT"
	FlowTypeLOGIN                    FlowType = "LOGIN"
	FlowTypeLOGINIDENTIFIER          FlowType = "LOGIN_IDENTIFIER"
	FlowTypeREGISTER                 FlowType = "REGISTER"
	FlowTypeREGISTRATIONCONFIRMATION FlowType = "REGISTRATION_CONFIRMATION"
	FlowTypeRESETPASSWORD            FlowType = "RESET_PASSWORD"
	FlowTypeROOT                     FlowType = "ROOT"
)

// Defines values for FlowEntityType.
const (
	FlowEntityTypeCONSENT                  FlowEntityType = "CONSENT"
	FlowEntityTypeLOGIN                    FlowEntityType = "LOGIN"
	FlowEntityTypeLOGINIDENTIFIER          FlowEntityType = "LOGIN_IDENTIFIER"
	FlowEntityTypeREGISTER                 FlowEntityType = "REGISTER"
	FlowEntityTypeREGISTRATIONCONFIRMATION FlowEntityType = "REGISTRATION_CONFIRMATION"
	FlowEntityTypeRESETPASSWORD            FlowEntityType = "RESET_PASSWORD"
	FlowEntityTypeROOT                     FlowEntityType = "ROOT"
)

// Defines values for FormReferenceType.
const (
	FormReferenceTypeAPPLICATION  FormReferenceType = "APPLICATION"
	FormReferenceTypeDOMAIN       FormReferenceType = "DOMAIN"
	FormReferenceTypeENVIRONMENT  FormReferenceType = "ENVIRONMENT"
	FormReferenceTypeORGANIZATION FormReferenceType = "ORGANIZATION"
	FormReferenceTypePLATFORM     FormReferenceType = "PLATFORM"
)

// Defines values for GroupReferenceType.
const (
	GroupReferenceTypeAPPLICATION  GroupReferenceType = "APPLICATION"
	GroupReferenceTypeDOMAIN       GroupReferenceType = "DOMAIN"
	GroupReferenceTypeENVIRONMENT  GroupReferenceType = "ENVIRONMENT"
	GroupReferenceTypeORGANIZATION GroupReferenceType = "ORGANIZATION"
	GroupReferenceTypePLATFORM     GroupReferenceType = "PLATFORM"
)

// Defines values for I18nDictionaryReferenceType.
const (
	I18nDictionaryReferenceTypeAPPLICATION  I18nDictionaryReferenceType = "APPLICATION"
	I18nDictionaryReferenceTypeDOMAIN       I18nDictionaryReferenceType = "DOMAIN"
	I18nDictionaryReferenceTypeENVIRONMENT  I18nDictionaryReferenceType = "ENVIRONMENT"
	I18nDictionaryReferenceTypeORGANIZATION I18nDictionaryReferenceType = "ORGANIZATION"
	I18nDictionaryReferenceTypePLATFORM     I18nDictionaryReferenceType = "PLATFORM"
)

// Defines values for IdentityProviderReferenceType.
const (
	IdentityProviderReferenceTypeAPPLICATION  IdentityProviderReferenceType = "APPLICATION"
	IdentityProviderReferenceTypeDOMAIN       IdentityProviderReferenceType = "DOMAIN"
	IdentityProviderReferenceTypeENVIRONMENT  IdentityProviderReferenceType = "ENVIRONMENT"
	IdentityProviderReferenceTypeORGANIZATION IdentityProviderReferenceType = "ORGANIZATION"
	IdentityProviderReferenceTypePLATFORM     IdentityProviderReferenceType = "PLATFORM"
)

// Defines values for MembershipMemberType.
const (
	MembershipMemberTypeGROUP MembershipMemberType = "GROUP"
	MembershipMemberTypeUSER  MembershipMemberType = "USER"
)

// Defines values for MembershipReferenceType.
const (
	MembershipReferenceTypeAPPLICATION  MembershipReferenceType = "APPLICATION"
	MembershipReferenceTypeDOMAIN       MembershipReferenceType = "DOMAIN"
	MembershipReferenceTypeENVIRONMENT  MembershipReferenceType = "ENVIRONMENT"
	MembershipReferenceTypeORGANIZATION MembershipReferenceType = "ORGANIZATION"
	MembershipReferenceTypePLATFORM     MembershipReferenceType = "PLATFORM"
)

// Defines values for NewApplicationType.
const (
	NewApplicationTypeBROWSER        NewApplicationType = "BROWSER"
	NewApplicationTypeNATIVE         NewApplicationType = "NATIVE"
	NewApplicationTypeRESOURCESERVER NewApplicationType = "RESOURCE_SERVER"
	NewApplicationTypeSERVICE        NewApplicationType = "SERVICE"
	NewApplicationTypeWEB            NewApplicationType = "WEB"
)

// Defines values for NewEmailTemplate.
const (
	NewEmailTemplateBLOCKEDACCOUNT           NewEmailTemplate = "BLOCKED_ACCOUNT"
	NewEmailTemplateCERTIFICATEEXPIRATION    NewEmailTemplate = "CERTIFICATE_EXPIRATION"
	NewEmailTemplateCOMPLETEPROFILE          NewEmailTemplate = "COMPLETE_PROFILE"
	NewEmailTemplateERROR                    NewEmailTemplate = "ERROR"
	NewEmailTemplateFORGOTPASSWORD           NewEmailTemplate = "FORGOT_PASSWORD"
	NewEmailTemplateIDENTIFIERFIRSTLOGIN     NewEmailTemplate = "IDENTIFIER_FIRST_LOGIN"
	NewEmailTemplateLOGIN                    NewEmailTemplate = "LOGIN"
	NewEmailTemplateMFACHALLENGE             NewEmailTemplate = "MFA_CHALLENGE"
	NewEmailTemplateMFACHALLENGEALTERNATIVES NewEmailTemplate = "MFA_CHALLENGE_ALTERNATIVES"
	NewEmailTemplateMFAENROLL                NewEmailTemplate = "MFA_ENROLL"
	NewEmailTemplateMFARECOVERYCODE          NewEmailTemplate = "MFA_RECOVERY_CODE"
	NewEmailTemplateOAUTH2USERCONSENT        NewEmailTemplate = "OAUTH2_USER_CONSENT"
	NewEmailTemplateREGISTRATION             NewEmailTemplate = "REGISTRATION"
	NewEmailTemplateREGISTRATIONCONFIRMATION NewEmailTemplate = "REGISTRATION_CONFIRMATION"
	NewEmailTemplateRESETPASSWORD            NewEmailTemplate = "RESET_PASSWORD"
	NewEmailTemplateVERIFYATTEMPT            NewEmailTemplate = "VERIFY_ATTEMPT"
	NewEmailTemplateWEBAUTHNLOGIN            NewEmailTemplate = "WEBAUTHN_LOGIN"
	NewEmailTemplateWEBAUTHNREGISTER         NewEmailTemplate = "WEBAUTHN_REGISTER"
)

// Defines values for NewFormTemplate.
const (
	NewFormTemplateBLOCKEDACCOUNT           NewFormTemplate = "BLOCKED_ACCOUNT"
	NewFormTemplateCERTIFICATEEXPIRATION    NewFormTemplate = "CERTIFICATE_EXPIRATION"
	NewFormTemplateCOMPLETEPROFILE          NewFormTemplate = "COMPLETE_PROFILE"
	NewFormTemplateERROR                    NewFormTemplate = "ERROR"
	NewFormTemplateFORGOTPASSWORD           NewFormTemplate = "FORGOT_PASSWORD"
	NewFormTemplateIDENTIFIERFIRSTLOGIN     NewFormTemplate = "IDENTIFIER_FIRST_LOGIN"
	NewFormTemplateLOGIN                    NewFormTemplate = "LOGIN"
	NewFormTemplateMFACHALLENGE             NewFormTemplate = "MFA_CHALLENGE"
	NewFormTemplateMFACHALLENGEALTERNATIVES NewFormTemplate = "MFA_CHALLENGE_ALTERNATIVES"
	NewFormTemplateMFAENROLL                NewFormTemplate = "MFA_ENROLL"
	NewFormTemplateMFARECOVERYCODE          NewFormTemplate = "MFA_RECOVERY_CODE"
	NewFormTemplateOAUTH2USERCONSENT        NewFormTemplate = "OAUTH2_USER_CONSENT"
	NewFormTemplateREGISTRATION             NewFormTemplate = "REGISTRATION"
	NewFormTemplateREGISTRATIONCONFIRMATION NewFormTemplate = "REGISTRATION_CONFIRMATION"
	NewFormTemplateRESETPASSWORD            NewFormTemplate = "RESET_PASSWORD"
	NewFormTemplateVERIFYATTEMPT            NewFormTemplate = "VERIFY_ATTEMPT"
	NewFormTemplateWEBAUTHNLOGIN            NewFormTemplate = "WEBAUTHN_LOGIN"
	NewFormTemplateWEBAUTHNREGISTER         NewFormTemplate = "WEBAUTHN_REGISTER"
)

// Defines values for NewMembershipMemberType.
const (
	NewMembershipMemberTypeGROUP NewMembershipMemberType = "GROUP"
	NewMembershipMemberTypeUSER  NewMembershipMemberType = "USER"
)

// Defines values for NewRoleAssignableType.
const (
	NewRoleAssignableTypeAPPLICATION  NewRoleAssignableType = "APPLICATION"
	NewRoleAssignableTypeDOMAIN       NewRoleAssignableType = "DOMAIN"
	NewRoleAssignableTypeENVIRONMENT  NewRoleAssignableType = "ENVIRONMENT"
	NewRoleAssignableTypeORGANIZATION NewRoleAssignableType = "ORGANIZATION"
	NewRoleAssignableTypePLATFORM     NewRoleAssignableType = "PLATFORM"
)

// Defines values for PatchAlertTriggerType.
const (
	PatchAlertTriggerTypeRISKASSESSMENT       PatchAlertTriggerType = "RISK_ASSESSMENT"
	PatchAlertTriggerTypeTOOMANYLOGINFAILURES PatchAlertTriggerType = "TOO_MANY_LOGIN_FAILURES"
)

// Defines values for PatchApplicationRequiredPermissions.
const (
	PatchApplicationRequiredPermissionsAPPLICATION                  PatchApplicationRequiredPermissions = "APPLICATION"
	PatchApplicationRequiredPermissionsAPPLICATIONANALYTICS         PatchApplicationRequiredPermissions = "APPLICATION_ANALYTICS"
	PatchApplicationRequiredPermissionsAPPLICATIONCERTIFICATE       PatchApplicationRequiredPermissions = "APPLICATION_CERTIFICATE"
	PatchApplicationRequiredPermissionsAPPLICATIONEMAILTEMPLATE     PatchApplicationRequiredPermissions = "APPLICATION_EMAIL_TEMPLATE"
	PatchApplicationRequiredPermissionsAPPLICATIONFACTOR            PatchApplicationRequiredPermissions = "APPLICATION_FACTOR"
	PatchApplicationRequiredPermissionsAPPLICATIONFLOW              PatchApplicationRequiredPermissions = "APPLICATION_FLOW"
	PatchApplicationRequiredPermissionsAPPLICATIONFORM              PatchApplicationRequiredPermissions = "APPLICATION_FORM"
	PatchApplicationRequiredPermissionsAPPLICATIONIDENTITYPROVIDER  PatchApplicationRequiredPermissions = "APPLICATION_IDENTITY_PROVIDER"
	PatchApplicationRequiredPermissionsAPPLICATIONMEMBER            PatchApplicationRequiredPermissions = "APPLICATION_MEMBER"
	PatchApplicationRequiredPermissionsAPPLICATIONOPENID            PatchApplicationRequiredPermissions = "APPLICATION_OPENID"
	PatchApplicationRequiredPermissionsAPPLICATIONRESOURCE          PatchApplicationRequiredPermissions = "APPLICATION_RESOURCE"
	PatchApplicationRequiredPermissionsAPPLICATIONSAML              PatchApplicationRequiredPermissions = "APPLICATION_SAML"
	PatchApplicationRequiredPermissionsAPPLICATIONSETTINGS          PatchApplicationRequiredPermissions = "APPLICATION_SETTINGS"
	PatchApplicationRequiredPermissionsDOMAIN                       PatchApplicationRequiredPermissions = "DOMAIN"
	PatchApplicationRequiredPermissionsDOMAINALERT                  PatchApplicationRequiredPermissions = "DOMAIN_ALERT"
	PatchApplicationRequiredPermissionsDOMAINALERTNOTIFIER          PatchApplicationRequiredPermissions = "DOMAIN_ALERT_NOTIFIER"
	PatchApplicationRequiredPermissionsDOMAINANALYTICS              PatchApplicationRequiredPermissions = "DOMAIN_ANALYTICS"
	PatchApplicationRequiredPermissionsDOMAINAUDIT                  PatchApplicationRequiredPermissions = "DOMAIN_AUDIT"
	PatchApplicationRequiredPermissionsDOMAINAUTHDEVICENOTIFIER     PatchApplicationRequiredPermissions = "DOMAIN_AUTHDEVICE_NOTIFIER"
	PatchApplicationRequiredPermissionsDOMAINBOTDETECTION           PatchApplicationRequiredPermissions = "DOMAIN_BOT_DETECTION"
	PatchApplicationRequiredPermissionsDOMAINCERTIFICATE            PatchApplicationRequiredPermissions = "DOMAIN_CERTIFICATE"
	PatchApplicationRequiredPermissionsDOMAINDEVICEIDENTIFIER       PatchApplicationRequiredPermissions = "DOMAIN_DEVICE_IDENTIFIER"
	PatchApplicationRequiredPermissionsDOMAINEMAILTEMPLATE          PatchApplicationRequiredPermissions = "DOMAIN_EMAIL_TEMPLATE"
	PatchApplicationRequiredPermissionsDOMAINEXTENSIONGRANT         PatchApplicationRequiredPermissions = "DOMAIN_EXTENSION_GRANT"
	PatchApplicationRequiredPermissionsDOMAINEXTENSIONPOINT         PatchApplicationRequiredPermissions = "DOMAIN_EXTENSION_POINT"
	PatchApplicationRequiredPermissionsDOMAINFACTOR                 PatchApplicationRequiredPermissions = "DOMAIN_FACTOR"
	PatchApplicationRequiredPermissionsDOMAINFLOW                   PatchApplicationRequiredPermissions = "DOMAIN_FLOW"
	PatchApplicationRequiredPermissionsDOMAINFORM                   PatchApplicationRequiredPermissions = "DOMAIN_FORM"
	PatchApplicationRequiredPermissionsDOMAINGROUP                  PatchApplicationRequiredPermissions = "DOMAIN_GROUP"
	PatchApplicationRequiredPermissionsDOMAINI18NDICTIONARY         PatchApplicationRequiredPermissions = "DOMAIN_I18N_DICTIONARY"
	PatchApplicationRequiredPermissionsDOMAINIDENTITYPROVIDER       PatchApplicationRequiredPermissions = "DOMAIN_IDENTITY_PROVIDER"
	PatchApplicationRequiredPermissionsDOMAINMEMBER                 PatchApplicationRequiredPermissions = "DOMAIN_MEMBER"
	PatchApplicationRequiredPermissionsDOMAINOPENID                 PatchApplicationRequiredPermissions = "DOMAIN_OPENID"
	PatchApplicationRequiredPermissionsDOMAINREPORTER               PatchApplicationRequiredPermissions = "DOMAIN_REPORTER"
	PatchApplicationRequiredPermissionsDOMAINRESOURCE               PatchApplicationRequiredPermissions = "DOMAIN_RESOURCE"
	PatchApplicationRequiredPermissionsDOMAINROLE                   PatchApplicationRequiredPermissions = "DOMAIN_ROLE"
	PatchApplicationRequiredPermissionsDOMAINSAML                   PatchApplicationRequiredPermissions = "DOMAIN_SAML"
	PatchApplicationRequiredPermissionsDOMAINSCIM                   PatchApplicationRequiredPermissions = "DOMAIN_SCIM"
	PatchApplicationRequiredPermissionsDOMAINSCOPE                  PatchApplicationRequiredPermissions = "DOMAIN_SCOPE"
	PatchApplicationRequiredPermissionsDOMAINSETTINGS               PatchApplicationRequiredPermissions = "DOMAIN_SETTINGS"
	PatchApplicationRequiredPermissionsDOMAINTHEME                  PatchApplicationRequiredPermissions = "DOMAIN_THEME"
	PatchApplicationRequiredPermissionsDOMAINUMA                    PatchApplicationRequiredPermissions = "DOMAIN_UMA"
	PatchApplicationRequiredPermissionsDOMAINUMASCOPE               PatchApplicationRequiredPermissions = "DOMAIN_UMA_SCOPE"
	PatchApplicationRequiredPermissionsDOMAINUSER                   PatchApplicationRequiredPermissions = "DOMAIN_USER"
	PatchApplicationRequiredPermissionsDOMAINUSERDEVICE             PatchApplicationRequiredPermissions = "DOMAIN_USER_DEVICE"
	PatchApplicationRequiredPermissionsENVIRONMENT                  PatchApplicationRequiredPermissions = "ENVIRONMENT"
	PatchApplicationRequiredPermissionsINSTALLATION                 PatchApplicationRequiredPermissions = "INSTALLATION"
	PatchApplicationRequiredPermissionsORGANIZATION                 PatchApplicationRequiredPermissions = "ORGANIZATION"
	PatchApplicationRequiredPermissionsORGANIZATIONAUDIT            PatchApplicationRequiredPermissions = "ORGANIZATION_AUDIT"
	PatchApplicationRequiredPermissionsORGANIZATIONENTRYPOINT       PatchApplicationRequiredPermissions = "ORGANIZATION_ENTRYPOINT"
	PatchApplicationRequiredPermissionsORGANIZATIONFORM             PatchApplicationRequiredPermissions = "ORGANIZATION_FORM"
	PatchApplicationRequiredPermissionsORGANIZATIONGROUP            PatchApplicationRequiredPermissions = "ORGANIZATION_GROUP"
	PatchApplicationRequiredPermissionsORGANIZATIONIDENTITYPROVIDER PatchApplicationRequiredPermissions = "ORGANIZATION_IDENTITY_PROVIDER"
	PatchApplicationRequiredPermissionsORGANIZATIONMEMBER           PatchApplicationRequiredPermissions = "ORGANIZATION_MEMBER"
	PatchApplicationRequiredPermissionsORGANIZATIONREPORTER         PatchApplicationRequiredPermissions = "ORGANIZATION_REPORTER"
	PatchApplicationRequiredPermissionsORGANIZATIONROLE             PatchApplicationRequiredPermissions = "ORGANIZATION_ROLE"
	PatchApplicationRequiredPermissionsORGANIZATIONSCOPE            PatchApplicationRequiredPermissions = "ORGANIZATION_SCOPE"
	PatchApplicationRequiredPermissionsORGANIZATIONSETTINGS         PatchApplicationRequiredPermissions = "ORGANIZATION_SETTINGS"
	PatchApplicationRequiredPermissionsORGANIZATIONTAG              PatchApplicationRequiredPermissions = "ORGANIZATION_TAG"
	PatchApplicationRequiredPermissionsORGANIZATIONUSER             PatchApplicationRequiredPermissions = "ORGANIZATION_USER"
)

// Defines values for PatchApplicationSettingsRequiredPermissions.
const (
	PatchApplicationSettingsRequiredPermissionsAPPLICATION                  PatchApplicationSettingsRequiredPermissions = "APPLICATION"
	PatchApplicationSettingsRequiredPermissionsAPPLICATIONANALYTICS         PatchApplicationSettingsRequiredPermissions = "APPLICATION_ANALYTICS"
	PatchApplicationSettingsRequiredPermissionsAPPLICATIONCERTIFICATE       PatchApplicationSettingsRequiredPermissions = "APPLICATION_CERTIFICATE"
	PatchApplicationSettingsRequiredPermissionsAPPLICATIONEMAILTEMPLATE     PatchApplicationSettingsRequiredPermissions = "APPLICATION_EMAIL_TEMPLATE"
	PatchApplicationSettingsRequiredPermissionsAPPLICATIONFACTOR            PatchApplicationSettingsRequiredPermissions = "APPLICATION_FACTOR"
	PatchApplicationSettingsRequiredPermissionsAPPLICATIONFLOW              PatchApplicationSettingsRequiredPermissions = "APPLICATION_FLOW"
	PatchApplicationSettingsRequiredPermissionsAPPLICATIONFORM              PatchApplicationSettingsRequiredPermissions = "APPLICATION_FORM"
	PatchApplicationSettingsRequiredPermissionsAPPLICATIONIDENTITYPROVIDER  PatchApplicationSettingsRequiredPermissions = "APPLICATION_IDENTITY_PROVIDER"
	PatchApplicationSettingsRequiredPermissionsAPPLICATIONMEMBER            PatchApplicationSettingsRequiredPermissions = "APPLICATION_MEMBER"
	PatchApplicationSettingsRequiredPermissionsAPPLICATIONOPENID            PatchApplicationSettingsRequiredPermissions = "APPLICATION_OPENID"
	PatchApplicationSettingsRequiredPermissionsAPPLICATIONRESOURCE          PatchApplicationSettingsRequiredPermissions = "APPLICATION_RESOURCE"
	PatchApplicationSettingsRequiredPermissionsAPPLICATIONSAML              PatchApplicationSettingsRequiredPermissions = "APPLICATION_SAML"
	PatchApplicationSettingsRequiredPermissionsAPPLICATIONSETTINGS          PatchApplicationSettingsRequiredPermissions = "APPLICATION_SETTINGS"
	PatchApplicationSettingsRequiredPermissionsDOMAIN                       PatchApplicationSettingsRequiredPermissions = "DOMAIN"
	PatchApplicationSettingsRequiredPermissionsDOMAINALERT                  PatchApplicationSettingsRequiredPermissions = "DOMAIN_ALERT"
	PatchApplicationSettingsRequiredPermissionsDOMAINALERTNOTIFIER          PatchApplicationSettingsRequiredPermissions = "DOMAIN_ALERT_NOTIFIER"
	PatchApplicationSettingsRequiredPermissionsDOMAINANALYTICS              PatchApplicationSettingsRequiredPermissions = "DOMAIN_ANALYTICS"
	PatchApplicationSettingsRequiredPermissionsDOMAINAUDIT                  PatchApplicationSettingsRequiredPermissions = "DOMAIN_AUDIT"
	PatchApplicationSettingsRequiredPermissionsDOMAINAUTHDEVICENOTIFIER     PatchApplicationSettingsRequiredPermissions = "DOMAIN_AUTHDEVICE_NOTIFIER"
	PatchApplicationSettingsRequiredPermissionsDOMAINBOTDETECTION           PatchApplicationSettingsRequiredPermissions = "DOMAIN_BOT_DETECTION"
	PatchApplicationSettingsRequiredPermissionsDOMAINCERTIFICATE            PatchApplicationSettingsRequiredPermissions = "DOMAIN_CERTIFICATE"
	PatchApplicationSettingsRequiredPermissionsDOMAINDEVICEIDENTIFIER       PatchApplicationSettingsRequiredPermissions = "DOMAIN_DEVICE_IDENTIFIER"
	PatchApplicationSettingsRequiredPermissionsDOMAINEMAILTEMPLATE          PatchApplicationSettingsRequiredPermissions = "DOMAIN_EMAIL_TEMPLATE"
	PatchApplicationSettingsRequiredPermissionsDOMAINEXTENSIONGRANT         PatchApplicationSettingsRequiredPermissions = "DOMAIN_EXTENSION_GRANT"
	PatchApplicationSettingsRequiredPermissionsDOMAINEXTENSIONPOINT         PatchApplicationSettingsRequiredPermissions = "DOMAIN_EXTENSION_POINT"
	PatchApplicationSettingsRequiredPermissionsDOMAINFACTOR                 PatchApplicationSettingsRequiredPermissions = "DOMAIN_FACTOR"
	PatchApplicationSettingsRequiredPermissionsDOMAINFLOW                   PatchApplicationSettingsRequiredPermissions = "DOMAIN_FLOW"
	PatchApplicationSettingsRequiredPermissionsDOMAINFORM                   PatchApplicationSettingsRequiredPermissions = "DOMAIN_FORM"
	PatchApplicationSettingsRequiredPermissionsDOMAINGROUP                  PatchApplicationSettingsRequiredPermissions = "DOMAIN_GROUP"
	PatchApplicationSettingsRequiredPermissionsDOMAINI18NDICTIONARY         PatchApplicationSettingsRequiredPermissions = "DOMAIN_I18N_DICTIONARY"
	PatchApplicationSettingsRequiredPermissionsDOMAINIDENTITYPROVIDER       PatchApplicationSettingsRequiredPermissions = "DOMAIN_IDENTITY_PROVIDER"
	PatchApplicationSettingsRequiredPermissionsDOMAINMEMBER                 PatchApplicationSettingsRequiredPermissions = "DOMAIN_MEMBER"
	PatchApplicationSettingsRequiredPermissionsDOMAINOPENID                 PatchApplicationSettingsRequiredPermissions = "DOMAIN_OPENID"
	PatchApplicationSettingsRequiredPermissionsDOMAINREPORTER               PatchApplicationSettingsRequiredPermissions = "DOMAIN_REPORTER"
	PatchApplicationSettingsRequiredPermissionsDOMAINRESOURCE               PatchApplicationSettingsRequiredPermissions = "DOMAIN_RESOURCE"
	PatchApplicationSettingsRequiredPermissionsDOMAINROLE                   PatchApplicationSettingsRequiredPermissions = "DOMAIN_ROLE"
	PatchApplicationSettingsRequiredPermissionsDOMAINSAML                   PatchApplicationSettingsRequiredPermissions = "DOMAIN_SAML"
	PatchApplicationSettingsRequiredPermissionsDOMAINSCIM                   PatchApplicationSettingsRequiredPermissions = "DOMAIN_SCIM"
	PatchApplicationSettingsRequiredPermissionsDOMAINSCOPE                  PatchApplicationSettingsRequiredPermissions = "DOMAIN_SCOPE"
	PatchApplicationSettingsRequiredPermissionsDOMAINSETTINGS               PatchApplicationSettingsRequiredPermissions = "DOMAIN_SETTINGS"
	PatchApplicationSettingsRequiredPermissionsDOMAINTHEME                  PatchApplicationSettingsRequiredPermissions = "DOMAIN_THEME"
	PatchApplicationSettingsRequiredPermissionsDOMAINUMA                    PatchApplicationSettingsRequiredPermissions = "DOMAIN_UMA"
	PatchApplicationSettingsRequiredPermissionsDOMAINUMASCOPE               PatchApplicationSettingsRequiredPermissions = "DOMAIN_UMA_SCOPE"
	PatchApplicationSettingsRequiredPermissionsDOMAINUSER                   PatchApplicationSettingsRequiredPermissions = "DOMAIN_USER"
	PatchApplicationSettingsRequiredPermissionsDOMAINUSERDEVICE             PatchApplicationSettingsRequiredPermissions = "DOMAIN_USER_DEVICE"
	PatchApplicationSettingsRequiredPermissionsENVIRONMENT                  PatchApplicationSettingsRequiredPermissions = "ENVIRONMENT"
	PatchApplicationSettingsRequiredPermissionsINSTALLATION                 PatchApplicationSettingsRequiredPermissions = "INSTALLATION"
	PatchApplicationSettingsRequiredPermissionsORGANIZATION                 PatchApplicationSettingsRequiredPermissions = "ORGANIZATION"
	PatchApplicationSettingsRequiredPermissionsORGANIZATIONAUDIT            PatchApplicationSettingsRequiredPermissions = "ORGANIZATION_AUDIT"
	PatchApplicationSettingsRequiredPermissionsORGANIZATIONENTRYPOINT       PatchApplicationSettingsRequiredPermissions = "ORGANIZATION_ENTRYPOINT"
	PatchApplicationSettingsRequiredPermissionsORGANIZATIONFORM             PatchApplicationSettingsRequiredPermissions = "ORGANIZATION_FORM"
	PatchApplicationSettingsRequiredPermissionsORGANIZATIONGROUP            PatchApplicationSettingsRequiredPermissions = "ORGANIZATION_GROUP"
	PatchApplicationSettingsRequiredPermissionsORGANIZATIONIDENTITYPROVIDER PatchApplicationSettingsRequiredPermissions = "ORGANIZATION_IDENTITY_PROVIDER"
	PatchApplicationSettingsRequiredPermissionsORGANIZATIONMEMBER           PatchApplicationSettingsRequiredPermissions = "ORGANIZATION_MEMBER"
	PatchApplicationSettingsRequiredPermissionsORGANIZATIONREPORTER         PatchApplicationSettingsRequiredPermissions = "ORGANIZATION_REPORTER"
	PatchApplicationSettingsRequiredPermissionsORGANIZATIONROLE             PatchApplicationSettingsRequiredPermissions = "ORGANIZATION_ROLE"
	PatchApplicationSettingsRequiredPermissionsORGANIZATIONSCOPE            PatchApplicationSettingsRequiredPermissions = "ORGANIZATION_SCOPE"
	PatchApplicationSettingsRequiredPermissionsORGANIZATIONSETTINGS         PatchApplicationSettingsRequiredPermissions = "ORGANIZATION_SETTINGS"
	PatchApplicationSettingsRequiredPermissionsORGANIZATIONTAG              PatchApplicationSettingsRequiredPermissions = "ORGANIZATION_TAG"
	PatchApplicationSettingsRequiredPermissionsORGANIZATIONUSER             PatchApplicationSettingsRequiredPermissions = "ORGANIZATION_USER"
)

// Defines values for PatchApplicationTypeType.
const (
	BROWSER        PatchApplicationTypeType = "BROWSER"
	NATIVE         PatchApplicationTypeType = "NATIVE"
	RESOURCESERVER PatchApplicationTypeType = "RESOURCE_SERVER"
	SERVICE        PatchApplicationTypeType = "SERVICE"
	WEB            PatchApplicationTypeType = "WEB"
)

// Defines values for PatchDomainRequiredPermissions.
const (
	PatchDomainRequiredPermissionsAPPLICATION                  PatchDomainRequiredPermissions = "APPLICATION"
	PatchDomainRequiredPermissionsAPPLICATIONANALYTICS         PatchDomainRequiredPermissions = "APPLICATION_ANALYTICS"
	PatchDomainRequiredPermissionsAPPLICATIONCERTIFICATE       PatchDomainRequiredPermissions = "APPLICATION_CERTIFICATE"
	PatchDomainRequiredPermissionsAPPLICATIONEMAILTEMPLATE     PatchDomainRequiredPermissions = "APPLICATION_EMAIL_TEMPLATE"
	PatchDomainRequiredPermissionsAPPLICATIONFACTOR            PatchDomainRequiredPermissions = "APPLICATION_FACTOR"
	PatchDomainRequiredPermissionsAPPLICATIONFLOW              PatchDomainRequiredPermissions = "APPLICATION_FLOW"
	PatchDomainRequiredPermissionsAPPLICATIONFORM              PatchDomainRequiredPermissions = "APPLICATION_FORM"
	PatchDomainRequiredPermissionsAPPLICATIONIDENTITYPROVIDER  PatchDomainRequiredPermissions = "APPLICATION_IDENTITY_PROVIDER"
	PatchDomainRequiredPermissionsAPPLICATIONMEMBER            PatchDomainRequiredPermissions = "APPLICATION_MEMBER"
	PatchDomainRequiredPermissionsAPPLICATIONOPENID            PatchDomainRequiredPermissions = "APPLICATION_OPENID"
	PatchDomainRequiredPermissionsAPPLICATIONRESOURCE          PatchDomainRequiredPermissions = "APPLICATION_RESOURCE"
	PatchDomainRequiredPermissionsAPPLICATIONSAML              PatchDomainRequiredPermissions = "APPLICATION_SAML"
	PatchDomainRequiredPermissionsAPPLICATIONSETTINGS          PatchDomainRequiredPermissions = "APPLICATION_SETTINGS"
	PatchDomainRequiredPermissionsDOMAIN                       PatchDomainRequiredPermissions = "DOMAIN"
	PatchDomainRequiredPermissionsDOMAINALERT                  PatchDomainRequiredPermissions = "DOMAIN_ALERT"
	PatchDomainRequiredPermissionsDOMAINALERTNOTIFIER          PatchDomainRequiredPermissions = "DOMAIN_ALERT_NOTIFIER"
	PatchDomainRequiredPermissionsDOMAINANALYTICS              PatchDomainRequiredPermissions = "DOMAIN_ANALYTICS"
	PatchDomainRequiredPermissionsDOMAINAUDIT                  PatchDomainRequiredPermissions = "DOMAIN_AUDIT"
	PatchDomainRequiredPermissionsDOMAINAUTHDEVICENOTIFIER     PatchDomainRequiredPermissions = "DOMAIN_AUTHDEVICE_NOTIFIER"
	PatchDomainRequiredPermissionsDOMAINBOTDETECTION           PatchDomainRequiredPermissions = "DOMAIN_BOT_DETECTION"
	PatchDomainRequiredPermissionsDOMAINCERTIFICATE            PatchDomainRequiredPermissions = "DOMAIN_CERTIFICATE"
	PatchDomainRequiredPermissionsDOMAINDEVICEIDENTIFIER       PatchDomainRequiredPermissions = "DOMAIN_DEVICE_IDENTIFIER"
	PatchDomainRequiredPermissionsDOMAINEMAILTEMPLATE          PatchDomainRequiredPermissions = "DOMAIN_EMAIL_TEMPLATE"
	PatchDomainRequiredPermissionsDOMAINEXTENSIONGRANT         PatchDomainRequiredPermissions = "DOMAIN_EXTENSION_GRANT"
	PatchDomainRequiredPermissionsDOMAINEXTENSIONPOINT         PatchDomainRequiredPermissions = "DOMAIN_EXTENSION_POINT"
	PatchDomainRequiredPermissionsDOMAINFACTOR                 PatchDomainRequiredPermissions = "DOMAIN_FACTOR"
	PatchDomainRequiredPermissionsDOMAINFLOW                   PatchDomainRequiredPermissions = "DOMAIN_FLOW"
	PatchDomainRequiredPermissionsDOMAINFORM                   PatchDomainRequiredPermissions = "DOMAIN_FORM"
	PatchDomainRequiredPermissionsDOMAINGROUP                  PatchDomainRequiredPermissions = "DOMAIN_GROUP"
	PatchDomainRequiredPermissionsDOMAINI18NDICTIONARY         PatchDomainRequiredPermissions = "DOMAIN_I18N_DICTIONARY"
	PatchDomainRequiredPermissionsDOMAINIDENTITYPROVIDER       PatchDomainRequiredPermissions = "DOMAIN_IDENTITY_PROVIDER"
	PatchDomainRequiredPermissionsDOMAINMEMBER                 PatchDomainRequiredPermissions = "DOMAIN_MEMBER"
	PatchDomainRequiredPermissionsDOMAINOPENID                 PatchDomainRequiredPermissions = "DOMAIN_OPENID"
	PatchDomainRequiredPermissionsDOMAINREPORTER               PatchDomainRequiredPermissions = "DOMAIN_REPORTER"
	PatchDomainRequiredPermissionsDOMAINRESOURCE               PatchDomainRequiredPermissions = "DOMAIN_RESOURCE"
	PatchDomainRequiredPermissionsDOMAINROLE                   PatchDomainRequiredPermissions = "DOMAIN_ROLE"
	PatchDomainRequiredPermissionsDOMAINSAML                   PatchDomainRequiredPermissions = "DOMAIN_SAML"
	PatchDomainRequiredPermissionsDOMAINSCIM                   PatchDomainRequiredPermissions = "DOMAIN_SCIM"
	PatchDomainRequiredPermissionsDOMAINSCOPE                  PatchDomainRequiredPermissions = "DOMAIN_SCOPE"
	PatchDomainRequiredPermissionsDOMAINSETTINGS               PatchDomainRequiredPermissions = "DOMAIN_SETTINGS"
	PatchDomainRequiredPermissionsDOMAINTHEME                  PatchDomainRequiredPermissions = "DOMAIN_THEME"
	PatchDomainRequiredPermissionsDOMAINUMA                    PatchDomainRequiredPermissions = "DOMAIN_UMA"
	PatchDomainRequiredPermissionsDOMAINUMASCOPE               PatchDomainRequiredPermissions = "DOMAIN_UMA_SCOPE"
	PatchDomainRequiredPermissionsDOMAINUSER                   PatchDomainRequiredPermissions = "DOMAIN_USER"
	PatchDomainRequiredPermissionsDOMAINUSERDEVICE             PatchDomainRequiredPermissions = "DOMAIN_USER_DEVICE"
	PatchDomainRequiredPermissionsENVIRONMENT                  PatchDomainRequiredPermissions = "ENVIRONMENT"
	PatchDomainRequiredPermissionsINSTALLATION                 PatchDomainRequiredPermissions = "INSTALLATION"
	PatchDomainRequiredPermissionsORGANIZATION                 PatchDomainRequiredPermissions = "ORGANIZATION"
	PatchDomainRequiredPermissionsORGANIZATIONAUDIT            PatchDomainRequiredPermissions = "ORGANIZATION_AUDIT"
	PatchDomainRequiredPermissionsORGANIZATIONENTRYPOINT       PatchDomainRequiredPermissions = "ORGANIZATION_ENTRYPOINT"
	PatchDomainRequiredPermissionsORGANIZATIONFORM             PatchDomainRequiredPermissions = "ORGANIZATION_FORM"
	PatchDomainRequiredPermissionsORGANIZATIONGROUP            PatchDomainRequiredPermissions = "ORGANIZATION_GROUP"
	PatchDomainRequiredPermissionsORGANIZATIONIDENTITYPROVIDER PatchDomainRequiredPermissions = "ORGANIZATION_IDENTITY_PROVIDER"
	PatchDomainRequiredPermissionsORGANIZATIONMEMBER           PatchDomainRequiredPermissions = "ORGANIZATION_MEMBER"
	PatchDomainRequiredPermissionsORGANIZATIONREPORTER         PatchDomainRequiredPermissions = "ORGANIZATION_REPORTER"
	PatchDomainRequiredPermissionsORGANIZATIONROLE             PatchDomainRequiredPermissions = "ORGANIZATION_ROLE"
	PatchDomainRequiredPermissionsORGANIZATIONSCOPE            PatchDomainRequiredPermissions = "ORGANIZATION_SCOPE"
	PatchDomainRequiredPermissionsORGANIZATIONSETTINGS         PatchDomainRequiredPermissions = "ORGANIZATION_SETTINGS"
	PatchDomainRequiredPermissionsORGANIZATIONTAG              PatchDomainRequiredPermissions = "ORGANIZATION_TAG"
	PatchDomainRequiredPermissionsORGANIZATIONUSER             PatchDomainRequiredPermissions = "ORGANIZATION_USER"
)

// Defines values for PatchOIDCSettingsRequiredPermissions.
const (
	PatchOIDCSettingsRequiredPermissionsAPPLICATION                  PatchOIDCSettingsRequiredPermissions = "APPLICATION"
	PatchOIDCSettingsRequiredPermissionsAPPLICATIONANALYTICS         PatchOIDCSettingsRequiredPermissions = "APPLICATION_ANALYTICS"
	PatchOIDCSettingsRequiredPermissionsAPPLICATIONCERTIFICATE       PatchOIDCSettingsRequiredPermissions = "APPLICATION_CERTIFICATE"
	PatchOIDCSettingsRequiredPermissionsAPPLICATIONEMAILTEMPLATE     PatchOIDCSettingsRequiredPermissions = "APPLICATION_EMAIL_TEMPLATE"
	PatchOIDCSettingsRequiredPermissionsAPPLICATIONFACTOR            PatchOIDCSettingsRequiredPermissions = "APPLICATION_FACTOR"
	PatchOIDCSettingsRequiredPermissionsAPPLICATIONFLOW              PatchOIDCSettingsRequiredPermissions = "APPLICATION_FLOW"
	PatchOIDCSettingsRequiredPermissionsAPPLICATIONFORM              PatchOIDCSettingsRequiredPermissions = "APPLICATION_FORM"
	PatchOIDCSettingsRequiredPermissionsAPPLICATIONIDENTITYPROVIDER  PatchOIDCSettingsRequiredPermissions = "APPLICATION_IDENTITY_PROVIDER"
	PatchOIDCSettingsRequiredPermissionsAPPLICATIONMEMBER            PatchOIDCSettingsRequiredPermissions = "APPLICATION_MEMBER"
	PatchOIDCSettingsRequiredPermissionsAPPLICATIONOPENID            PatchOIDCSettingsRequiredPermissions = "APPLICATION_OPENID"
	PatchOIDCSettingsRequiredPermissionsAPPLICATIONRESOURCE          PatchOIDCSettingsRequiredPermissions = "APPLICATION_RESOURCE"
	PatchOIDCSettingsRequiredPermissionsAPPLICATIONSAML              PatchOIDCSettingsRequiredPermissions = "APPLICATION_SAML"
	PatchOIDCSettingsRequiredPermissionsAPPLICATIONSETTINGS          PatchOIDCSettingsRequiredPermissions = "APPLICATION_SETTINGS"
	PatchOIDCSettingsRequiredPermissionsDOMAIN                       PatchOIDCSettingsRequiredPermissions = "DOMAIN"
	PatchOIDCSettingsRequiredPermissionsDOMAINALERT                  PatchOIDCSettingsRequiredPermissions = "DOMAIN_ALERT"
	PatchOIDCSettingsRequiredPermissionsDOMAINALERTNOTIFIER          PatchOIDCSettingsRequiredPermissions = "DOMAIN_ALERT_NOTIFIER"
	PatchOIDCSettingsRequiredPermissionsDOMAINANALYTICS              PatchOIDCSettingsRequiredPermissions = "DOMAIN_ANALYTICS"
	PatchOIDCSettingsRequiredPermissionsDOMAINAUDIT                  PatchOIDCSettingsRequiredPermissions = "DOMAIN_AUDIT"
	PatchOIDCSettingsRequiredPermissionsDOMAINAUTHDEVICENOTIFIER     PatchOIDCSettingsRequiredPermissions = "DOMAIN_AUTHDEVICE_NOTIFIER"
	PatchOIDCSettingsRequiredPermissionsDOMAINBOTDETECTION           PatchOIDCSettingsRequiredPermissions = "DOMAIN_BOT_DETECTION"
	PatchOIDCSettingsRequiredPermissionsDOMAINCERTIFICATE            PatchOIDCSettingsRequiredPermissions = "DOMAIN_CERTIFICATE"
	PatchOIDCSettingsRequiredPermissionsDOMAINDEVICEIDENTIFIER       PatchOIDCSettingsRequiredPermissions = "DOMAIN_DEVICE_IDENTIFIER"
	PatchOIDCSettingsRequiredPermissionsDOMAINEMAILTEMPLATE          PatchOIDCSettingsRequiredPermissions = "DOMAIN_EMAIL_TEMPLATE"
	PatchOIDCSettingsRequiredPermissionsDOMAINEXTENSIONGRANT         PatchOIDCSettingsRequiredPermissions = "DOMAIN_EXTENSION_GRANT"
	PatchOIDCSettingsRequiredPermissionsDOMAINEXTENSIONPOINT         PatchOIDCSettingsRequiredPermissions = "DOMAIN_EXTENSION_POINT"
	PatchOIDCSettingsRequiredPermissionsDOMAINFACTOR                 PatchOIDCSettingsRequiredPermissions = "DOMAIN_FACTOR"
	PatchOIDCSettingsRequiredPermissionsDOMAINFLOW                   PatchOIDCSettingsRequiredPermissions = "DOMAIN_FLOW"
	PatchOIDCSettingsRequiredPermissionsDOMAINFORM                   PatchOIDCSettingsRequiredPermissions = "DOMAIN_FORM"
	PatchOIDCSettingsRequiredPermissionsDOMAINGROUP                  PatchOIDCSettingsRequiredPermissions = "DOMAIN_GROUP"
	PatchOIDCSettingsRequiredPermissionsDOMAINI18NDICTIONARY         PatchOIDCSettingsRequiredPermissions = "DOMAIN_I18N_DICTIONARY"
	PatchOIDCSettingsRequiredPermissionsDOMAINIDENTITYPROVIDER       PatchOIDCSettingsRequiredPermissions = "DOMAIN_IDENTITY_PROVIDER"
	PatchOIDCSettingsRequiredPermissionsDOMAINMEMBER                 PatchOIDCSettingsRequiredPermissions = "DOMAIN_MEMBER"
	PatchOIDCSettingsRequiredPermissionsDOMAINOPENID                 PatchOIDCSettingsRequiredPermissions = "DOMAIN_OPENID"
	PatchOIDCSettingsRequiredPermissionsDOMAINREPORTER               PatchOIDCSettingsRequiredPermissions = "DOMAIN_REPORTER"
	PatchOIDCSettingsRequiredPermissionsDOMAINRESOURCE               PatchOIDCSettingsRequiredPermissions = "DOMAIN_RESOURCE"
	PatchOIDCSettingsRequiredPermissionsDOMAINROLE                   PatchOIDCSettingsRequiredPermissions = "DOMAIN_ROLE"
	PatchOIDCSettingsRequiredPermissionsDOMAINSAML                   PatchOIDCSettingsRequiredPermissions = "DOMAIN_SAML"
	PatchOIDCSettingsRequiredPermissionsDOMAINSCIM                   PatchOIDCSettingsRequiredPermissions = "DOMAIN_SCIM"
	PatchOIDCSettingsRequiredPermissionsDOMAINSCOPE                  PatchOIDCSettingsRequiredPermissions = "DOMAIN_SCOPE"
	PatchOIDCSettingsRequiredPermissionsDOMAINSETTINGS               PatchOIDCSettingsRequiredPermissions = "DOMAIN_SETTINGS"
	PatchOIDCSettingsRequiredPermissionsDOMAINTHEME                  PatchOIDCSettingsRequiredPermissions = "DOMAIN_THEME"
	PatchOIDCSettingsRequiredPermissionsDOMAINUMA                    PatchOIDCSettingsRequiredPermissions = "DOMAIN_UMA"
	PatchOIDCSettingsRequiredPermissionsDOMAINUMASCOPE               PatchOIDCSettingsRequiredPermissions = "DOMAIN_UMA_SCOPE"
	PatchOIDCSettingsRequiredPermissionsDOMAINUSER                   PatchOIDCSettingsRequiredPermissions = "DOMAIN_USER"
	PatchOIDCSettingsRequiredPermissionsDOMAINUSERDEVICE             PatchOIDCSettingsRequiredPermissions = "DOMAIN_USER_DEVICE"
	PatchOIDCSettingsRequiredPermissionsENVIRONMENT                  PatchOIDCSettingsRequiredPermissions = "ENVIRONMENT"
	PatchOIDCSettingsRequiredPermissionsINSTALLATION                 PatchOIDCSettingsRequiredPermissions = "INSTALLATION"
	PatchOIDCSettingsRequiredPermissionsORGANIZATION                 PatchOIDCSettingsRequiredPermissions = "ORGANIZATION"
	PatchOIDCSettingsRequiredPermissionsORGANIZATIONAUDIT            PatchOIDCSettingsRequiredPermissions = "ORGANIZATION_AUDIT"
	PatchOIDCSettingsRequiredPermissionsORGANIZATIONENTRYPOINT       PatchOIDCSettingsRequiredPermissions = "ORGANIZATION_ENTRYPOINT"
	PatchOIDCSettingsRequiredPermissionsORGANIZATIONFORM             PatchOIDCSettingsRequiredPermissions = "ORGANIZATION_FORM"
	PatchOIDCSettingsRequiredPermissionsORGANIZATIONGROUP            PatchOIDCSettingsRequiredPermissions = "ORGANIZATION_GROUP"
	PatchOIDCSettingsRequiredPermissionsORGANIZATIONIDENTITYPROVIDER PatchOIDCSettingsRequiredPermissions = "ORGANIZATION_IDENTITY_PROVIDER"
	PatchOIDCSettingsRequiredPermissionsORGANIZATIONMEMBER           PatchOIDCSettingsRequiredPermissions = "ORGANIZATION_MEMBER"
	PatchOIDCSettingsRequiredPermissionsORGANIZATIONREPORTER         PatchOIDCSettingsRequiredPermissions = "ORGANIZATION_REPORTER"
	PatchOIDCSettingsRequiredPermissionsORGANIZATIONROLE             PatchOIDCSettingsRequiredPermissions = "ORGANIZATION_ROLE"
	PatchOIDCSettingsRequiredPermissionsORGANIZATIONSCOPE            PatchOIDCSettingsRequiredPermissions = "ORGANIZATION_SCOPE"
	PatchOIDCSettingsRequiredPermissionsORGANIZATIONSETTINGS         PatchOIDCSettingsRequiredPermissions = "ORGANIZATION_SETTINGS"
	PatchOIDCSettingsRequiredPermissionsORGANIZATIONTAG              PatchOIDCSettingsRequiredPermissions = "ORGANIZATION_TAG"
	PatchOIDCSettingsRequiredPermissionsORGANIZATIONUSER             PatchOIDCSettingsRequiredPermissions = "ORGANIZATION_USER"
)

// Defines values for PatchSAMLSettingsRequiredPermissions.
const (
	PatchSAMLSettingsRequiredPermissionsAPPLICATION                  PatchSAMLSettingsRequiredPermissions = "APPLICATION"
	PatchSAMLSettingsRequiredPermissionsAPPLICATIONANALYTICS         PatchSAMLSettingsRequiredPermissions = "APPLICATION_ANALYTICS"
	PatchSAMLSettingsRequiredPermissionsAPPLICATIONCERTIFICATE       PatchSAMLSettingsRequiredPermissions = "APPLICATION_CERTIFICATE"
	PatchSAMLSettingsRequiredPermissionsAPPLICATIONEMAILTEMPLATE     PatchSAMLSettingsRequiredPermissions = "APPLICATION_EMAIL_TEMPLATE"
	PatchSAMLSettingsRequiredPermissionsAPPLICATIONFACTOR            PatchSAMLSettingsRequiredPermissions = "APPLICATION_FACTOR"
	PatchSAMLSettingsRequiredPermissionsAPPLICATIONFLOW              PatchSAMLSettingsRequiredPermissions = "APPLICATION_FLOW"
	PatchSAMLSettingsRequiredPermissionsAPPLICATIONFORM              PatchSAMLSettingsRequiredPermissions = "APPLICATION_FORM"
	PatchSAMLSettingsRequiredPermissionsAPPLICATIONIDENTITYPROVIDER  PatchSAMLSettingsRequiredPermissions = "APPLICATION_IDENTITY_PROVIDER"
	PatchSAMLSettingsRequiredPermissionsAPPLICATIONMEMBER            PatchSAMLSettingsRequiredPermissions = "APPLICATION_MEMBER"
	PatchSAMLSettingsRequiredPermissionsAPPLICATIONOPENID            PatchSAMLSettingsRequiredPermissions = "APPLICATION_OPENID"
	PatchSAMLSettingsRequiredPermissionsAPPLICATIONRESOURCE          PatchSAMLSettingsRequiredPermissions = "APPLICATION_RESOURCE"
	PatchSAMLSettingsRequiredPermissionsAPPLICATIONSAML              PatchSAMLSettingsRequiredPermissions = "APPLICATION_SAML"
	PatchSAMLSettingsRequiredPermissionsAPPLICATIONSETTINGS          PatchSAMLSettingsRequiredPermissions = "APPLICATION_SETTINGS"
	PatchSAMLSettingsRequiredPermissionsDOMAIN                       PatchSAMLSettingsRequiredPermissions = "DOMAIN"
	PatchSAMLSettingsRequiredPermissionsDOMAINALERT                  PatchSAMLSettingsRequiredPermissions = "DOMAIN_ALERT"
	PatchSAMLSettingsRequiredPermissionsDOMAINALERTNOTIFIER          PatchSAMLSettingsRequiredPermissions = "DOMAIN_ALERT_NOTIFIER"
	PatchSAMLSettingsRequiredPermissionsDOMAINANALYTICS              PatchSAMLSettingsRequiredPermissions = "DOMAIN_ANALYTICS"
	PatchSAMLSettingsRequiredPermissionsDOMAINAUDIT                  PatchSAMLSettingsRequiredPermissions = "DOMAIN_AUDIT"
	PatchSAMLSettingsRequiredPermissionsDOMAINAUTHDEVICENOTIFIER     PatchSAMLSettingsRequiredPermissions = "DOMAIN_AUTHDEVICE_NOTIFIER"
	PatchSAMLSettingsRequiredPermissionsDOMAINBOTDETECTION           PatchSAMLSettingsRequiredPermissions = "DOMAIN_BOT_DETECTION"
	PatchSAMLSettingsRequiredPermissionsDOMAINCERTIFICATE            PatchSAMLSettingsRequiredPermissions = "DOMAIN_CERTIFICATE"
	PatchSAMLSettingsRequiredPermissionsDOMAINDEVICEIDENTIFIER       PatchSAMLSettingsRequiredPermissions = "DOMAIN_DEVICE_IDENTIFIER"
	PatchSAMLSettingsRequiredPermissionsDOMAINEMAILTEMPLATE          PatchSAMLSettingsRequiredPermissions = "DOMAIN_EMAIL_TEMPLATE"
	PatchSAMLSettingsRequiredPermissionsDOMAINEXTENSIONGRANT         PatchSAMLSettingsRequiredPermissions = "DOMAIN_EXTENSION_GRANT"
	PatchSAMLSettingsRequiredPermissionsDOMAINEXTENSIONPOINT         PatchSAMLSettingsRequiredPermissions = "DOMAIN_EXTENSION_POINT"
	PatchSAMLSettingsRequiredPermissionsDOMAINFACTOR                 PatchSAMLSettingsRequiredPermissions = "DOMAIN_FACTOR"
	PatchSAMLSettingsRequiredPermissionsDOMAINFLOW                   PatchSAMLSettingsRequiredPermissions = "DOMAIN_FLOW"
	PatchSAMLSettingsRequiredPermissionsDOMAINFORM                   PatchSAMLSettingsRequiredPermissions = "DOMAIN_FORM"
	PatchSAMLSettingsRequiredPermissionsDOMAINGROUP                  PatchSAMLSettingsRequiredPermissions = "DOMAIN_GROUP"
	PatchSAMLSettingsRequiredPermissionsDOMAINI18NDICTIONARY         PatchSAMLSettingsRequiredPermissions = "DOMAIN_I18N_DICTIONARY"
	PatchSAMLSettingsRequiredPermissionsDOMAINIDENTITYPROVIDER       PatchSAMLSettingsRequiredPermissions = "DOMAIN_IDENTITY_PROVIDER"
	PatchSAMLSettingsRequiredPermissionsDOMAINMEMBER                 PatchSAMLSettingsRequiredPermissions = "DOMAIN_MEMBER"
	PatchSAMLSettingsRequiredPermissionsDOMAINOPENID                 PatchSAMLSettingsRequiredPermissions = "DOMAIN_OPENID"
	PatchSAMLSettingsRequiredPermissionsDOMAINREPORTER               PatchSAMLSettingsRequiredPermissions = "DOMAIN_REPORTER"
	PatchSAMLSettingsRequiredPermissionsDOMAINRESOURCE               PatchSAMLSettingsRequiredPermissions = "DOMAIN_RESOURCE"
	PatchSAMLSettingsRequiredPermissionsDOMAINROLE                   PatchSAMLSettingsRequiredPermissions = "DOMAIN_ROLE"
	PatchSAMLSettingsRequiredPermissionsDOMAINSAML                   PatchSAMLSettingsRequiredPermissions = "DOMAIN_SAML"
	PatchSAMLSettingsRequiredPermissionsDOMAINSCIM                   PatchSAMLSettingsRequiredPermissions = "DOMAIN_SCIM"
	PatchSAMLSettingsRequiredPermissionsDOMAINSCOPE                  PatchSAMLSettingsRequiredPermissions = "DOMAIN_SCOPE"
	PatchSAMLSettingsRequiredPermissionsDOMAINSETTINGS               PatchSAMLSettingsRequiredPermissions = "DOMAIN_SETTINGS"
	PatchSAMLSettingsRequiredPermissionsDOMAINTHEME                  PatchSAMLSettingsRequiredPermissions = "DOMAIN_THEME"
	PatchSAMLSettingsRequiredPermissionsDOMAINUMA                    PatchSAMLSettingsRequiredPermissions = "DOMAIN_UMA"
	PatchSAMLSettingsRequiredPermissionsDOMAINUMASCOPE               PatchSAMLSettingsRequiredPermissions = "DOMAIN_UMA_SCOPE"
	PatchSAMLSettingsRequiredPermissionsDOMAINUSER                   PatchSAMLSettingsRequiredPermissions = "DOMAIN_USER"
	PatchSAMLSettingsRequiredPermissionsDOMAINUSERDEVICE             PatchSAMLSettingsRequiredPermissions = "DOMAIN_USER_DEVICE"
	PatchSAMLSettingsRequiredPermissionsENVIRONMENT                  PatchSAMLSettingsRequiredPermissions = "ENVIRONMENT"
	PatchSAMLSettingsRequiredPermissionsINSTALLATION                 PatchSAMLSettingsRequiredPermissions = "INSTALLATION"
	PatchSAMLSettingsRequiredPermissionsORGANIZATION                 PatchSAMLSettingsRequiredPermissions = "ORGANIZATION"
	PatchSAMLSettingsRequiredPermissionsORGANIZATIONAUDIT            PatchSAMLSettingsRequiredPermissions = "ORGANIZATION_AUDIT"
	PatchSAMLSettingsRequiredPermissionsORGANIZATIONENTRYPOINT       PatchSAMLSettingsRequiredPermissions = "ORGANIZATION_ENTRYPOINT"
	PatchSAMLSettingsRequiredPermissionsORGANIZATIONFORM             PatchSAMLSettingsRequiredPermissions = "ORGANIZATION_FORM"
	PatchSAMLSettingsRequiredPermissionsORGANIZATIONGROUP            PatchSAMLSettingsRequiredPermissions = "ORGANIZATION_GROUP"
	PatchSAMLSettingsRequiredPermissionsORGANIZATIONIDENTITYPROVIDER PatchSAMLSettingsRequiredPermissions = "ORGANIZATION_IDENTITY_PROVIDER"
	PatchSAMLSettingsRequiredPermissionsORGANIZATIONMEMBER           PatchSAMLSettingsRequiredPermissions = "ORGANIZATION_MEMBER"
	PatchSAMLSettingsRequiredPermissionsORGANIZATIONREPORTER         PatchSAMLSettingsRequiredPermissions = "ORGANIZATION_REPORTER"
	PatchSAMLSettingsRequiredPermissionsORGANIZATIONROLE             PatchSAMLSettingsRequiredPermissions = "ORGANIZATION_ROLE"
	PatchSAMLSettingsRequiredPermissionsORGANIZATIONSCOPE            PatchSAMLSettingsRequiredPermissions = "ORGANIZATION_SCOPE"
	PatchSAMLSettingsRequiredPermissionsORGANIZATIONSETTINGS         PatchSAMLSettingsRequiredPermissions = "ORGANIZATION_SETTINGS"
	PatchSAMLSettingsRequiredPermissionsORGANIZATIONTAG              PatchSAMLSettingsRequiredPermissions = "ORGANIZATION_TAG"
	PatchSAMLSettingsRequiredPermissionsORGANIZATIONUSER             PatchSAMLSettingsRequiredPermissions = "ORGANIZATION_USER"
)

// Defines values for PreviewRequestType.
const (
	PreviewRequestTypeEMAIL PreviewRequestType = "EMAIL"
	PreviewRequestTypeFORM  PreviewRequestType = "FORM"
)

// Defines values for PreviewResponseType.
const (
	PreviewResponseTypeEMAIL PreviewResponseType = "EMAIL"
	PreviewResponseTypeFORM  PreviewResponseType = "FORM"
)

// Defines values for RoleAssignableType.
const (
	RoleAssignableTypeAPPLICATION  RoleAssignableType = "APPLICATION"
	RoleAssignableTypeDOMAIN       RoleAssignableType = "DOMAIN"
	RoleAssignableTypeENVIRONMENT  RoleAssignableType = "ENVIRONMENT"
	RoleAssignableTypeORGANIZATION RoleAssignableType = "ORGANIZATION"
	RoleAssignableTypePLATFORM     RoleAssignableType = "PLATFORM"
)

// Defines values for RolePermissionAcls.
const (
	RolePermissionAclsCREATE RolePermissionAcls = "CREATE"
	RolePermissionAclsDELETE RolePermissionAcls = "DELETE"
	RolePermissionAclsLIST   RolePermissionAcls = "LIST"
	RolePermissionAclsREAD   RolePermissionAcls = "READ"
	RolePermissionAclsUPDATE RolePermissionAcls = "UPDATE"
)

// Defines values for RoleReferenceType.
const (
	RoleReferenceTypeAPPLICATION  RoleReferenceType = "APPLICATION"
	RoleReferenceTypeDOMAIN       RoleReferenceType = "DOMAIN"
	RoleReferenceTypeENVIRONMENT  RoleReferenceType = "ENVIRONMENT"
	RoleReferenceTypeORGANIZATION RoleReferenceType = "ORGANIZATION"
	RoleReferenceTypePLATFORM     RoleReferenceType = "PLATFORM"
)

// Defines values for RoleEntityReferenceType.
const (
	RoleEntityReferenceTypeAPPLICATION  RoleEntityReferenceType = "APPLICATION"
	RoleEntityReferenceTypeDOMAIN       RoleEntityReferenceType = "DOMAIN"
	RoleEntityReferenceTypeENVIRONMENT  RoleEntityReferenceType = "ENVIRONMENT"
	RoleEntityReferenceTypeORGANIZATION RoleEntityReferenceType = "ORGANIZATION"
	RoleEntityReferenceTypePLATFORM     RoleEntityReferenceType = "PLATFORM"
)

// Defines values for ScopeApprovalEntityStatus.
const (
	APPROVED ScopeApprovalEntityStatus = "APPROVED"
	DENIED   ScopeApprovalEntityStatus = "DENIED"
)

// Defines values for ServiceResourceReferenceType.
const (
	ServiceResourceReferenceTypeAPPLICATION  ServiceResourceReferenceType = "APPLICATION"
	ServiceResourceReferenceTypeDOMAIN       ServiceResourceReferenceType = "DOMAIN"
	ServiceResourceReferenceTypeENVIRONMENT  ServiceResourceReferenceType = "ENVIRONMENT"
	ServiceResourceReferenceTypeORGANIZATION ServiceResourceReferenceType = "ORGANIZATION"
	ServiceResourceReferenceTypePLATFORM     ServiceResourceReferenceType = "PLATFORM"
)

// Defines values for ThemeReferenceType.
const (
	ThemeReferenceTypeAPPLICATION  ThemeReferenceType = "APPLICATION"
	ThemeReferenceTypeDOMAIN       ThemeReferenceType = "DOMAIN"
	ThemeReferenceTypeENVIRONMENT  ThemeReferenceType = "ENVIRONMENT"
	ThemeReferenceTypeORGANIZATION ThemeReferenceType = "ORGANIZATION"
	ThemeReferenceTypePLATFORM     ThemeReferenceType = "PLATFORM"
)

// Defines values for ThemeEntityReferenceType.
const (
	ThemeEntityReferenceTypeAPPLICATION  ThemeEntityReferenceType = "APPLICATION"
	ThemeEntityReferenceTypeDOMAIN       ThemeEntityReferenceType = "DOMAIN"
	ThemeEntityReferenceTypeENVIRONMENT  ThemeEntityReferenceType = "ENVIRONMENT"
	ThemeEntityReferenceTypeORGANIZATION ThemeEntityReferenceType = "ORGANIZATION"
	ThemeEntityReferenceTypePLATFORM     ThemeEntityReferenceType = "PLATFORM"
)

// Defines values for TokenClaimTokenType.
const (
	ACCESSTOKEN  TokenClaimTokenType = "ACCESS_TOKEN"
	IDTOKEN      TokenClaimTokenType = "ID_TOKEN"
	REFRESHTOKEN TokenClaimTokenType = "REFRESH_TOKEN"
)

// Defines values for UserReferenceType.
const (
	UserReferenceTypeAPPLICATION  UserReferenceType = "APPLICATION"
	UserReferenceTypeDOMAIN       UserReferenceType = "DOMAIN"
	UserReferenceTypeENVIRONMENT  UserReferenceType = "ENVIRONMENT"
	UserReferenceTypeORGANIZATION UserReferenceType = "ORGANIZATION"
	UserReferenceTypePLATFORM     UserReferenceType = "PLATFORM"
)

// Defines values for UserEntityReferenceType.
const (
	UserEntityReferenceTypeAPPLICATION  UserEntityReferenceType = "APPLICATION"
	UserEntityReferenceTypeDOMAIN       UserEntityReferenceType = "DOMAIN"
	UserEntityReferenceTypeENVIRONMENT  UserEntityReferenceType = "ENVIRONMENT"
	UserEntityReferenceTypeORGANIZATION UserEntityReferenceType = "ORGANIZATION"
	UserEntityReferenceTypePLATFORM     UserEntityReferenceType = "PLATFORM"
)

// Defines values for UserNotificationContentStatus.
const (
	UserNotificationContentStatusREAD   UserNotificationContentStatus = "READ"
	UserNotificationContentStatusUNREAD UserNotificationContentStatus = "UNREAD"
)

// Defines values for WebAuthnSettingsAttestationConveyancePreference.
const (
	DIRECT   WebAuthnSettingsAttestationConveyancePreference = "DIRECT"
	INDIRECT WebAuthnSettingsAttestationConveyancePreference = "INDIRECT"
	NONE     WebAuthnSettingsAttestationConveyancePreference = "NONE"
)

// Defines values for WebAuthnSettingsAuthenticatorAttachment.
const (
	WebAuthnSettingsAuthenticatorAttachmentCROSSPLATFORM WebAuthnSettingsAuthenticatorAttachment = "CROSS_PLATFORM"
	WebAuthnSettingsAuthenticatorAttachmentPLATFORM      WebAuthnSettingsAuthenticatorAttachment = "PLATFORM"
)

// Defines values for WebAuthnSettingsUserVerification.
const (
	DISCOURAGED WebAuthnSettingsUserVerification = "DISCOURAGED"
	PREFERRED   WebAuthnSettingsUserVerification = "PREFERRED"
	REQUIRED    WebAuthnSettingsUserVerification = "REQUIRED"
)

// Defines values for Get21ParamsType.
const (
	Get21ParamsTypeCount     Get21ParamsType = "count"
	Get21ParamsTypeDateHisto Get21ParamsType = "date_histo"
	Get21ParamsTypeGroupBy   Get21ParamsType = "group_by"
)

// Defines values for Get14ParamsType.
const (
	Get14ParamsTypeCount     Get14ParamsType = "count"
	Get14ParamsTypeDateHisto Get14ParamsType = "date_histo"
	Get14ParamsTypeGroupBy   Get14ParamsType = "group_by"
)

// Defines values for Get13ParamsTemplate.
const (
	Get13ParamsTemplateBLOCKEDACCOUNT           Get13ParamsTemplate = "BLOCKED_ACCOUNT"
	Get13ParamsTemplateCERTIFICATEEXPIRATION    Get13ParamsTemplate = "CERTIFICATE_EXPIRATION"
	Get13ParamsTemplateCOMPLETEPROFILE          Get13ParamsTemplate = "COMPLETE_PROFILE"
	Get13ParamsTemplateERROR                    Get13ParamsTemplate = "ERROR"
	Get13ParamsTemplateFORGOTPASSWORD           Get13ParamsTemplate = "FORGOT_PASSWORD"
	Get13ParamsTemplateIDENTIFIERFIRSTLOGIN     Get13ParamsTemplate = "IDENTIFIER_FIRST_LOGIN"
	Get13ParamsTemplateLOGIN                    Get13ParamsTemplate = "LOGIN"
	Get13ParamsTemplateMFACHALLENGE             Get13ParamsTemplate = "MFA_CHALLENGE"
	Get13ParamsTemplateMFACHALLENGEALTERNATIVES Get13ParamsTemplate = "MFA_CHALLENGE_ALTERNATIVES"
	Get13ParamsTemplateMFAENROLL                Get13ParamsTemplate = "MFA_ENROLL"
	Get13ParamsTemplateMFARECOVERYCODE          Get13ParamsTemplate = "MFA_RECOVERY_CODE"
	Get13ParamsTemplateOAUTH2USERCONSENT        Get13ParamsTemplate = "OAUTH2_USER_CONSENT"
	Get13ParamsTemplateREGISTRATION             Get13ParamsTemplate = "REGISTRATION"
	Get13ParamsTemplateREGISTRATIONCONFIRMATION Get13ParamsTemplate = "REGISTRATION_CONFIRMATION"
	Get13ParamsTemplateRESETPASSWORD            Get13ParamsTemplate = "RESET_PASSWORD"
	Get13ParamsTemplateVERIFYATTEMPT            Get13ParamsTemplate = "VERIFY_ATTEMPT"
	Get13ParamsTemplateWEBAUTHNLOGIN            Get13ParamsTemplate = "WEBAUTHN_LOGIN"
	Get13ParamsTemplateWEBAUTHNREGISTER         Get13ParamsTemplate = "WEBAUTHN_REGISTER"
)

// Defines values for Get12ParamsTemplate.
const (
	Get12ParamsTemplateBLOCKEDACCOUNT           Get12ParamsTemplate = "BLOCKED_ACCOUNT"
	Get12ParamsTemplateCERTIFICATEEXPIRATION    Get12ParamsTemplate = "CERTIFICATE_EXPIRATION"
	Get12ParamsTemplateCOMPLETEPROFILE          Get12ParamsTemplate = "COMPLETE_PROFILE"
	Get12ParamsTemplateERROR                    Get12ParamsTemplate = "ERROR"
	Get12ParamsTemplateFORGOTPASSWORD           Get12ParamsTemplate = "FORGOT_PASSWORD"
	Get12ParamsTemplateIDENTIFIERFIRSTLOGIN     Get12ParamsTemplate = "IDENTIFIER_FIRST_LOGIN"
	Get12ParamsTemplateLOGIN                    Get12ParamsTemplate = "LOGIN"
	Get12ParamsTemplateMFACHALLENGE             Get12ParamsTemplate = "MFA_CHALLENGE"
	Get12ParamsTemplateMFACHALLENGEALTERNATIVES Get12ParamsTemplate = "MFA_CHALLENGE_ALTERNATIVES"
	Get12ParamsTemplateMFAENROLL                Get12ParamsTemplate = "MFA_ENROLL"
	Get12ParamsTemplateMFARECOVERYCODE          Get12ParamsTemplate = "MFA_RECOVERY_CODE"
	Get12ParamsTemplateOAUTH2USERCONSENT        Get12ParamsTemplate = "OAUTH2_USER_CONSENT"
	Get12ParamsTemplateREGISTRATION             Get12ParamsTemplate = "REGISTRATION"
	Get12ParamsTemplateREGISTRATIONCONFIRMATION Get12ParamsTemplate = "REGISTRATION_CONFIRMATION"
	Get12ParamsTemplateRESETPASSWORD            Get12ParamsTemplate = "RESET_PASSWORD"
	Get12ParamsTemplateVERIFYATTEMPT            Get12ParamsTemplate = "VERIFY_ATTEMPT"
	Get12ParamsTemplateWEBAUTHNLOGIN            Get12ParamsTemplate = "WEBAUTHN_LOGIN"
	Get12ParamsTemplateWEBAUTHNREGISTER         Get12ParamsTemplate = "WEBAUTHN_REGISTER"
)

// Defines values for Get19ParamsTemplate.
const (
	Get19ParamsTemplateBLOCKEDACCOUNT           Get19ParamsTemplate = "BLOCKED_ACCOUNT"
	Get19ParamsTemplateCERTIFICATEEXPIRATION    Get19ParamsTemplate = "CERTIFICATE_EXPIRATION"
	Get19ParamsTemplateCOMPLETEPROFILE          Get19ParamsTemplate = "COMPLETE_PROFILE"
	Get19ParamsTemplateERROR                    Get19ParamsTemplate = "ERROR"
	Get19ParamsTemplateFORGOTPASSWORD           Get19ParamsTemplate = "FORGOT_PASSWORD"
	Get19ParamsTemplateIDENTIFIERFIRSTLOGIN     Get19ParamsTemplate = "IDENTIFIER_FIRST_LOGIN"
	Get19ParamsTemplateLOGIN                    Get19ParamsTemplate = "LOGIN"
	Get19ParamsTemplateMFACHALLENGE             Get19ParamsTemplate = "MFA_CHALLENGE"
	Get19ParamsTemplateMFACHALLENGEALTERNATIVES Get19ParamsTemplate = "MFA_CHALLENGE_ALTERNATIVES"
	Get19ParamsTemplateMFAENROLL                Get19ParamsTemplate = "MFA_ENROLL"
	Get19ParamsTemplateMFARECOVERYCODE          Get19ParamsTemplate = "MFA_RECOVERY_CODE"
	Get19ParamsTemplateOAUTH2USERCONSENT        Get19ParamsTemplate = "OAUTH2_USER_CONSENT"
	Get19ParamsTemplateREGISTRATION             Get19ParamsTemplate = "REGISTRATION"
	Get19ParamsTemplateREGISTRATIONCONFIRMATION Get19ParamsTemplate = "REGISTRATION_CONFIRMATION"
	Get19ParamsTemplateRESETPASSWORD            Get19ParamsTemplate = "RESET_PASSWORD"
	Get19ParamsTemplateVERIFYATTEMPT            Get19ParamsTemplate = "VERIFY_ATTEMPT"
	Get19ParamsTemplateWEBAUTHNLOGIN            Get19ParamsTemplate = "WEBAUTHN_LOGIN"
	Get19ParamsTemplateWEBAUTHNREGISTER         Get19ParamsTemplate = "WEBAUTHN_REGISTER"
)

// Defines values for Get18ParamsTemplate.
const (
	Get18ParamsTemplateBLOCKEDACCOUNT           Get18ParamsTemplate = "BLOCKED_ACCOUNT"
	Get18ParamsTemplateCERTIFICATEEXPIRATION    Get18ParamsTemplate = "CERTIFICATE_EXPIRATION"
	Get18ParamsTemplateCOMPLETEPROFILE          Get18ParamsTemplate = "COMPLETE_PROFILE"
	Get18ParamsTemplateERROR                    Get18ParamsTemplate = "ERROR"
	Get18ParamsTemplateFORGOTPASSWORD           Get18ParamsTemplate = "FORGOT_PASSWORD"
	Get18ParamsTemplateIDENTIFIERFIRSTLOGIN     Get18ParamsTemplate = "IDENTIFIER_FIRST_LOGIN"
	Get18ParamsTemplateLOGIN                    Get18ParamsTemplate = "LOGIN"
	Get18ParamsTemplateMFACHALLENGE             Get18ParamsTemplate = "MFA_CHALLENGE"
	Get18ParamsTemplateMFACHALLENGEALTERNATIVES Get18ParamsTemplate = "MFA_CHALLENGE_ALTERNATIVES"
	Get18ParamsTemplateMFAENROLL                Get18ParamsTemplate = "MFA_ENROLL"
	Get18ParamsTemplateMFARECOVERYCODE          Get18ParamsTemplate = "MFA_RECOVERY_CODE"
	Get18ParamsTemplateOAUTH2USERCONSENT        Get18ParamsTemplate = "OAUTH2_USER_CONSENT"
	Get18ParamsTemplateREGISTRATION             Get18ParamsTemplate = "REGISTRATION"
	Get18ParamsTemplateREGISTRATIONCONFIRMATION Get18ParamsTemplate = "REGISTRATION_CONFIRMATION"
	Get18ParamsTemplateRESETPASSWORD            Get18ParamsTemplate = "RESET_PASSWORD"
	Get18ParamsTemplateVERIFYATTEMPT            Get18ParamsTemplate = "VERIFY_ATTEMPT"
	Get18ParamsTemplateWEBAUTHNLOGIN            Get18ParamsTemplate = "WEBAUTHN_LOGIN"
	Get18ParamsTemplateWEBAUTHNREGISTER         Get18ParamsTemplate = "WEBAUTHN_REGISTER"
)

// Defines values for Get7ParamsTemplate.
const (
	BLOCKEDACCOUNT           Get7ParamsTemplate = "BLOCKED_ACCOUNT"
	CERTIFICATEEXPIRATION    Get7ParamsTemplate = "CERTIFICATE_EXPIRATION"
	COMPLETEPROFILE          Get7ParamsTemplate = "COMPLETE_PROFILE"
	ERROR                    Get7ParamsTemplate = "ERROR"
	FORGOTPASSWORD           Get7ParamsTemplate = "FORGOT_PASSWORD"
	IDENTIFIERFIRSTLOGIN     Get7ParamsTemplate = "IDENTIFIER_FIRST_LOGIN"
	LOGIN                    Get7ParamsTemplate = "LOGIN"
	MFACHALLENGE             Get7ParamsTemplate = "MFA_CHALLENGE"
	MFACHALLENGEALTERNATIVES Get7ParamsTemplate = "MFA_CHALLENGE_ALTERNATIVES"
	MFAENROLL                Get7ParamsTemplate = "MFA_ENROLL"
	MFARECOVERYCODE          Get7ParamsTemplate = "MFA_RECOVERY_CODE"
	OAUTH2USERCONSENT        Get7ParamsTemplate = "OAUTH2_USER_CONSENT"
	REGISTRATION             Get7ParamsTemplate = "REGISTRATION"
	REGISTRATIONCONFIRMATION Get7ParamsTemplate = "REGISTRATION_CONFIRMATION"
	RESETPASSWORD            Get7ParamsTemplate = "RESET_PASSWORD"
	VERIFYATTEMPT            Get7ParamsTemplate = "VERIFY_ATTEMPT"
	WEBAUTHNLOGIN            Get7ParamsTemplate = "WEBAUTHN_LOGIN"
	WEBAUTHNREGISTER         Get7ParamsTemplate = "WEBAUTHN_REGISTER"
)

// Defines values for List2ParamsType.
const (
	List2ParamsTypeAPPLICATION  List2ParamsType = "APPLICATION"
	List2ParamsTypeDOMAIN       List2ParamsType = "DOMAIN"
	List2ParamsTypeENVIRONMENT  List2ParamsType = "ENVIRONMENT"
	List2ParamsTypeORGANIZATION List2ParamsType = "ORGANIZATION"
	List2ParamsTypePLATFORM     List2ParamsType = "PLATFORM"
)

// AccessPolicy defines model for AccessPolicy.
type AccessPolicy struct {
	Condition   *string           `json:"condition,omitempty"`
	CreatedAt   *int64            `json:"createdAt,omitempty"`
	Description *string           `json:"description,omitempty"`
	Domain      *string           `json:"domain,omitempty"`
	Enabled     *bool             `json:"enabled,omitempty"`
	Id          *string           `json:"id,omitempty"`
	Name        *string           `json:"name,omitempty"`
	Order       *int32            `json:"order,omitempty"`
	Resource    *string           `json:"resource,omitempty"`
	Type        *AccessPolicyType `json:"type,omitempty"`
	UpdatedAt   *int64            `json:"updatedAt,omitempty"`
}

// AccessPolicyType defines model for AccessPolicy.Type.
type AccessPolicyType string

// AccessPolicyListItem defines model for AccessPolicyListItem.
type AccessPolicyListItem struct {
	CreatedAt   *int64  `json:"createdAt,omitempty"`
	Description *string `json:"description,omitempty"`
	Id          *string `json:"id,omitempty"`
	Name        *string `json:"name,omitempty"`
	UpdatedAt   *int64  `json:"updatedAt,omitempty"`
}

// AccountSettings defines model for AccountSettings.
type AccountSettings struct {
	AccountBlockedDuration                      *int32       `json:"accountBlockedDuration,omitempty"`
	AutoLoginAfterRegistration                  *bool        `json:"autoLoginAfterRegistration,omitempty"`
	AutoLoginAfterResetPassword                 *bool        `json:"autoLoginAfterResetPassword,omitempty"`
	BotDetectionPlugin                          *string      `json:"botDetectionPlugin,omitempty"`
	CompleteRegistrationWhenResetPassword       *bool        `json:"completeRegistrationWhenResetPassword,omitempty"`
	DefaultIdentityProviderForRegistration      *string      `json:"defaultIdentityProviderForRegistration,omitempty"`
	DeletePasswordlessDevicesAfterResetPassword *bool        `json:"deletePasswordlessDevicesAfterResetPassword,omitempty"`
	DynamicUserRegistration                     *bool        `json:"dynamicUserRegistration,omitempty"`
	Inherited                                   *bool        `json:"inherited,omitempty"`
	LoginAttemptsDetectionEnabled               *bool        `json:"loginAttemptsDetectionEnabled,omitempty"`
	LoginAttemptsResetTime                      *int32       `json:"loginAttemptsResetTime,omitempty"`
	MaxLoginAttempts                            *int32       `json:"maxLoginAttempts,omitempty"`
	MfaChallengeAttemptsDetectionEnabled        *bool        `json:"mfaChallengeAttemptsDetectionEnabled,omitempty"`
	MfaChallengeAttemptsResetTime               *int32       `json:"mfaChallengeAttemptsResetTime,omitempty"`
	MfaChallengeMaxAttempts                     *int32       `json:"mfaChallengeMaxAttempts,omitempty"`
	MfaChallengeSendVerifyAlertEmail            *bool        `json:"mfaChallengeSendVerifyAlertEmail,omitempty"`
	RedirectUriAfterRegistration                *string      `json:"redirectUriAfterRegistration,omitempty"`
	RedirectUriAfterResetPassword               *string      `json:"redirectUriAfterResetPassword,omitempty"`
	ResetPasswordConfirmIdentity                *bool        `json:"resetPasswordConfirmIdentity,omitempty"`
	ResetPasswordCustomForm                     *bool        `json:"resetPasswordCustomForm,omitempty"`
	ResetPasswordCustomFormFields               *[]FormField `json:"resetPasswordCustomFormFields,omitempty"`
	ResetPasswordInvalidateTokens               *bool        `json:"resetPasswordInvalidateTokens,omitempty"`
	SendRecoverAccountEmail                     *bool        `json:"sendRecoverAccountEmail,omitempty"`
	UseBotDetection                             *bool        `json:"useBotDetection,omitempty"`
}

// Address defines model for Address.
type Address struct {
	Country       *string `json:"country,omitempty"`
	Formatted     *string `json:"formatted,omitempty"`
	Locality      *string `json:"locality,omitempty"`
	PostalCode    *string `json:"postalCode,omitempty"`
	Primary       *bool   `json:"primary,omitempty"`
	Region        *string `json:"region,omitempty"`
	StreetAddress *string `json:"streetAddress,omitempty"`
	Type          *string `json:"type,omitempty"`
}

// AlertNotifier defines model for AlertNotifier.
type AlertNotifier struct {
	Configuration *string                     `json:"configuration,omitempty"`
	CreatedAt     *int64                      `json:"createdAt,omitempty"`
	Enabled       *bool                       `json:"enabled,omitempty"`
	Id            *string                     `json:"id,omitempty"`
	Name          *string                     `json:"name,omitempty"`
	ReferenceId   *string                     `json:"referenceId,omitempty"`
	ReferenceType *AlertNotifierReferenceType `json:"referenceType,omitempty"`
	Type          *string                     `json:"type,omitempty"`
	UpdatedAt     *int64                      `json:"updatedAt,omitempty"`
}

// AlertNotifierReferenceType defines model for AlertNotifier.ReferenceType.
type AlertNotifierReferenceType string

// AlertServiceStatusEntity defines model for AlertServiceStatusEntity.
type AlertServiceStatusEntity struct {
	Available *bool `json:"available,omitempty"`
}

// AlertTrigger defines model for AlertTrigger.
type AlertTrigger struct {
	AlertNotifiers *[]string                  `json:"alertNotifiers,omitempty"`
	CreatedAt      *int64                     `json:"createdAt,omitempty"`
	Enabled        *bool                      `json:"enabled,omitempty"`
	Id             *string                    `json:"id,omitempty"`
	ReferenceId    *string                    `json:"referenceId,omitempty"`
	ReferenceType  *AlertTriggerReferenceType `json:"referenceType,omitempty"`
	Type           *AlertTriggerType          `json:"type,omitempty"`
	UpdatedAt      *int64                     `json:"updatedAt,omitempty"`
}

// AlertTriggerReferenceType defines model for AlertTrigger.ReferenceType.
type AlertTriggerReferenceType string

// AlertTriggerType defines model for AlertTrigger.Type.
type AlertTriggerType string

// Application defines model for Application.
type Application struct {
	Certificate       *string                            `json:"certificate,omitempty"`
	CreatedAt         *int64                             `json:"createdAt,omitempty"`
	Description       *string                            `json:"description,omitempty"`
	Domain            *string                            `json:"domain,omitempty"`
	Enabled           *bool                              `json:"enabled,omitempty"`
	Factors           *[]string                          `json:"factors,omitempty"`
	Id                *string                            `json:"id,omitempty"`
	IdentityProviders *[]ApplicationIdentityProvider     `json:"identityProviders,omitempty"`
	Metadata          *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Name              *string                            `json:"name,omitempty"`
	PasswordSettings  *PasswordSettings                  `json:"passwordSettings,omitempty"`
	Settings          *ApplicationSettings               `json:"settings,omitempty"`
	Template          *bool                              `json:"template,omitempty"`
	Type              *ApplicationType                   `json:"type,omitempty"`
	UpdatedAt         *int64                             `json:"updatedAt,omitempty"`
}

// ApplicationType defines model for Application.Type.
type ApplicationType string

// ApplicationAdvancedSettings defines model for ApplicationAdvancedSettings.
type ApplicationAdvancedSettings struct {
	FlowsInherited *bool `json:"flowsInherited,omitempty"`
	SkipConsent    *bool `json:"skipConsent,omitempty"`
}

// ApplicationEntity defines model for ApplicationEntity.
type ApplicationEntity struct {
	ClientId *string `json:"clientId,omitempty"`
	Id       *string `json:"id,omitempty"`
	Name     *string `json:"name,omitempty"`
}

// ApplicationIdentityProvider defines model for ApplicationIdentityProvider.
type ApplicationIdentityProvider struct {
	Identity      *string `json:"identity,omitempty"`
	Priority      *int32  `json:"priority,omitempty"`
	SelectionRule *string `json:"selectionRule,omitempty"`
}

// ApplicationOAuthSettings defines model for ApplicationOAuthSettings.
type ApplicationOAuthSettings struct {
	AccessTokenValiditySeconds            *int32                      `json:"accessTokenValiditySeconds,omitempty"`
	ApplicationType                       *string                     `json:"applicationType,omitempty"`
	AuthorizationEncryptedResponseAlg     *string                     `json:"authorizationEncryptedResponseAlg,omitempty"`
	AuthorizationEncryptedResponseEnc     *string                     `json:"authorizationEncryptedResponseEnc,omitempty"`
	AuthorizationSignedResponseAlg        *string                     `json:"authorizationSignedResponseAlg,omitempty"`
	BackchannelAuthRequestSignAlg         *string                     `json:"backchannelAuthRequestSignAlg,omitempty"`
	BackchannelClientNotificationEndpoint *string                     `json:"backchannelClientNotificationEndpoint,omitempty"`
	BackchannelTokenDeliveryMode          *string                     `json:"backchannelTokenDeliveryMode,omitempty"`
	BackchannelUserCodeParameter          *bool                       `json:"backchannelUserCodeParameter,omitempty"`
	ClientId                              *string                     `json:"clientId,omitempty"`
	ClientIdIssuedAt                      *int64                      `json:"clientIdIssuedAt,omitempty"`
	ClientName                            *string                     `json:"clientName,omitempty"`
	ClientSecret                          *string                     `json:"clientSecret,omitempty"`
	ClientSecretExpiresAt                 *int64                      `json:"clientSecretExpiresAt,omitempty"`
	ClientType                            *string                     `json:"clientType,omitempty"`
	ClientUri                             *string                     `json:"clientUri,omitempty"`
	Contacts                              *[]string                   `json:"contacts,omitempty"`
	DefaultACRvalues                      *[]string                   `json:"defaultACRvalues,omitempty"`
	DefaultMaxAge                         *int32                      `json:"defaultMaxAge,omitempty"`
	DefaultScopes                         *[]string                   `json:"defaultScopes,omitempty"`
	DisableRefreshTokenRotation           *bool                       `json:"disableRefreshTokenRotation,omitempty"`
	EnhanceScopesWithUserPermissions      *bool                       `json:"enhanceScopesWithUserPermissions,omitempty"`
	ForcePKCE                             *bool                       `json:"forcePKCE,omitempty"`
	ForceS256CodeChallengeMethod          *bool                       `json:"forceS256CodeChallengeMethod,omitempty"`
	GrantTypes                            *[]string                   `json:"grantTypes,omitempty"`
	IdTokenEncryptedResponseAlg           *string                     `json:"idTokenEncryptedResponseAlg,omitempty"`
	IdTokenEncryptedResponseEnc           *string                     `json:"idTokenEncryptedResponseEnc,omitempty"`
	IdTokenSignedResponseAlg              *string                     `json:"idTokenSignedResponseAlg,omitempty"`
	IdTokenValiditySeconds                *int32                      `json:"idTokenValiditySeconds,omitempty"`
	InitiateLoginUri                      *string                     `json:"initiateLoginUri,omitempty"`
	Jwks                                  *JWKSet                     `json:"jwks,omitempty"`
	JwksUri                               *string                     `json:"jwksUri,omitempty"`
	LogoUri                               *string                     `json:"logoUri,omitempty"`
	PolicyUri                             *string                     `json:"policyUri,omitempty"`
	PostLogoutRedirectUris                *[]string                   `json:"postLogoutRedirectUris,omitempty"`
	RedirectUris                          *[]string                   `json:"redirectUris,omitempty"`
	RefreshTokenValiditySeconds           *int32                      `json:"refreshTokenValiditySeconds,omitempty"`
	RegistrationAccessToken               *string                     `json:"registrationAccessToken,omitempty"`
	RegistrationClientUri                 *string                     `json:"registrationClientUri,omitempty"`
	RequestObjectEncryptionAlg            *string                     `json:"requestObjectEncryptionAlg,omitempty"`
	RequestObjectEncryptionEnc            *string                     `json:"requestObjectEncryptionEnc,omitempty"`
	RequestObjectSigningAlg               *string                     `json:"requestObjectSigningAlg,omitempty"`
	RequestUris                           *[]string                   `json:"requestUris,omitempty"`
	RequireAuthTime                       *bool                       `json:"requireAuthTime,omitempty"`
	RequireParRequest                     *bool                       `json:"requireParRequest,omitempty"`
	ResponseTypes                         *[]string                   `json:"responseTypes,omitempty"`
	ScopeApprovals                        *map[string]int32           `json:"scopeApprovals,omitempty"`
	ScopeSettings                         *[]ApplicationScopeSettings `json:"scopeSettings,omitempty"`
	Scopes                                *[]string                   `json:"scopes,omitempty"`
	SectorIdentifierUri                   *string                     `json:"sectorIdentifierUri,omitempty"`
	SilentReAuthentication                *bool                       `json:"silentReAuthentication,omitempty"`
	SingleSignOut                         *bool                       `json:"singleSignOut,omitempty"`
	SoftwareId                            *string                     `json:"softwareId,omitempty"`
	SoftwareStatement                     *string                     `json:"softwareStatement,omitempty"`
	SoftwareVersion                       *string                     `json:"softwareVersion,omitempty"`
	SubjectType                           *string                     `json:"subjectType,omitempty"`
	TlsClientAuthSanDns                   *string                     `json:"tlsClientAuthSanDns,omitempty"`
	TlsClientAuthSanEmail                 *string                     `json:"tlsClientAuthSanEmail,omitempty"`
	TlsClientAuthSanIp                    *string                     `json:"tlsClientAuthSanIp,omitempty"`
	TlsClientAuthSanUri                   *string                     `json:"tlsClientAuthSanUri,omitempty"`
	TlsClientAuthSubjectDn                *string                     `json:"tlsClientAuthSubjectDn,omitempty"`
	TlsClientCertificateBoundAccessTokens *bool                       `json:"tlsClientCertificateBoundAccessTokens,omitempty"`
	TokenCustomClaims                     *[]TokenClaim               `json:"tokenCustomClaims,omitempty"`
	TokenEndpointAuthMethod               *string                     `json:"tokenEndpointAuthMethod,omitempty"`
	TokenEndpointAuthSigningAlg           *string                     `json:"tokenEndpointAuthSigningAlg,omitempty"`
	TosUri                                *string                     `json:"tosUri,omitempty"`
	UserinfoEncryptedResponseAlg          *string                     `json:"userinfoEncryptedResponseAlg,omitempty"`
	UserinfoEncryptedResponseEnc          *string                     `json:"userinfoEncryptedResponseEnc,omitempty"`
	UserinfoSignedResponseAlg             *string                     `json:"userinfoSignedResponseAlg,omitempty"`
}

// ApplicationPage defines model for ApplicationPage.
type ApplicationPage struct {
	CurrentPage *int32         `json:"currentPage,omitempty"`
	Data        *[]Application `json:"data,omitempty"`
	TotalCount  *int64         `json:"totalCount,omitempty"`
}

// ApplicationSAMLSettings defines model for ApplicationSAMLSettings.
type ApplicationSAMLSettings struct {
	AttributeConsumeServiceUrl *string `json:"attributeConsumeServiceUrl,omitempty"`
	Certificate                *string `json:"certificate,omitempty"`
	EntityId                   *string `json:"entityId,omitempty"`
	SingleLogoutServiceUrl     *string `json:"singleLogoutServiceUrl,omitempty"`
	WantAssertionsSigned       *bool   `json:"wantAssertionsSigned,omitempty"`
	WantResponseSigned         *bool   `json:"wantResponseSigned,omitempty"`
}

// ApplicationScopeSettings defines model for ApplicationScopeSettings.
type ApplicationScopeSettings struct {
	DefaultScope  *bool   `json:"defaultScope,omitempty"`
	Scope         *string `json:"scope,omitempty"`
	ScopeApproval *int32  `json:"scopeApproval,omitempty"`
}

// ApplicationSettings defines model for ApplicationSettings.
type ApplicationSettings struct {
	Account          *AccountSettings             `json:"account,omitempty"`
	Advanced         *ApplicationAdvancedSettings `json:"advanced,omitempty"`
	CookieSettings   *CookieSettings              `json:"cookieSettings,omitempty"`
	Login            *LoginSettings               `json:"login,omitempty"`
	Mfa              *MFASettings                 `json:"mfa,omitempty"`
	Oauth            *ApplicationOAuthSettings    `json:"oauth,omitempty"`
	PasswordSettings *PasswordSettings            `json:"passwordSettings,omitempty"`
	RiskAssessment   *RiskAssessmentSettings      `json:"riskAssessment,omitempty"`
	Saml             *ApplicationSAMLSettings     `json:"saml,omitempty"`
}

// AssessmentSettings defines model for AssessmentSettings.
type AssessmentSettings struct {
	Enabled    *bool               `json:"enabled,omitempty"`
	Thresholds *map[string]float64 `json:"thresholds,omitempty"`
}

// Attribute defines model for Attribute.
type Attribute struct {
	Primary *bool   `json:"primary,omitempty"`
	Type    *string `json:"type,omitempty"`
	Value   *string `json:"value,omitempty"`
}

// Audit defines model for Audit.
type Audit struct {
	AccessPoint   *AuditAccessPoint   `json:"accessPoint,omitempty"`
	Actor         *AuditEntity        `json:"actor,omitempty"`
	Id            *string             `json:"id,omitempty"`
	Outcome       *AuditOutcome       `json:"outcome,omitempty"`
	ReferenceId   *string             `json:"referenceId,omitempty"`
	ReferenceType *AuditReferenceType `json:"referenceType,omitempty"`
	Target        *AuditEntity        `json:"target,omitempty"`
	TransactionId *string             `json:"transactionId,omitempty"`
	Type          *string             `json:"type,omitempty"`
}

// AuditReferenceType defines model for Audit.ReferenceType.
type AuditReferenceType string

// AuditAccessPoint defines model for AuditAccessPoint.
type AuditAccessPoint struct {
	AlternativeId *string `json:"alternativeId,omitempty"`
	DisplayName   *string `json:"displayName,omitempty"`
	Id            *string `json:"id,omitempty"`
	IpAddress     *string `json:"ipAddress,omitempty"`
	UserAgent     *string `json:"userAgent,omitempty"`
}

// AuditEntity defines model for AuditEntity.
type AuditEntity struct {
	AlternativeId *string                            `json:"alternativeId,omitempty"`
	Attributes    *map[string]map[string]interface{} `json:"attributes,omitempty"`
	DisplayName   *string                            `json:"displayName,omitempty"`
	Id            *string                            `json:"id,omitempty"`
	ReferenceId   *string                            `json:"referenceId,omitempty"`
	ReferenceType *AuditEntityReferenceType          `json:"referenceType,omitempty"`
	Type          *string                            `json:"type,omitempty"`
}

// AuditEntityReferenceType defines model for AuditEntity.ReferenceType.
type AuditEntityReferenceType string

// AuditOutcome defines model for AuditOutcome.
type AuditOutcome struct {
	Message *string `json:"message,omitempty"`
	Status  *string `json:"status,omitempty"`
}

// AuthToken defines model for AuthToken.
type AuthToken struct {
	AccessToken *string `json:"access_token,omitempty"`
	ExpiresAt   *string `json:"expires_at,omitempty"`
	TokenType   *string `json:"token_type,omitempty"`
}

// AuthenticationDeviceNotifier defines model for AuthenticationDeviceNotifier.
type AuthenticationDeviceNotifier struct {
	Configuration *string                                    `json:"configuration,omitempty"`
	CreatedAt     *int64                                     `json:"createdAt,omitempty"`
	Id            *string                                    `json:"id,omitempty"`
	Name          *string                                    `json:"name,omitempty"`
	ReferenceId   *string                                    `json:"referenceId,omitempty"`
	ReferenceType *AuthenticationDeviceNotifierReferenceType `json:"referenceType,omitempty"`
	Type          *string                                    `json:"type,omitempty"`
	UpdatedAt     *int64                                     `json:"updatedAt,omitempty"`
}

// AuthenticationDeviceNotifierReferenceType defines model for AuthenticationDeviceNotifier.ReferenceType.
type AuthenticationDeviceNotifierReferenceType string

// BotDetection defines model for BotDetection.
type BotDetection struct {
	Configuration *string                    `json:"configuration,omitempty"`
	CreatedAt     *int64                     `json:"createdAt,omitempty"`
	DetectionType *string                    `json:"detectionType,omitempty"`
	Id            *string                    `json:"id,omitempty"`
	Name          *string                    `json:"name,omitempty"`
	ReferenceId   *string                    `json:"referenceId,omitempty"`
	ReferenceType *BotDetectionReferenceType `json:"referenceType,omitempty"`
	Type          *string                    `json:"type,omitempty"`
	UpdatedAt     *int64                     `json:"updatedAt,omitempty"`
}

// BotDetectionReferenceType defines model for BotDetection.ReferenceType.
type BotDetectionReferenceType string

// CIBASettingNotifier defines model for CIBASettingNotifier.
type CIBASettingNotifier struct {
	Id *string `json:"id,omitempty"`
}

// CIBASettings defines model for CIBASettings.
type CIBASettings struct {
	AuthReqExpiry        *int32                 `json:"authReqExpiry,omitempty"`
	BindingMessageLength *int32                 `json:"bindingMessageLength,omitempty"`
	DeviceNotifiers      *[]CIBASettingNotifier `json:"deviceNotifiers,omitempty"`
	Enabled              *bool                  `json:"enabled,omitempty"`
	TokenReqInterval     *int32                 `json:"tokenReqInterval,omitempty"`
}

// Certificate defines model for Certificate.
type Certificate struct {
	Value *string `json:"value,omitempty"`
}

// CertificateEntity defines model for CertificateEntity.
type CertificateEntity struct {
	Applications  *[]Application                     `json:"applications,omitempty"`
	Configuration *string                            `json:"configuration,omitempty"`
	CreatedAt     *int64                             `json:"createdAt,omitempty"`
	Domain        *string                            `json:"domain,omitempty"`
	ExpiresAt     *int64                             `json:"expiresAt,omitempty"`
	Id            *string                            `json:"id,omitempty"`
	Metadata      *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Name          *string                            `json:"name,omitempty"`
	Status        *CertificateEntityStatus           `json:"status,omitempty"`
	System        *bool                              `json:"system,omitempty"`
	Type          *string                            `json:"type,omitempty"`
	UpdatedAt     *int64                             `json:"updatedAt,omitempty"`
}

// CertificateEntityStatus defines model for CertificateEntity.Status.
type CertificateEntityStatus string

// CertificateKey defines model for CertificateKey.
type CertificateKey struct {
	Fmt      *string                            `json:"fmt,omitempty"`
	Metadata *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Payload  *string                            `json:"payload,omitempty"`
}

// ClientRegistrationSettings defines model for ClientRegistrationSettings.
type ClientRegistrationSettings struct {
	AllowHttpSchemeRedirectUri           *bool     `json:"allowHttpSchemeRedirectUri,omitempty"`
	AllowLocalhostRedirectUri            *bool     `json:"allowLocalhostRedirectUri,omitempty"`
	AllowWildCardRedirectUri             *bool     `json:"allowWildCardRedirectUri,omitempty"`
	AllowedScopes                        *[]string `json:"allowedScopes,omitempty"`
	AllowedScopesEnabled                 *bool     `json:"allowedScopesEnabled,omitempty"`
	ClientTemplateEnabled                *bool     `json:"clientTemplateEnabled,omitempty"`
	DefaultScopes                        *[]string `json:"defaultScopes,omitempty"`
	DynamicClientRegistrationEnabled     *bool     `json:"dynamicClientRegistrationEnabled,omitempty"`
	OpenDynamicClientRegistrationEnabled *bool     `json:"openDynamicClientRegistrationEnabled,omitempty"`
}

// CookieSettings defines model for CookieSettings.
type CookieSettings struct {
	Inherited *bool            `json:"inherited,omitempty"`
	Session   *SessionSettings `json:"session,omitempty"`
}

// CorsSettings defines model for CorsSettings.
type CorsSettings struct {
	AllowCredentials *bool     `json:"allowCredentials,omitempty"`
	AllowedHeaders   *[]string `json:"allowedHeaders,omitempty"`
	AllowedMethods   *[]string `json:"allowedMethods,omitempty"`
	AllowedOrigins   *[]string `json:"allowedOrigins,omitempty"`
	Enabled          *bool     `json:"enabled,omitempty"`
	MaxAge           *int32    `json:"maxAge,omitempty"`
}

// Credential defines model for Credential.
type Credential struct {
	Aaguid                     *string                  `json:"aaguid,omitempty"`
	AccessedAt                 *int64                   `json:"accessedAt,omitempty"`
	AttestationStatement       *string                  `json:"attestationStatement,omitempty"`
	AttestationStatementFormat *string                  `json:"attestationStatementFormat,omitempty"`
	Counter                    *int64                   `json:"counter,omitempty"`
	CreatedAt                  *int64                   `json:"createdAt,omitempty"`
	CredentialId               *string                  `json:"credentialId,omitempty"`
	Id                         *string                  `json:"id,omitempty"`
	IpAddress                  *string                  `json:"ipAddress,omitempty"`
	LastCheckedAt              *int64                   `json:"lastCheckedAt,omitempty"`
	PublicKey                  *string                  `json:"publicKey,omitempty"`
	ReferenceId                *string                  `json:"referenceId,omitempty"`
	ReferenceType              *CredentialReferenceType `json:"referenceType,omitempty"`
	UpdatedAt                  *int64                   `json:"updatedAt,omitempty"`
	UserAgent                  *string                  `json:"userAgent,omitempty"`
	UserId                     *string                  `json:"userId,omitempty"`
	Username                   *string                  `json:"username,omitempty"`
}

// CredentialReferenceType defines model for Credential.ReferenceType.
type CredentialReferenceType string

// DeviceIdentifierResource defines model for DeviceIdentifierResource.
type DeviceIdentifierResource = map[string]interface{}

// Domain defines model for Domain.
type Domain struct {
	AccountSettings                          *AccountSettings                      `json:"accountSettings,omitempty"`
	AlertEnabled                             *bool                                 `json:"alertEnabled,omitempty"`
	CorsSettings                             *CorsSettings                         `json:"corsSettings,omitempty"`
	CreatedAt                                *int64                                `json:"createdAt,omitempty"`
	Description                              *string                               `json:"description,omitempty"`
	DynamicClientRegistrationEnabled         *bool                                 `json:"dynamicClientRegistrationEnabled,omitempty"`
	DynamicClientRegistrationTemplateEnabled *bool                                 `json:"dynamicClientRegistrationTemplateEnabled,omitempty"`
	Enabled                                  *bool                                 `json:"enabled,omitempty"`
	Hrid                                     *string                               `json:"hrid,omitempty"`
	Id                                       *string                               `json:"id,omitempty"`
	Identities                               *[]string                             `json:"identities,omitempty"`
	LoginSettings                            *LoginSettings                        `json:"loginSettings,omitempty"`
	Master                                   *bool                                 `json:"master,omitempty"`
	Name                                     *string                               `json:"name,omitempty"`
	Oidc                                     *OIDCSettings                         `json:"oidc,omitempty"`
	OpenDynamicClientRegistrationEnabled     *bool                                 `json:"openDynamicClientRegistrationEnabled,omitempty"`
	PasswordSettings                         *PasswordSettings                     `json:"passwordSettings,omitempty"`
	Path                                     *string                               `json:"path,omitempty"`
	RedirectUriLocalhostAllowed              *bool                                 `json:"redirectUriLocalhostAllowed,omitempty"`
	RedirectUriStrictMatching                *bool                                 `json:"redirectUriStrictMatching,omitempty"`
	RedirectUriUnsecuredHttpSchemeAllowed    *bool                                 `json:"redirectUriUnsecuredHttpSchemeAllowed,omitempty"`
	RedirectUriWildcardAllowed               *bool                                 `json:"redirectUriWildcardAllowed,omitempty"`
	ReferenceId                              *string                               `json:"referenceId,omitempty"`
	ReferenceType                            *DomainReferenceType                  `json:"referenceType,omitempty"`
	Saml                                     *SAMLSettings                         `json:"saml,omitempty"`
	Scim                                     *SCIMSettings                         `json:"scim,omitempty"`
	SelfServiceAccountManagementSettings     *SelfServiceAccountManagementSettings `json:"selfServiceAccountManagementSettings,omitempty"`
	Tags                                     *[]string                             `json:"tags,omitempty"`
	Uma                                      *UMASettings                          `json:"uma,omitempty"`
	UpdatedAt                                *int64                                `json:"updatedAt,omitempty"`
	VhostMode                                *bool                                 `json:"vhostMode,omitempty"`
	Vhosts                                   *[]VirtualHost                        `json:"vhosts,omitempty"`
	WebAuthnSettings                         *WebAuthnSettings                     `json:"webAuthnSettings,omitempty"`
}

// DomainReferenceType defines model for Domain.ReferenceType.
type DomainReferenceType string

// Email defines model for Email.
type Email struct {
	Client          *string             `json:"client,omitempty"`
	Content         *string             `json:"content,omitempty"`
	CreatedAt       *int64              `json:"createdAt,omitempty"`
	DefaultTemplate *bool               `json:"defaultTemplate,omitempty"`
	Enabled         *bool               `json:"enabled,omitempty"`
	ExpiresAfter    *int32              `json:"expiresAfter,omitempty"`
	From            *string             `json:"from,omitempty"`
	FromName        *string             `json:"fromName,omitempty"`
	Id              *string             `json:"id,omitempty"`
	ReferenceId     *string             `json:"referenceId,omitempty"`
	ReferenceType   *EmailReferenceType `json:"referenceType,omitempty"`
	Subject         *string             `json:"subject,omitempty"`
	Template        *string             `json:"template,omitempty"`
	UpdatedAt       *int64              `json:"updatedAt,omitempty"`
}

// EmailReferenceType defines model for Email.ReferenceType.
type EmailReferenceType string

// EmailValue defines model for EmailValue.
type EmailValue struct {
	Email string `json:"email"`
}

// EnrolledFactor defines model for EnrolledFactor.
type EnrolledFactor struct {
	AppId     *string                 `json:"appId,omitempty"`
	Channel   *EnrolledFactorChannel  `json:"channel,omitempty"`
	CreatedAt *int64                  `json:"createdAt,omitempty"`
	FactorId  *string                 `json:"factorId,omitempty"`
	Primary   *bool                   `json:"primary,omitempty"`
	Security  *EnrolledFactorSecurity `json:"security,omitempty"`
	Status    *EnrolledFactorStatus   `json:"status,omitempty"`
	UpdatedAt *int64                  `json:"updatedAt,omitempty"`
}

// EnrolledFactorStatus defines model for EnrolledFactor.Status.
type EnrolledFactorStatus string

// EnrolledFactorChannel defines model for EnrolledFactorChannel.
type EnrolledFactorChannel struct {
	Target *string                    `json:"target,omitempty"`
	Type   *EnrolledFactorChannelType `json:"type,omitempty"`
}

// EnrolledFactorChannelType defines model for EnrolledFactorChannel.Type.
type EnrolledFactorChannelType string

// EnrolledFactorEntity defines model for EnrolledFactorEntity.
type EnrolledFactorEntity struct {
	CreatedAt *int64  `json:"createdAt,omitempty"`
	Id        *string `json:"id,omitempty"`
	Name      *string `json:"name,omitempty"`
	Type      *string `json:"type,omitempty"`
	UpdatedAt *int64  `json:"updatedAt,omitempty"`
}

// EnrolledFactorSecurity defines model for EnrolledFactorSecurity.
type EnrolledFactorSecurity struct {
	AdditionalData *map[string]map[string]interface{} `json:"additionalData,omitempty"`
	Type           *string                            `json:"type,omitempty"`
	Value          *string                            `json:"value,omitempty"`
}

// EnrollmentSettings defines model for EnrollmentSettings.
type EnrollmentSettings struct {
	ForceEnrollment *bool  `json:"forceEnrollment,omitempty"`
	SkipTimeSeconds *int64 `json:"skipTimeSeconds,omitempty"`
}

// Entrypoint defines model for Entrypoint.
type Entrypoint struct {
	CreatedAt         *int64    `json:"createdAt,omitempty"`
	DefaultEntrypoint *bool     `json:"defaultEntrypoint,omitempty"`
	Description       *string   `json:"description,omitempty"`
	Id                *string   `json:"id,omitempty"`
	Name              *string   `json:"name,omitempty"`
	OrganizationId    *string   `json:"organizationId,omitempty"`
	Tags              *[]string `json:"tags,omitempty"`
	UpdatedAt         *int64    `json:"updatedAt,omitempty"`
	Url               *string   `json:"url,omitempty"`
}

// Environment defines model for Environment.
type Environment struct {
	CreatedAt          *int64    `json:"createdAt,omitempty"`
	Description        *string   `json:"description,omitempty"`
	DomainRestrictions *[]string `json:"domainRestrictions,omitempty"`
	Hrids              *[]string `json:"hrids,omitempty"`
	Id                 *string   `json:"id,omitempty"`
	Name               *string   `json:"name,omitempty"`
	OrganizationId     *string   `json:"organizationId,omitempty"`
	UpdatedAt          *int64    `json:"updatedAt,omitempty"`
}

// ErrorEntity defines model for ErrorEntity.
type ErrorEntity struct {
	HttpStatus *int32  `json:"http_status,omitempty"`
	Message    *string `json:"message,omitempty"`
}

// ExtensionGrant defines model for ExtensionGrant.
type ExtensionGrant struct {
	Configuration    *string `json:"configuration,omitempty"`
	CreateUser       *bool   `json:"createUser,omitempty"`
	CreatedAt        *int64  `json:"createdAt,omitempty"`
	Domain           *string `json:"domain,omitempty"`
	GrantType        *string `json:"grantType,omitempty"`
	Id               *string `json:"id,omitempty"`
	IdentityProvider *string `json:"identityProvider,omitempty"`
	Name             *string `json:"name,omitempty"`
	Type             *string `json:"type,omitempty"`
	UpdatedAt        *int64  `json:"updatedAt,omitempty"`
	UserExists       *bool   `json:"userExists,omitempty"`
}

// Factor defines model for Factor.
type Factor struct {
	Configuration *string           `json:"configuration,omitempty"`
	CreatedAt     *int64            `json:"createdAt,omitempty"`
	Domain        *string           `json:"domain,omitempty"`
	FactorType    *FactorFactorType `json:"factorType,omitempty"`
	Id            *string           `json:"id,omitempty"`
	Name          *string           `json:"name,omitempty"`
	Type          *string           `json:"type,omitempty"`
	UpdatedAt     *int64            `json:"updatedAt,omitempty"`
}

// FactorFactorType defines model for Factor.FactorType.
type FactorFactorType string

// FilteredIdentityProviderInfo defines model for FilteredIdentityProviderInfo.
type FilteredIdentityProviderInfo struct {
	External *bool   `json:"external,omitempty"`
	Id       *string `json:"id,omitempty"`
	Name     *string `json:"name,omitempty"`
	System   *bool   `json:"system,omitempty"`
	Type     *string `json:"type,omitempty"`
}

// Flow defines model for Flow.
type Flow struct {
	Condition *string  `json:"condition,omitempty"`
	Enabled   *bool    `json:"enabled,omitempty"`
	Id        *string  `json:"id,omitempty"`
	Name      string   `json:"name"`
	Post      *[]Step  `json:"post,omitempty"`
	Pre       *[]Step  `json:"pre,omitempty"`
	Type      FlowType `json:"type"`
}

// FlowType defines model for Flow.Type.
type FlowType string

// FlowEntity defines model for FlowEntity.
type FlowEntity struct {
	Condition *string         `json:"condition,omitempty"`
	CreatedAt *int64          `json:"createdAt,omitempty"`
	Enabled   *bool           `json:"enabled,omitempty"`
	Id        *string         `json:"id,omitempty"`
	Name      *string         `json:"name,omitempty"`
	Post      *[]Step         `json:"post,omitempty"`
	Pre       *[]Step         `json:"pre,omitempty"`
	Type      *FlowEntityType `json:"type,omitempty"`
	UpdatedAt *int64          `json:"updatedAt,omitempty"`
}

// FlowEntityType defines model for FlowEntity.Type.
type FlowEntityType string

// Form defines model for Form.
type Form struct {
	Assets        *string            `json:"assets,omitempty"`
	Client        *string            `json:"client,omitempty"`
	Content       *string            `json:"content,omitempty"`
	CreatedAt     *int64             `json:"createdAt,omitempty"`
	Enabled       *bool              `json:"enabled,omitempty"`
	Id            *string            `json:"id,omitempty"`
	ReferenceId   *string            `json:"referenceId,omitempty"`
	ReferenceType *FormReferenceType `json:"referenceType,omitempty"`
	Template      *string            `json:"template,omitempty"`
	UpdatedAt     *int64             `json:"updatedAt,omitempty"`
}

// FormReferenceType defines model for Form.ReferenceType.
type FormReferenceType string

// FormField defines model for FormField.
type FormField struct {
	Key   *string `json:"key,omitempty"`
	Label *string `json:"label,omitempty"`
	Type  *string `json:"type,omitempty"`
}

// Group defines model for Group.
type Group struct {
	CreatedAt     *int64              `json:"createdAt,omitempty"`
	Description   *string             `json:"description,omitempty"`
	Id            *string             `json:"id,omitempty"`
	Members       *[]string           `json:"members,omitempty"`
	Name          *string             `json:"name,omitempty"`
	ReferenceId   *string             `json:"referenceId,omitempty"`
	ReferenceType *GroupReferenceType `json:"referenceType,omitempty"`
	Roles         *[]string           `json:"roles,omitempty"`
	UpdatedAt     *int64              `json:"updatedAt,omitempty"`
}

// GroupReferenceType defines model for Group.ReferenceType.
type GroupReferenceType string

// GroupPage defines model for GroupPage.
type GroupPage struct {
	CurrentPage *int32   `json:"currentPage,omitempty"`
	Data        *[]Group `json:"data,omitempty"`
	TotalCount  *int64   `json:"totalCount,omitempty"`
}

// I18nDictionary defines model for I18nDictionary.
type I18nDictionary struct {
	CreatedAt     *int64                       `json:"createdAt,omitempty"`
	Entries       *map[string]string           `json:"entries,omitempty"`
	Id            *string                      `json:"id,omitempty"`
	Locale        *string                      `json:"locale,omitempty"`
	Name          *string                      `json:"name,omitempty"`
	ReferenceId   *string                      `json:"referenceId,omitempty"`
	ReferenceType *I18nDictionaryReferenceType `json:"referenceType,omitempty"`
	UpdatedAt     *int64                       `json:"updatedAt,omitempty"`
}

// I18nDictionaryReferenceType defines model for I18nDictionary.ReferenceType.
type I18nDictionaryReferenceType string

// IdentityProvider defines model for IdentityProvider.
type IdentityProvider struct {
	Configuration   *string                        `json:"configuration,omitempty"`
	CreatedAt       *int64                         `json:"createdAt,omitempty"`
	DomainWhitelist *[]string                      `json:"domainWhitelist,omitempty"`
	External        *bool                          `json:"external,omitempty"`
	Id              *string                        `json:"id,omitempty"`
	Mappers         *map[string]string             `json:"mappers,omitempty"`
	Name            *string                        `json:"name,omitempty"`
	ReferenceId     *string                        `json:"referenceId,omitempty"`
	ReferenceType   *IdentityProviderReferenceType `json:"referenceType,omitempty"`
	RoleMapper      *map[string][]string           `json:"roleMapper,omitempty"`
	System          *bool                          `json:"system,omitempty"`
	Type            *string                        `json:"type,omitempty"`
	UpdatedAt       *int64                         `json:"updatedAt,omitempty"`
}

// IdentityProviderReferenceType defines model for IdentityProvider.ReferenceType.
type IdentityProviderReferenceType string

// InstallationEntity defines model for InstallationEntity.
type InstallationEntity struct {
	AdditionalInformation *map[string]string `json:"additionalInformation,omitempty"`
	CreatedAt             *int64             `json:"createdAt,omitempty"`
	Id                    *string            `json:"id,omitempty"`
	UpdatedAt             *int64             `json:"updatedAt,omitempty"`
}

// JWK defines model for JWK.
type JWK struct {
	Alg     *string   `json:"alg,omitempty"`
	KeyOps  *[]string `json:"keyOps,omitempty"`
	Kid     *string   `json:"kid,omitempty"`
	Kty     *string   `json:"kty,omitempty"`
	Use     *string   `json:"use,omitempty"`
	X5c     *[]string `json:"x5c,omitempty"`
	X5t     *string   `json:"x5t,omitempty"`
	X5tS256 *string   `json:"x5tS256,omitempty"`
	X5u     *string   `json:"x5u,omitempty"`
}

// JWKSet defines model for JWKSet.
type JWKSet struct {
	Keys *[]JWK `json:"keys,omitempty"`
}

// LoginSettings defines model for LoginSettings.
type LoginSettings struct {
	EnforcePasswordPolicyEnabled       *bool  `json:"enforcePasswordPolicyEnabled,omitempty"`
	ForgotPasswordEnabled              *bool  `json:"forgotPasswordEnabled,omitempty"`
	HideForm                           *bool  `json:"hideForm,omitempty"`
	IdentifierFirstEnabled             *bool  `json:"identifierFirstEnabled,omitempty"`
	Inherited                          *bool  `json:"inherited,omitempty"`
	PasswordlessEnabled                *bool  `json:"passwordlessEnabled,omitempty"`
	PasswordlessEnforcePasswordEnabled *bool  `json:"passwordlessEnforcePasswordEnabled,omitempty"`
	PasswordlessEnforcePasswordMaxAge  *int32 `json:"passwordlessEnforcePasswordMaxAge,omitempty"`
	PasswordlessRememberDeviceEnabled  *bool  `json:"passwordlessRememberDeviceEnabled,omitempty"`
	RegisterEnabled                    *bool  `json:"registerEnabled,omitempty"`
	RememberMeEnabled                  *bool  `json:"rememberMeEnabled,omitempty"`
}

// MFASettings defines model for MFASettings.
type MFASettings struct {
	AdaptiveAuthenticationRule *string                 `json:"adaptiveAuthenticationRule,omitempty"`
	Enrollment                 *EnrollmentSettings     `json:"enrollment,omitempty"`
	LoginRule                  *string                 `json:"loginRule,omitempty"`
	RememberDevice             *RememberDeviceSettings `json:"rememberDevice,omitempty"`
	StepUpAuthenticationRule   *string                 `json:"stepUpAuthenticationRule,omitempty"`
}

// Membership defines model for Membership.
type Membership struct {
	CreatedAt     *int64                   `json:"createdAt,omitempty"`
	Domain        *string                  `json:"domain,omitempty"`
	Id            *string                  `json:"id,omitempty"`
	MemberId      *string                  `json:"memberId,omitempty"`
	MemberType    *MembershipMemberType    `json:"memberType,omitempty"`
	ReferenceId   *string                  `json:"referenceId,omitempty"`
	ReferenceType *MembershipReferenceType `json:"referenceType,omitempty"`
	RoleId        *string                  `json:"roleId,omitempty"`
	UpdatedAt     *int64                   `json:"updatedAt,omitempty"`
}

// MembershipMemberType defines model for Membership.MemberType.
type MembershipMemberType string

// MembershipReferenceType defines model for Membership.ReferenceType.
type MembershipReferenceType string

// MembershipListItem defines model for MembershipListItem.
type MembershipListItem struct {
	Memberships *[]Membership                                 `json:"memberships,omitempty"`
	Metadata    *map[string]map[string]map[string]interface{} `json:"metadata,omitempty"`
}

// NewAlertNotifier defines model for NewAlertNotifier.
type NewAlertNotifier struct {
	Configuration string  `json:"configuration"`
	Enabled       *bool   `json:"enabled,omitempty"`
	Type          *string `json:"type,omitempty"`
}

// NewApplication defines model for NewApplication.
type NewApplication struct {
	ClientId     *string                            `json:"clientId,omitempty"`
	ClientSecret *string                            `json:"clientSecret,omitempty"`
	Description  *string                            `json:"description,omitempty"`
	Metadata     *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Name         string                             `json:"name"`
	RedirectUris *[]string                          `json:"redirectUris,omitempty"`
	Type         NewApplicationType                 `json:"type"`
}

// NewApplicationType defines model for NewApplication.Type.
type NewApplicationType string

// NewAuthenticationDeviceNotifier defines model for NewAuthenticationDeviceNotifier.
type NewAuthenticationDeviceNotifier struct {
	Configuration string  `json:"configuration"`
	Id            *string `json:"id,omitempty"`
	Name          string  `json:"name"`
	Type          string  `json:"type"`
}

// NewBotDetection defines model for NewBotDetection.
type NewBotDetection struct {
	Configuration string  `json:"configuration"`
	DetectionType string  `json:"detectionType"`
	Id            *string `json:"id,omitempty"`
	Name          string  `json:"name"`
	Type          string  `json:"type"`
}

// NewCertificate defines model for NewCertificate.
type NewCertificate struct {
	Configuration string `json:"configuration"`
	Name          string `json:"name"`
	Type          string `json:"type"`
}

// NewDeviceIdentifier defines model for NewDeviceIdentifier.
type NewDeviceIdentifier struct {
	Configuration string  `json:"configuration"`
	Id            *string `json:"id,omitempty"`
	Name          string  `json:"name"`
	Type          string  `json:"type"`
}

// NewDictionary defines model for NewDictionary.
type NewDictionary struct {
	Locale *string `json:"locale,omitempty"`
	Name   *string `json:"name,omitempty"`
}

// NewDomain defines model for NewDomain.
type NewDomain struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
}

// NewEmail defines model for NewEmail.
type NewEmail struct {
	Content      string           `json:"content"`
	Enabled      *bool            `json:"enabled,omitempty"`
	ExpiresAfter int32            `json:"expiresAfter"`
	From         string           `json:"from"`
	FromName     *string          `json:"fromName,omitempty"`
	Subject      string           `json:"subject"`
	Template     NewEmailTemplate `json:"template"`
}

// NewEmailTemplate defines model for NewEmail.Template.
type NewEmailTemplate string

// NewEntrypoint defines model for NewEntrypoint.
type NewEntrypoint struct {
	Description *string  `json:"description,omitempty"`
	Name        string   `json:"name"`
	Tags        []string `json:"tags"`
	Url         string   `json:"url"`
}

// NewExtensionGrant defines model for NewExtensionGrant.
type NewExtensionGrant struct {
	Configuration    string  `json:"configuration"`
	CreateUser       *bool   `json:"createUser,omitempty"`
	GrantType        string  `json:"grantType"`
	IdentityProvider *string `json:"identityProvider,omitempty"`
	Name             string  `json:"name"`
	Type             string  `json:"type"`
	UserExists       *bool   `json:"userExists,omitempty"`
}

// NewFactor defines model for NewFactor.
type NewFactor struct {
	Configuration string  `json:"configuration"`
	FactorType    string  `json:"factorType"`
	Id            *string `json:"id,omitempty"`
	Name          string  `json:"name"`
	Type          string  `json:"type"`
}

// NewForm defines model for NewForm.
type NewForm struct {
	Assets   *string         `json:"assets,omitempty"`
	Content  string          `json:"content"`
	Enabled  *bool           `json:"enabled,omitempty"`
	Template NewFormTemplate `json:"template"`
}

// NewFormTemplate defines model for NewForm.Template.
type NewFormTemplate string

// NewGroup defines model for NewGroup.
type NewGroup struct {
	Description *string   `json:"description,omitempty"`
	Members     *[]string `json:"members,omitempty"`
	Name        string    `json:"name"`
}

// NewIdentityProvider defines model for NewIdentityProvider.
type NewIdentityProvider struct {
	Configuration   string    `json:"configuration"`
	DomainWhitelist *[]string `json:"domainWhitelist,omitempty"`
	External        *bool     `json:"external,omitempty"`
	Id              *string   `json:"id,omitempty"`
	Name            string    `json:"name"`
	Type            string    `json:"type"`
}

// NewMembership defines model for NewMembership.
type NewMembership struct {
	MemberId   string                  `json:"memberId"`
	MemberType NewMembershipMemberType `json:"memberType"`
	Role       string                  `json:"role"`
}

// NewMembershipMemberType defines model for NewMembership.MemberType.
type NewMembershipMemberType string

// NewReporter defines model for NewReporter.
type NewReporter struct {
	Configuration string  `json:"configuration"`
	Enabled       *bool   `json:"enabled,omitempty"`
	Id            *string `json:"id,omitempty"`
	Name          string  `json:"name"`
	Type          string  `json:"type"`
}

// NewRole defines model for NewRole.
type NewRole struct {
	AssignableType *NewRoleAssignableType `json:"assignableType,omitempty"`
	Description    *string                `json:"description,omitempty"`
	Name           string                 `json:"name"`
}

// NewRoleAssignableType defines model for NewRole.AssignableType.
type NewRoleAssignableType string

// NewScope defines model for NewScope.
type NewScope struct {
	Description   string  `json:"description"`
	Discovery     *bool   `json:"discovery,omitempty"`
	ExpiresIn     *int32  `json:"expiresIn,omitempty"`
	IconUri       *string `json:"iconUri,omitempty"`
	Key           string  `json:"key"`
	Name          string  `json:"name"`
	Parameterized *bool   `json:"parameterized,omitempty"`
}

// NewServiceResource defines model for NewServiceResource.
type NewServiceResource struct {
	Configuration string  `json:"configuration"`
	Id            *string `json:"id,omitempty"`
	Name          string  `json:"name"`
	Type          string  `json:"type"`
}

// NewTag defines model for NewTag.
type NewTag struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
}

// NewTheme defines model for NewTheme.
type NewTheme struct {
	Css                     *string `json:"css,omitempty"`
	FaviconUrl              *string `json:"faviconUrl,omitempty"`
	LogoUrl                 *string `json:"logoUrl,omitempty"`
	LogoWidth               *int32  `json:"logoWidth,omitempty"`
	PrimaryButtonColorHex   *string `json:"primaryButtonColorHex,omitempty"`
	PrimaryTextColorHex     *string `json:"primaryTextColorHex,omitempty"`
	SecondaryButtonColorHex *string `json:"secondaryButtonColorHex,omitempty"`
	SecondaryTextColorHex   *string `json:"secondaryTextColorHex,omitempty"`
}

// NewUser defines model for NewUser.
type NewUser struct {
	AccountNonExpired     *bool                              `json:"accountNonExpired,omitempty"`
	AccountNonLocked      *bool                              `json:"accountNonLocked,omitempty"`
	AdditionalInformation *map[string]map[string]interface{} `json:"additionalInformation,omitempty"`
	Client                *string                            `json:"client,omitempty"`
	CreatedAt             *int64                             `json:"createdAt,omitempty"`
	CredentialsNonExpired *bool                              `json:"credentialsNonExpired,omitempty"`
	Domain                *string                            `json:"domain,omitempty"`
	Email                 *string                            `json:"email,omitempty"`
	Enabled               *bool                              `json:"enabled,omitempty"`
	ExternalId            *string                            `json:"externalId,omitempty"`
	FirstName             *string                            `json:"firstName,omitempty"`
	Internal              *bool                              `json:"internal,omitempty"`
	LastName              *string                            `json:"lastName,omitempty"`
	LoggedAt              *int64                             `json:"loggedAt,omitempty"`
	LoginsCount           *int64                             `json:"loginsCount,omitempty"`
	Password              *string                            `json:"password,omitempty"`
	PreRegistration       *bool                              `json:"preRegistration,omitempty"`
	PreferredLanguage     *string                            `json:"preferredLanguage,omitempty"`
	RegistrationCompleted *bool                              `json:"registrationCompleted,omitempty"`
	Source                *string                            `json:"source,omitempty"`
	UpdatedAt             *int64                             `json:"updatedAt,omitempty"`
	Username              *string                            `json:"username,omitempty"`
}

// NotifierPlugin defines model for NotifierPlugin.
type NotifierPlugin struct {
	Description *string `json:"description,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	Icon        *string `json:"icon,omitempty"`
	Id          *string `json:"id,omitempty"`
	Name        *string `json:"name,omitempty"`
	Version     *string `json:"version,omitempty"`
}

// OIDCSettings defines model for OIDCSettings.
type OIDCSettings struct {
	CibaSettings               *CIBASettings               `json:"cibaSettings,omitempty"`
	ClientRegistrationSettings *ClientRegistrationSettings `json:"clientRegistrationSettings,omitempty"`
	PostLogoutRedirectUris     *[]string                   `json:"postLogoutRedirectUris,omitempty"`
	RedirectUriStrictMatching  *bool                       `json:"redirectUriStrictMatching,omitempty"`
	RequestUris                *[]string                   `json:"requestUris,omitempty"`
	SecurityProfileSettings    *SecurityProfileSettings    `json:"securityProfileSettings,omitempty"`
}

// Page defines model for Page.
type Page struct {
	CurrentPage *int32                    `json:"currentPage,omitempty"`
	Data        *[]map[string]interface{} `json:"data,omitempty"`
	TotalCount  *int64                    `json:"totalCount,omitempty"`
}

// PasswordSettings defines model for PasswordSettings.
type PasswordSettings struct {
	ExcludePasswordsInDictionary     *bool  `json:"excludePasswordsInDictionary,omitempty"`
	ExcludeUserProfileInfoInPassword *bool  `json:"excludeUserProfileInfoInPassword,omitempty"`
	ExpiryDuration                   *int32 `json:"expiryDuration,omitempty"`
	IncludeNumbers                   *bool  `json:"includeNumbers,omitempty"`
	IncludeSpecialCharacters         *bool  `json:"includeSpecialCharacters,omitempty"`
	Inherited                        *bool  `json:"inherited,omitempty"`
	LettersInMixedCase               *bool  `json:"lettersInMixedCase,omitempty"`
	MaxConsecutiveLetters            *int32 `json:"maxConsecutiveLetters,omitempty"`
	MaxLength                        *int32 `json:"maxLength,omitempty"`
	MinLength                        *int32 `json:"minLength,omitempty"`
	OldPasswords                     *int32 `json:"oldPasswords,omitempty"`
	PasswordHistoryEnabled           *bool  `json:"passwordHistoryEnabled,omitempty"`
}

// PasswordValue defines model for PasswordValue.
type PasswordValue struct {
	Password string `json:"password"`
}

// PatchAlertNotifier defines model for PatchAlertNotifier.
type PatchAlertNotifier struct {
	Configuration *string `json:"configuration,omitempty"`
	Enabled       *bool   `json:"enabled,omitempty"`
	Name          *string `json:"name,omitempty"`
}

// PatchAlertTrigger defines model for PatchAlertTrigger.
type PatchAlertTrigger struct {
	AlertNotifiers *[]string             `json:"alertNotifiers,omitempty"`
	Enabled        *bool                 `json:"enabled,omitempty"`
	Type           PatchAlertTriggerType `json:"type"`
}

// PatchAlertTriggerType defines model for PatchAlertTrigger.Type.
type PatchAlertTriggerType string

// PatchApplication defines model for PatchApplication.
type PatchApplication struct {
	Certificate         *string                                `json:"certificate,omitempty"`
	Description         *string                                `json:"description,omitempty"`
	Enabled             *bool                                  `json:"enabled,omitempty"`
	Factors             *[]string                              `json:"factors,omitempty"`
	IdentityProviders   *[]PatchApplicationIdentityProvider    `json:"identityProviders,omitempty"`
	Metadata            *map[string]map[string]interface{}     `json:"metadata,omitempty"`
	Name                *string                                `json:"name,omitempty"`
	RequiredPermissions *[]PatchApplicationRequiredPermissions `json:"requiredPermissions,omitempty"`
	Settings            *PatchApplicationSettings              `json:"settings,omitempty"`
	Template            *bool                                  `json:"template,omitempty"`
}

// PatchApplicationRequiredPermissions defines model for PatchApplication.RequiredPermissions.
type PatchApplicationRequiredPermissions string

// PatchApplicationAdvancedSettings defines model for PatchApplicationAdvancedSettings.
type PatchApplicationAdvancedSettings struct {
	FlowsInherited *bool `json:"flowsInherited,omitempty"`
	SkipConsent    *bool `json:"skipConsent,omitempty"`
}

// PatchApplicationIdentityProvider defines model for PatchApplicationIdentityProvider.
type PatchApplicationIdentityProvider struct {
	Identity      *string `json:"identity,omitempty"`
	Priority      *int32  `json:"priority,omitempty"`
	SelectionRule *string `json:"selectionRule,omitempty"`
}

// PatchApplicationOAuthSettings defines model for PatchApplicationOAuthSettings.
type PatchApplicationOAuthSettings struct {
	AccessTokenValiditySeconds            *int32                      `json:"accessTokenValiditySeconds,omitempty"`
	ApplicationType                       *string                     `json:"applicationType,omitempty"`
	AuthorizationEncryptedResponseAlg     *string                     `json:"authorizationEncryptedResponseAlg,omitempty"`
	AuthorizationEncryptedResponseEnc     *string                     `json:"authorizationEncryptedResponseEnc,omitempty"`
	AuthorizationSignedResponseAlg        *string                     `json:"authorizationSignedResponseAlg,omitempty"`
	ClientIdIssuedAt                      *int64                      `json:"clientIdIssuedAt,omitempty"`
	ClientName                            *string                     `json:"clientName,omitempty"`
	ClientSecretExpiresAt                 *int64                      `json:"clientSecretExpiresAt,omitempty"`
	ClientUri                             *string                     `json:"clientUri,omitempty"`
	Contacts                              *[]string                   `json:"contacts,omitempty"`
	DefaultACRvalues                      *[]string                   `json:"defaultACRvalues,omitempty"`
	DefaultMaxAge                         *int32                      `json:"defaultMaxAge,omitempty"`
	DisableRefreshTokenRotation           *bool                       `json:"disableRefreshTokenRotation,omitempty"`
	EnhanceScopesWithUserPermissions      *bool                       `json:"enhanceScopesWithUserPermissions,omitempty"`
	ForcePKCE                             *bool                       `json:"forcePKCE,omitempty"`
	ForceS256CodeChallengeMethod          *bool                       `json:"forceS256CodeChallengeMethod,omitempty"`
	GrantTypes                            *[]string                   `json:"grantTypes,omitempty"`
	IdTokenEncryptedResponseAlg           *string                     `json:"idTokenEncryptedResponseAlg,omitempty"`
	IdTokenEncryptedResponseEnc           *string                     `json:"idTokenEncryptedResponseEnc,omitempty"`
	IdTokenSignedResponseAlg              *string                     `json:"idTokenSignedResponseAlg,omitempty"`
	IdTokenValiditySeconds                *int32                      `json:"idTokenValiditySeconds,omitempty"`
	InitiateLoginUri                      *string                     `json:"initiateLoginUri,omitempty"`
	Jwks                                  *JWKSet                     `json:"jwks,omitempty"`
	JwksUri                               *string                     `json:"jwksUri,omitempty"`
	LogoUri                               *string                     `json:"logoUri,omitempty"`
	PolicyUri                             *string                     `json:"policyUri,omitempty"`
	PostLogoutRedirectUris                *[]string                   `json:"postLogoutRedirectUris,omitempty"`
	RedirectUris                          *[]string                   `json:"redirectUris,omitempty"`
	RefreshTokenValiditySeconds           *int32                      `json:"refreshTokenValiditySeconds,omitempty"`
	RegistrationAccessToken               *string                     `json:"registrationAccessToken,omitempty"`
	RegistrationClientUri                 *string                     `json:"registrationClientUri,omitempty"`
	RequestObjectEncryptionAlg            *string                     `json:"requestObjectEncryptionAlg,omitempty"`
	RequestObjectEncryptionEnc            *string                     `json:"requestObjectEncryptionEnc,omitempty"`
	RequestObjectSigningAlg               *string                     `json:"requestObjectSigningAlg,omitempty"`
	RequestUris                           *[]string                   `json:"requestUris,omitempty"`
	RequireAuthTime                       *bool                       `json:"requireAuthTime,omitempty"`
	ResponseTypes                         *[]string                   `json:"responseTypes,omitempty"`
	ScopeSettings                         *[]ApplicationScopeSettings `json:"scopeSettings,omitempty"`
	SectorIdentifierUri                   *string                     `json:"sectorIdentifierUri,omitempty"`
	SilentReAuthentication                *bool                       `json:"silentReAuthentication,omitempty"`
	SingleSignOut                         *bool                       `json:"singleSignOut,omitempty"`
	SoftwareId                            *string                     `json:"softwareId,omitempty"`
	SoftwareStatement                     *string                     `json:"softwareStatement,omitempty"`
	SoftwareVersion                       *string                     `json:"softwareVersion,omitempty"`
	SubjectType                           *string                     `json:"subjectType,omitempty"`
	TlsClientAuthSanDns                   *string                     `json:"tlsClientAuthSanDns,omitempty"`
	TlsClientAuthSanEmail                 *string                     `json:"tlsClientAuthSanEmail,omitempty"`
	TlsClientAuthSanIp                    *string                     `json:"tlsClientAuthSanIp,omitempty"`
	TlsClientAuthSanUri                   *string                     `json:"tlsClientAuthSanUri,omitempty"`
	TlsClientAuthSubjectDn                *string                     `json:"tlsClientAuthSubjectDn,omitempty"`
	TlsClientCertificateBoundAccessTokens *bool                       `json:"tlsClientCertificateBoundAccessTokens,omitempty"`
	TokenCustomClaims                     *[]TokenClaim               `json:"tokenCustomClaims,omitempty"`
	TokenEndpointAuthMethod               *string                     `json:"tokenEndpointAuthMethod,omitempty"`
	TokenEndpointAuthSigningAlg           *string                     `json:"tokenEndpointAuthSigningAlg,omitempty"`
	TosUri                                *string                     `json:"tosUri,omitempty"`
	UserinfoEncryptedResponseAlg          *string                     `json:"userinfoEncryptedResponseAlg,omitempty"`
	UserinfoEncryptedResponseEnc          *string                     `json:"userinfoEncryptedResponseEnc,omitempty"`
	UserinfoSignedResponseAlg             *string                     `json:"userinfoSignedResponseAlg,omitempty"`
}

// PatchApplicationSAMLSettings defines model for PatchApplicationSAMLSettings.
type PatchApplicationSAMLSettings struct {
	AttributeConsumeServiceUrl *string `json:"attributeConsumeServiceUrl,omitempty"`
	Certificate                *string `json:"certificate,omitempty"`
	EntityId                   *string `json:"entityId,omitempty"`
	SingleLogoutServiceUrl     *string `json:"singleLogoutServiceUrl,omitempty"`
	WantAssertionsSigned       *bool   `json:"wantAssertionsSigned,omitempty"`
	WantResponseSigned         *bool   `json:"wantResponseSigned,omitempty"`
}

// PatchApplicationSettings defines model for PatchApplicationSettings.
type PatchApplicationSettings struct {
	Account             *AccountSettings                               `json:"account,omitempty"`
	Advanced            *PatchApplicationAdvancedSettings              `json:"advanced,omitempty"`
	CookieSettings      *CookieSettings                                `json:"cookieSettings,omitempty"`
	Login               *LoginSettings                                 `json:"login,omitempty"`
	Mfa                 *PatchMFASettings                              `json:"mfa,omitempty"`
	Oauth               *PatchApplicationOAuthSettings                 `json:"oauth,omitempty"`
	PasswordSettings    *PatchPasswordSettings                         `json:"passwordSettings,omitempty"`
	RequiredPermissions *[]PatchApplicationSettingsRequiredPermissions `json:"requiredPermissions,omitempty"`
	RiskAssessment      *RiskAssessmentSettings                        `json:"riskAssessment,omitempty"`
	Saml                *PatchApplicationSAMLSettings                  `json:"saml,omitempty"`
}

// PatchApplicationSettingsRequiredPermissions defines model for PatchApplicationSettings.RequiredPermissions.
type PatchApplicationSettingsRequiredPermissions string

// PatchApplicationType defines model for PatchApplicationType.
type PatchApplicationType struct {
	Type PatchApplicationTypeType `json:"type"`
}

// PatchApplicationTypeType defines model for PatchApplicationType.Type.
type PatchApplicationTypeType string

// PatchCIBASettings defines model for PatchCIBASettings.
type PatchCIBASettings struct {
	AuthReqExpiry        *int32                 `json:"authReqExpiry,omitempty"`
	BindingMessageLength *int32                 `json:"bindingMessageLength,omitempty"`
	DeviceNotifiers      *[]CIBASettingNotifier `json:"deviceNotifiers,omitempty"`
	Enabled              *bool                  `json:"enabled,omitempty"`
	TokenReqInterval     *int32                 `json:"tokenReqInterval,omitempty"`
}

// PatchClientRegistrationSettings defines model for PatchClientRegistrationSettings.
type PatchClientRegistrationSettings struct {
	AllowHttpSchemeRedirectUri *bool     `json:"allowHttpSchemeRedirectUri,omitempty"`
	AllowLocalhostRedirectUri  *bool     `json:"allowLocalhostRedirectUri,omitempty"`
	AllowWildCardRedirectUri   *bool     `json:"allowWildCardRedirectUri,omitempty"`
	AllowedScopes              *[]string `json:"allowedScopes,omitempty"`
	DefaultScopes              *[]string `json:"defaultScopes,omitempty"`
}

// PatchDomain defines model for PatchDomain.
type PatchDomain struct {
	AccountSettings                      *AccountSettings                      `json:"accountSettings,omitempty"`
	AlertEnabled                         *bool                                 `json:"alertEnabled,omitempty"`
	CorsSettings                         *CorsSettings                         `json:"corsSettings,omitempty"`
	Description                          *string                               `json:"description,omitempty"`
	Enabled                              *bool                                 `json:"enabled,omitempty"`
	LoginSettings                        *LoginSettings                        `json:"loginSettings,omitempty"`
	Master                               *bool                                 `json:"master,omitempty"`
	Name                                 *string                               `json:"name,omitempty"`
	Oidc                                 *PatchOIDCSettings                    `json:"oidc,omitempty"`
	PasswordSettings                     *PatchPasswordSettings                `json:"passwordSettings,omitempty"`
	Path                                 *string                               `json:"path,omitempty"`
	RequiredPermissions                  *[]PatchDomainRequiredPermissions     `json:"requiredPermissions,omitempty"`
	Saml                                 *PatchSAMLSettings                    `json:"saml,omitempty"`
	Scim                                 *SCIMSettings                         `json:"scim,omitempty"`
	SelfServiceAccountManagementSettings *SelfServiceAccountManagementSettings `json:"selfServiceAccountManagementSettings,omitempty"`
	Tags                                 *[]string                             `json:"tags,omitempty"`
	Uma                                  *UMASettings                          `json:"uma,omitempty"`
	VhostMode                            *bool                                 `json:"vhostMode,omitempty"`
	Vhosts                               *[]VirtualHost                        `json:"vhosts,omitempty"`
	WebAuthnSettings                     *WebAuthnSettings                     `json:"webAuthnSettings,omitempty"`
}

// PatchDomainRequiredPermissions defines model for PatchDomain.RequiredPermissions.
type PatchDomainRequiredPermissions string

// PatchEnrollmentSettings defines model for PatchEnrollmentSettings.
type PatchEnrollmentSettings struct {
	ForceEnrollment *bool  `json:"forceEnrollment,omitempty"`
	SkipTimeSeconds *int64 `json:"skipTimeSeconds,omitempty"`
}

// PatchMFASettings defines model for PatchMFASettings.
type PatchMFASettings struct {
	AdaptiveAuthenticationRule *string                      `json:"adaptiveAuthenticationRule,omitempty"`
	Enrollment                 *PatchEnrollmentSettings     `json:"enrollment,omitempty"`
	LoginRule                  *string                      `json:"loginRule,omitempty"`
	RememberDevice             *PatchRememberDeviceSettings `json:"rememberDevice,omitempty"`
	StepUpAuthenticationRule   *string                      `json:"stepUpAuthenticationRule,omitempty"`
}

// PatchOIDCSettings defines model for PatchOIDCSettings.
type PatchOIDCSettings struct {
	CibaSettings               *PatchCIBASettings                      `json:"cibaSettings,omitempty"`
	ClientRegistrationSettings *PatchClientRegistrationSettings        `json:"clientRegistrationSettings,omitempty"`
	PostLogoutRedirectUris     *[]string                               `json:"postLogoutRedirectUris,omitempty"`
	RedirectUriStrictMatching  *bool                                   `json:"redirectUriStrictMatching,omitempty"`
	RequestUris                *[]string                               `json:"requestUris,omitempty"`
	RequiredPermissions        *[]PatchOIDCSettingsRequiredPermissions `json:"requiredPermissions,omitempty"`
	SecurityProfileSettings    *PatchSecurityProfileSettings           `json:"securityProfileSettings,omitempty"`
}

// PatchOIDCSettingsRequiredPermissions defines model for PatchOIDCSettings.RequiredPermissions.
type PatchOIDCSettingsRequiredPermissions string

// PatchOrganization defines model for PatchOrganization.
type PatchOrganization = map[string]interface{}

// PatchPasswordSettings defines model for PatchPasswordSettings.
type PatchPasswordSettings struct {
	ExcludePasswordsInDictionary     *bool  `json:"excludePasswordsInDictionary,omitempty"`
	ExcludeUserProfileInfoInPassword *bool  `json:"excludeUserProfileInfoInPassword,omitempty"`
	ExpiryDuration                   *int32 `json:"expiryDuration,omitempty"`
	IncludeNumbers                   *bool  `json:"includeNumbers,omitempty"`
	IncludeSpecialCharacters         *bool  `json:"includeSpecialCharacters,omitempty"`
	Inherited                        *bool  `json:"inherited,omitempty"`
	LettersInMixedCase               *bool  `json:"lettersInMixedCase,omitempty"`
	MaxConsecutiveLetters            *int32 `json:"maxConsecutiveLetters,omitempty"`
	MaxLength                        *int32 `json:"maxLength,omitempty"`
	MinLength                        *int32 `json:"minLength,omitempty"`
	OldPasswords                     *int32 `json:"oldPasswords,omitempty"`
	PasswordHistoryEnabled           *bool  `json:"passwordHistoryEnabled,omitempty"`
}

// PatchRememberDeviceSettings defines model for PatchRememberDeviceSettings.
type PatchRememberDeviceSettings struct {
	Active                *bool   `json:"active,omitempty"`
	DeviceIdentifierId    *string `json:"deviceIdentifierId,omitempty"`
	ExpirationTimeSeconds *int64  `json:"expirationTimeSeconds,omitempty"`
}

// PatchSAMLSettings defines model for PatchSAMLSettings.
type PatchSAMLSettings struct {
	Certificate         *string                                 `json:"certificate,omitempty"`
	Enabled             *bool                                   `json:"enabled,omitempty"`
	EntityId            *string                                 `json:"entityId,omitempty"`
	RequiredPermissions *[]PatchSAMLSettingsRequiredPermissions `json:"requiredPermissions,omitempty"`
}

// PatchSAMLSettingsRequiredPermissions defines model for PatchSAMLSettings.RequiredPermissions.
type PatchSAMLSettingsRequiredPermissions string

// PatchScope defines model for PatchScope.
type PatchScope struct {
	Description   *string `json:"description,omitempty"`
	Discovery     *bool   `json:"discovery,omitempty"`
	ExpiresIn     *int32  `json:"expiresIn,omitempty"`
	IconUri       *string `json:"iconUri,omitempty"`
	Name          *string `json:"name,omitempty"`
	Parameterized *bool   `json:"parameterized,omitempty"`
}

// PatchSecurityProfileSettings defines model for PatchSecurityProfileSettings.
type PatchSecurityProfileSettings struct {
	EnableFapiBrazil *bool `json:"enableFapiBrazil,omitempty"`
	EnablePlainFapi  *bool `json:"enablePlainFapi,omitempty"`
}

// PreviewRequest defines model for PreviewRequest.
type PreviewRequest struct {
	Content  *string            `json:"content,omitempty"`
	Template string             `json:"template"`
	Theme    *Theme             `json:"theme,omitempty"`
	Type     PreviewRequestType `json:"type"`
}

// PreviewRequestType defines model for PreviewRequest.Type.
type PreviewRequestType string

// PreviewResponse defines model for PreviewResponse.
type PreviewResponse struct {
	Content  *string              `json:"content,omitempty"`
	Template *string              `json:"template,omitempty"`
	Type     *PreviewResponseType `json:"type,omitempty"`
}

// PreviewResponseType defines model for PreviewResponse.Type.
type PreviewResponseType string

// RememberDeviceSettings defines model for RememberDeviceSettings.
type RememberDeviceSettings struct {
	Active                *bool   `json:"active,omitempty"`
	DeviceIdentifierId    *string `json:"deviceIdentifierId,omitempty"`
	ExpirationTimeSeconds *int64  `json:"expirationTimeSeconds,omitempty"`
}

// Reporter defines model for Reporter.
type Reporter struct {
	Configuration *string `json:"configuration,omitempty"`
	CreatedAt     *int64  `json:"createdAt,omitempty"`
	DataType      *string `json:"dataType,omitempty"`
	Domain        *string `json:"domain,omitempty"`
	Enabled       *bool   `json:"enabled,omitempty"`
	Id            *string `json:"id,omitempty"`
	Name          *string `json:"name,omitempty"`
	System        *bool   `json:"system,omitempty"`
	Type          *string `json:"type,omitempty"`
	UpdatedAt     *int64  `json:"updatedAt,omitempty"`
}

// ResetPasswordSettings defines model for ResetPasswordSettings.
type ResetPasswordSettings struct {
	OldPasswordRequired *bool  `json:"oldPasswordRequired,omitempty"`
	TokenAge            *int32 `json:"tokenAge,omitempty"`
}

// Resource defines model for Resource.
type Resource struct {
	ClientId       *string   `json:"clientId,omitempty"`
	CreatedAt      *int64    `json:"createdAt,omitempty"`
	Description    *string   `json:"description,omitempty"`
	Domain         *string   `json:"domain,omitempty"`
	IconUri        *string   `json:"iconUri,omitempty"`
	Id             *string   `json:"id,omitempty"`
	Name           *string   `json:"name,omitempty"`
	ResourceScopes *[]string `json:"resourceScopes,omitempty"`
	Type           *string   `json:"type,omitempty"`
	UpdatedAt      *int64    `json:"updatedAt,omitempty"`
	UserId         *string   `json:"userId,omitempty"`
}

// ResourceEntity defines model for ResourceEntity.
type ResourceEntity struct {
	ClientId        *string   `json:"clientId,omitempty"`
	CreatedAt       *int64    `json:"createdAt,omitempty"`
	Description     *string   `json:"description,omitempty"`
	Domain          *string   `json:"domain,omitempty"`
	IconUri         *string   `json:"iconUri,omitempty"`
	Id              *string   `json:"id,omitempty"`
	Name            *string   `json:"name,omitempty"`
	Policies        *int64    `json:"policies,omitempty"`
	ResourceScopes  *[]string `json:"resourceScopes,omitempty"`
	Type            *string   `json:"type,omitempty"`
	UpdatedAt       *int64    `json:"updatedAt,omitempty"`
	UserDisplayName *string   `json:"userDisplayName,omitempty"`
	UserId          *string   `json:"userId,omitempty"`
}

// ResourceListItem defines model for ResourceListItem.
type ResourceListItem struct {
	Metadata  *map[string]map[string]map[string]interface{} `json:"metadata,omitempty"`
	Resources *[]ResourceEntity                             `json:"resources,omitempty"`
}

// RiskAssessmentSettings defines model for RiskAssessmentSettings.
type RiskAssessmentSettings struct {
	DeviceAssessment       *AssessmentSettings `json:"deviceAssessment,omitempty"`
	Enabled                *bool               `json:"enabled,omitempty"`
	GeoVelocityAssessment  *AssessmentSettings `json:"geoVelocityAssessment,omitempty"`
	IpReputationAssessment *AssessmentSettings `json:"ipReputationAssessment,omitempty"`
}

// Role defines model for Role.
type Role struct {
	AssignableType *RoleAssignableType              `json:"assignableType,omitempty"`
	CreatedAt      *int64                           `json:"createdAt,omitempty"`
	DefaultRole    *bool                            `json:"defaultRole,omitempty"`
	Description    *string                          `json:"description,omitempty"`
	Id             *string                          `json:"id,omitempty"`
	InternalOnly   *bool                            `json:"internalOnly,omitempty"`
	Name           *string                          `json:"name,omitempty"`
	OauthScopes    *[]string                        `json:"oauthScopes,omitempty"`
	PermissionAcls *map[string][]RolePermissionAcls `json:"permissionAcls,omitempty"`
	ReferenceId    *string                          `json:"referenceId,omitempty"`
	ReferenceType  *RoleReferenceType               `json:"referenceType,omitempty"`
	System         *bool                            `json:"system,omitempty"`
	UpdatedAt      *int64                           `json:"updatedAt,omitempty"`
}

// RoleAssignableType defines model for Role.AssignableType.
type RoleAssignableType string

// RolePermissionAcls defines model for Role.PermissionAcls.
type RolePermissionAcls string

// RoleReferenceType defines model for Role.ReferenceType.
type RoleReferenceType string

// RoleEntity defines model for RoleEntity.
type RoleEntity struct {
	AssignableType       *string                  `json:"assignableType,omitempty"`
	AvailablePermissions *[]string                `json:"availablePermissions,omitempty"`
	CreatedAt            *int64                   `json:"createdAt,omitempty"`
	DefaultRole          *bool                    `json:"defaultRole,omitempty"`
	Description          *string                  `json:"description,omitempty"`
	Id                   *string                  `json:"id,omitempty"`
	Name                 *string                  `json:"name,omitempty"`
	Permissions          *[]string                `json:"permissions,omitempty"`
	ReferenceId          *string                  `json:"referenceId,omitempty"`
	ReferenceType        *RoleEntityReferenceType `json:"referenceType,omitempty"`
	System               *bool                    `json:"system,omitempty"`
	UpdatedAt            *int64                   `json:"updatedAt,omitempty"`
}

// RoleEntityReferenceType defines model for RoleEntity.ReferenceType.
type RoleEntityReferenceType string

// RolePage defines model for RolePage.
type RolePage struct {
	CurrentPage *int32  `json:"currentPage,omitempty"`
	Data        *[]Role `json:"data,omitempty"`
	TotalCount  *int64  `json:"totalCount,omitempty"`
}

// SAMLSettings defines model for SAMLSettings.
type SAMLSettings struct {
	Certificate *string `json:"certificate,omitempty"`
	Enabled     *bool   `json:"enabled,omitempty"`
	EntityId    *string `json:"entityId,omitempty"`
}

// SCIMSettings defines model for SCIMSettings.
type SCIMSettings struct {
	Enabled             *bool   `json:"enabled,omitempty"`
	IdpSelectionEnabled *bool   `json:"idpSelectionEnabled,omitempty"`
	IdpSelectionRule    *string `json:"idpSelectionRule,omitempty"`
}

// Scope defines model for Scope.
type Scope struct {
	Claims        *[]string `json:"claims,omitempty"`
	CreatedAt     *int64    `json:"createdAt,omitempty"`
	Description   *string   `json:"description,omitempty"`
	Discovery     *bool     `json:"discovery,omitempty"`
	Domain        *string   `json:"domain,omitempty"`
	ExpiresIn     *int32    `json:"expiresIn,omitempty"`
	IconUri       *string   `json:"iconUri,omitempty"`
	Id            *string   `json:"id,omitempty"`
	Key           *string   `json:"key,omitempty"`
	Name          *string   `json:"name,omitempty"`
	Parameterized *bool     `json:"parameterized,omitempty"`
	System        *bool     `json:"system,omitempty"`
	UpdatedAt     *int64    `json:"updatedAt,omitempty"`
}

// ScopeApprovalEntity defines model for ScopeApprovalEntity.
type ScopeApprovalEntity struct {
	ClientEntity  *ApplicationEntity         `json:"clientEntity,omitempty"`
	ClientId      *string                    `json:"clientId,omitempty"`
	CreatedAt     *int64                     `json:"createdAt,omitempty"`
	Domain        *string                    `json:"domain,omitempty"`
	ExpiresAt     *int64                     `json:"expiresAt,omitempty"`
	Id            *string                    `json:"id,omitempty"`
	Scope         *string                    `json:"scope,omitempty"`
	ScopeEntity   *ScopeEntity               `json:"scopeEntity,omitempty"`
	Status        *ScopeApprovalEntityStatus `json:"status,omitempty"`
	TransactionId *string                    `json:"transactionId,omitempty"`
	UpdatedAt     *int64                     `json:"updatedAt,omitempty"`
	UserId        *string                    `json:"userId,omitempty"`
}

// ScopeApprovalEntityStatus defines model for ScopeApprovalEntity.Status.
type ScopeApprovalEntityStatus string

// ScopeEntity defines model for ScopeEntity.
type ScopeEntity struct {
	Description *string `json:"description,omitempty"`
	Id          *string `json:"id,omitempty"`
	Key         *string `json:"key,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// ScopePage defines model for ScopePage.
type ScopePage struct {
	CurrentPage *int32   `json:"currentPage,omitempty"`
	Data        *[]Scope `json:"data,omitempty"`
	TotalCount  *int64   `json:"totalCount,omitempty"`
}

// SecurityProfileSettings defines model for SecurityProfileSettings.
type SecurityProfileSettings struct {
	EnableFapiBrazil *bool `json:"enableFapiBrazil,omitempty"`
	EnablePlainFapi  *bool `json:"enablePlainFapi,omitempty"`
}

// SelfServiceAccountManagementSettings defines model for SelfServiceAccountManagementSettings.
type SelfServiceAccountManagementSettings struct {
	Enabled       *bool                  `json:"enabled,omitempty"`
	ResetPassword *ResetPasswordSettings `json:"resetPassword,omitempty"`
}

// ServiceResource defines model for ServiceResource.
type ServiceResource struct {
	Configuration *string                       `json:"configuration,omitempty"`
	CreatedAt     *int64                        `json:"createdAt,omitempty"`
	Id            *string                       `json:"id,omitempty"`
	Name          *string                       `json:"name,omitempty"`
	ReferenceId   *string                       `json:"referenceId,omitempty"`
	ReferenceType *ServiceResourceReferenceType `json:"referenceType,omitempty"`
	Type          *string                       `json:"type,omitempty"`
	UpdatedAt     *int64                        `json:"updatedAt,omitempty"`
}

// ServiceResourceReferenceType defines model for ServiceResource.ReferenceType.
type ServiceResourceReferenceType string

// SessionSettings defines model for SessionSettings.
type SessionSettings struct {
	Persistent *bool `json:"persistent,omitempty"`
}

// StatusEntity defines model for StatusEntity.
type StatusEntity struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// Step defines model for Step.
type Step struct {
	Condition     *string `json:"condition,omitempty"`
	Configuration *string `json:"configuration,omitempty"`
	Description   *string `json:"description,omitempty"`
	Enabled       *bool   `json:"enabled,omitempty"`
	Name          *string `json:"name,omitempty"`
	Policy        *string `json:"policy,omitempty"`
}

// Tag defines model for Tag.
type Tag struct {
	CreatedAt      *int64  `json:"createdAt,omitempty"`
	Description    *string `json:"description,omitempty"`
	Id             *string `json:"id,omitempty"`
	Name           *string `json:"name,omitempty"`
	OrganizationId *string `json:"organizationId,omitempty"`
	UpdatedAt      *int64  `json:"updatedAt,omitempty"`
}

// Theme defines model for Theme.
type Theme struct {
	CreatedAt               *int64              `json:"createdAt,omitempty"`
	Css                     *string             `json:"css,omitempty"`
	FaviconUrl              *string             `json:"faviconUrl,omitempty"`
	Id                      *string             `json:"id,omitempty"`
	LogoUrl                 *string             `json:"logoUrl,omitempty"`
	LogoWidth               *int32              `json:"logoWidth,omitempty"`
	PrimaryButtonColorHex   *string             `json:"primaryButtonColorHex,omitempty"`
	PrimaryTextColorHex     *string             `json:"primaryTextColorHex,omitempty"`
	ReferenceId             *string             `json:"referenceId,omitempty"`
	ReferenceType           *ThemeReferenceType `json:"referenceType,omitempty"`
	SecondaryButtonColorHex *string             `json:"secondaryButtonColorHex,omitempty"`
	SecondaryTextColorHex   *string             `json:"secondaryTextColorHex,omitempty"`
	UpdatedAt               *int64              `json:"updatedAt,omitempty"`
}

// ThemeReferenceType defines model for Theme.ReferenceType.
type ThemeReferenceType string

// ThemeEntity defines model for ThemeEntity.
type ThemeEntity struct {
	CreatedAt               *int64                    `json:"createdAt,omitempty"`
	Css                     *string                   `json:"css,omitempty"`
	FaviconUrl              *string                   `json:"faviconUrl,omitempty"`
	Id                      *string                   `json:"id,omitempty"`
	LogoUrl                 *string                   `json:"logoUrl,omitempty"`
	LogoWidth               *int32                    `json:"logoWidth,omitempty"`
	PrimaryButtonColorHex   *string                   `json:"primaryButtonColorHex,omitempty"`
	PrimaryTextColorHex     *string                   `json:"primaryTextColorHex,omitempty"`
	ReferenceId             *string                   `json:"referenceId,omitempty"`
	ReferenceType           *ThemeEntityReferenceType `json:"referenceType,omitempty"`
	SecondaryButtonColorHex *string                   `json:"secondaryButtonColorHex,omitempty"`
	SecondaryTextColorHex   *string                   `json:"secondaryTextColorHex,omitempty"`
	UpdatedAt               *int64                    `json:"updatedAt,omitempty"`
}

// ThemeEntityReferenceType defines model for ThemeEntity.ReferenceType.
type ThemeEntityReferenceType string

// TokenClaim defines model for TokenClaim.
type TokenClaim struct {
	ClaimName  *string              `json:"claimName,omitempty"`
	ClaimValue *string              `json:"claimValue,omitempty"`
	TokenType  *TokenClaimTokenType `json:"tokenType,omitempty"`
}

// TokenClaimTokenType defines model for TokenClaim.TokenType.
type TokenClaimTokenType string

// UMASettings defines model for UMASettings.
type UMASettings struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// UpdateAuthenticationDeviceNotifier defines model for UpdateAuthenticationDeviceNotifier.
type UpdateAuthenticationDeviceNotifier struct {
	Configuration string `json:"configuration"`
	Name          string `json:"name"`
}

// UpdateBotDetection defines model for UpdateBotDetection.
type UpdateBotDetection struct {
	Configuration string `json:"configuration"`
	Name          string `json:"name"`
}

// UpdateCertificate defines model for UpdateCertificate.
type UpdateCertificate struct {
	Configuration string `json:"configuration"`
	Name          string `json:"name"`
}

// UpdateDeviceIdentifier defines model for UpdateDeviceIdentifier.
type UpdateDeviceIdentifier struct {
	Configuration string `json:"configuration"`
	Name          string `json:"name"`
}

// UpdateEmail defines model for UpdateEmail.
type UpdateEmail struct {
	Content      *string `json:"content,omitempty"`
	Enabled      *bool   `json:"enabled,omitempty"`
	ExpiresAfter *int32  `json:"expiresAfter,omitempty"`
	From         *string `json:"from,omitempty"`
	FromName     *string `json:"fromName,omitempty"`
	Subject      *string `json:"subject,omitempty"`
}

// UpdateEntrypoint defines model for UpdateEntrypoint.
type UpdateEntrypoint struct {
	Description *string  `json:"description,omitempty"`
	Name        string   `json:"name"`
	Tags        []string `json:"tags"`
	Url         string   `json:"url"`
}

// UpdateExtensionGrant defines model for UpdateExtensionGrant.
type UpdateExtensionGrant struct {
	Configuration    string  `json:"configuration"`
	CreateUser       *bool   `json:"createUser,omitempty"`
	GrantType        *string `json:"grantType,omitempty"`
	IdentityProvider *string `json:"identityProvider,omitempty"`
	Name             string  `json:"name"`
	UserExists       *bool   `json:"userExists,omitempty"`
}

// UpdateFactor defines model for UpdateFactor.
type UpdateFactor struct {
	Configuration string `json:"configuration"`
	Name          string `json:"name"`
}

// UpdateForm defines model for UpdateForm.
type UpdateForm struct {
	Assets  *string `json:"assets,omitempty"`
	Content *string `json:"content,omitempty"`
	Enabled *bool   `json:"enabled,omitempty"`
}

// UpdateGroup defines model for UpdateGroup.
type UpdateGroup struct {
	Description *string   `json:"description,omitempty"`
	Members     *[]string `json:"members,omitempty"`
	Name        string    `json:"name"`
	Roles       *[]string `json:"roles,omitempty"`
}

// UpdateI18nDictionary defines model for UpdateI18nDictionary.
type UpdateI18nDictionary struct {
	Entries *map[string]string `json:"entries,omitempty"`
	Locale  *string            `json:"locale,omitempty"`
	Name    *string            `json:"name,omitempty"`
}

// UpdateIdentityProvider defines model for UpdateIdentityProvider.
type UpdateIdentityProvider struct {
	Configuration   string               `json:"configuration"`
	DomainWhitelist *[]string            `json:"domainWhitelist,omitempty"`
	Mappers         *map[string]string   `json:"mappers,omitempty"`
	Name            string               `json:"name"`
	RoleMapper      *map[string][]string `json:"roleMapper,omitempty"`
}

// UpdateReporter defines model for UpdateReporter.
type UpdateReporter struct {
	Configuration string `json:"configuration"`
	Enabled       *bool  `json:"enabled,omitempty"`
	Name          string `json:"name"`
}

// UpdateRole defines model for UpdateRole.
type UpdateRole struct {
	Description *string   `json:"description,omitempty"`
	Name        string    `json:"name"`
	OauthScopes *[]string `json:"oauthScopes,omitempty"`
	Permissions *[]string `json:"permissions,omitempty"`
}

// UpdateScope defines model for UpdateScope.
type UpdateScope struct {
	Description   string  `json:"description"`
	Discovery     *bool   `json:"discovery,omitempty"`
	ExpiresIn     *int32  `json:"expiresIn,omitempty"`
	IconUri       *string `json:"iconUri,omitempty"`
	Name          string  `json:"name"`
	Parameterized *bool   `json:"parameterized,omitempty"`
}

// UpdateServiceResource defines model for UpdateServiceResource.
type UpdateServiceResource struct {
	Configuration string `json:"configuration"`
	Name          string `json:"name"`
}

// UpdateTag defines model for UpdateTag.
type UpdateTag struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
}

// UpdateUser defines model for UpdateUser.
type UpdateUser struct {
	AccountNonExpired     *bool                              `json:"accountNonExpired,omitempty"`
	AccountNonLocked      *bool                              `json:"accountNonLocked,omitempty"`
	AdditionalInformation *map[string]map[string]interface{} `json:"additionalInformation,omitempty"`
	Client                *string                            `json:"client,omitempty"`
	CreatedAt             *int64                             `json:"createdAt,omitempty"`
	CredentialsNonExpired *bool                              `json:"credentialsNonExpired,omitempty"`
	DisplayName           *string                            `json:"displayName,omitempty"`
	Email                 *string                            `json:"email,omitempty"`
	Enabled               *bool                              `json:"enabled,omitempty"`
	ExternalId            *string                            `json:"externalId,omitempty"`
	FirstName             *string                            `json:"firstName,omitempty"`
	LastName              *string                            `json:"lastName,omitempty"`
	LoggedAt              *int64                             `json:"loggedAt,omitempty"`
	LoginsCount           *int64                             `json:"loginsCount,omitempty"`
	PreRegistration       *bool                              `json:"preRegistration,omitempty"`
	PreferredLanguage     *string                            `json:"preferredLanguage,omitempty"`
	RegistrationCompleted *bool                              `json:"registrationCompleted,omitempty"`
	Source                *string                            `json:"source,omitempty"`
	UpdatedAt             *int64                             `json:"updatedAt,omitempty"`
}

// User defines model for User.
type User struct {
	AccountLockedAt          *int64                             `json:"accountLockedAt,omitempty"`
	AccountLockedUntil       *int64                             `json:"accountLockedUntil,omitempty"`
	AccountNonExpired        *bool                              `json:"accountNonExpired,omitempty"`
	AccountNonLocked         *bool                              `json:"accountNonLocked,omitempty"`
	AdditionalInformation    *map[string]map[string]interface{} `json:"additionalInformation,omitempty"`
	Address                  *map[string]map[string]interface{} `json:"address,omitempty"`
	Addresses                *[]Address                         `json:"addresses,omitempty"`
	Birthdate                *string                            `json:"birthdate,omitempty"`
	Client                   *string                            `json:"client,omitempty"`
	CreatedAt                *int64                             `json:"createdAt,omitempty"`
	CredentialsNonExpired    *bool                              `json:"credentialsNonExpired,omitempty"`
	DisplayName              *string                            `json:"displayName,omitempty"`
	DynamicRoles             *[]string                          `json:"dynamicRoles,omitempty"`
	Email                    *string                            `json:"email,omitempty"`
	Emails                   *[]Attribute                       `json:"emails,omitempty"`
	Enabled                  *bool                              `json:"enabled,omitempty"`
	Entitlements             *[]string                          `json:"entitlements,omitempty"`
	ExternalId               *string                            `json:"externalId,omitempty"`
	Factors                  *[]EnrolledFactor                  `json:"factors,omitempty"`
	FirstName                *string                            `json:"firstName,omitempty"`
	Groups                   *[]string                          `json:"groups,omitempty"`
	Id                       *string                            `json:"id,omitempty"`
	Ims                      *[]Attribute                       `json:"ims,omitempty"`
	Inactive                 *bool                              `json:"inactive,omitempty"`
	Internal                 *bool                              `json:"internal,omitempty"`
	LastLoginWithCredentials *int64                             `json:"lastLoginWithCredentials,omitempty"`
	LastLogoutAt             *int64                             `json:"lastLogoutAt,omitempty"`
	LastName                 *string                            `json:"lastName,omitempty"`
	LastPasswordReset        *int64                             `json:"lastPasswordReset,omitempty"`
	LastUsernameReset        *int64                             `json:"lastUsernameReset,omitempty"`
	Locale                   *string                            `json:"locale,omitempty"`
	LoggedAt                 *int64                             `json:"loggedAt,omitempty"`
	LoginsCount              *int64                             `json:"loginsCount,omitempty"`
	MfaEnrollmentSkippedAt   *int64                             `json:"mfaEnrollmentSkippedAt,omitempty"`
	MiddleName               *string                            `json:"middleName,omitempty"`
	Newsletter               *bool                              `json:"newsletter,omitempty"`
	NickName                 *string                            `json:"nickName,omitempty"`
	Password                 *string                            `json:"password,omitempty"`
	PhoneNumber              *string                            `json:"phoneNumber,omitempty"`
	PhoneNumbers             *[]Attribute                       `json:"phoneNumbers,omitempty"`
	Photos                   *[]Attribute                       `json:"photos,omitempty"`
	Picture                  *string                            `json:"picture,omitempty"`
	PreRegistration          *bool                              `json:"preRegistration,omitempty"`
	PreferredLanguage        *string                            `json:"preferredLanguage,omitempty"`
	Profile                  *string                            `json:"profile,omitempty"`
	ReferenceId              *string                            `json:"referenceId,omitempty"`
	ReferenceType            *UserReferenceType                 `json:"referenceType,omitempty"`
	RegistrationAccessToken  *string                            `json:"registrationAccessToken,omitempty"`
	RegistrationCompleted    *bool                              `json:"registrationCompleted,omitempty"`
	RegistrationUserUri      *string                            `json:"registrationUserUri,omitempty"`
	Roles                    *[]string                          `json:"roles,omitempty"`
	RolesPermissions         *[]Role                            `json:"rolesPermissions,omitempty"`
	Source                   *string                            `json:"source,omitempty"`
	Title                    *string                            `json:"title,omitempty"`
	Type                     *string                            `json:"type,omitempty"`
	UpdatedAt                *int64                             `json:"updatedAt,omitempty"`
	Username                 *string                            `json:"username,omitempty"`
	Website                  *string                            `json:"website,omitempty"`
	X509Certificates         *[]Certificate                     `json:"x509Certificates,omitempty"`
	ZoneInfo                 *string                            `json:"zoneInfo,omitempty"`
}

// UserReferenceType defines model for User.ReferenceType.
type UserReferenceType string

// UserEntity defines model for UserEntity.
type UserEntity struct {
	AccountLockedAt          *int64                             `json:"accountLockedAt,omitempty"`
	AccountLockedUntil       *int64                             `json:"accountLockedUntil,omitempty"`
	AccountNonExpired        *bool                              `json:"accountNonExpired,omitempty"`
	AccountNonLocked         *bool                              `json:"accountNonLocked,omitempty"`
	AdditionalInformation    *map[string]map[string]interface{} `json:"additionalInformation,omitempty"`
	Address                  *map[string]map[string]interface{} `json:"address,omitempty"`
	Addresses                *[]Address                         `json:"addresses,omitempty"`
	ApplicationEntity        *ApplicationEntity                 `json:"applicationEntity,omitempty"`
	Birthdate                *string                            `json:"birthdate,omitempty"`
	Client                   *string                            `json:"client,omitempty"`
	CreatedAt                *int64                             `json:"createdAt,omitempty"`
	CredentialsNonExpired    *bool                              `json:"credentialsNonExpired,omitempty"`
	DisplayName              *string                            `json:"displayName,omitempty"`
	DynamicRoles             *[]string                          `json:"dynamicRoles,omitempty"`
	Email                    *string                            `json:"email,omitempty"`
	Emails                   *[]Attribute                       `json:"emails,omitempty"`
	Enabled                  *bool                              `json:"enabled,omitempty"`
	Entitlements             *[]string                          `json:"entitlements,omitempty"`
	ExternalId               *string                            `json:"externalId,omitempty"`
	Factors                  *[]EnrolledFactor                  `json:"factors,omitempty"`
	FirstName                *string                            `json:"firstName,omitempty"`
	Groups                   *[]string                          `json:"groups,omitempty"`
	Id                       *string                            `json:"id,omitempty"`
	Ims                      *[]Attribute                       `json:"ims,omitempty"`
	Inactive                 *bool                              `json:"inactive,omitempty"`
	Internal                 *bool                              `json:"internal,omitempty"`
	LastLoginWithCredentials *int64                             `json:"lastLoginWithCredentials,omitempty"`
	LastLogoutAt             *int64                             `json:"lastLogoutAt,omitempty"`
	LastName                 *string                            `json:"lastName,omitempty"`
	LastPasswordReset        *int64                             `json:"lastPasswordReset,omitempty"`
	LastUsernameReset        *int64                             `json:"lastUsernameReset,omitempty"`
	Locale                   *string                            `json:"locale,omitempty"`
	LoggedAt                 *int64                             `json:"loggedAt,omitempty"`
	LoginsCount              *int64                             `json:"loginsCount,omitempty"`
	MfaEnrollmentSkippedAt   *int64                             `json:"mfaEnrollmentSkippedAt,omitempty"`
	MiddleName               *string                            `json:"middleName,omitempty"`
	Newsletter               *bool                              `json:"newsletter,omitempty"`
	NickName                 *string                            `json:"nickName,omitempty"`
	Password                 *string                            `json:"password,omitempty"`
	PhoneNumber              *string                            `json:"phoneNumber,omitempty"`
	PhoneNumbers             *[]Attribute                       `json:"phoneNumbers,omitempty"`
	Photos                   *[]Attribute                       `json:"photos,omitempty"`
	Picture                  *string                            `json:"picture,omitempty"`
	PreRegistration          *bool                              `json:"preRegistration,omitempty"`
	PreferredLanguage        *string                            `json:"preferredLanguage,omitempty"`
	Profile                  *string                            `json:"profile,omitempty"`
	ReferenceId              *string                            `json:"referenceId,omitempty"`
	ReferenceType            *UserEntityReferenceType           `json:"referenceType,omitempty"`
	RegistrationAccessToken  *string                            `json:"registrationAccessToken,omitempty"`
	RegistrationCompleted    *bool                              `json:"registrationCompleted,omitempty"`
	RegistrationUserUri      *string                            `json:"registrationUserUri,omitempty"`
	Roles                    *[]string                          `json:"roles,omitempty"`
	RolesPermissions         *[]Role                            `json:"rolesPermissions,omitempty"`
	Source                   *string                            `json:"source,omitempty"`
	SourceId                 *string                            `json:"sourceId,omitempty"`
	Title                    *string                            `json:"title,omitempty"`
	Type                     *string                            `json:"type,omitempty"`
	UpdatedAt                *int64                             `json:"updatedAt,omitempty"`
	Username                 *string                            `json:"username,omitempty"`
	Website                  *string                            `json:"website,omitempty"`
	X509Certificates         *[]Certificate                     `json:"x509Certificates,omitempty"`
	ZoneInfo                 *string                            `json:"zoneInfo,omitempty"`
}

// UserEntityReferenceType defines model for UserEntity.ReferenceType.
type UserEntityReferenceType string

// UserNotificationContent defines model for UserNotificationContent.
type UserNotificationContent struct {
	CreatedAt *int64                         `json:"createdAt,omitempty"`
	Id        *string                        `json:"id,omitempty"`
	Message   *string                        `json:"message,omitempty"`
	Status    *UserNotificationContentStatus `json:"status,omitempty"`
	Title     *string                        `json:"title,omitempty"`
}

// UserNotificationContentStatus defines model for UserNotificationContent.Status.
type UserNotificationContentStatus string

// UserPage defines model for UserPage.
type UserPage struct {
	CurrentPage *int32  `json:"currentPage,omitempty"`
	Data        *[]User `json:"data,omitempty"`
	TotalCount  *int64  `json:"totalCount,omitempty"`
}

// UsernameEntity defines model for UsernameEntity.
type UsernameEntity struct {
	Username *string `json:"username,omitempty"`
}

// VirtualHost defines model for VirtualHost.
type VirtualHost struct {
	Host               *string `json:"host,omitempty"`
	OverrideEntrypoint *bool   `json:"overrideEntrypoint,omitempty"`
	Path               *string `json:"path,omitempty"`
}

// WebAuthnSettings defines model for WebAuthnSettings.
type WebAuthnSettings struct {
	AttestationConveyancePreference     *WebAuthnSettingsAttestationConveyancePreference `json:"attestationConveyancePreference,omitempty"`
	AuthenticatorAttachment             *WebAuthnSettingsAuthenticatorAttachment         `json:"authenticatorAttachment,omitempty"`
	Certificates                        *map[string]map[string]interface{}               `json:"certificates,omitempty"`
	EnforceAuthenticatorIntegrity       *bool                                            `json:"enforceAuthenticatorIntegrity,omitempty"`
	EnforceAuthenticatorIntegrityMaxAge *int32                                           `json:"enforceAuthenticatorIntegrityMaxAge,omitempty"`
	ForceRegistration                   *bool                                            `json:"forceRegistration,omitempty"`
	Origin                              *string                                          `json:"origin,omitempty"`
	RelyingPartyId                      *string                                          `json:"relyingPartyId,omitempty"`
	RelyingPartyName                    *string                                          `json:"relyingPartyName,omitempty"`
	RequireResidentKey                  *bool                                            `json:"requireResidentKey,omitempty"`
	UserVerification                    *WebAuthnSettingsUserVerification                `json:"userVerification,omitempty"`
}

// WebAuthnSettingsAttestationConveyancePreference defines model for WebAuthnSettings.AttestationConveyancePreference.
type WebAuthnSettingsAttestationConveyancePreference string

// WebAuthnSettingsAuthenticatorAttachment defines model for WebAuthnSettings.AuthenticatorAttachment.
type WebAuthnSettingsAuthenticatorAttachment string

// WebAuthnSettingsUserVerification defines model for WebAuthnSettings.UserVerification.
type WebAuthnSettingsUserVerification string

// ListParams defines parameters for List.
type ListParams struct {
	Type   *string `form:"type,omitempty" json:"type,omitempty"`
	Status *string `form:"status,omitempty" json:"status,omitempty"`
	User   *string `form:"user,omitempty" json:"user,omitempty"`
	From   *int64  `form:"from,omitempty" json:"from,omitempty"`
	To     *int64  `form:"to,omitempty" json:"to,omitempty"`
	Size   *int32  `form:"size,omitempty" json:"size,omitempty"`
	Page   *int32  `form:"page,omitempty" json:"page,omitempty"`
}

// ListDomainsParams defines parameters for ListDomains.
type ListDomainsParams struct {
	Page *int32  `form:"page,omitempty" json:"page,omitempty"`
	Size *int32  `form:"size,omitempty" json:"size,omitempty"`
	Q    *string `form:"q,omitempty" json:"q,omitempty"`
}

// List19JSONBody defines parameters for List19.
type List19JSONBody = []PatchAlertTrigger

// Get21Params defines parameters for Get21.
type Get21Params struct {
	// From Used to define the start date of the time window to query
	From *int64 `form:"from,omitempty" json:"from,omitempty"`

	// To Used to define the end date of the time window to query
	To *int64 `form:"to,omitempty" json:"to,omitempty"`

	// Interval The time interval when getting histogram data
	Interval *int64 `form:"interval,omitempty" json:"interval,omitempty"`

	// Size The number of data to retrieve
	Size *int32 `form:"size,omitempty" json:"size,omitempty"`

	// Type The type of data to retrieve
	Type  Get21ParamsType `form:"type" json:"type"`
	Field *string         `form:"field,omitempty" json:"field,omitempty"`
}

// Get21ParamsType defines parameters for Get21.
type Get21ParamsType string

// ListApplicationsParams defines parameters for ListApplications.
type ListApplicationsParams struct {
	Page *int32  `form:"page,omitempty" json:"page,omitempty"`
	Size *int32  `form:"size,omitempty" json:"size,omitempty"`
	Q    *string `form:"q,omitempty" json:"q,omitempty"`
}

// Get14Params defines parameters for Get14.
type Get14Params struct {
	// From Used to define the start date of the time window to query
	From *int64 `form:"from,omitempty" json:"from,omitempty"`

	// To Used to define the end date of the time window to query
	To *int64 `form:"to,omitempty" json:"to,omitempty"`

	// Interval The time interval when getting histogram data
	Interval *int64 `form:"interval,omitempty" json:"interval,omitempty"`

	// Size The number of data to retrieve
	Size *int32 `form:"size,omitempty" json:"size,omitempty"`

	// Type The type of data to retrieve
	Type  Get14ParamsType `form:"type" json:"type"`
	Field *string         `form:"field,omitempty" json:"field,omitempty"`
}

// Get14ParamsType defines parameters for Get14.
type Get14ParamsType string

// Get13Params defines parameters for Get13.
type Get13Params struct {
	Template Get13ParamsTemplate `form:"template" json:"template"`
}

// Get13ParamsTemplate defines parameters for Get13.
type Get13ParamsTemplate string

// DefineAppFlowsJSONBody defines parameters for DefineAppFlows.
type DefineAppFlowsJSONBody = []Flow

// Get12Params defines parameters for Get12.
type Get12Params struct {
	Template Get12ParamsTemplate `form:"template" json:"template"`
}

// Get12ParamsTemplate defines parameters for Get12.
type Get12ParamsTemplate string

// List15Params defines parameters for List15.
type List15Params struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`
	Size *int32 `form:"size,omitempty" json:"size,omitempty"`
}

// List7Params defines parameters for List7.
type List7Params struct {
	Type   *string `form:"type,omitempty" json:"type,omitempty"`
	Status *string `form:"status,omitempty" json:"status,omitempty"`
	User   *string `form:"user,omitempty" json:"user,omitempty"`
	From   *int64  `form:"from,omitempty" json:"from,omitempty"`
	To     *int64  `form:"to,omitempty" json:"to,omitempty"`
	Size   *int32  `form:"size,omitempty" json:"size,omitempty"`
	Page   *int32  `form:"page,omitempty" json:"page,omitempty"`
}

// ListCertificatesParams defines parameters for ListCertificates.
type ListCertificatesParams struct {
	Use *string `form:"use,omitempty" json:"use,omitempty"`
}

// Get19Params defines parameters for Get19.
type Get19Params struct {
	Template Get19ParamsTemplate `form:"template" json:"template"`
}

// Get19ParamsTemplate defines parameters for Get19.
type Get19ParamsTemplate string

// DefineDomainFlowsJSONBody defines parameters for DefineDomainFlows.
type DefineDomainFlowsJSONBody = []Flow

// Get18Params defines parameters for Get18.
type Get18Params struct {
	Template Get18ParamsTemplate `form:"template" json:"template"`
}

// Get18ParamsTemplate defines parameters for Get18.
type Get18ParamsTemplate string

// ListGroupsParams defines parameters for ListGroups.
type ListGroupsParams struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`
	Size *int32 `form:"size,omitempty" json:"size,omitempty"`
}

// GetGroupMembersParams defines parameters for GetGroupMembers.
type GetGroupMembersParams struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`
	Size *int32 `form:"size,omitempty" json:"size,omitempty"`
}

// AssignRolesJSONBody defines parameters for AssignRoles.
type AssignRolesJSONBody = []string

// ListIdentityProvidersParams defines parameters for ListIdentityProviders.
type ListIdentityProvidersParams struct {
	UserProvider *bool `form:"userProvider,omitempty" json:"userProvider,omitempty"`
}

// List18Params defines parameters for List18.
type List18Params struct {
	UserProvider *bool `form:"userProvider,omitempty" json:"userProvider,omitempty"`
}

// FindRolesParams defines parameters for FindRoles.
type FindRolesParams struct {
	Page *int32  `form:"page,omitempty" json:"page,omitempty"`
	Size *int32  `form:"size,omitempty" json:"size,omitempty"`
	Q    *string `form:"q,omitempty" json:"q,omitempty"`
}

// ListScopesParams defines parameters for ListScopes.
type ListScopesParams struct {
	Page *int32  `form:"page,omitempty" json:"page,omitempty"`
	Size *int32  `form:"size,omitempty" json:"size,omitempty"`
	Q    *string `form:"q,omitempty" json:"q,omitempty"`
}

// ListUsersParams defines parameters for ListUsers.
type ListUsersParams struct {
	Q      *string `form:"q,omitempty" json:"q,omitempty"`
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`
	Page   *int32  `form:"page,omitempty" json:"page,omitempty"`
	Size   *int32  `form:"size,omitempty" json:"size,omitempty"`
}

// List14Params defines parameters for List14.
type List14Params struct {
	Type   *string `form:"type,omitempty" json:"type,omitempty"`
	Status *string `form:"status,omitempty" json:"status,omitempty"`
	From   *int64  `form:"from,omitempty" json:"from,omitempty"`
	To     *int64  `form:"to,omitempty" json:"to,omitempty"`
	Size   *int32  `form:"size,omitempty" json:"size,omitempty"`
	Page   *int32  `form:"page,omitempty" json:"page,omitempty"`
}

// Delete5Params defines parameters for Delete5.
type Delete5Params struct {
	ClientId *string `form:"clientId,omitempty" json:"clientId,omitempty"`
}

// List10Params defines parameters for List10.
type List10Params struct {
	ClientId *string `form:"clientId,omitempty" json:"clientId,omitempty"`
}

// List11Params defines parameters for List11.
type List11Params struct {
	Dynamic *bool `form:"dynamic,omitempty" json:"dynamic,omitempty"`
}

// AssignJSONBody defines parameters for Assign.
type AssignJSONBody = []string

// Get7Params defines parameters for Get7.
type Get7Params struct {
	Template Get7ParamsTemplate `form:"template" json:"template"`
}

// Get7ParamsTemplate defines parameters for Get7.
type Get7ParamsTemplate string

// List3Params defines parameters for List3.
type List3Params struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`
	Size *int32 `form:"size,omitempty" json:"size,omitempty"`
}

// List4Params defines parameters for List4.
type List4Params struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`
	Size *int32 `form:"size,omitempty" json:"size,omitempty"`
}

// List5Params defines parameters for List5.
type List5Params struct {
	UserProvider *bool `form:"userProvider,omitempty" json:"userProvider,omitempty"`
}

// List2Params defines parameters for List2.
type List2Params struct {
	Type *List2ParamsType `form:"type,omitempty" json:"type,omitempty"`
}

// List2ParamsType defines parameters for List2.
type List2ParamsType string

// ListOrganisationUsersParams defines parameters for ListOrganisationUsers.
type ListOrganisationUsersParams struct {
	Q      *string `form:"q,omitempty" json:"q,omitempty"`
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`
	Page   *int32  `form:"page,omitempty" json:"page,omitempty"`
	Size   *int32  `form:"size,omitempty" json:"size,omitempty"`
}

// List35Params defines parameters for List35.
type List35Params struct {
	Expand *[]string `form:"expand,omitempty" json:"expand,omitempty"`
}

// List26Params defines parameters for List26.
type List26Params struct {
	External *bool     `form:"external,omitempty" json:"external,omitempty"`
	Expand   *[]string `form:"expand,omitempty" json:"expand,omitempty"`
}

// List33Params defines parameters for List33.
type List33Params struct {
	Expand *[]string `form:"expand,omitempty" json:"expand,omitempty"`
}

// List30Params defines parameters for List30.
type List30Params struct {
	Expand *[]string `form:"expand,omitempty" json:"expand,omitempty"`
}

// List32Params defines parameters for List32.
type List32Params struct {
	Expand *[]string `form:"expand,omitempty" json:"expand,omitempty"`
}

// Create14JSONRequestBody defines body for Create14 for application/json ContentType.
type Create14JSONRequestBody = NewEntrypoint

// Update13JSONRequestBody defines body for Update13 for application/json ContentType.
type Update13JSONRequestBody = UpdateEntrypoint

// CreateDomainJSONRequestBody defines body for CreateDomain for application/json ContentType.
type CreateDomainJSONRequestBody = NewDomain

// PatchDomainJSONRequestBody defines body for PatchDomain for application/json ContentType.
type PatchDomainJSONRequestBody = PatchDomain

// UpdateDomainJSONRequestBody defines body for UpdateDomain for application/json ContentType.
type UpdateDomainJSONRequestBody = PatchDomain

// CreateAlertNotifierJSONRequestBody defines body for CreateAlertNotifier for application/json ContentType.
type CreateAlertNotifierJSONRequestBody = NewAlertNotifier

// PatchAlertNotifierJSONRequestBody defines body for PatchAlertNotifier for application/json ContentType.
type PatchAlertNotifierJSONRequestBody = PatchAlertNotifier

// List19JSONRequestBody defines body for List19 for application/json ContentType.
type List19JSONRequestBody = List19JSONBody

// CreateApplicationJSONRequestBody defines body for CreateApplication for application/json ContentType.
type CreateApplicationJSONRequestBody = NewApplication

// PatchApplicationJSONRequestBody defines body for PatchApplication for application/json ContentType.
type PatchApplicationJSONRequestBody = PatchApplication

// UpdateApplicationJSONRequestBody defines body for UpdateApplication for application/json ContentType.
type UpdateApplicationJSONRequestBody = PatchApplication

// Create6JSONRequestBody defines body for Create6 for application/json ContentType.
type Create6JSONRequestBody = NewEmail

// Update5JSONRequestBody defines body for Update5 for application/json ContentType.
type Update5JSONRequestBody = UpdateEmail

// DefineAppFlowsJSONRequestBody defines body for DefineAppFlows for application/json ContentType.
type DefineAppFlowsJSONRequestBody = DefineAppFlowsJSONBody

// UpdateAppFlowJSONRequestBody defines body for UpdateAppFlow for application/json ContentType.
type UpdateAppFlowJSONRequestBody = Flow

// Create5JSONRequestBody defines body for Create5 for application/json ContentType.
type Create5JSONRequestBody = NewForm

// Update4JSONRequestBody defines body for Update4 for application/json ContentType.
type Update4JSONRequestBody = UpdateForm

// AddOrUpdateMember2JSONRequestBody defines body for AddOrUpdateMember2 for application/json ContentType.
type AddOrUpdateMember2JSONRequestBody = NewMembership

// UpdateApplicationTypeJSONRequestBody defines body for UpdateApplicationType for application/json ContentType.
type UpdateApplicationTypeJSONRequestBody = PatchApplicationType

// Create13JSONRequestBody defines body for Create13 for application/json ContentType.
type Create13JSONRequestBody = NewAuthenticationDeviceNotifier

// Update12JSONRequestBody defines body for Update12 for application/json ContentType.
type Update12JSONRequestBody = UpdateAuthenticationDeviceNotifier

// Create11JSONRequestBody defines body for Create11 for application/json ContentType.
type Create11JSONRequestBody = NewBotDetection

// Update10JSONRequestBody defines body for Update10 for application/json ContentType.
type Update10JSONRequestBody = UpdateBotDetection

// CreateCertificateJSONRequestBody defines body for CreateCertificate for application/json ContentType.
type CreateCertificateJSONRequestBody = NewCertificate

// UpdateCertificateJSONRequestBody defines body for UpdateCertificate for application/json ContentType.
type UpdateCertificateJSONRequestBody = UpdateCertificate

// Create12JSONRequestBody defines body for Create12 for application/json ContentType.
type Create12JSONRequestBody = NewDeviceIdentifier

// Update11JSONRequestBody defines body for Update11 for application/json ContentType.
type Update11JSONRequestBody = UpdateDeviceIdentifier

// Create9JSONRequestBody defines body for Create9 for application/json ContentType.
type Create9JSONRequestBody = NewEmail

// Update8JSONRequestBody defines body for Update8 for application/json ContentType.
type Update8JSONRequestBody = UpdateEmail

// Create7JSONRequestBody defines body for Create7 for application/json ContentType.
type Create7JSONRequestBody = NewExtensionGrant

// Update6JSONRequestBody defines body for Update6 for application/json ContentType.
type Update6JSONRequestBody = UpdateExtensionGrant

// CreateFactorJSONRequestBody defines body for CreateFactor for application/json ContentType.
type CreateFactorJSONRequestBody = NewFactor

// UpdateFactorJSONRequestBody defines body for UpdateFactor for application/json ContentType.
type UpdateFactorJSONRequestBody = UpdateFactor

// DefineDomainFlowsJSONRequestBody defines body for DefineDomainFlows for application/json ContentType.
type DefineDomainFlowsJSONRequestBody = DefineDomainFlowsJSONBody

// UpdateDomainFlowJSONRequestBody defines body for UpdateDomainFlow for application/json ContentType.
type UpdateDomainFlowJSONRequestBody = Flow

// Create8JSONRequestBody defines body for Create8 for application/json ContentType.
type Create8JSONRequestBody = NewForm

// RenderDomainTemplateJSONRequestBody defines body for RenderDomainTemplate for application/json ContentType.
type RenderDomainTemplateJSONRequestBody = PreviewRequest

// Update7JSONRequestBody defines body for Update7 for application/json ContentType.
type Update7JSONRequestBody = UpdateForm

// CreateGroupJSONRequestBody defines body for CreateGroup for application/json ContentType.
type CreateGroupJSONRequestBody = NewGroup

// UpdateGroupJSONRequestBody defines body for UpdateGroup for application/json ContentType.
type UpdateGroupJSONRequestBody = UpdateGroup

// AssignRolesJSONRequestBody defines body for AssignRoles for application/json ContentType.
type AssignRolesJSONRequestBody = AssignRolesJSONBody

// CreateIdentityProviderJSONRequestBody defines body for CreateIdentityProvider for application/json ContentType.
type CreateIdentityProviderJSONRequestBody = NewIdentityProvider

// UpdateIdentityProviderJSONRequestBody defines body for UpdateIdentityProvider for application/json ContentType.
type UpdateIdentityProviderJSONRequestBody = UpdateIdentityProvider

// AddOrUpdateMember1JSONRequestBody defines body for AddOrUpdateMember1 for application/json ContentType.
type AddOrUpdateMember1JSONRequestBody = NewMembership

// Create10JSONRequestBody defines body for Create10 for application/json ContentType.
type Create10JSONRequestBody = NewReporter

// Update9JSONRequestBody defines body for Update9 for application/json ContentType.
type Update9JSONRequestBody = UpdateReporter

// CreateResourceJSONRequestBody defines body for CreateResource for application/json ContentType.
type CreateResourceJSONRequestBody = NewServiceResource

// UpdateResourceJSONRequestBody defines body for UpdateResource for application/json ContentType.
type UpdateResourceJSONRequestBody = UpdateServiceResource

// CreateRoleJSONRequestBody defines body for CreateRole for application/json ContentType.
type CreateRoleJSONRequestBody = NewRole

// UpdateRoleJSONRequestBody defines body for UpdateRole for application/json ContentType.
type UpdateRoleJSONRequestBody = UpdateRole

// CreateScopeJSONRequestBody defines body for CreateScope for application/json ContentType.
type CreateScopeJSONRequestBody = NewScope

// PatchScopeJSONRequestBody defines body for PatchScope for application/json ContentType.
type PatchScopeJSONRequestBody = PatchScope

// UpdateScopeJSONRequestBody defines body for UpdateScope for application/json ContentType.
type UpdateScopeJSONRequestBody = UpdateScope

// CreateThemeJSONRequestBody defines body for CreateTheme for application/json ContentType.
type CreateThemeJSONRequestBody = NewTheme

// UpdateThemeJSONRequestBody defines body for UpdateTheme for application/json ContentType.
type UpdateThemeJSONRequestBody = ThemeEntity

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = NewUser

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUser

// AssignJSONRequestBody defines body for Assign for application/json ContentType.
type AssignJSONRequestBody = AssignJSONBody

// UpdateUserStatusJSONRequestBody defines body for UpdateUserStatus for application/json ContentType.
type UpdateUserStatusJSONRequestBody = StatusEntity

// UpdateUsernameJSONRequestBody defines body for UpdateUsername for application/json ContentType.
type UpdateUsernameJSONRequestBody = UsernameEntity

// Create4JSONRequestBody defines body for Create4 for application/json ContentType.
type Create4JSONRequestBody = NewForm

// Update3JSONRequestBody defines body for Update3 for application/json ContentType.
type Update3JSONRequestBody = UpdateForm

// Create2JSONRequestBody defines body for Create2 for application/json ContentType.
type Create2JSONRequestBody = NewGroup

// UpdateOrganizationGroupJSONRequestBody defines body for UpdateOrganizationGroup for application/json ContentType.
type UpdateOrganizationGroupJSONRequestBody = UpdateGroup

// Create3JSONRequestBody defines body for Create3 for application/json ContentType.
type Create3JSONRequestBody = NewIdentityProvider

// Update2JSONRequestBody defines body for Update2 for application/json ContentType.
type Update2JSONRequestBody = UpdateIdentityProvider

// AddOrUpdateMemberJSONRequestBody defines body for AddOrUpdateMember for application/json ContentType.
type AddOrUpdateMemberJSONRequestBody = NewMembership

// Create1JSONRequestBody defines body for Create1 for application/json ContentType.
type Create1JSONRequestBody = NewRole

// Update1JSONRequestBody defines body for Update1 for application/json ContentType.
type Update1JSONRequestBody = UpdateRole

// PatchJSONRequestBody defines body for Patch for application/json ContentType.
type PatchJSONRequestBody = PatchOrganization

// CreateJSONRequestBody defines body for Create for application/json ContentType.
type CreateJSONRequestBody = NewTag

// UpdateJSONRequestBody defines body for Update for application/json ContentType.
type UpdateJSONRequestBody = UpdateTag

// CreateOrganisationUserJSONRequestBody defines body for CreateOrganisationUser for application/json ContentType.
type CreateOrganisationUserJSONRequestBody = NewUser

// UpdateOrganizationUserJSONRequestBody defines body for UpdateOrganizationUser for application/json ContentType.
type UpdateOrganizationUserJSONRequestBody = UpdateUser

// UpdateOrganizationUserStatusJSONRequestBody defines body for UpdateOrganizationUserStatus for application/json ContentType.
type UpdateOrganizationUserStatusJSONRequestBody = StatusEntity

// UpdateOrganisationUsernameJSONRequestBody defines body for UpdateOrganisationUsername for application/json ContentType.
type UpdateOrganisationUsernameJSONRequestBody = UsernameEntity

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Post request
	Post(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// List request
	List(ctx context.Context, organizationId string, params *ListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get1 request
	Get1(ctx context.Context, organizationId string, audit string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// List24 request
	List24(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Create14WithBody request with any body
	Create14WithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Create14(ctx context.Context, organizationId string, body Create14JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Delete16 request
	Delete16(ctx context.Context, organizationId string, entrypointId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get25 request
	Get25(ctx context.Context, organizationId string, entrypointId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Update13WithBody request with any body
	Update13WithBody(ctx context.Context, organizationId string, entrypointId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Update13(ctx context.Context, organizationId string, entrypointId string, body Update13JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// List6 request
	List6(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDomains request
	ListDomains(ctx context.Context, organizationId string, environmentId string, params *ListDomainsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDomainWithBody request with any body
	CreateDomainWithBody(ctx context.Context, organizationId string, environmentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDomain(ctx context.Context, organizationId string, environmentId string, body CreateDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindDomainByHrid request
	FindDomainByHrid(ctx context.Context, organizationId string, environmentId string, hrid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDomain request
	DeleteDomain(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindDomain request
	FindDomain(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchDomainWithBody request with any body
	PatchDomainWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchDomain(ctx context.Context, organizationId string, environmentId string, domain string, body PatchDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateDomainWithBody request with any body
	UpdateDomainWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateDomain(ctx context.Context, organizationId string, environmentId string, domain string, body UpdateDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAlertNotifiers request
	ListAlertNotifiers(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAlertNotifierWithBody request with any body
	CreateAlertNotifierWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAlertNotifier(ctx context.Context, organizationId string, environmentId string, domain string, body CreateAlertNotifierJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAlertNotifier request
	DeleteAlertNotifier(ctx context.Context, organizationId string, environmentId string, domain string, notifierId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlertNotifier request
	GetAlertNotifier(ctx context.Context, organizationId string, environmentId string, domain string, notifierId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchAlertNotifierWithBody request with any body
	PatchAlertNotifierWithBody(ctx context.Context, organizationId string, environmentId string, domain string, notifierId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchAlertNotifier(ctx context.Context, organizationId string, environmentId string, domain string, notifierId string, body PatchAlertNotifierJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// List20 request
	List20(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// List19WithBody request with any body
	List19WithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	List19(ctx context.Context, organizationId string, environmentId string, domain string, body List19JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get21 request
	Get21(ctx context.Context, organizationId string, environmentId string, domain string, params *Get21Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListApplications request
	ListApplications(ctx context.Context, organizationId string, environmentId string, domain string, params *ListApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateApplicationWithBody request with any body
	CreateApplicationWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateApplication(ctx context.Context, organizationId string, environmentId string, domain string, body CreateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApplication request
	DeleteApplication(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindApplication request
	FindApplication(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchApplicationWithBody request with any body
	PatchApplicationWithBody(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchApplication(ctx context.Context, organizationId string, environmentId string, domain string, application string, body PatchApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateApplicationWithBody request with any body
	UpdateApplicationWithBody(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateApplication(ctx context.Context, organizationId string, environmentId string, domain string, application string, body UpdateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get14 request
	Get14(ctx context.Context, organizationId string, environmentId string, domain string, application string, params *Get14Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get13 request
	Get13(ctx context.Context, organizationId string, environmentId string, domain string, application string, params *Get13Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Create6WithBody request with any body
	Create6WithBody(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Create6(ctx context.Context, organizationId string, environmentId string, domain string, application string, body Create6JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Delete8 request
	Delete8(ctx context.Context, organizationId string, environmentId string, domain string, application string, email string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Update5WithBody request with any body
	Update5WithBody(ctx context.Context, organizationId string, environmentId string, domain string, application string, email string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Update5(ctx context.Context, organizationId string, environmentId string, domain string, application string, email string, body Update5JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAppFlows request
	ListAppFlows(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DefineAppFlowsWithBody request with any body
	DefineAppFlowsWithBody(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DefineAppFlows(ctx context.Context, organizationId string, environmentId string, domain string, application string, body DefineAppFlowsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAppFlow request
	GetAppFlow(ctx context.Context, organizationId string, environmentId string, domain string, application string, flow string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAppFlowWithBody request with any body
	UpdateAppFlowWithBody(ctx context.Context, organizationId string, environmentId string, domain string, application string, flow string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAppFlow(ctx context.Context, organizationId string, environmentId string, domain string, application string, flow string, body UpdateAppFlowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get12 request
	Get12(ctx context.Context, organizationId string, environmentId string, domain string, application string, params *Get12Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Create5WithBody request with any body
	Create5WithBody(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Create5(ctx context.Context, organizationId string, environmentId string, domain string, application string, body Create5JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Delete7 request
	Delete7(ctx context.Context, organizationId string, environmentId string, domain string, application string, form string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Update4WithBody request with any body
	Update4WithBody(ctx context.Context, organizationId string, environmentId string, domain string, application string, form string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Update4(ctx context.Context, organizationId string, environmentId string, domain string, application string, form string, body Update4JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMembers1 request
	GetMembers1(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddOrUpdateMember2WithBody request with any body
	AddOrUpdateMember2WithBody(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddOrUpdateMember2(ctx context.Context, organizationId string, environmentId string, domain string, application string, body AddOrUpdateMember2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Permissions2 request
	Permissions2(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveMember3 request
	RemoveMember3(ctx context.Context, organizationId string, environmentId string, domain string, application string, member string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// List15 request
	List15(ctx context.Context, organizationId string, environmentId string, domain string, application string, params *List15Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get15 request
	Get15(ctx context.Context, organizationId string, environmentId string, domain string, application string, resource string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// List16 request
	List16(ctx context.Context, organizationId string, environmentId string, domain string, application string, resource string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get16 request
	Get16(ctx context.Context, organizationId string, environmentId string, domain string, application string, resource string, policy string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RenewClientSecret request
	RenewClientSecret(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateApplicationTypeWithBody request with any body
	UpdateApplicationTypeWithBody(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateApplicationType(ctx context.Context, organizationId string, environmentId string, domain string, application string, body UpdateApplicationTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// List7 request
	List7(ctx context.Context, organizationId string, environmentId string, domain string, params *List7Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get8 request
	Get8(ctx context.Context, organizationId string, environmentId string, domain string, audit string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// List23 request
	List23(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Create13WithBody request with any body
	Create13WithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Create13(ctx context.Context, organizationId string, environmentId string, domain string, body Create13JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Delete15 request
	Delete15(ctx context.Context, organizationId string, environmentId string, domain string, authDeviceNotifier string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get24 request
	Get24(ctx context.Context, organizationId string, environmentId string, domain string, authDeviceNotifier string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Update12WithBody request with any body
	Update12WithBody(ctx context.Context, organizationId string, environmentId string, domain string, authDeviceNotifier string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Update12(ctx context.Context, organizationId string, environmentId string, domain string, authDeviceNotifier string, body Update12JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// List21 request
	List21(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Create11WithBody request with any body
	Create11WithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Create11(ctx context.Context, organizationId string, environmentId string, domain string, body Create11JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Delete13 request
	Delete13(ctx context.Context, organizationId string, environmentId string, domain string, botDetection string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get22 request
	Get22(ctx context.Context, organizationId string, environmentId string, domain string, botDetection string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Update10WithBody request with any body
	Update10WithBody(ctx context.Context, organizationId string, environmentId string, domain string, botDetection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Update10(ctx context.Context, organizationId string, environmentId string, domain string, botDetection string, body Update10JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCertificates request
	ListCertificates(ctx context.Context, organizationId string, environmentId string, domain string, params *ListCertificatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCertificateWithBody request with any body
	CreateCertificateWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCertificate(ctx context.Context, organizationId string, environmentId string, domain string, body CreateCertificateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RotateCertificate request
	RotateCertificate(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCertificate request
	DeleteCertificate(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindCertificate request
	FindCertificate(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCertificateWithBody request with any body
	UpdateCertificateWithBody(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCertificate(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, body UpdateCertificateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCertificatePublicKey request
	GetCertificatePublicKey(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCertificatePublicKeys request
	GetCertificatePublicKeys(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// List22 request
	List22(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Create12WithBody request with any body
	Create12WithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Create12(ctx context.Context, organizationId string, environmentId string, domain string, body Create12JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Delete14 request
	Delete14(ctx context.Context, organizationId string, environmentId string, domain string, deviceIdentifier string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get23 request
	Get23(ctx context.Context, organizationId string, environmentId string, domain string, deviceIdentifier string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Update11WithBody request with any body
	Update11WithBody(ctx context.Context, organizationId string, environmentId string, domain string, deviceIdentifier string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Update11(ctx context.Context, organizationId string, environmentId string, domain string, deviceIdentifier string, body Update11JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get19 request
	Get19(ctx context.Context, organizationId string, environmentId string, domain string, params *Get19Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Create9WithBody request with any body
	Create9WithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Create9(ctx context.Context, organizationId string, environmentId string, domain string, body Create9JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Delete11 request
	Delete11(ctx context.Context, organizationId string, environmentId string, domain string, email string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Update8WithBody request with any body
	Update8WithBody(ctx context.Context, organizationId string, environmentId string, domain string, email string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Update8(ctx context.Context, organizationId string, environmentId string, domain string, email string, body Update8JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDomainEntrypoints request
	GetDomainEntrypoints(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// List17 request
	List17(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Create7WithBody request with any body
	Create7WithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Create7(ctx context.Context, organizationId string, environmentId string, domain string, body Create7JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Delete9 request
	Delete9(ctx context.Context, organizationId string, environmentId string, domain string, extensionGrant string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get17 request
	Get17(ctx context.Context, organizationId string, environmentId string, domain string, extensionGrant string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Update6WithBody request with any body
	Update6WithBody(ctx context.Context, organizationId string, environmentId string, domain string, extensionGrant string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Update6(ctx context.Context, organizationId string, environmentId string, domain string, extensionGrant string, body Update6JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListFactors request
	ListFactors(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFactorWithBody request with any body
	CreateFactorWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateFactor(ctx context.Context, organizationId string, environmentId string, domain string, body CreateFactorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFactor request
	DeleteFactor(ctx context.Context, organizationId string, environmentId string, domain string, factor string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFactor request
	GetFactor(ctx context.Context, organizationId string, environmentId string, domain string, factor string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateFactorWithBody request with any body
	UpdateFactorWithBody(ctx context.Context, organizationId string, environmentId string, domain string, factor string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateFactor(ctx context.Context, organizationId string, environmentId string, domain string, factor string, body UpdateFactorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDomainFlows request
	ListDomainFlows(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DefineDomainFlowsWithBody request with any body
	DefineDomainFlowsWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DefineDomainFlows(ctx context.Context, organizationId string, environmentId string, domain string, body DefineDomainFlowsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDomainFlow request
	GetDomainFlow(ctx context.Context, organizationId string, environmentId string, domain string, flow string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateDomainFlowWithBody request with any body
	UpdateDomainFlowWithBody(ctx context.Context, organizationId string, environmentId string, domain string, flow string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateDomainFlow(ctx context.Context, organizationId string, environmentId string, domain string, flow string, body UpdateDomainFlowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get18 request
	Get18(ctx context.Context, organizationId string, environmentId string, domain string, params *Get18Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Create8WithBody request with any body
	Create8WithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Create8(ctx context.Context, organizationId string, environmentId string, domain string, body Create8JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RenderDomainTemplateWithBody request with any body
	RenderDomainTemplateWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RenderDomainTemplate(ctx context.Context, organizationId string, environmentId string, domain string, body RenderDomainTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Delete10 request
	Delete10(ctx context.Context, organizationId string, environmentId string, domain string, form string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Update7WithBody request with any body
	Update7WithBody(ctx context.Context, organizationId string, environmentId string, domain string, form string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Update7(ctx context.Context, organizationId string, environmentId string, domain string, form string, body Update7JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListGroups request
	ListGroups(ctx context.Context, organizationId string, environmentId string, domain string, params *ListGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateGroupWithBody request with any body
	CreateGroupWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateGroup(ctx context.Context, organizationId string, environmentId string, domain string, body CreateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGroup request
	DeleteGroup(ctx context.Context, organizationId string, environmentId string, domain string, group string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindGroup request
	FindGroup(ctx context.Context, organizationId string, environmentId string, domain string, group string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateGroupWithBody request with any body
	UpdateGroupWithBody(ctx context.Context, organizationId string, environmentId string, domain string, group string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateGroup(ctx context.Context, organizationId string, environmentId string, domain string, group string, body UpdateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroupMembers request
	GetGroupMembers(ctx context.Context, organizationId string, environmentId string, domain string, group string, params *GetGroupMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveGroupMember request
	RemoveGroupMember(ctx context.Context, organizationId string, environmentId string, domain string, group string, member string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddGroupMember request
	AddGroupMember(ctx context.Context, organizationId string, environmentId string, domain string, group string, member string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindGroupRoles request
	FindGroupRoles(ctx context.Context, organizationId string, environmentId string, domain string, group string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AssignRolesWithBody request with any body
	AssignRolesWithBody(ctx context.Context, organizationId string, environmentId string, domain string, group string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AssignRoles(ctx context.Context, organizationId string, environmentId string, domain string, group string, body AssignRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RevokeRole request
	RevokeRole(ctx context.Context, organizationId string, environmentId string, domain string, group string, role string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListI18nDictionaries request
	ListI18nDictionaries(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateI18nDictionaryWithBody request with any body
	CreateI18nDictionaryWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteI18nDictionary request
	DeleteI18nDictionary(ctx context.Context, organizationId string, environmentId string, domain string, dictionary string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetI18nDictionary request
	GetI18nDictionary(ctx context.Context, organizationId string, environmentId string, domain string, dictionary string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutI18nDictionaryWithBody request with any body
	PutI18nDictionaryWithBody(ctx context.Context, organizationId string, environmentId string, domain string, dictionary string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceI18nDictionaryEntriesWithBody request with any body
	ReplaceI18nDictionaryEntriesWithBody(ctx context.Context, organizationId string, environmentId string, domain string, dictionary string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIdentityProviders request
	ListIdentityProviders(ctx context.Context, organizationId string, environmentId string, domain string, params *ListIdentityProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIdentityProviderWithBody request with any body
	CreateIdentityProviderWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateIdentityProvider(ctx context.Context, organizationId string, environmentId string, domain string, body CreateIdentityProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIdentityProvider request
	DeleteIdentityProvider(ctx context.Context, organizationId string, environmentId string, domain string, identity string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindIdentityProvider request
	FindIdentityProvider(ctx context.Context, organizationId string, environmentId string, domain string, identity string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIdentityProviderWithBody request with any body
	UpdateIdentityProviderWithBody(ctx context.Context, organizationId string, environmentId string, domain string, identity string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateIdentityProvider(ctx context.Context, organizationId string, environmentId string, domain string, identity string, body UpdateIdentityProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// List8 request
	List8(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddOrUpdateMember1WithBody request with any body
	AddOrUpdateMember1WithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddOrUpdateMember1(ctx context.Context, organizationId string, environmentId string, domain string, body AddOrUpdateMember1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Permissions1 request
	Permissions1(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveMember2 request
	RemoveMember2(ctx context.Context, organizationId string, environmentId string, domain string, member string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// List18 request
	List18(ctx context.Context, organizationId string, environmentId string, domain string, params *List18Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Create10WithBody request with any body
	Create10WithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Create10(ctx context.Context, organizationId string, environmentId string, domain string, body Create10JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Delete12 request
	Delete12(ctx context.Context, organizationId string, environmentId string, domain string, reporter string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get20 request
	Get20(ctx context.Context, organizationId string, environmentId string, domain string, reporter string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Update9WithBody request with any body
	Update9WithBody(ctx context.Context, organizationId string, environmentId string, domain string, reporter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Update9(ctx context.Context, organizationId string, environmentId string, domain string, reporter string, body Update9JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListResources request
	ListResources(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateResourceWithBody request with any body
	CreateResourceWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateResource(ctx context.Context, organizationId string, environmentId string, domain string, body CreateResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteResource request
	DeleteResource(ctx context.Context, organizationId string, environmentId string, domain string, resource string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetResource request
	GetResource(ctx context.Context, organizationId string, environmentId string, domain string, resource string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateResourceWithBody request with any body
	UpdateResourceWithBody(ctx context.Context, organizationId string, environmentId string, domain string, resource string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateResource(ctx context.Context, organizationId string, environmentId string, domain string, resource string, body UpdateResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindRoles request
	FindRoles(ctx context.Context, organizationId string, environmentId string, domain string, params *FindRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRoleWithBody request with any body
	CreateRoleWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRole(ctx context.Context, organizationId string, environmentId string, domain string, body CreateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRole request
	DeleteRole(ctx context.Context, organizationId string, environmentId string, domain string, role string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindRole request
	FindRole(ctx context.Context, organizationId string, environmentId string, domain string, role string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRoleWithBody request with any body
	UpdateRoleWithBody(ctx context.Context, organizationId string, environmentId string, domain string, role string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRole(ctx context.Context, organizationId string, environmentId string, domain string, role string, body UpdateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListScopes request
	ListScopes(ctx context.Context, organizationId string, environmentId string, domain string, params *ListScopesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateScopeWithBody request with any body
	CreateScopeWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateScope(ctx context.Context, organizationId string, environmentId string, domain string, body CreateScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteScope request
	DeleteScope(ctx context.Context, organizationId string, environmentId string, domain string, scope string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindScope request
	FindScope(ctx context.Context, organizationId string, environmentId string, domain string, scope string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchScopeWithBody request with any body
	PatchScopeWithBody(ctx context.Context, organizationId string, environmentId string, domain string, scope string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchScope(ctx context.Context, organizationId string, environmentId string, domain string, scope string, body PatchScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateScopeWithBody request with any body
	UpdateScopeWithBody(ctx context.Context, organizationId string, environmentId string, domain string, scope string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateScope(ctx context.Context, organizationId string, environmentId string, domain string, scope string, body UpdateScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListThemes request
	ListThemes(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateThemeWithBody request with any body
	CreateThemeWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTheme(ctx context.Context, organizationId string, environmentId string, domain string, body CreateThemeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTheme request
	DeleteTheme(ctx context.Context, organizationId string, environmentId string, domain string, themeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTheme request
	GetTheme(ctx context.Context, organizationId string, environmentId string, domain string, themeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateThemeWithBody request with any body
	UpdateThemeWithBody(ctx context.Context, organizationId string, environmentId string, domain string, themeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateTheme(ctx context.Context, organizationId string, environmentId string, domain string, themeId string, body UpdateThemeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUsers request
	ListUsers(ctx context.Context, organizationId string, environmentId string, domain string, params *ListUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUserWithBody request with any body
	CreateUserWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUser(ctx context.Context, organizationId string, environmentId string, domain string, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUser request
	DeleteUser(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindUser request
	FindUser(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserWithBody request with any body
	UpdateUserWithBody(ctx context.Context, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUser(ctx context.Context, organizationId string, environmentId string, domain string, user string, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// List14 request
	List14(ctx context.Context, organizationId string, environmentId string, domain string, user string, params *List14Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get11 request
	Get11(ctx context.Context, organizationId string, environmentId string, domain string, user string, audit string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Delete5 request
	Delete5(ctx context.Context, organizationId string, environmentId string, domain string, user string, params *Delete5Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// List10 request
	List10(ctx context.Context, organizationId string, environmentId string, domain string, user string, params *List10Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Revoke request
	Revoke(ctx context.Context, organizationId string, environmentId string, domain string, user string, consent string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get9 request
	Get9(ctx context.Context, organizationId string, environmentId string, domain string, user string, consent string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// List13 request
	List13(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Revoke2 request
	Revoke2(ctx context.Context, organizationId string, environmentId string, domain string, user string, credential string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get10 request
	Get10(ctx context.Context, organizationId string, environmentId string, domain string, user string, credential string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// List9 request
	List9(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Delete4 request
	Delete4(ctx context.Context, organizationId string, environmentId string, domain string, user string, device string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// List12 request
	List12(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Delete6 request
	Delete6(ctx context.Context, organizationId string, environmentId string, domain string, user string, factor string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LockUser request
	LockUser(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResetPasswordWithBody request with any body
	ResetPasswordWithBody(ctx context.Context, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// List11 request
	List11(ctx context.Context, organizationId string, environmentId string, domain string, user string, params *List11Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AssignWithBody request with any body
	AssignWithBody(ctx context.Context, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Assign(ctx context.Context, organizationId string, environmentId string, domain string, user string, body AssignJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Revoke1 request
	Revoke1(ctx context.Context, organizationId string, environmentId string, domain string, user string, role string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SendRegistrationConfirmation request
	SendRegistrationConfirmation(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserStatusWithBody request with any body
	UpdateUserStatusWithBody(ctx context.Context, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUserStatus(ctx context.Context, organizationId string, environmentId string, domain string, user string, body UpdateUserStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UnlockUser request
	UnlockUser(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUsernameWithBody request with any body
	UpdateUsernameWithBody(ctx context.Context, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUsername(ctx context.Context, organizationId string, environmentId string, domain string, user string, body UpdateUsernameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Permissions request
	Permissions(ctx context.Context, organizationId string, environmentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get7 request
	Get7(ctx context.Context, organizationId string, params *Get7Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Create4WithBody request with any body
	Create4WithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Create4(ctx context.Context, organizationId string, body Create4JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Delete3 request
	Delete3(ctx context.Context, organizationId string, form string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Update3WithBody request with any body
	Update3WithBody(ctx context.Context, organizationId string, form string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Update3(ctx context.Context, organizationId string, form string, body Update3JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// List3 request
	List3(ctx context.Context, organizationId string, params *List3Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Create2WithBody request with any body
	Create2WithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Create2(ctx context.Context, organizationId string, body Create2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrganizationGroup request
	DeleteOrganizationGroup(ctx context.Context, organizationId string, group string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationGroup request
	GetOrganizationGroup(ctx context.Context, organizationId string, group string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOrganizationGroupWithBody request with any body
	UpdateOrganizationGroupWithBody(ctx context.Context, organizationId string, group string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateOrganizationGroup(ctx context.Context, organizationId string, group string, body UpdateOrganizationGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// List4 request
	List4(ctx context.Context, organizationId string, group string, params *List4Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveMember1 request
	RemoveMember1(ctx context.Context, organizationId string, group string, member string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddMember request
	AddMember(ctx context.Context, organizationId string, group string, member string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// List5 request
	List5(ctx context.Context, organizationId string, params *List5Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Create3WithBody request with any body
	Create3WithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Create3(ctx context.Context, organizationId string, body Create3JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Delete2 request
	Delete2(ctx context.Context, organizationId string, identity string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get4 request
	Get4(ctx context.Context, organizationId string, identity string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Update2WithBody request with any body
	Update2WithBody(ctx context.Context, organizationId string, identity string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Update2(ctx context.Context, organizationId string, identity string, body Update2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMembers request
	GetMembers(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddOrUpdateMemberWithBody request with any body
	AddOrUpdateMemberWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddOrUpdateMember(ctx context.Context, organizationId string, body AddOrUpdateMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveMember request
	RemoveMember(ctx context.Context, organizationId string, member string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// List2 request
	List2(ctx context.Context, organizationId string, params *List2Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Create1WithBody request with any body
	Create1WithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Create1(ctx context.Context, organizationId string, body Create1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Delete1 request
	Delete1(ctx context.Context, organizationId string, role string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get3 request
	Get3(ctx context.Context, organizationId string, role string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Update1WithBody request with any body
	Update1WithBody(ctx context.Context, organizationId string, role string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Update1(ctx context.Context, organizationId string, role string, body Update1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get6 request
	Get6(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchWithBody request with any body
	PatchWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Patch(ctx context.Context, organizationId string, body PatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// List1 request
	List1(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWithBody request with any body
	CreateWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Create(ctx context.Context, organizationId string, body CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Delete request
	Delete(ctx context.Context, organizationId string, tag string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get2 request
	Get2(ctx context.Context, organizationId string, tag string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWithBody request with any body
	UpdateWithBody(ctx context.Context, organizationId string, tag string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Update(ctx context.Context, organizationId string, tag string, body UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOrganisationUsers request
	ListOrganisationUsers(ctx context.Context, organizationId string, params *ListOrganisationUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrganisationUserWithBody request with any body
	CreateOrganisationUserWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrganisationUser(ctx context.Context, organizationId string, body CreateOrganisationUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrganizationUser request
	DeleteOrganizationUser(ctx context.Context, organizationId string, user string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get5 request
	Get5(ctx context.Context, organizationId string, user string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOrganizationUserWithBody request with any body
	UpdateOrganizationUserWithBody(ctx context.Context, organizationId string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateOrganizationUser(ctx context.Context, organizationId string, user string, body UpdateOrganizationUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResetOrganizationUserPasswordWithBody request with any body
	ResetOrganizationUserPasswordWithBody(ctx context.Context, organizationId string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOrganizationUserStatusWithBody request with any body
	UpdateOrganizationUserStatusWithBody(ctx context.Context, organizationId string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateOrganizationUserStatus(ctx context.Context, organizationId string, user string, body UpdateOrganizationUserStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOrganisationUsernameWithBody request with any body
	UpdateOrganisationUsernameWithBody(ctx context.Context, organizationId string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateOrganisationUsername(ctx context.Context, organizationId string, user string, body UpdateOrganisationUsernameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// List25 request
	List25(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAlertServiceStatus request
	GetAlertServiceStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// List37 request
	List37(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSpelGrammar request
	GetSpelGrammar(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get38 request
	Get38(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// List35 request
	List35(ctx context.Context, params *List35Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get35 request
	Get35(ctx context.Context, authDeviceNotifierId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSchema9 request
	GetSchema9(ctx context.Context, authDeviceNotifierId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// List34 request
	List34(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get34 request
	Get34(ctx context.Context, botDetection string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSchema8 request
	GetSchema8(ctx context.Context, botDetection string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// List27 request
	List27(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get27 request
	Get27(ctx context.Context, certificate string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSchema1 request
	GetSchema1(ctx context.Context, certificate string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// List36 request
	List36(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get36 request
	Get36(ctx context.Context, deviceIdentifier string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSchema10 request
	GetSchema10(ctx context.Context, deviceIdentifier string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// List28 request
	List28(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get28 request
	Get28(ctx context.Context, extensionGrant string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSchema2 request
	GetSchema2(ctx context.Context, extensionGrant string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// List31 request
	List31(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get31 request
	Get31(ctx context.Context, factor string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSchema5 request
	GetSchema5(ctx context.Context, factor string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// List26 request
	List26(ctx context.Context, params *List26Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get26 request
	Get26(ctx context.Context, identity string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSchema request
	GetSchema(ctx context.Context, identity string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// List33 request
	List33(ctx context.Context, params *List33Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get33 request
	Get33(ctx context.Context, notifierId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSchema7 request
	GetSchema7(ctx context.Context, notifierId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// List30 request
	List30(ctx context.Context, params *List30Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get30 request
	Get30(ctx context.Context, policy string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDocumentation request
	GetDocumentation(ctx context.Context, policy string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSchema4 request
	GetSchema4(ctx context.Context, policy string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// List29 request
	List29(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get29 request
	Get29(ctx context.Context, reporter string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSchema3 request
	GetSchema3(ctx context.Context, reporter string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// List32 request
	List32(ctx context.Context, params *List32Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get32 request
	Get32(ctx context.Context, resource string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSchema6 request
	GetSchema6(ctx context.Context, resource string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get37 request
	Get37(ctx context.Context, role string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get request
	Get(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SubscribeNewsletterWithBody request with any body
	SubscribeNewsletterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaglines request
	GetTaglines(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListNotifications request
	ListNotifications(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MarkAsRead request
	MarkAsRead(ctx context.Context, notificationId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Post(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) List(ctx context.Context, organizationId string, params *ListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRequest(c.Server, organizationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get1(ctx context.Context, organizationId string, audit string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet1Request(c.Server, organizationId, audit)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) List24(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewList24Request(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create14WithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreate14RequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create14(ctx context.Context, organizationId string, body Create14JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreate14Request(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Delete16(ctx context.Context, organizationId string, entrypointId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDelete16Request(c.Server, organizationId, entrypointId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get25(ctx context.Context, organizationId string, entrypointId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet25Request(c.Server, organizationId, entrypointId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Update13WithBody(ctx context.Context, organizationId string, entrypointId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdate13RequestWithBody(c.Server, organizationId, entrypointId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Update13(ctx context.Context, organizationId string, entrypointId string, body Update13JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdate13Request(c.Server, organizationId, entrypointId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) List6(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewList6Request(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDomains(ctx context.Context, organizationId string, environmentId string, params *ListDomainsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDomainsRequest(c.Server, organizationId, environmentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDomainWithBody(ctx context.Context, organizationId string, environmentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDomainRequestWithBody(c.Server, organizationId, environmentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDomain(ctx context.Context, organizationId string, environmentId string, body CreateDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDomainRequest(c.Server, organizationId, environmentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindDomainByHrid(ctx context.Context, organizationId string, environmentId string, hrid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindDomainByHridRequest(c.Server, organizationId, environmentId, hrid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDomain(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDomainRequest(c.Server, organizationId, environmentId, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindDomain(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindDomainRequest(c.Server, organizationId, environmentId, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchDomainWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchDomainRequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchDomain(ctx context.Context, organizationId string, environmentId string, domain string, body PatchDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchDomainRequest(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDomainWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDomainRequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDomain(ctx context.Context, organizationId string, environmentId string, domain string, body UpdateDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDomainRequest(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAlertNotifiers(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAlertNotifiersRequest(c.Server, organizationId, environmentId, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAlertNotifierWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAlertNotifierRequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAlertNotifier(ctx context.Context, organizationId string, environmentId string, domain string, body CreateAlertNotifierJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAlertNotifierRequest(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAlertNotifier(ctx context.Context, organizationId string, environmentId string, domain string, notifierId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAlertNotifierRequest(c.Server, organizationId, environmentId, domain, notifierId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlertNotifier(ctx context.Context, organizationId string, environmentId string, domain string, notifierId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertNotifierRequest(c.Server, organizationId, environmentId, domain, notifierId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchAlertNotifierWithBody(ctx context.Context, organizationId string, environmentId string, domain string, notifierId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchAlertNotifierRequestWithBody(c.Server, organizationId, environmentId, domain, notifierId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchAlertNotifier(ctx context.Context, organizationId string, environmentId string, domain string, notifierId string, body PatchAlertNotifierJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchAlertNotifierRequest(c.Server, organizationId, environmentId, domain, notifierId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) List20(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewList20Request(c.Server, organizationId, environmentId, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) List19WithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewList19RequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) List19(ctx context.Context, organizationId string, environmentId string, domain string, body List19JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewList19Request(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get21(ctx context.Context, organizationId string, environmentId string, domain string, params *Get21Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet21Request(c.Server, organizationId, environmentId, domain, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListApplications(ctx context.Context, organizationId string, environmentId string, domain string, params *ListApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListApplicationsRequest(c.Server, organizationId, environmentId, domain, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApplicationWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApplicationRequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApplication(ctx context.Context, organizationId string, environmentId string, domain string, body CreateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApplicationRequest(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApplication(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApplicationRequest(c.Server, organizationId, environmentId, domain, application)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindApplication(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindApplicationRequest(c.Server, organizationId, environmentId, domain, application)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApplicationWithBody(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApplicationRequestWithBody(c.Server, organizationId, environmentId, domain, application, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchApplication(ctx context.Context, organizationId string, environmentId string, domain string, application string, body PatchApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchApplicationRequest(c.Server, organizationId, environmentId, domain, application, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateApplicationWithBody(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateApplicationRequestWithBody(c.Server, organizationId, environmentId, domain, application, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateApplication(ctx context.Context, organizationId string, environmentId string, domain string, application string, body UpdateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateApplicationRequest(c.Server, organizationId, environmentId, domain, application, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get14(ctx context.Context, organizationId string, environmentId string, domain string, application string, params *Get14Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet14Request(c.Server, organizationId, environmentId, domain, application, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get13(ctx context.Context, organizationId string, environmentId string, domain string, application string, params *Get13Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet13Request(c.Server, organizationId, environmentId, domain, application, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create6WithBody(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreate6RequestWithBody(c.Server, organizationId, environmentId, domain, application, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create6(ctx context.Context, organizationId string, environmentId string, domain string, application string, body Create6JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreate6Request(c.Server, organizationId, environmentId, domain, application, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Delete8(ctx context.Context, organizationId string, environmentId string, domain string, application string, email string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDelete8Request(c.Server, organizationId, environmentId, domain, application, email)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Update5WithBody(ctx context.Context, organizationId string, environmentId string, domain string, application string, email string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdate5RequestWithBody(c.Server, organizationId, environmentId, domain, application, email, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Update5(ctx context.Context, organizationId string, environmentId string, domain string, application string, email string, body Update5JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdate5Request(c.Server, organizationId, environmentId, domain, application, email, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAppFlows(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAppFlowsRequest(c.Server, organizationId, environmentId, domain, application)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DefineAppFlowsWithBody(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDefineAppFlowsRequestWithBody(c.Server, organizationId, environmentId, domain, application, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DefineAppFlows(ctx context.Context, organizationId string, environmentId string, domain string, application string, body DefineAppFlowsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDefineAppFlowsRequest(c.Server, organizationId, environmentId, domain, application, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAppFlow(ctx context.Context, organizationId string, environmentId string, domain string, application string, flow string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAppFlowRequest(c.Server, organizationId, environmentId, domain, application, flow)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAppFlowWithBody(ctx context.Context, organizationId string, environmentId string, domain string, application string, flow string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAppFlowRequestWithBody(c.Server, organizationId, environmentId, domain, application, flow, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAppFlow(ctx context.Context, organizationId string, environmentId string, domain string, application string, flow string, body UpdateAppFlowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAppFlowRequest(c.Server, organizationId, environmentId, domain, application, flow, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get12(ctx context.Context, organizationId string, environmentId string, domain string, application string, params *Get12Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet12Request(c.Server, organizationId, environmentId, domain, application, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create5WithBody(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreate5RequestWithBody(c.Server, organizationId, environmentId, domain, application, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create5(ctx context.Context, organizationId string, environmentId string, domain string, application string, body Create5JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreate5Request(c.Server, organizationId, environmentId, domain, application, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Delete7(ctx context.Context, organizationId string, environmentId string, domain string, application string, form string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDelete7Request(c.Server, organizationId, environmentId, domain, application, form)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Update4WithBody(ctx context.Context, organizationId string, environmentId string, domain string, application string, form string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdate4RequestWithBody(c.Server, organizationId, environmentId, domain, application, form, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Update4(ctx context.Context, organizationId string, environmentId string, domain string, application string, form string, body Update4JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdate4Request(c.Server, organizationId, environmentId, domain, application, form, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMembers1(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMembers1Request(c.Server, organizationId, environmentId, domain, application)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddOrUpdateMember2WithBody(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddOrUpdateMember2RequestWithBody(c.Server, organizationId, environmentId, domain, application, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddOrUpdateMember2(ctx context.Context, organizationId string, environmentId string, domain string, application string, body AddOrUpdateMember2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddOrUpdateMember2Request(c.Server, organizationId, environmentId, domain, application, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Permissions2(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPermissions2Request(c.Server, organizationId, environmentId, domain, application)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveMember3(ctx context.Context, organizationId string, environmentId string, domain string, application string, member string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveMember3Request(c.Server, organizationId, environmentId, domain, application, member)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) List15(ctx context.Context, organizationId string, environmentId string, domain string, application string, params *List15Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewList15Request(c.Server, organizationId, environmentId, domain, application, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get15(ctx context.Context, organizationId string, environmentId string, domain string, application string, resource string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet15Request(c.Server, organizationId, environmentId, domain, application, resource)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) List16(ctx context.Context, organizationId string, environmentId string, domain string, application string, resource string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewList16Request(c.Server, organizationId, environmentId, domain, application, resource)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get16(ctx context.Context, organizationId string, environmentId string, domain string, application string, resource string, policy string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet16Request(c.Server, organizationId, environmentId, domain, application, resource, policy)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RenewClientSecret(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRenewClientSecretRequest(c.Server, organizationId, environmentId, domain, application)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateApplicationTypeWithBody(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateApplicationTypeRequestWithBody(c.Server, organizationId, environmentId, domain, application, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateApplicationType(ctx context.Context, organizationId string, environmentId string, domain string, application string, body UpdateApplicationTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateApplicationTypeRequest(c.Server, organizationId, environmentId, domain, application, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) List7(ctx context.Context, organizationId string, environmentId string, domain string, params *List7Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewList7Request(c.Server, organizationId, environmentId, domain, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get8(ctx context.Context, organizationId string, environmentId string, domain string, audit string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet8Request(c.Server, organizationId, environmentId, domain, audit)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) List23(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewList23Request(c.Server, organizationId, environmentId, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create13WithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreate13RequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create13(ctx context.Context, organizationId string, environmentId string, domain string, body Create13JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreate13Request(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Delete15(ctx context.Context, organizationId string, environmentId string, domain string, authDeviceNotifier string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDelete15Request(c.Server, organizationId, environmentId, domain, authDeviceNotifier)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get24(ctx context.Context, organizationId string, environmentId string, domain string, authDeviceNotifier string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet24Request(c.Server, organizationId, environmentId, domain, authDeviceNotifier)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Update12WithBody(ctx context.Context, organizationId string, environmentId string, domain string, authDeviceNotifier string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdate12RequestWithBody(c.Server, organizationId, environmentId, domain, authDeviceNotifier, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Update12(ctx context.Context, organizationId string, environmentId string, domain string, authDeviceNotifier string, body Update12JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdate12Request(c.Server, organizationId, environmentId, domain, authDeviceNotifier, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) List21(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewList21Request(c.Server, organizationId, environmentId, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create11WithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreate11RequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create11(ctx context.Context, organizationId string, environmentId string, domain string, body Create11JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreate11Request(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Delete13(ctx context.Context, organizationId string, environmentId string, domain string, botDetection string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDelete13Request(c.Server, organizationId, environmentId, domain, botDetection)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get22(ctx context.Context, organizationId string, environmentId string, domain string, botDetection string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet22Request(c.Server, organizationId, environmentId, domain, botDetection)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Update10WithBody(ctx context.Context, organizationId string, environmentId string, domain string, botDetection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdate10RequestWithBody(c.Server, organizationId, environmentId, domain, botDetection, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Update10(ctx context.Context, organizationId string, environmentId string, domain string, botDetection string, body Update10JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdate10Request(c.Server, organizationId, environmentId, domain, botDetection, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCertificates(ctx context.Context, organizationId string, environmentId string, domain string, params *ListCertificatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCertificatesRequest(c.Server, organizationId, environmentId, domain, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCertificateWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCertificateRequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCertificate(ctx context.Context, organizationId string, environmentId string, domain string, body CreateCertificateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCertificateRequest(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RotateCertificate(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRotateCertificateRequest(c.Server, organizationId, environmentId, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCertificate(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCertificateRequest(c.Server, organizationId, environmentId, domain, certificate)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindCertificate(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindCertificateRequest(c.Server, organizationId, environmentId, domain, certificate)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCertificateWithBody(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCertificateRequestWithBody(c.Server, organizationId, environmentId, domain, certificate, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCertificate(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, body UpdateCertificateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCertificateRequest(c.Server, organizationId, environmentId, domain, certificate, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCertificatePublicKey(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCertificatePublicKeyRequest(c.Server, organizationId, environmentId, domain, certificate)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCertificatePublicKeys(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCertificatePublicKeysRequest(c.Server, organizationId, environmentId, domain, certificate)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) List22(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewList22Request(c.Server, organizationId, environmentId, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create12WithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreate12RequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create12(ctx context.Context, organizationId string, environmentId string, domain string, body Create12JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreate12Request(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Delete14(ctx context.Context, organizationId string, environmentId string, domain string, deviceIdentifier string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDelete14Request(c.Server, organizationId, environmentId, domain, deviceIdentifier)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get23(ctx context.Context, organizationId string, environmentId string, domain string, deviceIdentifier string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet23Request(c.Server, organizationId, environmentId, domain, deviceIdentifier)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Update11WithBody(ctx context.Context, organizationId string, environmentId string, domain string, deviceIdentifier string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdate11RequestWithBody(c.Server, organizationId, environmentId, domain, deviceIdentifier, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Update11(ctx context.Context, organizationId string, environmentId string, domain string, deviceIdentifier string, body Update11JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdate11Request(c.Server, organizationId, environmentId, domain, deviceIdentifier, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get19(ctx context.Context, organizationId string, environmentId string, domain string, params *Get19Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet19Request(c.Server, organizationId, environmentId, domain, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create9WithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreate9RequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create9(ctx context.Context, organizationId string, environmentId string, domain string, body Create9JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreate9Request(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Delete11(ctx context.Context, organizationId string, environmentId string, domain string, email string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDelete11Request(c.Server, organizationId, environmentId, domain, email)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Update8WithBody(ctx context.Context, organizationId string, environmentId string, domain string, email string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdate8RequestWithBody(c.Server, organizationId, environmentId, domain, email, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Update8(ctx context.Context, organizationId string, environmentId string, domain string, email string, body Update8JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdate8Request(c.Server, organizationId, environmentId, domain, email, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDomainEntrypoints(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDomainEntrypointsRequest(c.Server, organizationId, environmentId, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) List17(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewList17Request(c.Server, organizationId, environmentId, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create7WithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreate7RequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create7(ctx context.Context, organizationId string, environmentId string, domain string, body Create7JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreate7Request(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Delete9(ctx context.Context, organizationId string, environmentId string, domain string, extensionGrant string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDelete9Request(c.Server, organizationId, environmentId, domain, extensionGrant)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get17(ctx context.Context, organizationId string, environmentId string, domain string, extensionGrant string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet17Request(c.Server, organizationId, environmentId, domain, extensionGrant)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Update6WithBody(ctx context.Context, organizationId string, environmentId string, domain string, extensionGrant string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdate6RequestWithBody(c.Server, organizationId, environmentId, domain, extensionGrant, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Update6(ctx context.Context, organizationId string, environmentId string, domain string, extensionGrant string, body Update6JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdate6Request(c.Server, organizationId, environmentId, domain, extensionGrant, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListFactors(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListFactorsRequest(c.Server, organizationId, environmentId, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFactorWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFactorRequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFactor(ctx context.Context, organizationId string, environmentId string, domain string, body CreateFactorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFactorRequest(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFactor(ctx context.Context, organizationId string, environmentId string, domain string, factor string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFactorRequest(c.Server, organizationId, environmentId, domain, factor)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFactor(ctx context.Context, organizationId string, environmentId string, domain string, factor string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFactorRequest(c.Server, organizationId, environmentId, domain, factor)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFactorWithBody(ctx context.Context, organizationId string, environmentId string, domain string, factor string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFactorRequestWithBody(c.Server, organizationId, environmentId, domain, factor, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFactor(ctx context.Context, organizationId string, environmentId string, domain string, factor string, body UpdateFactorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFactorRequest(c.Server, organizationId, environmentId, domain, factor, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDomainFlows(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDomainFlowsRequest(c.Server, organizationId, environmentId, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DefineDomainFlowsWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDefineDomainFlowsRequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DefineDomainFlows(ctx context.Context, organizationId string, environmentId string, domain string, body DefineDomainFlowsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDefineDomainFlowsRequest(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDomainFlow(ctx context.Context, organizationId string, environmentId string, domain string, flow string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDomainFlowRequest(c.Server, organizationId, environmentId, domain, flow)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDomainFlowWithBody(ctx context.Context, organizationId string, environmentId string, domain string, flow string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDomainFlowRequestWithBody(c.Server, organizationId, environmentId, domain, flow, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDomainFlow(ctx context.Context, organizationId string, environmentId string, domain string, flow string, body UpdateDomainFlowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDomainFlowRequest(c.Server, organizationId, environmentId, domain, flow, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get18(ctx context.Context, organizationId string, environmentId string, domain string, params *Get18Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet18Request(c.Server, organizationId, environmentId, domain, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create8WithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreate8RequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create8(ctx context.Context, organizationId string, environmentId string, domain string, body Create8JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreate8Request(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RenderDomainTemplateWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRenderDomainTemplateRequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RenderDomainTemplate(ctx context.Context, organizationId string, environmentId string, domain string, body RenderDomainTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRenderDomainTemplateRequest(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Delete10(ctx context.Context, organizationId string, environmentId string, domain string, form string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDelete10Request(c.Server, organizationId, environmentId, domain, form)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Update7WithBody(ctx context.Context, organizationId string, environmentId string, domain string, form string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdate7RequestWithBody(c.Server, organizationId, environmentId, domain, form, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Update7(ctx context.Context, organizationId string, environmentId string, domain string, form string, body Update7JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdate7Request(c.Server, organizationId, environmentId, domain, form, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListGroups(ctx context.Context, organizationId string, environmentId string, domain string, params *ListGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListGroupsRequest(c.Server, organizationId, environmentId, domain, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGroupWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGroupRequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGroup(ctx context.Context, organizationId string, environmentId string, domain string, body CreateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGroupRequest(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGroup(ctx context.Context, organizationId string, environmentId string, domain string, group string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGroupRequest(c.Server, organizationId, environmentId, domain, group)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindGroup(ctx context.Context, organizationId string, environmentId string, domain string, group string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindGroupRequest(c.Server, organizationId, environmentId, domain, group)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateGroupWithBody(ctx context.Context, organizationId string, environmentId string, domain string, group string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateGroupRequestWithBody(c.Server, organizationId, environmentId, domain, group, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateGroup(ctx context.Context, organizationId string, environmentId string, domain string, group string, body UpdateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateGroupRequest(c.Server, organizationId, environmentId, domain, group, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroupMembers(ctx context.Context, organizationId string, environmentId string, domain string, group string, params *GetGroupMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupMembersRequest(c.Server, organizationId, environmentId, domain, group, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveGroupMember(ctx context.Context, organizationId string, environmentId string, domain string, group string, member string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveGroupMemberRequest(c.Server, organizationId, environmentId, domain, group, member)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddGroupMember(ctx context.Context, organizationId string, environmentId string, domain string, group string, member string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddGroupMemberRequest(c.Server, organizationId, environmentId, domain, group, member)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindGroupRoles(ctx context.Context, organizationId string, environmentId string, domain string, group string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindGroupRolesRequest(c.Server, organizationId, environmentId, domain, group)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssignRolesWithBody(ctx context.Context, organizationId string, environmentId string, domain string, group string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssignRolesRequestWithBody(c.Server, organizationId, environmentId, domain, group, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssignRoles(ctx context.Context, organizationId string, environmentId string, domain string, group string, body AssignRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssignRolesRequest(c.Server, organizationId, environmentId, domain, group, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RevokeRole(ctx context.Context, organizationId string, environmentId string, domain string, group string, role string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRevokeRoleRequest(c.Server, organizationId, environmentId, domain, group, role)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListI18nDictionaries(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListI18nDictionariesRequest(c.Server, organizationId, environmentId, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateI18nDictionaryWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateI18nDictionaryRequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteI18nDictionary(ctx context.Context, organizationId string, environmentId string, domain string, dictionary string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteI18nDictionaryRequest(c.Server, organizationId, environmentId, domain, dictionary)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetI18nDictionary(ctx context.Context, organizationId string, environmentId string, domain string, dictionary string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetI18nDictionaryRequest(c.Server, organizationId, environmentId, domain, dictionary)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutI18nDictionaryWithBody(ctx context.Context, organizationId string, environmentId string, domain string, dictionary string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutI18nDictionaryRequestWithBody(c.Server, organizationId, environmentId, domain, dictionary, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceI18nDictionaryEntriesWithBody(ctx context.Context, organizationId string, environmentId string, domain string, dictionary string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceI18nDictionaryEntriesRequestWithBody(c.Server, organizationId, environmentId, domain, dictionary, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIdentityProviders(ctx context.Context, organizationId string, environmentId string, domain string, params *ListIdentityProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIdentityProvidersRequest(c.Server, organizationId, environmentId, domain, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIdentityProviderWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIdentityProviderRequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIdentityProvider(ctx context.Context, organizationId string, environmentId string, domain string, body CreateIdentityProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIdentityProviderRequest(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIdentityProvider(ctx context.Context, organizationId string, environmentId string, domain string, identity string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIdentityProviderRequest(c.Server, organizationId, environmentId, domain, identity)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindIdentityProvider(ctx context.Context, organizationId string, environmentId string, domain string, identity string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindIdentityProviderRequest(c.Server, organizationId, environmentId, domain, identity)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIdentityProviderWithBody(ctx context.Context, organizationId string, environmentId string, domain string, identity string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIdentityProviderRequestWithBody(c.Server, organizationId, environmentId, domain, identity, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIdentityProvider(ctx context.Context, organizationId string, environmentId string, domain string, identity string, body UpdateIdentityProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIdentityProviderRequest(c.Server, organizationId, environmentId, domain, identity, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) List8(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewList8Request(c.Server, organizationId, environmentId, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddOrUpdateMember1WithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddOrUpdateMember1RequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddOrUpdateMember1(ctx context.Context, organizationId string, environmentId string, domain string, body AddOrUpdateMember1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddOrUpdateMember1Request(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Permissions1(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPermissions1Request(c.Server, organizationId, environmentId, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveMember2(ctx context.Context, organizationId string, environmentId string, domain string, member string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveMember2Request(c.Server, organizationId, environmentId, domain, member)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) List18(ctx context.Context, organizationId string, environmentId string, domain string, params *List18Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewList18Request(c.Server, organizationId, environmentId, domain, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create10WithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreate10RequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create10(ctx context.Context, organizationId string, environmentId string, domain string, body Create10JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreate10Request(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Delete12(ctx context.Context, organizationId string, environmentId string, domain string, reporter string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDelete12Request(c.Server, organizationId, environmentId, domain, reporter)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get20(ctx context.Context, organizationId string, environmentId string, domain string, reporter string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet20Request(c.Server, organizationId, environmentId, domain, reporter)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Update9WithBody(ctx context.Context, organizationId string, environmentId string, domain string, reporter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdate9RequestWithBody(c.Server, organizationId, environmentId, domain, reporter, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Update9(ctx context.Context, organizationId string, environmentId string, domain string, reporter string, body Update9JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdate9Request(c.Server, organizationId, environmentId, domain, reporter, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListResources(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListResourcesRequest(c.Server, organizationId, environmentId, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateResourceWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateResourceRequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateResource(ctx context.Context, organizationId string, environmentId string, domain string, body CreateResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateResourceRequest(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteResource(ctx context.Context, organizationId string, environmentId string, domain string, resource string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteResourceRequest(c.Server, organizationId, environmentId, domain, resource)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetResource(ctx context.Context, organizationId string, environmentId string, domain string, resource string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetResourceRequest(c.Server, organizationId, environmentId, domain, resource)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateResourceWithBody(ctx context.Context, organizationId string, environmentId string, domain string, resource string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateResourceRequestWithBody(c.Server, organizationId, environmentId, domain, resource, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateResource(ctx context.Context, organizationId string, environmentId string, domain string, resource string, body UpdateResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateResourceRequest(c.Server, organizationId, environmentId, domain, resource, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindRoles(ctx context.Context, organizationId string, environmentId string, domain string, params *FindRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindRolesRequest(c.Server, organizationId, environmentId, domain, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRoleWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRoleRequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRole(ctx context.Context, organizationId string, environmentId string, domain string, body CreateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRoleRequest(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRole(ctx context.Context, organizationId string, environmentId string, domain string, role string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRoleRequest(c.Server, organizationId, environmentId, domain, role)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindRole(ctx context.Context, organizationId string, environmentId string, domain string, role string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindRoleRequest(c.Server, organizationId, environmentId, domain, role)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRoleWithBody(ctx context.Context, organizationId string, environmentId string, domain string, role string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRoleRequestWithBody(c.Server, organizationId, environmentId, domain, role, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRole(ctx context.Context, organizationId string, environmentId string, domain string, role string, body UpdateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRoleRequest(c.Server, organizationId, environmentId, domain, role, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListScopes(ctx context.Context, organizationId string, environmentId string, domain string, params *ListScopesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListScopesRequest(c.Server, organizationId, environmentId, domain, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateScopeWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateScopeRequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateScope(ctx context.Context, organizationId string, environmentId string, domain string, body CreateScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateScopeRequest(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteScope(ctx context.Context, organizationId string, environmentId string, domain string, scope string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteScopeRequest(c.Server, organizationId, environmentId, domain, scope)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindScope(ctx context.Context, organizationId string, environmentId string, domain string, scope string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindScopeRequest(c.Server, organizationId, environmentId, domain, scope)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchScopeWithBody(ctx context.Context, organizationId string, environmentId string, domain string, scope string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchScopeRequestWithBody(c.Server, organizationId, environmentId, domain, scope, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchScope(ctx context.Context, organizationId string, environmentId string, domain string, scope string, body PatchScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchScopeRequest(c.Server, organizationId, environmentId, domain, scope, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateScopeWithBody(ctx context.Context, organizationId string, environmentId string, domain string, scope string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateScopeRequestWithBody(c.Server, organizationId, environmentId, domain, scope, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateScope(ctx context.Context, organizationId string, environmentId string, domain string, scope string, body UpdateScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateScopeRequest(c.Server, organizationId, environmentId, domain, scope, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListThemes(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListThemesRequest(c.Server, organizationId, environmentId, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateThemeWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateThemeRequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTheme(ctx context.Context, organizationId string, environmentId string, domain string, body CreateThemeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateThemeRequest(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTheme(ctx context.Context, organizationId string, environmentId string, domain string, themeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteThemeRequest(c.Server, organizationId, environmentId, domain, themeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTheme(ctx context.Context, organizationId string, environmentId string, domain string, themeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetThemeRequest(c.Server, organizationId, environmentId, domain, themeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateThemeWithBody(ctx context.Context, organizationId string, environmentId string, domain string, themeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateThemeRequestWithBody(c.Server, organizationId, environmentId, domain, themeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTheme(ctx context.Context, organizationId string, environmentId string, domain string, themeId string, body UpdateThemeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateThemeRequest(c.Server, organizationId, environmentId, domain, themeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUsers(ctx context.Context, organizationId string, environmentId string, domain string, params *ListUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUsersRequest(c.Server, organizationId, environmentId, domain, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserRequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUser(ctx context.Context, organizationId string, environmentId string, domain string, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserRequest(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUser(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserRequest(c.Server, organizationId, environmentId, domain, user)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindUser(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindUserRequest(c.Server, organizationId, environmentId, domain, user)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserWithBody(ctx context.Context, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserRequestWithBody(c.Server, organizationId, environmentId, domain, user, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUser(ctx context.Context, organizationId string, environmentId string, domain string, user string, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserRequest(c.Server, organizationId, environmentId, domain, user, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) List14(ctx context.Context, organizationId string, environmentId string, domain string, user string, params *List14Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewList14Request(c.Server, organizationId, environmentId, domain, user, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get11(ctx context.Context, organizationId string, environmentId string, domain string, user string, audit string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet11Request(c.Server, organizationId, environmentId, domain, user, audit)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Delete5(ctx context.Context, organizationId string, environmentId string, domain string, user string, params *Delete5Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDelete5Request(c.Server, organizationId, environmentId, domain, user, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) List10(ctx context.Context, organizationId string, environmentId string, domain string, user string, params *List10Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewList10Request(c.Server, organizationId, environmentId, domain, user, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Revoke(ctx context.Context, organizationId string, environmentId string, domain string, user string, consent string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRevokeRequest(c.Server, organizationId, environmentId, domain, user, consent)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get9(ctx context.Context, organizationId string, environmentId string, domain string, user string, consent string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet9Request(c.Server, organizationId, environmentId, domain, user, consent)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) List13(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewList13Request(c.Server, organizationId, environmentId, domain, user)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Revoke2(ctx context.Context, organizationId string, environmentId string, domain string, user string, credential string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRevoke2Request(c.Server, organizationId, environmentId, domain, user, credential)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get10(ctx context.Context, organizationId string, environmentId string, domain string, user string, credential string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet10Request(c.Server, organizationId, environmentId, domain, user, credential)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) List9(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewList9Request(c.Server, organizationId, environmentId, domain, user)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Delete4(ctx context.Context, organizationId string, environmentId string, domain string, user string, device string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDelete4Request(c.Server, organizationId, environmentId, domain, user, device)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) List12(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewList12Request(c.Server, organizationId, environmentId, domain, user)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Delete6(ctx context.Context, organizationId string, environmentId string, domain string, user string, factor string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDelete6Request(c.Server, organizationId, environmentId, domain, user, factor)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LockUser(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLockUserRequest(c.Server, organizationId, environmentId, domain, user)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetPasswordWithBody(ctx context.Context, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetPasswordRequestWithBody(c.Server, organizationId, environmentId, domain, user, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) List11(ctx context.Context, organizationId string, environmentId string, domain string, user string, params *List11Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewList11Request(c.Server, organizationId, environmentId, domain, user, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssignWithBody(ctx context.Context, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssignRequestWithBody(c.Server, organizationId, environmentId, domain, user, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Assign(ctx context.Context, organizationId string, environmentId string, domain string, user string, body AssignJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssignRequest(c.Server, organizationId, environmentId, domain, user, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Revoke1(ctx context.Context, organizationId string, environmentId string, domain string, user string, role string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRevoke1Request(c.Server, organizationId, environmentId, domain, user, role)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendRegistrationConfirmation(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendRegistrationConfirmationRequest(c.Server, organizationId, environmentId, domain, user)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserStatusWithBody(ctx context.Context, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserStatusRequestWithBody(c.Server, organizationId, environmentId, domain, user, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserStatus(ctx context.Context, organizationId string, environmentId string, domain string, user string, body UpdateUserStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserStatusRequest(c.Server, organizationId, environmentId, domain, user, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnlockUser(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnlockUserRequest(c.Server, organizationId, environmentId, domain, user)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUsernameWithBody(ctx context.Context, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUsernameRequestWithBody(c.Server, organizationId, environmentId, domain, user, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUsername(ctx context.Context, organizationId string, environmentId string, domain string, user string, body UpdateUsernameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUsernameRequest(c.Server, organizationId, environmentId, domain, user, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Permissions(ctx context.Context, organizationId string, environmentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPermissionsRequest(c.Server, organizationId, environmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get7(ctx context.Context, organizationId string, params *Get7Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet7Request(c.Server, organizationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create4WithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreate4RequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create4(ctx context.Context, organizationId string, body Create4JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreate4Request(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Delete3(ctx context.Context, organizationId string, form string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDelete3Request(c.Server, organizationId, form)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Update3WithBody(ctx context.Context, organizationId string, form string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdate3RequestWithBody(c.Server, organizationId, form, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Update3(ctx context.Context, organizationId string, form string, body Update3JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdate3Request(c.Server, organizationId, form, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) List3(ctx context.Context, organizationId string, params *List3Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewList3Request(c.Server, organizationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create2WithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreate2RequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create2(ctx context.Context, organizationId string, body Create2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreate2Request(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganizationGroup(ctx context.Context, organizationId string, group string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationGroupRequest(c.Server, organizationId, group)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationGroup(ctx context.Context, organizationId string, group string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationGroupRequest(c.Server, organizationId, group)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganizationGroupWithBody(ctx context.Context, organizationId string, group string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationGroupRequestWithBody(c.Server, organizationId, group, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganizationGroup(ctx context.Context, organizationId string, group string, body UpdateOrganizationGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationGroupRequest(c.Server, organizationId, group, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) List4(ctx context.Context, organizationId string, group string, params *List4Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewList4Request(c.Server, organizationId, group, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveMember1(ctx context.Context, organizationId string, group string, member string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveMember1Request(c.Server, organizationId, group, member)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddMember(ctx context.Context, organizationId string, group string, member string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddMemberRequest(c.Server, organizationId, group, member)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) List5(ctx context.Context, organizationId string, params *List5Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewList5Request(c.Server, organizationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create3WithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreate3RequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create3(ctx context.Context, organizationId string, body Create3JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreate3Request(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Delete2(ctx context.Context, organizationId string, identity string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDelete2Request(c.Server, organizationId, identity)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get4(ctx context.Context, organizationId string, identity string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet4Request(c.Server, organizationId, identity)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Update2WithBody(ctx context.Context, organizationId string, identity string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdate2RequestWithBody(c.Server, organizationId, identity, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Update2(ctx context.Context, organizationId string, identity string, body Update2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdate2Request(c.Server, organizationId, identity, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMembers(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMembersRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddOrUpdateMemberWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddOrUpdateMemberRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddOrUpdateMember(ctx context.Context, organizationId string, body AddOrUpdateMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddOrUpdateMemberRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveMember(ctx context.Context, organizationId string, member string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveMemberRequest(c.Server, organizationId, member)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) List2(ctx context.Context, organizationId string, params *List2Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewList2Request(c.Server, organizationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create1WithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreate1RequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create1(ctx context.Context, organizationId string, body Create1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreate1Request(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Delete1(ctx context.Context, organizationId string, role string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDelete1Request(c.Server, organizationId, role)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get3(ctx context.Context, organizationId string, role string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet3Request(c.Server, organizationId, role)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Update1WithBody(ctx context.Context, organizationId string, role string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdate1RequestWithBody(c.Server, organizationId, role, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Update1(ctx context.Context, organizationId string, role string, body Update1JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdate1Request(c.Server, organizationId, role, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get6(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet6Request(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Patch(ctx context.Context, organizationId string, body PatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) List1(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewList1Request(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create(ctx context.Context, organizationId string, body CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Delete(ctx context.Context, organizationId string, tag string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRequest(c.Server, organizationId, tag)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get2(ctx context.Context, organizationId string, tag string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet2Request(c.Server, organizationId, tag)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWithBody(ctx context.Context, organizationId string, tag string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRequestWithBody(c.Server, organizationId, tag, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Update(ctx context.Context, organizationId string, tag string, body UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRequest(c.Server, organizationId, tag, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOrganisationUsers(ctx context.Context, organizationId string, params *ListOrganisationUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOrganisationUsersRequest(c.Server, organizationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganisationUserWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganisationUserRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganisationUser(ctx context.Context, organizationId string, body CreateOrganisationUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganisationUserRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganizationUser(ctx context.Context, organizationId string, user string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationUserRequest(c.Server, organizationId, user)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get5(ctx context.Context, organizationId string, user string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet5Request(c.Server, organizationId, user)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganizationUserWithBody(ctx context.Context, organizationId string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationUserRequestWithBody(c.Server, organizationId, user, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganizationUser(ctx context.Context, organizationId string, user string, body UpdateOrganizationUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationUserRequest(c.Server, organizationId, user, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetOrganizationUserPasswordWithBody(ctx context.Context, organizationId string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetOrganizationUserPasswordRequestWithBody(c.Server, organizationId, user, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganizationUserStatusWithBody(ctx context.Context, organizationId string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationUserStatusRequestWithBody(c.Server, organizationId, user, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganizationUserStatus(ctx context.Context, organizationId string, user string, body UpdateOrganizationUserStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationUserStatusRequest(c.Server, organizationId, user, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganisationUsernameWithBody(ctx context.Context, organizationId string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganisationUsernameRequestWithBody(c.Server, organizationId, user, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganisationUsername(ctx context.Context, organizationId string, user string, body UpdateOrganisationUsernameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganisationUsernameRequest(c.Server, organizationId, user, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) List25(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewList25Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAlertServiceStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAlertServiceStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) List37(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewList37Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSpelGrammar(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSpelGrammarRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get38(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet38Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) List35(ctx context.Context, params *List35Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewList35Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get35(ctx context.Context, authDeviceNotifierId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet35Request(c.Server, authDeviceNotifierId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSchema9(ctx context.Context, authDeviceNotifierId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSchema9Request(c.Server, authDeviceNotifierId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) List34(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewList34Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get34(ctx context.Context, botDetection string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet34Request(c.Server, botDetection)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSchema8(ctx context.Context, botDetection string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSchema8Request(c.Server, botDetection)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) List27(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewList27Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get27(ctx context.Context, certificate string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet27Request(c.Server, certificate)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSchema1(ctx context.Context, certificate string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSchema1Request(c.Server, certificate)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) List36(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewList36Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get36(ctx context.Context, deviceIdentifier string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet36Request(c.Server, deviceIdentifier)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSchema10(ctx context.Context, deviceIdentifier string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSchema10Request(c.Server, deviceIdentifier)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) List28(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewList28Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get28(ctx context.Context, extensionGrant string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet28Request(c.Server, extensionGrant)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSchema2(ctx context.Context, extensionGrant string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSchema2Request(c.Server, extensionGrant)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) List31(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewList31Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get31(ctx context.Context, factor string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet31Request(c.Server, factor)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSchema5(ctx context.Context, factor string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSchema5Request(c.Server, factor)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) List26(ctx context.Context, params *List26Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewList26Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get26(ctx context.Context, identity string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet26Request(c.Server, identity)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSchema(ctx context.Context, identity string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSchemaRequest(c.Server, identity)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) List33(ctx context.Context, params *List33Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewList33Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get33(ctx context.Context, notifierId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet33Request(c.Server, notifierId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSchema7(ctx context.Context, notifierId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSchema7Request(c.Server, notifierId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) List30(ctx context.Context, params *List30Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewList30Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get30(ctx context.Context, policy string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet30Request(c.Server, policy)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDocumentation(ctx context.Context, policy string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDocumentationRequest(c.Server, policy)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSchema4(ctx context.Context, policy string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSchema4Request(c.Server, policy)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) List29(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewList29Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get29(ctx context.Context, reporter string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet29Request(c.Server, reporter)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSchema3(ctx context.Context, reporter string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSchema3Request(c.Server, reporter)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) List32(ctx context.Context, params *List32Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewList32Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get32(ctx context.Context, resource string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet32Request(c.Server, resource)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSchema6(ctx context.Context, resource string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSchema6Request(c.Server, resource)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get37(ctx context.Context, role string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGet37Request(c.Server, role)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubscribeNewsletterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubscribeNewsletterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaglines(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaglinesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListNotifications(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListNotificationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MarkAsRead(ctx context.Context, notificationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMarkAsReadRequest(c.Server, notificationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostRequest generates requests for Post
func NewPostRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListRequest generates requests for List
func NewListRequest(server string, organizationId string, params *ListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/audits", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.User != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user", runtime.ParamLocationQuery, *params.User); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGet1Request generates requests for Get1
func NewGet1Request(server string, organizationId string, audit string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "audit", runtime.ParamLocationPath, audit)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/audits/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewList24Request generates requests for List24
func NewList24Request(server string, organizationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/entrypoints", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreate14Request calls the generic Create14 builder with application/json body
func NewCreate14Request(server string, organizationId string, body Create14JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreate14RequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewCreate14RequestWithBody generates requests for Create14 with any type of body
func NewCreate14RequestWithBody(server string, organizationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/entrypoints", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDelete16Request generates requests for Delete16
func NewDelete16Request(server string, organizationId string, entrypointId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entrypointId", runtime.ParamLocationPath, entrypointId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/entrypoints/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGet25Request generates requests for Get25
func NewGet25Request(server string, organizationId string, entrypointId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entrypointId", runtime.ParamLocationPath, entrypointId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/entrypoints/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdate13Request calls the generic Update13 builder with application/json body
func NewUpdate13Request(server string, organizationId string, entrypointId string, body Update13JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdate13RequestWithBody(server, organizationId, entrypointId, "application/json", bodyReader)
}

// NewUpdate13RequestWithBody generates requests for Update13 with any type of body
func NewUpdate13RequestWithBody(server string, organizationId string, entrypointId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entrypointId", runtime.ParamLocationPath, entrypointId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/entrypoints/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewList6Request generates requests for List6
func NewList6Request(server string, organizationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListDomainsRequest generates requests for ListDomains
func NewListDomainsRequest(server string, organizationId string, environmentId string, params *ListDomainsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDomainRequest calls the generic CreateDomain builder with application/json body
func NewCreateDomainRequest(server string, organizationId string, environmentId string, body CreateDomainJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDomainRequestWithBody(server, organizationId, environmentId, "application/json", bodyReader)
}

// NewCreateDomainRequestWithBody generates requests for CreateDomain with any type of body
func NewCreateDomainRequestWithBody(server string, organizationId string, environmentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindDomainByHridRequest generates requests for FindDomainByHrid
func NewFindDomainByHridRequest(server string, organizationId string, environmentId string, hrid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "hrid", runtime.ParamLocationPath, hrid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/_hrid/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteDomainRequest generates requests for DeleteDomain
func NewDeleteDomainRequest(server string, organizationId string, environmentId string, domain string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindDomainRequest generates requests for FindDomain
func NewFindDomainRequest(server string, organizationId string, environmentId string, domain string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchDomainRequest calls the generic PatchDomain builder with application/json body
func NewPatchDomainRequest(server string, organizationId string, environmentId string, domain string, body PatchDomainJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchDomainRequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewPatchDomainRequestWithBody generates requests for PatchDomain with any type of body
func NewPatchDomainRequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateDomainRequest calls the generic UpdateDomain builder with application/json body
func NewUpdateDomainRequest(server string, organizationId string, environmentId string, domain string, body UpdateDomainJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDomainRequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewUpdateDomainRequestWithBody generates requests for UpdateDomain with any type of body
func NewUpdateDomainRequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListAlertNotifiersRequest generates requests for ListAlertNotifiers
func NewListAlertNotifiersRequest(server string, organizationId string, environmentId string, domain string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/alerts/notifiers", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAlertNotifierRequest calls the generic CreateAlertNotifier builder with application/json body
func NewCreateAlertNotifierRequest(server string, organizationId string, environmentId string, domain string, body CreateAlertNotifierJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAlertNotifierRequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewCreateAlertNotifierRequestWithBody generates requests for CreateAlertNotifier with any type of body
func NewCreateAlertNotifierRequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/alerts/notifiers", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAlertNotifierRequest generates requests for DeleteAlertNotifier
func NewDeleteAlertNotifierRequest(server string, organizationId string, environmentId string, domain string, notifierId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "notifierId", runtime.ParamLocationPath, notifierId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/alerts/notifiers/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAlertNotifierRequest generates requests for GetAlertNotifier
func NewGetAlertNotifierRequest(server string, organizationId string, environmentId string, domain string, notifierId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "notifierId", runtime.ParamLocationPath, notifierId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/alerts/notifiers/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchAlertNotifierRequest calls the generic PatchAlertNotifier builder with application/json body
func NewPatchAlertNotifierRequest(server string, organizationId string, environmentId string, domain string, notifierId string, body PatchAlertNotifierJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchAlertNotifierRequestWithBody(server, organizationId, environmentId, domain, notifierId, "application/json", bodyReader)
}

// NewPatchAlertNotifierRequestWithBody generates requests for PatchAlertNotifier with any type of body
func NewPatchAlertNotifierRequestWithBody(server string, organizationId string, environmentId string, domain string, notifierId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "notifierId", runtime.ParamLocationPath, notifierId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/alerts/notifiers/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewList20Request generates requests for List20
func NewList20Request(server string, organizationId string, environmentId string, domain string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/alerts/triggers", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewList19Request calls the generic List19 builder with application/json body
func NewList19Request(server string, organizationId string, environmentId string, domain string, body List19JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewList19RequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewList19RequestWithBody generates requests for List19 with any type of body
func NewList19RequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/alerts/triggers", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGet21Request generates requests for Get21
func NewGet21Request(server string, organizationId string, environmentId string, domain string, params *Get21Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/analytics", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Interval != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "interval", runtime.ParamLocationQuery, *params.Interval); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Field != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "field", runtime.ParamLocationQuery, *params.Field); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListApplicationsRequest generates requests for ListApplications
func NewListApplicationsRequest(server string, organizationId string, environmentId string, domain string, params *ListApplicationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateApplicationRequest calls the generic CreateApplication builder with application/json body
func NewCreateApplicationRequest(server string, organizationId string, environmentId string, domain string, body CreateApplicationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateApplicationRequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewCreateApplicationRequestWithBody generates requests for CreateApplication with any type of body
func NewCreateApplicationRequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApplicationRequest generates requests for DeleteApplication
func NewDeleteApplicationRequest(server string, organizationId string, environmentId string, domain string, application string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindApplicationRequest generates requests for FindApplication
func NewFindApplicationRequest(server string, organizationId string, environmentId string, domain string, application string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchApplicationRequest calls the generic PatchApplication builder with application/json body
func NewPatchApplicationRequest(server string, organizationId string, environmentId string, domain string, application string, body PatchApplicationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchApplicationRequestWithBody(server, organizationId, environmentId, domain, application, "application/json", bodyReader)
}

// NewPatchApplicationRequestWithBody generates requests for PatchApplication with any type of body
func NewPatchApplicationRequestWithBody(server string, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateApplicationRequest calls the generic UpdateApplication builder with application/json body
func NewUpdateApplicationRequest(server string, organizationId string, environmentId string, domain string, application string, body UpdateApplicationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateApplicationRequestWithBody(server, organizationId, environmentId, domain, application, "application/json", bodyReader)
}

// NewUpdateApplicationRequestWithBody generates requests for UpdateApplication with any type of body
func NewUpdateApplicationRequestWithBody(server string, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGet14Request generates requests for Get14
func NewGet14Request(server string, organizationId string, environmentId string, domain string, application string, params *Get14Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/analytics", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Interval != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "interval", runtime.ParamLocationQuery, *params.Interval); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Field != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "field", runtime.ParamLocationQuery, *params.Field); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGet13Request generates requests for Get13
func NewGet13Request(server string, organizationId string, environmentId string, domain string, application string, params *Get13Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/emails", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "template", runtime.ParamLocationQuery, params.Template); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreate6Request calls the generic Create6 builder with application/json body
func NewCreate6Request(server string, organizationId string, environmentId string, domain string, application string, body Create6JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreate6RequestWithBody(server, organizationId, environmentId, domain, application, "application/json", bodyReader)
}

// NewCreate6RequestWithBody generates requests for Create6 with any type of body
func NewCreate6RequestWithBody(server string, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/emails", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDelete8Request generates requests for Delete8
func NewDelete8Request(server string, organizationId string, environmentId string, domain string, application string, email string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "email", runtime.ParamLocationPath, email)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/emails/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdate5Request calls the generic Update5 builder with application/json body
func NewUpdate5Request(server string, organizationId string, environmentId string, domain string, application string, email string, body Update5JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdate5RequestWithBody(server, organizationId, environmentId, domain, application, email, "application/json", bodyReader)
}

// NewUpdate5RequestWithBody generates requests for Update5 with any type of body
func NewUpdate5RequestWithBody(server string, organizationId string, environmentId string, domain string, application string, email string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "email", runtime.ParamLocationPath, email)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/emails/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListAppFlowsRequest generates requests for ListAppFlows
func NewListAppFlowsRequest(server string, organizationId string, environmentId string, domain string, application string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/flows", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDefineAppFlowsRequest calls the generic DefineAppFlows builder with application/json body
func NewDefineAppFlowsRequest(server string, organizationId string, environmentId string, domain string, application string, body DefineAppFlowsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDefineAppFlowsRequestWithBody(server, organizationId, environmentId, domain, application, "application/json", bodyReader)
}

// NewDefineAppFlowsRequestWithBody generates requests for DefineAppFlows with any type of body
func NewDefineAppFlowsRequestWithBody(server string, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/flows", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAppFlowRequest generates requests for GetAppFlow
func NewGetAppFlowRequest(server string, organizationId string, environmentId string, domain string, application string, flow string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "flow", runtime.ParamLocationPath, flow)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/flows/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAppFlowRequest calls the generic UpdateAppFlow builder with application/json body
func NewUpdateAppFlowRequest(server string, organizationId string, environmentId string, domain string, application string, flow string, body UpdateAppFlowJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAppFlowRequestWithBody(server, organizationId, environmentId, domain, application, flow, "application/json", bodyReader)
}

// NewUpdateAppFlowRequestWithBody generates requests for UpdateAppFlow with any type of body
func NewUpdateAppFlowRequestWithBody(server string, organizationId string, environmentId string, domain string, application string, flow string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "flow", runtime.ParamLocationPath, flow)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/flows/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGet12Request generates requests for Get12
func NewGet12Request(server string, organizationId string, environmentId string, domain string, application string, params *Get12Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/forms", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "template", runtime.ParamLocationQuery, params.Template); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreate5Request calls the generic Create5 builder with application/json body
func NewCreate5Request(server string, organizationId string, environmentId string, domain string, application string, body Create5JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreate5RequestWithBody(server, organizationId, environmentId, domain, application, "application/json", bodyReader)
}

// NewCreate5RequestWithBody generates requests for Create5 with any type of body
func NewCreate5RequestWithBody(server string, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/forms", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDelete7Request generates requests for Delete7
func NewDelete7Request(server string, organizationId string, environmentId string, domain string, application string, form string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "form", runtime.ParamLocationPath, form)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/forms/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdate4Request calls the generic Update4 builder with application/json body
func NewUpdate4Request(server string, organizationId string, environmentId string, domain string, application string, form string, body Update4JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdate4RequestWithBody(server, organizationId, environmentId, domain, application, form, "application/json", bodyReader)
}

// NewUpdate4RequestWithBody generates requests for Update4 with any type of body
func NewUpdate4RequestWithBody(server string, organizationId string, environmentId string, domain string, application string, form string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "form", runtime.ParamLocationPath, form)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/forms/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMembers1Request generates requests for GetMembers1
func NewGetMembers1Request(server string, organizationId string, environmentId string, domain string, application string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/members", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddOrUpdateMember2Request calls the generic AddOrUpdateMember2 builder with application/json body
func NewAddOrUpdateMember2Request(server string, organizationId string, environmentId string, domain string, application string, body AddOrUpdateMember2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddOrUpdateMember2RequestWithBody(server, organizationId, environmentId, domain, application, "application/json", bodyReader)
}

// NewAddOrUpdateMember2RequestWithBody generates requests for AddOrUpdateMember2 with any type of body
func NewAddOrUpdateMember2RequestWithBody(server string, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/members", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPermissions2Request generates requests for Permissions2
func NewPermissions2Request(server string, organizationId string, environmentId string, domain string, application string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/members/permissions", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRemoveMember3Request generates requests for RemoveMember3
func NewRemoveMember3Request(server string, organizationId string, environmentId string, domain string, application string, member string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "member", runtime.ParamLocationPath, member)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/members/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewList15Request generates requests for List15
func NewList15Request(server string, organizationId string, environmentId string, domain string, application string, params *List15Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/resources", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGet15Request generates requests for Get15
func NewGet15Request(server string, organizationId string, environmentId string, domain string, application string, resource string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "resource", runtime.ParamLocationPath, resource)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/resources/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewList16Request generates requests for List16
func NewList16Request(server string, organizationId string, environmentId string, domain string, application string, resource string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "resource", runtime.ParamLocationPath, resource)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/resources/%s/policies", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGet16Request generates requests for Get16
func NewGet16Request(server string, organizationId string, environmentId string, domain string, application string, resource string, policy string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "resource", runtime.ParamLocationPath, resource)
	if err != nil {
		return nil, err
	}

	var pathParam5 string

	pathParam5, err = runtime.StyleParamWithLocation("simple", false, "policy", runtime.ParamLocationPath, policy)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/resources/%s/policies/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4, pathParam5)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRenewClientSecretRequest generates requests for RenewClientSecret
func NewRenewClientSecretRequest(server string, organizationId string, environmentId string, domain string, application string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/secret/_renew", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateApplicationTypeRequest calls the generic UpdateApplicationType builder with application/json body
func NewUpdateApplicationTypeRequest(server string, organizationId string, environmentId string, domain string, application string, body UpdateApplicationTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateApplicationTypeRequestWithBody(server, organizationId, environmentId, domain, application, "application/json", bodyReader)
}

// NewUpdateApplicationTypeRequestWithBody generates requests for UpdateApplicationType with any type of body
func NewUpdateApplicationTypeRequestWithBody(server string, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/type", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewList7Request generates requests for List7
func NewList7Request(server string, organizationId string, environmentId string, domain string, params *List7Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/audits", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.User != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user", runtime.ParamLocationQuery, *params.User); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGet8Request generates requests for Get8
func NewGet8Request(server string, organizationId string, environmentId string, domain string, audit string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "audit", runtime.ParamLocationPath, audit)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/audits/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewList23Request generates requests for List23
func NewList23Request(server string, organizationId string, environmentId string, domain string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/auth-device-notifiers", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreate13Request calls the generic Create13 builder with application/json body
func NewCreate13Request(server string, organizationId string, environmentId string, domain string, body Create13JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreate13RequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewCreate13RequestWithBody generates requests for Create13 with any type of body
func NewCreate13RequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/auth-device-notifiers", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDelete15Request generates requests for Delete15
func NewDelete15Request(server string, organizationId string, environmentId string, domain string, authDeviceNotifier string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "authDeviceNotifier", runtime.ParamLocationPath, authDeviceNotifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/auth-device-notifiers/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGet24Request generates requests for Get24
func NewGet24Request(server string, organizationId string, environmentId string, domain string, authDeviceNotifier string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "authDeviceNotifier", runtime.ParamLocationPath, authDeviceNotifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/auth-device-notifiers/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdate12Request calls the generic Update12 builder with application/json body
func NewUpdate12Request(server string, organizationId string, environmentId string, domain string, authDeviceNotifier string, body Update12JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdate12RequestWithBody(server, organizationId, environmentId, domain, authDeviceNotifier, "application/json", bodyReader)
}

// NewUpdate12RequestWithBody generates requests for Update12 with any type of body
func NewUpdate12RequestWithBody(server string, organizationId string, environmentId string, domain string, authDeviceNotifier string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "authDeviceNotifier", runtime.ParamLocationPath, authDeviceNotifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/auth-device-notifiers/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewList21Request generates requests for List21
func NewList21Request(server string, organizationId string, environmentId string, domain string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/bot-detections", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreate11Request calls the generic Create11 builder with application/json body
func NewCreate11Request(server string, organizationId string, environmentId string, domain string, body Create11JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreate11RequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewCreate11RequestWithBody generates requests for Create11 with any type of body
func NewCreate11RequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/bot-detections", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDelete13Request generates requests for Delete13
func NewDelete13Request(server string, organizationId string, environmentId string, domain string, botDetection string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "botDetection", runtime.ParamLocationPath, botDetection)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/bot-detections/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGet22Request generates requests for Get22
func NewGet22Request(server string, organizationId string, environmentId string, domain string, botDetection string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "botDetection", runtime.ParamLocationPath, botDetection)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/bot-detections/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdate10Request calls the generic Update10 builder with application/json body
func NewUpdate10Request(server string, organizationId string, environmentId string, domain string, botDetection string, body Update10JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdate10RequestWithBody(server, organizationId, environmentId, domain, botDetection, "application/json", bodyReader)
}

// NewUpdate10RequestWithBody generates requests for Update10 with any type of body
func NewUpdate10RequestWithBody(server string, organizationId string, environmentId string, domain string, botDetection string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "botDetection", runtime.ParamLocationPath, botDetection)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/bot-detections/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListCertificatesRequest generates requests for ListCertificates
func NewListCertificatesRequest(server string, organizationId string, environmentId string, domain string, params *ListCertificatesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/certificates", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Use != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "use", runtime.ParamLocationQuery, *params.Use); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCertificateRequest calls the generic CreateCertificate builder with application/json body
func NewCreateCertificateRequest(server string, organizationId string, environmentId string, domain string, body CreateCertificateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCertificateRequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewCreateCertificateRequestWithBody generates requests for CreateCertificate with any type of body
func NewCreateCertificateRequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/certificates", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRotateCertificateRequest generates requests for RotateCertificate
func NewRotateCertificateRequest(server string, organizationId string, environmentId string, domain string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/certificates/rotate", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteCertificateRequest generates requests for DeleteCertificate
func NewDeleteCertificateRequest(server string, organizationId string, environmentId string, domain string, certificate string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "certificate", runtime.ParamLocationPath, certificate)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/certificates/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindCertificateRequest generates requests for FindCertificate
func NewFindCertificateRequest(server string, organizationId string, environmentId string, domain string, certificate string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "certificate", runtime.ParamLocationPath, certificate)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/certificates/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCertificateRequest calls the generic UpdateCertificate builder with application/json body
func NewUpdateCertificateRequest(server string, organizationId string, environmentId string, domain string, certificate string, body UpdateCertificateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCertificateRequestWithBody(server, organizationId, environmentId, domain, certificate, "application/json", bodyReader)
}

// NewUpdateCertificateRequestWithBody generates requests for UpdateCertificate with any type of body
func NewUpdateCertificateRequestWithBody(server string, organizationId string, environmentId string, domain string, certificate string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "certificate", runtime.ParamLocationPath, certificate)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/certificates/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCertificatePublicKeyRequest generates requests for GetCertificatePublicKey
func NewGetCertificatePublicKeyRequest(server string, organizationId string, environmentId string, domain string, certificate string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "certificate", runtime.ParamLocationPath, certificate)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/certificates/%s/key", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCertificatePublicKeysRequest generates requests for GetCertificatePublicKeys
func NewGetCertificatePublicKeysRequest(server string, organizationId string, environmentId string, domain string, certificate string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "certificate", runtime.ParamLocationPath, certificate)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/certificates/%s/keys", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewList22Request generates requests for List22
func NewList22Request(server string, organizationId string, environmentId string, domain string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/device-identifiers", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreate12Request calls the generic Create12 builder with application/json body
func NewCreate12Request(server string, organizationId string, environmentId string, domain string, body Create12JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreate12RequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewCreate12RequestWithBody generates requests for Create12 with any type of body
func NewCreate12RequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/device-identifiers", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDelete14Request generates requests for Delete14
func NewDelete14Request(server string, organizationId string, environmentId string, domain string, deviceIdentifier string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "deviceIdentifier", runtime.ParamLocationPath, deviceIdentifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/device-identifiers/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGet23Request generates requests for Get23
func NewGet23Request(server string, organizationId string, environmentId string, domain string, deviceIdentifier string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "deviceIdentifier", runtime.ParamLocationPath, deviceIdentifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/device-identifiers/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdate11Request calls the generic Update11 builder with application/json body
func NewUpdate11Request(server string, organizationId string, environmentId string, domain string, deviceIdentifier string, body Update11JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdate11RequestWithBody(server, organizationId, environmentId, domain, deviceIdentifier, "application/json", bodyReader)
}

// NewUpdate11RequestWithBody generates requests for Update11 with any type of body
func NewUpdate11RequestWithBody(server string, organizationId string, environmentId string, domain string, deviceIdentifier string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "deviceIdentifier", runtime.ParamLocationPath, deviceIdentifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/device-identifiers/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGet19Request generates requests for Get19
func NewGet19Request(server string, organizationId string, environmentId string, domain string, params *Get19Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/emails", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "template", runtime.ParamLocationQuery, params.Template); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreate9Request calls the generic Create9 builder with application/json body
func NewCreate9Request(server string, organizationId string, environmentId string, domain string, body Create9JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreate9RequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewCreate9RequestWithBody generates requests for Create9 with any type of body
func NewCreate9RequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/emails", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDelete11Request generates requests for Delete11
func NewDelete11Request(server string, organizationId string, environmentId string, domain string, email string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "email", runtime.ParamLocationPath, email)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/emails/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdate8Request calls the generic Update8 builder with application/json body
func NewUpdate8Request(server string, organizationId string, environmentId string, domain string, email string, body Update8JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdate8RequestWithBody(server, organizationId, environmentId, domain, email, "application/json", bodyReader)
}

// NewUpdate8RequestWithBody generates requests for Update8 with any type of body
func NewUpdate8RequestWithBody(server string, organizationId string, environmentId string, domain string, email string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "email", runtime.ParamLocationPath, email)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/emails/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDomainEntrypointsRequest generates requests for GetDomainEntrypoints
func NewGetDomainEntrypointsRequest(server string, organizationId string, environmentId string, domain string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/entrypoints", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewList17Request generates requests for List17
func NewList17Request(server string, organizationId string, environmentId string, domain string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/extensionGrants", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreate7Request calls the generic Create7 builder with application/json body
func NewCreate7Request(server string, organizationId string, environmentId string, domain string, body Create7JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreate7RequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewCreate7RequestWithBody generates requests for Create7 with any type of body
func NewCreate7RequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/extensionGrants", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDelete9Request generates requests for Delete9
func NewDelete9Request(server string, organizationId string, environmentId string, domain string, extensionGrant string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "extensionGrant", runtime.ParamLocationPath, extensionGrant)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/extensionGrants/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGet17Request generates requests for Get17
func NewGet17Request(server string, organizationId string, environmentId string, domain string, extensionGrant string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "extensionGrant", runtime.ParamLocationPath, extensionGrant)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/extensionGrants/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdate6Request calls the generic Update6 builder with application/json body
func NewUpdate6Request(server string, organizationId string, environmentId string, domain string, extensionGrant string, body Update6JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdate6RequestWithBody(server, organizationId, environmentId, domain, extensionGrant, "application/json", bodyReader)
}

// NewUpdate6RequestWithBody generates requests for Update6 with any type of body
func NewUpdate6RequestWithBody(server string, organizationId string, environmentId string, domain string, extensionGrant string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "extensionGrant", runtime.ParamLocationPath, extensionGrant)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/extensionGrants/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListFactorsRequest generates requests for ListFactors
func NewListFactorsRequest(server string, organizationId string, environmentId string, domain string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/factors", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFactorRequest calls the generic CreateFactor builder with application/json body
func NewCreateFactorRequest(server string, organizationId string, environmentId string, domain string, body CreateFactorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateFactorRequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewCreateFactorRequestWithBody generates requests for CreateFactor with any type of body
func NewCreateFactorRequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/factors", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFactorRequest generates requests for DeleteFactor
func NewDeleteFactorRequest(server string, organizationId string, environmentId string, domain string, factor string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "factor", runtime.ParamLocationPath, factor)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/factors/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFactorRequest generates requests for GetFactor
func NewGetFactorRequest(server string, organizationId string, environmentId string, domain string, factor string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "factor", runtime.ParamLocationPath, factor)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/factors/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateFactorRequest calls the generic UpdateFactor builder with application/json body
func NewUpdateFactorRequest(server string, organizationId string, environmentId string, domain string, factor string, body UpdateFactorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateFactorRequestWithBody(server, organizationId, environmentId, domain, factor, "application/json", bodyReader)
}

// NewUpdateFactorRequestWithBody generates requests for UpdateFactor with any type of body
func NewUpdateFactorRequestWithBody(server string, organizationId string, environmentId string, domain string, factor string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "factor", runtime.ParamLocationPath, factor)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/factors/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListDomainFlowsRequest generates requests for ListDomainFlows
func NewListDomainFlowsRequest(server string, organizationId string, environmentId string, domain string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/flows", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDefineDomainFlowsRequest calls the generic DefineDomainFlows builder with application/json body
func NewDefineDomainFlowsRequest(server string, organizationId string, environmentId string, domain string, body DefineDomainFlowsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDefineDomainFlowsRequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewDefineDomainFlowsRequestWithBody generates requests for DefineDomainFlows with any type of body
func NewDefineDomainFlowsRequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/flows", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDomainFlowRequest generates requests for GetDomainFlow
func NewGetDomainFlowRequest(server string, organizationId string, environmentId string, domain string, flow string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "flow", runtime.ParamLocationPath, flow)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/flows/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateDomainFlowRequest calls the generic UpdateDomainFlow builder with application/json body
func NewUpdateDomainFlowRequest(server string, organizationId string, environmentId string, domain string, flow string, body UpdateDomainFlowJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDomainFlowRequestWithBody(server, organizationId, environmentId, domain, flow, "application/json", bodyReader)
}

// NewUpdateDomainFlowRequestWithBody generates requests for UpdateDomainFlow with any type of body
func NewUpdateDomainFlowRequestWithBody(server string, organizationId string, environmentId string, domain string, flow string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "flow", runtime.ParamLocationPath, flow)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/flows/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGet18Request generates requests for Get18
func NewGet18Request(server string, organizationId string, environmentId string, domain string, params *Get18Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/forms", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "template", runtime.ParamLocationQuery, params.Template); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreate8Request calls the generic Create8 builder with application/json body
func NewCreate8Request(server string, organizationId string, environmentId string, domain string, body Create8JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreate8RequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewCreate8RequestWithBody generates requests for Create8 with any type of body
func NewCreate8RequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/forms", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRenderDomainTemplateRequest calls the generic RenderDomainTemplate builder with application/json body
func NewRenderDomainTemplateRequest(server string, organizationId string, environmentId string, domain string, body RenderDomainTemplateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRenderDomainTemplateRequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewRenderDomainTemplateRequestWithBody generates requests for RenderDomainTemplate with any type of body
func NewRenderDomainTemplateRequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/forms/preview", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDelete10Request generates requests for Delete10
func NewDelete10Request(server string, organizationId string, environmentId string, domain string, form string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "form", runtime.ParamLocationPath, form)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/forms/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdate7Request calls the generic Update7 builder with application/json body
func NewUpdate7Request(server string, organizationId string, environmentId string, domain string, form string, body Update7JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdate7RequestWithBody(server, organizationId, environmentId, domain, form, "application/json", bodyReader)
}

// NewUpdate7RequestWithBody generates requests for Update7 with any type of body
func NewUpdate7RequestWithBody(server string, organizationId string, environmentId string, domain string, form string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "form", runtime.ParamLocationPath, form)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/forms/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListGroupsRequest generates requests for ListGroups
func NewListGroupsRequest(server string, organizationId string, environmentId string, domain string, params *ListGroupsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/groups", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateGroupRequest calls the generic CreateGroup builder with application/json body
func NewCreateGroupRequest(server string, organizationId string, environmentId string, domain string, body CreateGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateGroupRequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewCreateGroupRequestWithBody generates requests for CreateGroup with any type of body
func NewCreateGroupRequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/groups", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteGroupRequest generates requests for DeleteGroup
func NewDeleteGroupRequest(server string, organizationId string, environmentId string, domain string, group string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "group", runtime.ParamLocationPath, group)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/groups/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindGroupRequest generates requests for FindGroup
func NewFindGroupRequest(server string, organizationId string, environmentId string, domain string, group string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "group", runtime.ParamLocationPath, group)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/groups/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateGroupRequest calls the generic UpdateGroup builder with application/json body
func NewUpdateGroupRequest(server string, organizationId string, environmentId string, domain string, group string, body UpdateGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateGroupRequestWithBody(server, organizationId, environmentId, domain, group, "application/json", bodyReader)
}

// NewUpdateGroupRequestWithBody generates requests for UpdateGroup with any type of body
func NewUpdateGroupRequestWithBody(server string, organizationId string, environmentId string, domain string, group string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "group", runtime.ParamLocationPath, group)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/groups/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGroupMembersRequest generates requests for GetGroupMembers
func NewGetGroupMembersRequest(server string, organizationId string, environmentId string, domain string, group string, params *GetGroupMembersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "group", runtime.ParamLocationPath, group)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/groups/%s/members", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRemoveGroupMemberRequest generates requests for RemoveGroupMember
func NewRemoveGroupMemberRequest(server string, organizationId string, environmentId string, domain string, group string, member string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "group", runtime.ParamLocationPath, group)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "member", runtime.ParamLocationPath, member)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/groups/%s/members/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddGroupMemberRequest generates requests for AddGroupMember
func NewAddGroupMemberRequest(server string, organizationId string, environmentId string, domain string, group string, member string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "group", runtime.ParamLocationPath, group)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "member", runtime.ParamLocationPath, member)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/groups/%s/members/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindGroupRolesRequest generates requests for FindGroupRoles
func NewFindGroupRolesRequest(server string, organizationId string, environmentId string, domain string, group string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "group", runtime.ParamLocationPath, group)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/groups/%s/roles", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAssignRolesRequest calls the generic AssignRoles builder with application/json body
func NewAssignRolesRequest(server string, organizationId string, environmentId string, domain string, group string, body AssignRolesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAssignRolesRequestWithBody(server, organizationId, environmentId, domain, group, "application/json", bodyReader)
}

// NewAssignRolesRequestWithBody generates requests for AssignRoles with any type of body
func NewAssignRolesRequestWithBody(server string, organizationId string, environmentId string, domain string, group string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "group", runtime.ParamLocationPath, group)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/groups/%s/roles", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRevokeRoleRequest generates requests for RevokeRole
func NewRevokeRoleRequest(server string, organizationId string, environmentId string, domain string, group string, role string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "group", runtime.ParamLocationPath, group)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "role", runtime.ParamLocationPath, role)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/groups/%s/roles/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListI18nDictionariesRequest generates requests for ListI18nDictionaries
func NewListI18nDictionariesRequest(server string, organizationId string, environmentId string, domain string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/i18n/dictionaries", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateI18nDictionaryRequestWithBody generates requests for CreateI18nDictionary with any type of body
func NewCreateI18nDictionaryRequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/i18n/dictionaries", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteI18nDictionaryRequest generates requests for DeleteI18nDictionary
func NewDeleteI18nDictionaryRequest(server string, organizationId string, environmentId string, domain string, dictionary string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "dictionary", runtime.ParamLocationPath, dictionary)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/i18n/dictionaries/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetI18nDictionaryRequest generates requests for GetI18nDictionary
func NewGetI18nDictionaryRequest(server string, organizationId string, environmentId string, domain string, dictionary string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "dictionary", runtime.ParamLocationPath, dictionary)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/i18n/dictionaries/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutI18nDictionaryRequestWithBody generates requests for PutI18nDictionary with any type of body
func NewPutI18nDictionaryRequestWithBody(server string, organizationId string, environmentId string, domain string, dictionary string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "dictionary", runtime.ParamLocationPath, dictionary)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/i18n/dictionaries/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceI18nDictionaryEntriesRequestWithBody generates requests for ReplaceI18nDictionaryEntries with any type of body
func NewReplaceI18nDictionaryEntriesRequestWithBody(server string, organizationId string, environmentId string, domain string, dictionary string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "dictionary", runtime.ParamLocationPath, dictionary)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/i18n/dictionaries/%s/entries", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIdentityProvidersRequest generates requests for ListIdentityProviders
func NewListIdentityProvidersRequest(server string, organizationId string, environmentId string, domain string, params *ListIdentityProvidersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/identities", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UserProvider != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userProvider", runtime.ParamLocationQuery, *params.UserProvider); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIdentityProviderRequest calls the generic CreateIdentityProvider builder with application/json body
func NewCreateIdentityProviderRequest(server string, organizationId string, environmentId string, domain string, body CreateIdentityProviderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateIdentityProviderRequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewCreateIdentityProviderRequestWithBody generates requests for CreateIdentityProvider with any type of body
func NewCreateIdentityProviderRequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/identities", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIdentityProviderRequest generates requests for DeleteIdentityProvider
func NewDeleteIdentityProviderRequest(server string, organizationId string, environmentId string, domain string, identity string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "identity", runtime.ParamLocationPath, identity)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/identities/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindIdentityProviderRequest generates requests for FindIdentityProvider
func NewFindIdentityProviderRequest(server string, organizationId string, environmentId string, domain string, identity string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "identity", runtime.ParamLocationPath, identity)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/identities/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIdentityProviderRequest calls the generic UpdateIdentityProvider builder with application/json body
func NewUpdateIdentityProviderRequest(server string, organizationId string, environmentId string, domain string, identity string, body UpdateIdentityProviderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateIdentityProviderRequestWithBody(server, organizationId, environmentId, domain, identity, "application/json", bodyReader)
}

// NewUpdateIdentityProviderRequestWithBody generates requests for UpdateIdentityProvider with any type of body
func NewUpdateIdentityProviderRequestWithBody(server string, organizationId string, environmentId string, domain string, identity string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "identity", runtime.ParamLocationPath, identity)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/identities/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewList8Request generates requests for List8
func NewList8Request(server string, organizationId string, environmentId string, domain string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/members", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddOrUpdateMember1Request calls the generic AddOrUpdateMember1 builder with application/json body
func NewAddOrUpdateMember1Request(server string, organizationId string, environmentId string, domain string, body AddOrUpdateMember1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddOrUpdateMember1RequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewAddOrUpdateMember1RequestWithBody generates requests for AddOrUpdateMember1 with any type of body
func NewAddOrUpdateMember1RequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/members", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPermissions1Request generates requests for Permissions1
func NewPermissions1Request(server string, organizationId string, environmentId string, domain string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/members/permissions", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRemoveMember2Request generates requests for RemoveMember2
func NewRemoveMember2Request(server string, organizationId string, environmentId string, domain string, member string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "member", runtime.ParamLocationPath, member)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/members/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewList18Request generates requests for List18
func NewList18Request(server string, organizationId string, environmentId string, domain string, params *List18Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/reporters", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UserProvider != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userProvider", runtime.ParamLocationQuery, *params.UserProvider); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreate10Request calls the generic Create10 builder with application/json body
func NewCreate10Request(server string, organizationId string, environmentId string, domain string, body Create10JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreate10RequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewCreate10RequestWithBody generates requests for Create10 with any type of body
func NewCreate10RequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/reporters", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDelete12Request generates requests for Delete12
func NewDelete12Request(server string, organizationId string, environmentId string, domain string, reporter string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "reporter", runtime.ParamLocationPath, reporter)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/reporters/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGet20Request generates requests for Get20
func NewGet20Request(server string, organizationId string, environmentId string, domain string, reporter string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "reporter", runtime.ParamLocationPath, reporter)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/reporters/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdate9Request calls the generic Update9 builder with application/json body
func NewUpdate9Request(server string, organizationId string, environmentId string, domain string, reporter string, body Update9JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdate9RequestWithBody(server, organizationId, environmentId, domain, reporter, "application/json", bodyReader)
}

// NewUpdate9RequestWithBody generates requests for Update9 with any type of body
func NewUpdate9RequestWithBody(server string, organizationId string, environmentId string, domain string, reporter string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "reporter", runtime.ParamLocationPath, reporter)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/reporters/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListResourcesRequest generates requests for ListResources
func NewListResourcesRequest(server string, organizationId string, environmentId string, domain string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/resources", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateResourceRequest calls the generic CreateResource builder with application/json body
func NewCreateResourceRequest(server string, organizationId string, environmentId string, domain string, body CreateResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateResourceRequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewCreateResourceRequestWithBody generates requests for CreateResource with any type of body
func NewCreateResourceRequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/resources", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteResourceRequest generates requests for DeleteResource
func NewDeleteResourceRequest(server string, organizationId string, environmentId string, domain string, resource string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "resource", runtime.ParamLocationPath, resource)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/resources/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetResourceRequest generates requests for GetResource
func NewGetResourceRequest(server string, organizationId string, environmentId string, domain string, resource string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "resource", runtime.ParamLocationPath, resource)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/resources/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateResourceRequest calls the generic UpdateResource builder with application/json body
func NewUpdateResourceRequest(server string, organizationId string, environmentId string, domain string, resource string, body UpdateResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateResourceRequestWithBody(server, organizationId, environmentId, domain, resource, "application/json", bodyReader)
}

// NewUpdateResourceRequestWithBody generates requests for UpdateResource with any type of body
func NewUpdateResourceRequestWithBody(server string, organizationId string, environmentId string, domain string, resource string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "resource", runtime.ParamLocationPath, resource)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/resources/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFindRolesRequest generates requests for FindRoles
func NewFindRolesRequest(server string, organizationId string, environmentId string, domain string, params *FindRolesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/roles", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRoleRequest calls the generic CreateRole builder with application/json body
func NewCreateRoleRequest(server string, organizationId string, environmentId string, domain string, body CreateRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRoleRequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewCreateRoleRequestWithBody generates requests for CreateRole with any type of body
func NewCreateRoleRequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/roles", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRoleRequest generates requests for DeleteRole
func NewDeleteRoleRequest(server string, organizationId string, environmentId string, domain string, role string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "role", runtime.ParamLocationPath, role)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/roles/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindRoleRequest generates requests for FindRole
func NewFindRoleRequest(server string, organizationId string, environmentId string, domain string, role string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "role", runtime.ParamLocationPath, role)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/roles/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRoleRequest calls the generic UpdateRole builder with application/json body
func NewUpdateRoleRequest(server string, organizationId string, environmentId string, domain string, role string, body UpdateRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRoleRequestWithBody(server, organizationId, environmentId, domain, role, "application/json", bodyReader)
}

// NewUpdateRoleRequestWithBody generates requests for UpdateRole with any type of body
func NewUpdateRoleRequestWithBody(server string, organizationId string, environmentId string, domain string, role string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "role", runtime.ParamLocationPath, role)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/roles/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListScopesRequest generates requests for ListScopes
func NewListScopesRequest(server string, organizationId string, environmentId string, domain string, params *ListScopesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/scopes", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateScopeRequest calls the generic CreateScope builder with application/json body
func NewCreateScopeRequest(server string, organizationId string, environmentId string, domain string, body CreateScopeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateScopeRequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewCreateScopeRequestWithBody generates requests for CreateScope with any type of body
func NewCreateScopeRequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/scopes", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteScopeRequest generates requests for DeleteScope
func NewDeleteScopeRequest(server string, organizationId string, environmentId string, domain string, scope string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "scope", runtime.ParamLocationPath, scope)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/scopes/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindScopeRequest generates requests for FindScope
func NewFindScopeRequest(server string, organizationId string, environmentId string, domain string, scope string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "scope", runtime.ParamLocationPath, scope)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/scopes/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchScopeRequest calls the generic PatchScope builder with application/json body
func NewPatchScopeRequest(server string, organizationId string, environmentId string, domain string, scope string, body PatchScopeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchScopeRequestWithBody(server, organizationId, environmentId, domain, scope, "application/json", bodyReader)
}

// NewPatchScopeRequestWithBody generates requests for PatchScope with any type of body
func NewPatchScopeRequestWithBody(server string, organizationId string, environmentId string, domain string, scope string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "scope", runtime.ParamLocationPath, scope)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/scopes/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateScopeRequest calls the generic UpdateScope builder with application/json body
func NewUpdateScopeRequest(server string, organizationId string, environmentId string, domain string, scope string, body UpdateScopeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateScopeRequestWithBody(server, organizationId, environmentId, domain, scope, "application/json", bodyReader)
}

// NewUpdateScopeRequestWithBody generates requests for UpdateScope with any type of body
func NewUpdateScopeRequestWithBody(server string, organizationId string, environmentId string, domain string, scope string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "scope", runtime.ParamLocationPath, scope)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/scopes/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListThemesRequest generates requests for ListThemes
func NewListThemesRequest(server string, organizationId string, environmentId string, domain string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/themes", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateThemeRequest calls the generic CreateTheme builder with application/json body
func NewCreateThemeRequest(server string, organizationId string, environmentId string, domain string, body CreateThemeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateThemeRequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewCreateThemeRequestWithBody generates requests for CreateTheme with any type of body
func NewCreateThemeRequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/themes", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteThemeRequest generates requests for DeleteTheme
func NewDeleteThemeRequest(server string, organizationId string, environmentId string, domain string, themeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "themeId", runtime.ParamLocationPath, themeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/themes/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetThemeRequest generates requests for GetTheme
func NewGetThemeRequest(server string, organizationId string, environmentId string, domain string, themeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "themeId", runtime.ParamLocationPath, themeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/themes/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateThemeRequest calls the generic UpdateTheme builder with application/json body
func NewUpdateThemeRequest(server string, organizationId string, environmentId string, domain string, themeId string, body UpdateThemeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateThemeRequestWithBody(server, organizationId, environmentId, domain, themeId, "application/json", bodyReader)
}

// NewUpdateThemeRequestWithBody generates requests for UpdateTheme with any type of body
func NewUpdateThemeRequestWithBody(server string, organizationId string, environmentId string, domain string, themeId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "themeId", runtime.ParamLocationPath, themeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/themes/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListUsersRequest generates requests for ListUsers
func NewListUsersRequest(server string, organizationId string, environmentId string, domain string, params *ListUsersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUserRequest calls the generic CreateUser builder with application/json body
func NewCreateUserRequest(server string, organizationId string, environmentId string, domain string, body CreateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUserRequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewCreateUserRequestWithBody generates requests for CreateUser with any type of body
func NewCreateUserRequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserRequest generates requests for DeleteUser
func NewDeleteUserRequest(server string, organizationId string, environmentId string, domain string, user string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindUserRequest generates requests for FindUser
func NewFindUserRequest(server string, organizationId string, environmentId string, domain string, user string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUserRequest calls the generic UpdateUser builder with application/json body
func NewUpdateUserRequest(server string, organizationId string, environmentId string, domain string, user string, body UpdateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserRequestWithBody(server, organizationId, environmentId, domain, user, "application/json", bodyReader)
}

// NewUpdateUserRequestWithBody generates requests for UpdateUser with any type of body
func NewUpdateUserRequestWithBody(server string, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewList14Request generates requests for List14
func NewList14Request(server string, organizationId string, environmentId string, domain string, user string, params *List14Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s/audits", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGet11Request generates requests for Get11
func NewGet11Request(server string, organizationId string, environmentId string, domain string, user string, audit string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "audit", runtime.ParamLocationPath, audit)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s/audits/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDelete5Request generates requests for Delete5
func NewDelete5Request(server string, organizationId string, environmentId string, domain string, user string, params *Delete5Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s/consents", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ClientId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clientId", runtime.ParamLocationQuery, *params.ClientId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewList10Request generates requests for List10
func NewList10Request(server string, organizationId string, environmentId string, domain string, user string, params *List10Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s/consents", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ClientId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clientId", runtime.ParamLocationQuery, *params.ClientId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRevokeRequest generates requests for Revoke
func NewRevokeRequest(server string, organizationId string, environmentId string, domain string, user string, consent string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "consent", runtime.ParamLocationPath, consent)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s/consents/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGet9Request generates requests for Get9
func NewGet9Request(server string, organizationId string, environmentId string, domain string, user string, consent string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "consent", runtime.ParamLocationPath, consent)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s/consents/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewList13Request generates requests for List13
func NewList13Request(server string, organizationId string, environmentId string, domain string, user string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s/credentials", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRevoke2Request generates requests for Revoke2
func NewRevoke2Request(server string, organizationId string, environmentId string, domain string, user string, credential string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "credential", runtime.ParamLocationPath, credential)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s/credentials/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGet10Request generates requests for Get10
func NewGet10Request(server string, organizationId string, environmentId string, domain string, user string, credential string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "credential", runtime.ParamLocationPath, credential)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s/credentials/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewList9Request generates requests for List9
func NewList9Request(server string, organizationId string, environmentId string, domain string, user string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s/devices", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDelete4Request generates requests for Delete4
func NewDelete4Request(server string, organizationId string, environmentId string, domain string, user string, device string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "device", runtime.ParamLocationPath, device)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s/devices/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewList12Request generates requests for List12
func NewList12Request(server string, organizationId string, environmentId string, domain string, user string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s/factors", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDelete6Request generates requests for Delete6
func NewDelete6Request(server string, organizationId string, environmentId string, domain string, user string, factor string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "factor", runtime.ParamLocationPath, factor)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s/factors/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLockUserRequest generates requests for LockUser
func NewLockUserRequest(server string, organizationId string, environmentId string, domain string, user string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s/lock", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewResetPasswordRequestWithBody generates requests for ResetPassword with any type of body
func NewResetPasswordRequestWithBody(server string, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s/resetPassword", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewList11Request generates requests for List11
func NewList11Request(server string, organizationId string, environmentId string, domain string, user string, params *List11Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s/roles", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Dynamic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dynamic", runtime.ParamLocationQuery, *params.Dynamic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAssignRequest calls the generic Assign builder with application/json body
func NewAssignRequest(server string, organizationId string, environmentId string, domain string, user string, body AssignJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAssignRequestWithBody(server, organizationId, environmentId, domain, user, "application/json", bodyReader)
}

// NewAssignRequestWithBody generates requests for Assign with any type of body
func NewAssignRequestWithBody(server string, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s/roles", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRevoke1Request generates requests for Revoke1
func NewRevoke1Request(server string, organizationId string, environmentId string, domain string, user string, role string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "role", runtime.ParamLocationPath, role)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s/roles/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSendRegistrationConfirmationRequest generates requests for SendRegistrationConfirmation
func NewSendRegistrationConfirmationRequest(server string, organizationId string, environmentId string, domain string, user string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s/sendRegistrationConfirmation", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUserStatusRequest calls the generic UpdateUserStatus builder with application/json body
func NewUpdateUserStatusRequest(server string, organizationId string, environmentId string, domain string, user string, body UpdateUserStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserStatusRequestWithBody(server, organizationId, environmentId, domain, user, "application/json", bodyReader)
}

// NewUpdateUserStatusRequestWithBody generates requests for UpdateUserStatus with any type of body
func NewUpdateUserStatusRequestWithBody(server string, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s/status", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUnlockUserRequest generates requests for UnlockUser
func NewUnlockUserRequest(server string, organizationId string, environmentId string, domain string, user string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s/unlock", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUsernameRequest calls the generic UpdateUsername builder with application/json body
func NewUpdateUsernameRequest(server string, organizationId string, environmentId string, domain string, user string, body UpdateUsernameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUsernameRequestWithBody(server, organizationId, environmentId, domain, user, "application/json", bodyReader)
}

// NewUpdateUsernameRequestWithBody generates requests for UpdateUsername with any type of body
func NewUpdateUsernameRequestWithBody(server string, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s/username", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPermissionsRequest generates requests for Permissions
func NewPermissionsRequest(server string, organizationId string, environmentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/members/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGet7Request generates requests for Get7
func NewGet7Request(server string, organizationId string, params *Get7Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/forms", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "template", runtime.ParamLocationQuery, params.Template); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreate4Request calls the generic Create4 builder with application/json body
func NewCreate4Request(server string, organizationId string, body Create4JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreate4RequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewCreate4RequestWithBody generates requests for Create4 with any type of body
func NewCreate4RequestWithBody(server string, organizationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/forms", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDelete3Request generates requests for Delete3
func NewDelete3Request(server string, organizationId string, form string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "form", runtime.ParamLocationPath, form)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/forms/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdate3Request calls the generic Update3 builder with application/json body
func NewUpdate3Request(server string, organizationId string, form string, body Update3JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdate3RequestWithBody(server, organizationId, form, "application/json", bodyReader)
}

// NewUpdate3RequestWithBody generates requests for Update3 with any type of body
func NewUpdate3RequestWithBody(server string, organizationId string, form string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "form", runtime.ParamLocationPath, form)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/forms/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewList3Request generates requests for List3
func NewList3Request(server string, organizationId string, params *List3Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreate2Request calls the generic Create2 builder with application/json body
func NewCreate2Request(server string, organizationId string, body Create2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreate2RequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewCreate2RequestWithBody generates requests for Create2 with any type of body
func NewCreate2RequestWithBody(server string, organizationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrganizationGroupRequest generates requests for DeleteOrganizationGroup
func NewDeleteOrganizationGroupRequest(server string, organizationId string, group string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "group", runtime.ParamLocationPath, group)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/groups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationGroupRequest generates requests for GetOrganizationGroup
func NewGetOrganizationGroupRequest(server string, organizationId string, group string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "group", runtime.ParamLocationPath, group)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/groups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateOrganizationGroupRequest calls the generic UpdateOrganizationGroup builder with application/json body
func NewUpdateOrganizationGroupRequest(server string, organizationId string, group string, body UpdateOrganizationGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOrganizationGroupRequestWithBody(server, organizationId, group, "application/json", bodyReader)
}

// NewUpdateOrganizationGroupRequestWithBody generates requests for UpdateOrganizationGroup with any type of body
func NewUpdateOrganizationGroupRequestWithBody(server string, organizationId string, group string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "group", runtime.ParamLocationPath, group)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/groups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewList4Request generates requests for List4
func NewList4Request(server string, organizationId string, group string, params *List4Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "group", runtime.ParamLocationPath, group)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/groups/%s/members", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRemoveMember1Request generates requests for RemoveMember1
func NewRemoveMember1Request(server string, organizationId string, group string, member string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "group", runtime.ParamLocationPath, group)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "member", runtime.ParamLocationPath, member)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/groups/%s/members/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddMemberRequest generates requests for AddMember
func NewAddMemberRequest(server string, organizationId string, group string, member string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "group", runtime.ParamLocationPath, group)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "member", runtime.ParamLocationPath, member)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/groups/%s/members/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewList5Request generates requests for List5
func NewList5Request(server string, organizationId string, params *List5Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/identities", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UserProvider != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userProvider", runtime.ParamLocationQuery, *params.UserProvider); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreate3Request calls the generic Create3 builder with application/json body
func NewCreate3Request(server string, organizationId string, body Create3JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreate3RequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewCreate3RequestWithBody generates requests for Create3 with any type of body
func NewCreate3RequestWithBody(server string, organizationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/identities", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDelete2Request generates requests for Delete2
func NewDelete2Request(server string, organizationId string, identity string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "identity", runtime.ParamLocationPath, identity)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/identities/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGet4Request generates requests for Get4
func NewGet4Request(server string, organizationId string, identity string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "identity", runtime.ParamLocationPath, identity)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/identities/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdate2Request calls the generic Update2 builder with application/json body
func NewUpdate2Request(server string, organizationId string, identity string, body Update2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdate2RequestWithBody(server, organizationId, identity, "application/json", bodyReader)
}

// NewUpdate2RequestWithBody generates requests for Update2 with any type of body
func NewUpdate2RequestWithBody(server string, organizationId string, identity string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "identity", runtime.ParamLocationPath, identity)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/identities/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMembersRequest generates requests for GetMembers
func NewGetMembersRequest(server string, organizationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/members", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddOrUpdateMemberRequest calls the generic AddOrUpdateMember builder with application/json body
func NewAddOrUpdateMemberRequest(server string, organizationId string, body AddOrUpdateMemberJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddOrUpdateMemberRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewAddOrUpdateMemberRequestWithBody generates requests for AddOrUpdateMember with any type of body
func NewAddOrUpdateMemberRequestWithBody(server string, organizationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/members", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveMemberRequest generates requests for RemoveMember
func NewRemoveMemberRequest(server string, organizationId string, member string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "member", runtime.ParamLocationPath, member)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/members/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewList2Request generates requests for List2
func NewList2Request(server string, organizationId string, params *List2Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/roles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreate1Request calls the generic Create1 builder with application/json body
func NewCreate1Request(server string, organizationId string, body Create1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreate1RequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewCreate1RequestWithBody generates requests for Create1 with any type of body
func NewCreate1RequestWithBody(server string, organizationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/roles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDelete1Request generates requests for Delete1
func NewDelete1Request(server string, organizationId string, role string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role", runtime.ParamLocationPath, role)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/roles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGet3Request generates requests for Get3
func NewGet3Request(server string, organizationId string, role string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role", runtime.ParamLocationPath, role)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/roles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdate1Request calls the generic Update1 builder with application/json body
func NewUpdate1Request(server string, organizationId string, role string, body Update1JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdate1RequestWithBody(server, organizationId, role, "application/json", bodyReader)
}

// NewUpdate1RequestWithBody generates requests for Update1 with any type of body
func NewUpdate1RequestWithBody(server string, organizationId string, role string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role", runtime.ParamLocationPath, role)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/roles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGet6Request generates requests for Get6
func NewGet6Request(server string, organizationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/settings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchRequest calls the generic Patch builder with application/json body
func NewPatchRequest(server string, organizationId string, body PatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewPatchRequestWithBody generates requests for Patch with any type of body
func NewPatchRequestWithBody(server string, organizationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/settings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewList1Request generates requests for List1
func NewList1Request(server string, organizationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/tags", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRequest calls the generic Create builder with application/json body
func NewCreateRequest(server string, organizationId string, body CreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewCreateRequestWithBody generates requests for Create with any type of body
func NewCreateRequestWithBody(server string, organizationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/tags", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRequest generates requests for Delete
func NewDeleteRequest(server string, organizationId string, tag string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tag", runtime.ParamLocationPath, tag)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/tags/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGet2Request generates requests for Get2
func NewGet2Request(server string, organizationId string, tag string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tag", runtime.ParamLocationPath, tag)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/tags/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRequest calls the generic Update builder with application/json body
func NewUpdateRequest(server string, organizationId string, tag string, body UpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRequestWithBody(server, organizationId, tag, "application/json", bodyReader)
}

// NewUpdateRequestWithBody generates requests for Update with any type of body
func NewUpdateRequestWithBody(server string, organizationId string, tag string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tag", runtime.ParamLocationPath, tag)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/tags/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListOrganisationUsersRequest generates requests for ListOrganisationUsers
func NewListOrganisationUsersRequest(server string, organizationId string, params *ListOrganisationUsersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrganisationUserRequest calls the generic CreateOrganisationUser builder with application/json body
func NewCreateOrganisationUserRequest(server string, organizationId string, body CreateOrganisationUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrganisationUserRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewCreateOrganisationUserRequestWithBody generates requests for CreateOrganisationUser with any type of body
func NewCreateOrganisationUserRequestWithBody(server string, organizationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrganizationUserRequest generates requests for DeleteOrganizationUser
func NewDeleteOrganizationUserRequest(server string, organizationId string, user string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGet5Request generates requests for Get5
func NewGet5Request(server string, organizationId string, user string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateOrganizationUserRequest calls the generic UpdateOrganizationUser builder with application/json body
func NewUpdateOrganizationUserRequest(server string, organizationId string, user string, body UpdateOrganizationUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOrganizationUserRequestWithBody(server, organizationId, user, "application/json", bodyReader)
}

// NewUpdateOrganizationUserRequestWithBody generates requests for UpdateOrganizationUser with any type of body
func NewUpdateOrganizationUserRequestWithBody(server string, organizationId string, user string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewResetOrganizationUserPasswordRequestWithBody generates requests for ResetOrganizationUserPassword with any type of body
func NewResetOrganizationUserPasswordRequestWithBody(server string, organizationId string, user string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users/%s/resetPassword", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateOrganizationUserStatusRequest calls the generic UpdateOrganizationUserStatus builder with application/json body
func NewUpdateOrganizationUserStatusRequest(server string, organizationId string, user string, body UpdateOrganizationUserStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOrganizationUserStatusRequestWithBody(server, organizationId, user, "application/json", bodyReader)
}

// NewUpdateOrganizationUserStatusRequestWithBody generates requests for UpdateOrganizationUserStatus with any type of body
func NewUpdateOrganizationUserStatusRequestWithBody(server string, organizationId string, user string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users/%s/status", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateOrganisationUsernameRequest calls the generic UpdateOrganisationUsername builder with application/json body
func NewUpdateOrganisationUsernameRequest(server string, organizationId string, user string, body UpdateOrganisationUsernameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOrganisationUsernameRequestWithBody(server, organizationId, user, "application/json", bodyReader)
}

// NewUpdateOrganisationUsernameRequestWithBody generates requests for UpdateOrganisationUsername with any type of body
func NewUpdateOrganisationUsernameRequestWithBody(server string, organizationId string, user string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users/%s/username", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewList25Request generates requests for List25
func NewList25Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/audits/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAlertServiceStatusRequest generates requests for GetAlertServiceStatus
func NewGetAlertServiceStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/configuration/alerts/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewList37Request generates requests for List37
func NewList37Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/configuration/flow/schema")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSpelGrammarRequest generates requests for GetSpelGrammar
func NewGetSpelGrammarRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/configuration/spel/grammar")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGet38Request generates requests for Get38
func NewGet38Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/installation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewList35Request generates requests for List35
func NewList35Request(server string, params *List35Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/auth-device-notifiers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGet35Request generates requests for Get35
func NewGet35Request(server string, authDeviceNotifierId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "authDeviceNotifierId", runtime.ParamLocationPath, authDeviceNotifierId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/auth-device-notifiers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSchema9Request generates requests for GetSchema9
func NewGetSchema9Request(server string, authDeviceNotifierId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "authDeviceNotifierId", runtime.ParamLocationPath, authDeviceNotifierId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/auth-device-notifiers/%s/schema", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewList34Request generates requests for List34
func NewList34Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/bot-detections")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGet34Request generates requests for Get34
func NewGet34Request(server string, botDetection string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "botDetection", runtime.ParamLocationPath, botDetection)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/bot-detections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSchema8Request generates requests for GetSchema8
func NewGetSchema8Request(server string, botDetection string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "botDetection", runtime.ParamLocationPath, botDetection)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/bot-detections/%s/schema", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewList27Request generates requests for List27
func NewList27Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/certificates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGet27Request generates requests for Get27
func NewGet27Request(server string, certificate string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "certificate", runtime.ParamLocationPath, certificate)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/certificates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSchema1Request generates requests for GetSchema1
func NewGetSchema1Request(server string, certificate string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "certificate", runtime.ParamLocationPath, certificate)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/certificates/%s/schema", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewList36Request generates requests for List36
func NewList36Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/device-identifiers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGet36Request generates requests for Get36
func NewGet36Request(server string, deviceIdentifier string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceIdentifier", runtime.ParamLocationPath, deviceIdentifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/device-identifiers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSchema10Request generates requests for GetSchema10
func NewGetSchema10Request(server string, deviceIdentifier string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceIdentifier", runtime.ParamLocationPath, deviceIdentifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/device-identifiers/%s/schema", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewList28Request generates requests for List28
func NewList28Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/extensionGrants")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGet28Request generates requests for Get28
func NewGet28Request(server string, extensionGrant string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "extensionGrant", runtime.ParamLocationPath, extensionGrant)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/extensionGrants/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSchema2Request generates requests for GetSchema2
func NewGetSchema2Request(server string, extensionGrant string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "extensionGrant", runtime.ParamLocationPath, extensionGrant)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/extensionGrants/%s/schema", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewList31Request generates requests for List31
func NewList31Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/factors")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGet31Request generates requests for Get31
func NewGet31Request(server string, factor string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "factor", runtime.ParamLocationPath, factor)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/factors/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSchema5Request generates requests for GetSchema5
func NewGetSchema5Request(server string, factor string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "factor", runtime.ParamLocationPath, factor)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/factors/%s/schema", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewList26Request generates requests for List26
func NewList26Request(server string, params *List26Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/identities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.External != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external", runtime.ParamLocationQuery, *params.External); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGet26Request generates requests for Get26
func NewGet26Request(server string, identity string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identity", runtime.ParamLocationPath, identity)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/identities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSchemaRequest generates requests for GetSchema
func NewGetSchemaRequest(server string, identity string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identity", runtime.ParamLocationPath, identity)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/identities/%s/schema", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewList33Request generates requests for List33
func NewList33Request(server string, params *List33Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/notifiers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGet33Request generates requests for Get33
func NewGet33Request(server string, notifierId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "notifierId", runtime.ParamLocationPath, notifierId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/notifiers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSchema7Request generates requests for GetSchema7
func NewGetSchema7Request(server string, notifierId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "notifierId", runtime.ParamLocationPath, notifierId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/notifiers/%s/schema", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewList30Request generates requests for List30
func NewList30Request(server string, params *List30Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGet30Request generates requests for Get30
func NewGet30Request(server string, policy string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policy", runtime.ParamLocationPath, policy)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDocumentationRequest generates requests for GetDocumentation
func NewGetDocumentationRequest(server string, policy string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policy", runtime.ParamLocationPath, policy)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/policies/%s/documentation", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSchema4Request generates requests for GetSchema4
func NewGetSchema4Request(server string, policy string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policy", runtime.ParamLocationPath, policy)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/policies/%s/schema", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewList29Request generates requests for List29
func NewList29Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/reporters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGet29Request generates requests for Get29
func NewGet29Request(server string, reporter string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "reporter", runtime.ParamLocationPath, reporter)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/reporters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSchema3Request generates requests for GetSchema3
func NewGetSchema3Request(server string, reporter string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "reporter", runtime.ParamLocationPath, reporter)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/reporters/%s/schema", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewList32Request generates requests for List32
func NewList32Request(server string, params *List32Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/resources")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGet32Request generates requests for Get32
func NewGet32Request(server string, resource string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resource", runtime.ParamLocationPath, resource)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/resources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSchema6Request generates requests for GetSchema6
func NewGetSchema6Request(server string, resource string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resource", runtime.ParamLocationPath, resource)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/resources/%s/schema", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGet37Request generates requests for Get37
func NewGet37Request(server string, role string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "role", runtime.ParamLocationPath, role)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRequest generates requests for Get
func NewGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSubscribeNewsletterRequestWithBody generates requests for SubscribeNewsletter with any type of body
func NewSubscribeNewsletterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/newsletter/_subscribe")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTaglinesRequest generates requests for GetTaglines
func NewGetTaglinesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/newsletter/taglines")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListNotificationsRequest generates requests for ListNotifications
func NewListNotificationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/notifications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMarkAsReadRequest generates requests for MarkAsRead
func NewMarkAsReadRequest(server string, notificationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "notificationId", runtime.ParamLocationPath, notificationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/notifications/%s/acknowledge", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostWithResponse request
	PostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostResponse, error)

	// ListWithResponse request
	ListWithResponse(ctx context.Context, organizationId string, params *ListParams, reqEditors ...RequestEditorFn) (*ListResponse, error)

	// Get1WithResponse request
	Get1WithResponse(ctx context.Context, organizationId string, audit string, reqEditors ...RequestEditorFn) (*Get1Response, error)

	// List24WithResponse request
	List24WithResponse(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*List24Response, error)

	// Create14WithBodyWithResponse request with any body
	Create14WithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Create14Response, error)

	Create14WithResponse(ctx context.Context, organizationId string, body Create14JSONRequestBody, reqEditors ...RequestEditorFn) (*Create14Response, error)

	// Delete16WithResponse request
	Delete16WithResponse(ctx context.Context, organizationId string, entrypointId string, reqEditors ...RequestEditorFn) (*Delete16Response, error)

	// Get25WithResponse request
	Get25WithResponse(ctx context.Context, organizationId string, entrypointId string, reqEditors ...RequestEditorFn) (*Get25Response, error)

	// Update13WithBodyWithResponse request with any body
	Update13WithBodyWithResponse(ctx context.Context, organizationId string, entrypointId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Update13Response, error)

	Update13WithResponse(ctx context.Context, organizationId string, entrypointId string, body Update13JSONRequestBody, reqEditors ...RequestEditorFn) (*Update13Response, error)

	// List6WithResponse request
	List6WithResponse(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*List6Response, error)

	// ListDomainsWithResponse request
	ListDomainsWithResponse(ctx context.Context, organizationId string, environmentId string, params *ListDomainsParams, reqEditors ...RequestEditorFn) (*ListDomainsResponse, error)

	// CreateDomainWithBodyWithResponse request with any body
	CreateDomainWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDomainResponse, error)

	CreateDomainWithResponse(ctx context.Context, organizationId string, environmentId string, body CreateDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDomainResponse, error)

	// FindDomainByHridWithResponse request
	FindDomainByHridWithResponse(ctx context.Context, organizationId string, environmentId string, hrid string, reqEditors ...RequestEditorFn) (*FindDomainByHridResponse, error)

	// DeleteDomainWithResponse request
	DeleteDomainWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*DeleteDomainResponse, error)

	// FindDomainWithResponse request
	FindDomainWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*FindDomainResponse, error)

	// PatchDomainWithBodyWithResponse request with any body
	PatchDomainWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchDomainResponse, error)

	PatchDomainWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body PatchDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchDomainResponse, error)

	// UpdateDomainWithBodyWithResponse request with any body
	UpdateDomainWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDomainResponse, error)

	UpdateDomainWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body UpdateDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDomainResponse, error)

	// ListAlertNotifiersWithResponse request
	ListAlertNotifiersWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*ListAlertNotifiersResponse, error)

	// CreateAlertNotifierWithBodyWithResponse request with any body
	CreateAlertNotifierWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAlertNotifierResponse, error)

	CreateAlertNotifierWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body CreateAlertNotifierJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAlertNotifierResponse, error)

	// DeleteAlertNotifierWithResponse request
	DeleteAlertNotifierWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, notifierId string, reqEditors ...RequestEditorFn) (*DeleteAlertNotifierResponse, error)

	// GetAlertNotifierWithResponse request
	GetAlertNotifierWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, notifierId string, reqEditors ...RequestEditorFn) (*GetAlertNotifierResponse, error)

	// PatchAlertNotifierWithBodyWithResponse request with any body
	PatchAlertNotifierWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, notifierId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchAlertNotifierResponse, error)

	PatchAlertNotifierWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, notifierId string, body PatchAlertNotifierJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchAlertNotifierResponse, error)

	// List20WithResponse request
	List20WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*List20Response, error)

	// List19WithBodyWithResponse request with any body
	List19WithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*List19Response, error)

	List19WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body List19JSONRequestBody, reqEditors ...RequestEditorFn) (*List19Response, error)

	// Get21WithResponse request
	Get21WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *Get21Params, reqEditors ...RequestEditorFn) (*Get21Response, error)

	// ListApplicationsWithResponse request
	ListApplicationsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *ListApplicationsParams, reqEditors ...RequestEditorFn) (*ListApplicationsResponse, error)

	// CreateApplicationWithBodyWithResponse request with any body
	CreateApplicationWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApplicationResponse, error)

	CreateApplicationWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body CreateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateApplicationResponse, error)

	// DeleteApplicationWithResponse request
	DeleteApplicationWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*DeleteApplicationResponse, error)

	// FindApplicationWithResponse request
	FindApplicationWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*FindApplicationResponse, error)

	// PatchApplicationWithBodyWithResponse request with any body
	PatchApplicationWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApplicationResponse, error)

	PatchApplicationWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, body PatchApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApplicationResponse, error)

	// UpdateApplicationWithBodyWithResponse request with any body
	UpdateApplicationWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApplicationResponse, error)

	UpdateApplicationWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, body UpdateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateApplicationResponse, error)

	// Get14WithResponse request
	Get14WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, params *Get14Params, reqEditors ...RequestEditorFn) (*Get14Response, error)

	// Get13WithResponse request
	Get13WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, params *Get13Params, reqEditors ...RequestEditorFn) (*Get13Response, error)

	// Create6WithBodyWithResponse request with any body
	Create6WithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Create6Response, error)

	Create6WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, body Create6JSONRequestBody, reqEditors ...RequestEditorFn) (*Create6Response, error)

	// Delete8WithResponse request
	Delete8WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, email string, reqEditors ...RequestEditorFn) (*Delete8Response, error)

	// Update5WithBodyWithResponse request with any body
	Update5WithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, email string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Update5Response, error)

	Update5WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, email string, body Update5JSONRequestBody, reqEditors ...RequestEditorFn) (*Update5Response, error)

	// ListAppFlowsWithResponse request
	ListAppFlowsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*ListAppFlowsResponse, error)

	// DefineAppFlowsWithBodyWithResponse request with any body
	DefineAppFlowsWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DefineAppFlowsResponse, error)

	DefineAppFlowsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, body DefineAppFlowsJSONRequestBody, reqEditors ...RequestEditorFn) (*DefineAppFlowsResponse, error)

	// GetAppFlowWithResponse request
	GetAppFlowWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, flow string, reqEditors ...RequestEditorFn) (*GetAppFlowResponse, error)

	// UpdateAppFlowWithBodyWithResponse request with any body
	UpdateAppFlowWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, flow string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAppFlowResponse, error)

	UpdateAppFlowWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, flow string, body UpdateAppFlowJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAppFlowResponse, error)

	// Get12WithResponse request
	Get12WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, params *Get12Params, reqEditors ...RequestEditorFn) (*Get12Response, error)

	// Create5WithBodyWithResponse request with any body
	Create5WithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Create5Response, error)

	Create5WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, body Create5JSONRequestBody, reqEditors ...RequestEditorFn) (*Create5Response, error)

	// Delete7WithResponse request
	Delete7WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, form string, reqEditors ...RequestEditorFn) (*Delete7Response, error)

	// Update4WithBodyWithResponse request with any body
	Update4WithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, form string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Update4Response, error)

	Update4WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, form string, body Update4JSONRequestBody, reqEditors ...RequestEditorFn) (*Update4Response, error)

	// GetMembers1WithResponse request
	GetMembers1WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*GetMembers1Response, error)

	// AddOrUpdateMember2WithBodyWithResponse request with any body
	AddOrUpdateMember2WithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddOrUpdateMember2Response, error)

	AddOrUpdateMember2WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, body AddOrUpdateMember2JSONRequestBody, reqEditors ...RequestEditorFn) (*AddOrUpdateMember2Response, error)

	// Permissions2WithResponse request
	Permissions2WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*Permissions2Response, error)

	// RemoveMember3WithResponse request
	RemoveMember3WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, member string, reqEditors ...RequestEditorFn) (*RemoveMember3Response, error)

	// List15WithResponse request
	List15WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, params *List15Params, reqEditors ...RequestEditorFn) (*List15Response, error)

	// Get15WithResponse request
	Get15WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, resource string, reqEditors ...RequestEditorFn) (*Get15Response, error)

	// List16WithResponse request
	List16WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, resource string, reqEditors ...RequestEditorFn) (*List16Response, error)

	// Get16WithResponse request
	Get16WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, resource string, policy string, reqEditors ...RequestEditorFn) (*Get16Response, error)

	// RenewClientSecretWithResponse request
	RenewClientSecretWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*RenewClientSecretResponse, error)

	// UpdateApplicationTypeWithBodyWithResponse request with any body
	UpdateApplicationTypeWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApplicationTypeResponse, error)

	UpdateApplicationTypeWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, body UpdateApplicationTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateApplicationTypeResponse, error)

	// List7WithResponse request
	List7WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *List7Params, reqEditors ...RequestEditorFn) (*List7Response, error)

	// Get8WithResponse request
	Get8WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, audit string, reqEditors ...RequestEditorFn) (*Get8Response, error)

	// List23WithResponse request
	List23WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*List23Response, error)

	// Create13WithBodyWithResponse request with any body
	Create13WithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Create13Response, error)

	Create13WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body Create13JSONRequestBody, reqEditors ...RequestEditorFn) (*Create13Response, error)

	// Delete15WithResponse request
	Delete15WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, authDeviceNotifier string, reqEditors ...RequestEditorFn) (*Delete15Response, error)

	// Get24WithResponse request
	Get24WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, authDeviceNotifier string, reqEditors ...RequestEditorFn) (*Get24Response, error)

	// Update12WithBodyWithResponse request with any body
	Update12WithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, authDeviceNotifier string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Update12Response, error)

	Update12WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, authDeviceNotifier string, body Update12JSONRequestBody, reqEditors ...RequestEditorFn) (*Update12Response, error)

	// List21WithResponse request
	List21WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*List21Response, error)

	// Create11WithBodyWithResponse request with any body
	Create11WithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Create11Response, error)

	Create11WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body Create11JSONRequestBody, reqEditors ...RequestEditorFn) (*Create11Response, error)

	// Delete13WithResponse request
	Delete13WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, botDetection string, reqEditors ...RequestEditorFn) (*Delete13Response, error)

	// Get22WithResponse request
	Get22WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, botDetection string, reqEditors ...RequestEditorFn) (*Get22Response, error)

	// Update10WithBodyWithResponse request with any body
	Update10WithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, botDetection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Update10Response, error)

	Update10WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, botDetection string, body Update10JSONRequestBody, reqEditors ...RequestEditorFn) (*Update10Response, error)

	// ListCertificatesWithResponse request
	ListCertificatesWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *ListCertificatesParams, reqEditors ...RequestEditorFn) (*ListCertificatesResponse, error)

	// CreateCertificateWithBodyWithResponse request with any body
	CreateCertificateWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCertificateResponse, error)

	CreateCertificateWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body CreateCertificateJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCertificateResponse, error)

	// RotateCertificateWithResponse request
	RotateCertificateWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*RotateCertificateResponse, error)

	// DeleteCertificateWithResponse request
	DeleteCertificateWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, reqEditors ...RequestEditorFn) (*DeleteCertificateResponse, error)

	// FindCertificateWithResponse request
	FindCertificateWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, reqEditors ...RequestEditorFn) (*FindCertificateResponse, error)

	// UpdateCertificateWithBodyWithResponse request with any body
	UpdateCertificateWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCertificateResponse, error)

	UpdateCertificateWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, body UpdateCertificateJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCertificateResponse, error)

	// GetCertificatePublicKeyWithResponse request
	GetCertificatePublicKeyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, reqEditors ...RequestEditorFn) (*GetCertificatePublicKeyResponse, error)

	// GetCertificatePublicKeysWithResponse request
	GetCertificatePublicKeysWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, reqEditors ...RequestEditorFn) (*GetCertificatePublicKeysResponse, error)

	// List22WithResponse request
	List22WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*List22Response, error)

	// Create12WithBodyWithResponse request with any body
	Create12WithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Create12Response, error)

	Create12WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body Create12JSONRequestBody, reqEditors ...RequestEditorFn) (*Create12Response, error)

	// Delete14WithResponse request
	Delete14WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, deviceIdentifier string, reqEditors ...RequestEditorFn) (*Delete14Response, error)

	// Get23WithResponse request
	Get23WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, deviceIdentifier string, reqEditors ...RequestEditorFn) (*Get23Response, error)

	// Update11WithBodyWithResponse request with any body
	Update11WithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, deviceIdentifier string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Update11Response, error)

	Update11WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, deviceIdentifier string, body Update11JSONRequestBody, reqEditors ...RequestEditorFn) (*Update11Response, error)

	// Get19WithResponse request
	Get19WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *Get19Params, reqEditors ...RequestEditorFn) (*Get19Response, error)

	// Create9WithBodyWithResponse request with any body
	Create9WithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Create9Response, error)

	Create9WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body Create9JSONRequestBody, reqEditors ...RequestEditorFn) (*Create9Response, error)

	// Delete11WithResponse request
	Delete11WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, email string, reqEditors ...RequestEditorFn) (*Delete11Response, error)

	// Update8WithBodyWithResponse request with any body
	Update8WithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, email string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Update8Response, error)

	Update8WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, email string, body Update8JSONRequestBody, reqEditors ...RequestEditorFn) (*Update8Response, error)

	// GetDomainEntrypointsWithResponse request
	GetDomainEntrypointsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*GetDomainEntrypointsResponse, error)

	// List17WithResponse request
	List17WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*List17Response, error)

	// Create7WithBodyWithResponse request with any body
	Create7WithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Create7Response, error)

	Create7WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body Create7JSONRequestBody, reqEditors ...RequestEditorFn) (*Create7Response, error)

	// Delete9WithResponse request
	Delete9WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, extensionGrant string, reqEditors ...RequestEditorFn) (*Delete9Response, error)

	// Get17WithResponse request
	Get17WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, extensionGrant string, reqEditors ...RequestEditorFn) (*Get17Response, error)

	// Update6WithBodyWithResponse request with any body
	Update6WithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, extensionGrant string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Update6Response, error)

	Update6WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, extensionGrant string, body Update6JSONRequestBody, reqEditors ...RequestEditorFn) (*Update6Response, error)

	// ListFactorsWithResponse request
	ListFactorsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*ListFactorsResponse, error)

	// CreateFactorWithBodyWithResponse request with any body
	CreateFactorWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFactorResponse, error)

	CreateFactorWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body CreateFactorJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFactorResponse, error)

	// DeleteFactorWithResponse request
	DeleteFactorWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, factor string, reqEditors ...RequestEditorFn) (*DeleteFactorResponse, error)

	// GetFactorWithResponse request
	GetFactorWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, factor string, reqEditors ...RequestEditorFn) (*GetFactorResponse, error)

	// UpdateFactorWithBodyWithResponse request with any body
	UpdateFactorWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, factor string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFactorResponse, error)

	UpdateFactorWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, factor string, body UpdateFactorJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFactorResponse, error)

	// ListDomainFlowsWithResponse request
	ListDomainFlowsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*ListDomainFlowsResponse, error)

	// DefineDomainFlowsWithBodyWithResponse request with any body
	DefineDomainFlowsWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DefineDomainFlowsResponse, error)

	DefineDomainFlowsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body DefineDomainFlowsJSONRequestBody, reqEditors ...RequestEditorFn) (*DefineDomainFlowsResponse, error)

	// GetDomainFlowWithResponse request
	GetDomainFlowWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, flow string, reqEditors ...RequestEditorFn) (*GetDomainFlowResponse, error)

	// UpdateDomainFlowWithBodyWithResponse request with any body
	UpdateDomainFlowWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, flow string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDomainFlowResponse, error)

	UpdateDomainFlowWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, flow string, body UpdateDomainFlowJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDomainFlowResponse, error)

	// Get18WithResponse request
	Get18WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *Get18Params, reqEditors ...RequestEditorFn) (*Get18Response, error)

	// Create8WithBodyWithResponse request with any body
	Create8WithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Create8Response, error)

	Create8WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body Create8JSONRequestBody, reqEditors ...RequestEditorFn) (*Create8Response, error)

	// RenderDomainTemplateWithBodyWithResponse request with any body
	RenderDomainTemplateWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RenderDomainTemplateResponse, error)

	RenderDomainTemplateWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body RenderDomainTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*RenderDomainTemplateResponse, error)

	// Delete10WithResponse request
	Delete10WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, form string, reqEditors ...RequestEditorFn) (*Delete10Response, error)

	// Update7WithBodyWithResponse request with any body
	Update7WithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, form string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Update7Response, error)

	Update7WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, form string, body Update7JSONRequestBody, reqEditors ...RequestEditorFn) (*Update7Response, error)

	// ListGroupsWithResponse request
	ListGroupsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *ListGroupsParams, reqEditors ...RequestEditorFn) (*ListGroupsResponse, error)

	// CreateGroupWithBodyWithResponse request with any body
	CreateGroupWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateGroupResponse, error)

	CreateGroupWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body CreateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateGroupResponse, error)

	// DeleteGroupWithResponse request
	DeleteGroupWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, group string, reqEditors ...RequestEditorFn) (*DeleteGroupResponse, error)

	// FindGroupWithResponse request
	FindGroupWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, group string, reqEditors ...RequestEditorFn) (*FindGroupResponse, error)

	// UpdateGroupWithBodyWithResponse request with any body
	UpdateGroupWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, group string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateGroupResponse, error)

	UpdateGroupWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, group string, body UpdateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateGroupResponse, error)

	// GetGroupMembersWithResponse request
	GetGroupMembersWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, group string, params *GetGroupMembersParams, reqEditors ...RequestEditorFn) (*GetGroupMembersResponse, error)

	// RemoveGroupMemberWithResponse request
	RemoveGroupMemberWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, group string, member string, reqEditors ...RequestEditorFn) (*RemoveGroupMemberResponse, error)

	// AddGroupMemberWithResponse request
	AddGroupMemberWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, group string, member string, reqEditors ...RequestEditorFn) (*AddGroupMemberResponse, error)

	// FindGroupRolesWithResponse request
	FindGroupRolesWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, group string, reqEditors ...RequestEditorFn) (*FindGroupRolesResponse, error)

	// AssignRolesWithBodyWithResponse request with any body
	AssignRolesWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, group string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssignRolesResponse, error)

	AssignRolesWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, group string, body AssignRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*AssignRolesResponse, error)

	// RevokeRoleWithResponse request
	RevokeRoleWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, group string, role string, reqEditors ...RequestEditorFn) (*RevokeRoleResponse, error)

	// ListI18nDictionariesWithResponse request
	ListI18nDictionariesWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*ListI18nDictionariesResponse, error)

	// CreateI18nDictionaryWithBodyWithResponse request with any body
	CreateI18nDictionaryWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateI18nDictionaryResponse, error)

	// DeleteI18nDictionaryWithResponse request
	DeleteI18nDictionaryWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, dictionary string, reqEditors ...RequestEditorFn) (*DeleteI18nDictionaryResponse, error)

	// GetI18nDictionaryWithResponse request
	GetI18nDictionaryWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, dictionary string, reqEditors ...RequestEditorFn) (*GetI18nDictionaryResponse, error)

	// PutI18nDictionaryWithBodyWithResponse request with any body
	PutI18nDictionaryWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, dictionary string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutI18nDictionaryResponse, error)

	// ReplaceI18nDictionaryEntriesWithBodyWithResponse request with any body
	ReplaceI18nDictionaryEntriesWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, dictionary string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceI18nDictionaryEntriesResponse, error)

	// ListIdentityProvidersWithResponse request
	ListIdentityProvidersWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *ListIdentityProvidersParams, reqEditors ...RequestEditorFn) (*ListIdentityProvidersResponse, error)

	// CreateIdentityProviderWithBodyWithResponse request with any body
	CreateIdentityProviderWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIdentityProviderResponse, error)

	CreateIdentityProviderWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body CreateIdentityProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIdentityProviderResponse, error)

	// DeleteIdentityProviderWithResponse request
	DeleteIdentityProviderWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, identity string, reqEditors ...RequestEditorFn) (*DeleteIdentityProviderResponse, error)

	// FindIdentityProviderWithResponse request
	FindIdentityProviderWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, identity string, reqEditors ...RequestEditorFn) (*FindIdentityProviderResponse, error)

	// UpdateIdentityProviderWithBodyWithResponse request with any body
	UpdateIdentityProviderWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, identity string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIdentityProviderResponse, error)

	UpdateIdentityProviderWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, identity string, body UpdateIdentityProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIdentityProviderResponse, error)

	// List8WithResponse request
	List8WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*List8Response, error)

	// AddOrUpdateMember1WithBodyWithResponse request with any body
	AddOrUpdateMember1WithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddOrUpdateMember1Response, error)

	AddOrUpdateMember1WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body AddOrUpdateMember1JSONRequestBody, reqEditors ...RequestEditorFn) (*AddOrUpdateMember1Response, error)

	// Permissions1WithResponse request
	Permissions1WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*Permissions1Response, error)

	// RemoveMember2WithResponse request
	RemoveMember2WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, member string, reqEditors ...RequestEditorFn) (*RemoveMember2Response, error)

	// List18WithResponse request
	List18WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *List18Params, reqEditors ...RequestEditorFn) (*List18Response, error)

	// Create10WithBodyWithResponse request with any body
	Create10WithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Create10Response, error)

	Create10WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body Create10JSONRequestBody, reqEditors ...RequestEditorFn) (*Create10Response, error)

	// Delete12WithResponse request
	Delete12WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reporter string, reqEditors ...RequestEditorFn) (*Delete12Response, error)

	// Get20WithResponse request
	Get20WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reporter string, reqEditors ...RequestEditorFn) (*Get20Response, error)

	// Update9WithBodyWithResponse request with any body
	Update9WithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reporter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Update9Response, error)

	Update9WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reporter string, body Update9JSONRequestBody, reqEditors ...RequestEditorFn) (*Update9Response, error)

	// ListResourcesWithResponse request
	ListResourcesWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*ListResourcesResponse, error)

	// CreateResourceWithBodyWithResponse request with any body
	CreateResourceWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateResourceResponse, error)

	CreateResourceWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body CreateResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateResourceResponse, error)

	// DeleteResourceWithResponse request
	DeleteResourceWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, resource string, reqEditors ...RequestEditorFn) (*DeleteResourceResponse, error)

	// GetResourceWithResponse request
	GetResourceWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, resource string, reqEditors ...RequestEditorFn) (*GetResourceResponse, error)

	// UpdateResourceWithBodyWithResponse request with any body
	UpdateResourceWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, resource string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateResourceResponse, error)

	UpdateResourceWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, resource string, body UpdateResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateResourceResponse, error)

	// FindRolesWithResponse request
	FindRolesWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *FindRolesParams, reqEditors ...RequestEditorFn) (*FindRolesResponse, error)

	// CreateRoleWithBodyWithResponse request with any body
	CreateRoleWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRoleResponse, error)

	CreateRoleWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body CreateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRoleResponse, error)

	// DeleteRoleWithResponse request
	DeleteRoleWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, role string, reqEditors ...RequestEditorFn) (*DeleteRoleResponse, error)

	// FindRoleWithResponse request
	FindRoleWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, role string, reqEditors ...RequestEditorFn) (*FindRoleResponse, error)

	// UpdateRoleWithBodyWithResponse request with any body
	UpdateRoleWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, role string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRoleResponse, error)

	UpdateRoleWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, role string, body UpdateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRoleResponse, error)

	// ListScopesWithResponse request
	ListScopesWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *ListScopesParams, reqEditors ...RequestEditorFn) (*ListScopesResponse, error)

	// CreateScopeWithBodyWithResponse request with any body
	CreateScopeWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateScopeResponse, error)

	CreateScopeWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body CreateScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateScopeResponse, error)

	// DeleteScopeWithResponse request
	DeleteScopeWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, scope string, reqEditors ...RequestEditorFn) (*DeleteScopeResponse, error)

	// FindScopeWithResponse request
	FindScopeWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, scope string, reqEditors ...RequestEditorFn) (*FindScopeResponse, error)

	// PatchScopeWithBodyWithResponse request with any body
	PatchScopeWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, scope string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchScopeResponse, error)

	PatchScopeWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, scope string, body PatchScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchScopeResponse, error)

	// UpdateScopeWithBodyWithResponse request with any body
	UpdateScopeWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, scope string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateScopeResponse, error)

	UpdateScopeWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, scope string, body UpdateScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateScopeResponse, error)

	// ListThemesWithResponse request
	ListThemesWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*ListThemesResponse, error)

	// CreateThemeWithBodyWithResponse request with any body
	CreateThemeWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateThemeResponse, error)

	CreateThemeWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body CreateThemeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateThemeResponse, error)

	// DeleteThemeWithResponse request
	DeleteThemeWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, themeId string, reqEditors ...RequestEditorFn) (*DeleteThemeResponse, error)

	// GetThemeWithResponse request
	GetThemeWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, themeId string, reqEditors ...RequestEditorFn) (*GetThemeResponse, error)

	// UpdateThemeWithBodyWithResponse request with any body
	UpdateThemeWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, themeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateThemeResponse, error)

	UpdateThemeWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, themeId string, body UpdateThemeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateThemeResponse, error)

	// ListUsersWithResponse request
	ListUsersWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *ListUsersParams, reqEditors ...RequestEditorFn) (*ListUsersResponse, error)

	// CreateUserWithBodyWithResponse request with any body
	CreateUserWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserResponse, error)

	CreateUserWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserResponse, error)

	// DeleteUserWithResponse request
	DeleteUserWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error)

	// FindUserWithResponse request
	FindUserWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*FindUserResponse, error)

	// UpdateUserWithBodyWithResponse request with any body
	UpdateUserWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error)

	UpdateUserWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error)

	// List14WithResponse request
	List14WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, params *List14Params, reqEditors ...RequestEditorFn) (*List14Response, error)

	// Get11WithResponse request
	Get11WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, audit string, reqEditors ...RequestEditorFn) (*Get11Response, error)

	// Delete5WithResponse request
	Delete5WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, params *Delete5Params, reqEditors ...RequestEditorFn) (*Delete5Response, error)

	// List10WithResponse request
	List10WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, params *List10Params, reqEditors ...RequestEditorFn) (*List10Response, error)

	// RevokeWithResponse request
	RevokeWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, consent string, reqEditors ...RequestEditorFn) (*RevokeResponse, error)

	// Get9WithResponse request
	Get9WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, consent string, reqEditors ...RequestEditorFn) (*Get9Response, error)

	// List13WithResponse request
	List13WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*List13Response, error)

	// Revoke2WithResponse request
	Revoke2WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, credential string, reqEditors ...RequestEditorFn) (*Revoke2Response, error)

	// Get10WithResponse request
	Get10WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, credential string, reqEditors ...RequestEditorFn) (*Get10Response, error)

	// List9WithResponse request
	List9WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*List9Response, error)

	// Delete4WithResponse request
	Delete4WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, device string, reqEditors ...RequestEditorFn) (*Delete4Response, error)

	// List12WithResponse request
	List12WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*List12Response, error)

	// Delete6WithResponse request
	Delete6WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, factor string, reqEditors ...RequestEditorFn) (*Delete6Response, error)

	// LockUserWithResponse request
	LockUserWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*LockUserResponse, error)

	// ResetPasswordWithBodyWithResponse request with any body
	ResetPasswordWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetPasswordResponse, error)

	// List11WithResponse request
	List11WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, params *List11Params, reqEditors ...RequestEditorFn) (*List11Response, error)

	// AssignWithBodyWithResponse request with any body
	AssignWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssignResponse, error)

	AssignWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, body AssignJSONRequestBody, reqEditors ...RequestEditorFn) (*AssignResponse, error)

	// Revoke1WithResponse request
	Revoke1WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, role string, reqEditors ...RequestEditorFn) (*Revoke1Response, error)

	// SendRegistrationConfirmationWithResponse request
	SendRegistrationConfirmationWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*SendRegistrationConfirmationResponse, error)

	// UpdateUserStatusWithBodyWithResponse request with any body
	UpdateUserStatusWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserStatusResponse, error)

	UpdateUserStatusWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, body UpdateUserStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserStatusResponse, error)

	// UnlockUserWithResponse request
	UnlockUserWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*UnlockUserResponse, error)

	// UpdateUsernameWithBodyWithResponse request with any body
	UpdateUsernameWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUsernameResponse, error)

	UpdateUsernameWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, body UpdateUsernameJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUsernameResponse, error)

	// PermissionsWithResponse request
	PermissionsWithResponse(ctx context.Context, organizationId string, environmentId string, reqEditors ...RequestEditorFn) (*PermissionsResponse, error)

	// Get7WithResponse request
	Get7WithResponse(ctx context.Context, organizationId string, params *Get7Params, reqEditors ...RequestEditorFn) (*Get7Response, error)

	// Create4WithBodyWithResponse request with any body
	Create4WithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Create4Response, error)

	Create4WithResponse(ctx context.Context, organizationId string, body Create4JSONRequestBody, reqEditors ...RequestEditorFn) (*Create4Response, error)

	// Delete3WithResponse request
	Delete3WithResponse(ctx context.Context, organizationId string, form string, reqEditors ...RequestEditorFn) (*Delete3Response, error)

	// Update3WithBodyWithResponse request with any body
	Update3WithBodyWithResponse(ctx context.Context, organizationId string, form string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Update3Response, error)

	Update3WithResponse(ctx context.Context, organizationId string, form string, body Update3JSONRequestBody, reqEditors ...RequestEditorFn) (*Update3Response, error)

	// List3WithResponse request
	List3WithResponse(ctx context.Context, organizationId string, params *List3Params, reqEditors ...RequestEditorFn) (*List3Response, error)

	// Create2WithBodyWithResponse request with any body
	Create2WithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Create2Response, error)

	Create2WithResponse(ctx context.Context, organizationId string, body Create2JSONRequestBody, reqEditors ...RequestEditorFn) (*Create2Response, error)

	// DeleteOrganizationGroupWithResponse request
	DeleteOrganizationGroupWithResponse(ctx context.Context, organizationId string, group string, reqEditors ...RequestEditorFn) (*DeleteOrganizationGroupResponse, error)

	// GetOrganizationGroupWithResponse request
	GetOrganizationGroupWithResponse(ctx context.Context, organizationId string, group string, reqEditors ...RequestEditorFn) (*GetOrganizationGroupResponse, error)

	// UpdateOrganizationGroupWithBodyWithResponse request with any body
	UpdateOrganizationGroupWithBodyWithResponse(ctx context.Context, organizationId string, group string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrganizationGroupResponse, error)

	UpdateOrganizationGroupWithResponse(ctx context.Context, organizationId string, group string, body UpdateOrganizationGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrganizationGroupResponse, error)

	// List4WithResponse request
	List4WithResponse(ctx context.Context, organizationId string, group string, params *List4Params, reqEditors ...RequestEditorFn) (*List4Response, error)

	// RemoveMember1WithResponse request
	RemoveMember1WithResponse(ctx context.Context, organizationId string, group string, member string, reqEditors ...RequestEditorFn) (*RemoveMember1Response, error)

	// AddMemberWithResponse request
	AddMemberWithResponse(ctx context.Context, organizationId string, group string, member string, reqEditors ...RequestEditorFn) (*AddMemberResponse, error)

	// List5WithResponse request
	List5WithResponse(ctx context.Context, organizationId string, params *List5Params, reqEditors ...RequestEditorFn) (*List5Response, error)

	// Create3WithBodyWithResponse request with any body
	Create3WithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Create3Response, error)

	Create3WithResponse(ctx context.Context, organizationId string, body Create3JSONRequestBody, reqEditors ...RequestEditorFn) (*Create3Response, error)

	// Delete2WithResponse request
	Delete2WithResponse(ctx context.Context, organizationId string, identity string, reqEditors ...RequestEditorFn) (*Delete2Response, error)

	// Get4WithResponse request
	Get4WithResponse(ctx context.Context, organizationId string, identity string, reqEditors ...RequestEditorFn) (*Get4Response, error)

	// Update2WithBodyWithResponse request with any body
	Update2WithBodyWithResponse(ctx context.Context, organizationId string, identity string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Update2Response, error)

	Update2WithResponse(ctx context.Context, organizationId string, identity string, body Update2JSONRequestBody, reqEditors ...RequestEditorFn) (*Update2Response, error)

	// GetMembersWithResponse request
	GetMembersWithResponse(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*GetMembersResponse, error)

	// AddOrUpdateMemberWithBodyWithResponse request with any body
	AddOrUpdateMemberWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddOrUpdateMemberResponse, error)

	AddOrUpdateMemberWithResponse(ctx context.Context, organizationId string, body AddOrUpdateMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*AddOrUpdateMemberResponse, error)

	// RemoveMemberWithResponse request
	RemoveMemberWithResponse(ctx context.Context, organizationId string, member string, reqEditors ...RequestEditorFn) (*RemoveMemberResponse, error)

	// List2WithResponse request
	List2WithResponse(ctx context.Context, organizationId string, params *List2Params, reqEditors ...RequestEditorFn) (*List2Response, error)

	// Create1WithBodyWithResponse request with any body
	Create1WithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Create1Response, error)

	Create1WithResponse(ctx context.Context, organizationId string, body Create1JSONRequestBody, reqEditors ...RequestEditorFn) (*Create1Response, error)

	// Delete1WithResponse request
	Delete1WithResponse(ctx context.Context, organizationId string, role string, reqEditors ...RequestEditorFn) (*Delete1Response, error)

	// Get3WithResponse request
	Get3WithResponse(ctx context.Context, organizationId string, role string, reqEditors ...RequestEditorFn) (*Get3Response, error)

	// Update1WithBodyWithResponse request with any body
	Update1WithBodyWithResponse(ctx context.Context, organizationId string, role string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Update1Response, error)

	Update1WithResponse(ctx context.Context, organizationId string, role string, body Update1JSONRequestBody, reqEditors ...RequestEditorFn) (*Update1Response, error)

	// Get6WithResponse request
	Get6WithResponse(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*Get6Response, error)

	// PatchWithBodyWithResponse request with any body
	PatchWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchResponse, error)

	PatchWithResponse(ctx context.Context, organizationId string, body PatchJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchResponse, error)

	// List1WithResponse request
	List1WithResponse(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*List1Response, error)

	// CreateWithBodyWithResponse request with any body
	CreateWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateResponse, error)

	CreateWithResponse(ctx context.Context, organizationId string, body CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateResponse, error)

	// DeleteWithResponse request
	DeleteWithResponse(ctx context.Context, organizationId string, tag string, reqEditors ...RequestEditorFn) (*DeleteResponse, error)

	// Get2WithResponse request
	Get2WithResponse(ctx context.Context, organizationId string, tag string, reqEditors ...RequestEditorFn) (*Get2Response, error)

	// UpdateWithBodyWithResponse request with any body
	UpdateWithBodyWithResponse(ctx context.Context, organizationId string, tag string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateResponse, error)

	UpdateWithResponse(ctx context.Context, organizationId string, tag string, body UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateResponse, error)

	// ListOrganisationUsersWithResponse request
	ListOrganisationUsersWithResponse(ctx context.Context, organizationId string, params *ListOrganisationUsersParams, reqEditors ...RequestEditorFn) (*ListOrganisationUsersResponse, error)

	// CreateOrganisationUserWithBodyWithResponse request with any body
	CreateOrganisationUserWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganisationUserResponse, error)

	CreateOrganisationUserWithResponse(ctx context.Context, organizationId string, body CreateOrganisationUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganisationUserResponse, error)

	// DeleteOrganizationUserWithResponse request
	DeleteOrganizationUserWithResponse(ctx context.Context, organizationId string, user string, reqEditors ...RequestEditorFn) (*DeleteOrganizationUserResponse, error)

	// Get5WithResponse request
	Get5WithResponse(ctx context.Context, organizationId string, user string, reqEditors ...RequestEditorFn) (*Get5Response, error)

	// UpdateOrganizationUserWithBodyWithResponse request with any body
	UpdateOrganizationUserWithBodyWithResponse(ctx context.Context, organizationId string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrganizationUserResponse, error)

	UpdateOrganizationUserWithResponse(ctx context.Context, organizationId string, user string, body UpdateOrganizationUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrganizationUserResponse, error)

	// ResetOrganizationUserPasswordWithBodyWithResponse request with any body
	ResetOrganizationUserPasswordWithBodyWithResponse(ctx context.Context, organizationId string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetOrganizationUserPasswordResponse, error)

	// UpdateOrganizationUserStatusWithBodyWithResponse request with any body
	UpdateOrganizationUserStatusWithBodyWithResponse(ctx context.Context, organizationId string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrganizationUserStatusResponse, error)

	UpdateOrganizationUserStatusWithResponse(ctx context.Context, organizationId string, user string, body UpdateOrganizationUserStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrganizationUserStatusResponse, error)

	// UpdateOrganisationUsernameWithBodyWithResponse request with any body
	UpdateOrganisationUsernameWithBodyWithResponse(ctx context.Context, organizationId string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrganisationUsernameResponse, error)

	UpdateOrganisationUsernameWithResponse(ctx context.Context, organizationId string, user string, body UpdateOrganisationUsernameJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrganisationUsernameResponse, error)

	// List25WithResponse request
	List25WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*List25Response, error)

	// GetAlertServiceStatusWithResponse request
	GetAlertServiceStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAlertServiceStatusResponse, error)

	// List37WithResponse request
	List37WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*List37Response, error)

	// GetSpelGrammarWithResponse request
	GetSpelGrammarWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSpelGrammarResponse, error)

	// Get38WithResponse request
	Get38WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Get38Response, error)

	// List35WithResponse request
	List35WithResponse(ctx context.Context, params *List35Params, reqEditors ...RequestEditorFn) (*List35Response, error)

	// Get35WithResponse request
	Get35WithResponse(ctx context.Context, authDeviceNotifierId string, reqEditors ...RequestEditorFn) (*Get35Response, error)

	// GetSchema9WithResponse request
	GetSchema9WithResponse(ctx context.Context, authDeviceNotifierId string, reqEditors ...RequestEditorFn) (*GetSchema9Response, error)

	// List34WithResponse request
	List34WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*List34Response, error)

	// Get34WithResponse request
	Get34WithResponse(ctx context.Context, botDetection string, reqEditors ...RequestEditorFn) (*Get34Response, error)

	// GetSchema8WithResponse request
	GetSchema8WithResponse(ctx context.Context, botDetection string, reqEditors ...RequestEditorFn) (*GetSchema8Response, error)

	// List27WithResponse request
	List27WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*List27Response, error)

	// Get27WithResponse request
	Get27WithResponse(ctx context.Context, certificate string, reqEditors ...RequestEditorFn) (*Get27Response, error)

	// GetSchema1WithResponse request
	GetSchema1WithResponse(ctx context.Context, certificate string, reqEditors ...RequestEditorFn) (*GetSchema1Response, error)

	// List36WithResponse request
	List36WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*List36Response, error)

	// Get36WithResponse request
	Get36WithResponse(ctx context.Context, deviceIdentifier string, reqEditors ...RequestEditorFn) (*Get36Response, error)

	// GetSchema10WithResponse request
	GetSchema10WithResponse(ctx context.Context, deviceIdentifier string, reqEditors ...RequestEditorFn) (*GetSchema10Response, error)

	// List28WithResponse request
	List28WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*List28Response, error)

	// Get28WithResponse request
	Get28WithResponse(ctx context.Context, extensionGrant string, reqEditors ...RequestEditorFn) (*Get28Response, error)

	// GetSchema2WithResponse request
	GetSchema2WithResponse(ctx context.Context, extensionGrant string, reqEditors ...RequestEditorFn) (*GetSchema2Response, error)

	// List31WithResponse request
	List31WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*List31Response, error)

	// Get31WithResponse request
	Get31WithResponse(ctx context.Context, factor string, reqEditors ...RequestEditorFn) (*Get31Response, error)

	// GetSchema5WithResponse request
	GetSchema5WithResponse(ctx context.Context, factor string, reqEditors ...RequestEditorFn) (*GetSchema5Response, error)

	// List26WithResponse request
	List26WithResponse(ctx context.Context, params *List26Params, reqEditors ...RequestEditorFn) (*List26Response, error)

	// Get26WithResponse request
	Get26WithResponse(ctx context.Context, identity string, reqEditors ...RequestEditorFn) (*Get26Response, error)

	// GetSchemaWithResponse request
	GetSchemaWithResponse(ctx context.Context, identity string, reqEditors ...RequestEditorFn) (*GetSchemaResponse, error)

	// List33WithResponse request
	List33WithResponse(ctx context.Context, params *List33Params, reqEditors ...RequestEditorFn) (*List33Response, error)

	// Get33WithResponse request
	Get33WithResponse(ctx context.Context, notifierId string, reqEditors ...RequestEditorFn) (*Get33Response, error)

	// GetSchema7WithResponse request
	GetSchema7WithResponse(ctx context.Context, notifierId string, reqEditors ...RequestEditorFn) (*GetSchema7Response, error)

	// List30WithResponse request
	List30WithResponse(ctx context.Context, params *List30Params, reqEditors ...RequestEditorFn) (*List30Response, error)

	// Get30WithResponse request
	Get30WithResponse(ctx context.Context, policy string, reqEditors ...RequestEditorFn) (*Get30Response, error)

	// GetDocumentationWithResponse request
	GetDocumentationWithResponse(ctx context.Context, policy string, reqEditors ...RequestEditorFn) (*GetDocumentationResponse, error)

	// GetSchema4WithResponse request
	GetSchema4WithResponse(ctx context.Context, policy string, reqEditors ...RequestEditorFn) (*GetSchema4Response, error)

	// List29WithResponse request
	List29WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*List29Response, error)

	// Get29WithResponse request
	Get29WithResponse(ctx context.Context, reporter string, reqEditors ...RequestEditorFn) (*Get29Response, error)

	// GetSchema3WithResponse request
	GetSchema3WithResponse(ctx context.Context, reporter string, reqEditors ...RequestEditorFn) (*GetSchema3Response, error)

	// List32WithResponse request
	List32WithResponse(ctx context.Context, params *List32Params, reqEditors ...RequestEditorFn) (*List32Response, error)

	// Get32WithResponse request
	Get32WithResponse(ctx context.Context, resource string, reqEditors ...RequestEditorFn) (*Get32Response, error)

	// GetSchema6WithResponse request
	GetSchema6WithResponse(ctx context.Context, resource string, reqEditors ...RequestEditorFn) (*GetSchema6Response, error)

	// Get37WithResponse request
	Get37WithResponse(ctx context.Context, role string, reqEditors ...RequestEditorFn) (*Get37Response, error)

	// GetWithResponse request
	GetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetResponse, error)

	// SubscribeNewsletterWithBodyWithResponse request with any body
	SubscribeNewsletterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubscribeNewsletterResponse, error)

	// GetTaglinesWithResponse request
	GetTaglinesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTaglinesResponse, error)

	// ListNotificationsWithResponse request
	ListNotificationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListNotificationsResponse, error)

	// MarkAsReadWithResponse request
	MarkAsReadWithResponse(ctx context.Context, notificationId string, reqEditors ...RequestEditorFn) (*MarkAsReadResponse, error)
}

type PostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AuthToken
}

// Status returns HTTPResponse.Status
func (r PostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Audit
}

// Status returns HTTPResponse.Status
func (r ListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Audit
}

// Status returns HTTPResponse.Status
func (r Get1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type List24Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Entrypoint
}

// Status returns HTTPResponse.Status
func (r List24Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r List24Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Create14Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Create14Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Create14Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Delete16Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Delete16Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Delete16Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get25Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Entrypoint
}

// Status returns HTTPResponse.Status
func (r Get25Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get25Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Update13Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Entrypoint
}

// Status returns HTTPResponse.Status
func (r Update13Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Update13Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type List6Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Environment
}

// Status returns HTTPResponse.Status
func (r List6Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r List6Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDomainsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Domain
}

// Status returns HTTPResponse.Status
func (r ListDomainsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDomainsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Domain
}

// Status returns HTTPResponse.Status
func (r CreateDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindDomainByHridResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Domain
}

// Status returns HTTPResponse.Status
func (r FindDomainByHridResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindDomainByHridResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Domain
}

// Status returns HTTPResponse.Status
func (r FindDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Domain
}

// Status returns HTTPResponse.Status
func (r PatchDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Domain
}

// Status returns HTTPResponse.Status
func (r UpdateDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAlertNotifiersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AlertNotifier
}

// Status returns HTTPResponse.Status
func (r ListAlertNotifiersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAlertNotifiersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAlertNotifierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AlertNotifier
}

// Status returns HTTPResponse.Status
func (r CreateAlertNotifierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAlertNotifierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAlertNotifierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAlertNotifierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAlertNotifierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertNotifierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AlertNotifier
}

// Status returns HTTPResponse.Status
func (r GetAlertNotifierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertNotifierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchAlertNotifierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AlertNotifier
}

// Status returns HTTPResponse.Status
func (r PatchAlertNotifierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchAlertNotifierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type List20Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AlertTrigger
}

// Status returns HTTPResponse.Status
func (r List20Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r List20Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type List19Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AlertTrigger
}

// Status returns HTTPResponse.Status
func (r List19Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r List19Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get21Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Get21Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get21Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplicationPage
}

// Status returns HTTPResponse.Status
func (r ListApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Application
}

// Status returns HTTPResponse.Status
func (r CreateApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Application
}

// Status returns HTTPResponse.Status
func (r FindApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Application
}

// Status returns HTTPResponse.Status
func (r PatchApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Application
}

// Status returns HTTPResponse.Status
func (r UpdateApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get14Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Get14Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get14Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get13Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Get13Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get13Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Create6Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Create6Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Create6Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Delete8Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Delete8Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Delete8Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Update5Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Email
}

// Status returns HTTPResponse.Status
func (r Update5Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Update5Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAppFlowsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FlowEntity
}

// Status returns HTTPResponse.Status
func (r ListAppFlowsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAppFlowsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DefineAppFlowsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FlowEntity
}

// Status returns HTTPResponse.Status
func (r DefineAppFlowsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DefineAppFlowsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAppFlowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FlowEntity
}

// Status returns HTTPResponse.Status
func (r GetAppFlowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAppFlowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAppFlowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *FlowEntity
}

// Status returns HTTPResponse.Status
func (r UpdateAppFlowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAppFlowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get12Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Get12Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get12Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Create5Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Create5Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Create5Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Delete7Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Delete7Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Delete7Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Update4Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Form
}

// Status returns HTTPResponse.Status
func (r Update4Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Update4Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMembers1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MembershipListItem
}

// Status returns HTTPResponse.Status
func (r GetMembers1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMembers1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddOrUpdateMember2Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AddOrUpdateMember2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddOrUpdateMember2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Permissions2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r Permissions2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Permissions2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveMember3Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RemoveMember3Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveMember3Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type List15Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceListItem
}

// Status returns HTTPResponse.Status
func (r List15Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r List15Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get15Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Resource
}

// Status returns HTTPResponse.Status
func (r Get15Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get15Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type List16Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AccessPolicyListItem
}

// Status returns HTTPResponse.Status
func (r List16Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r List16Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get16Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccessPolicy
}

// Status returns HTTPResponse.Status
func (r Get16Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get16Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RenewClientSecretResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Application
}

// Status returns HTTPResponse.Status
func (r RenewClientSecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RenewClientSecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateApplicationTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Application
}

// Status returns HTTPResponse.Status
func (r UpdateApplicationTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateApplicationTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type List7Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Audit
}

// Status returns HTTPResponse.Status
func (r List7Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r List7Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get8Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Audit
}

// Status returns HTTPResponse.Status
func (r Get8Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get8Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type List23Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AuthenticationDeviceNotifier
}

// Status returns HTTPResponse.Status
func (r List23Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r List23Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Create13Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Create13Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Create13Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Delete15Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Delete15Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Delete15Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get24Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthenticationDeviceNotifier
}

// Status returns HTTPResponse.Status
func (r Get24Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get24Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Update12Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AuthenticationDeviceNotifier
}

// Status returns HTTPResponse.Status
func (r Update12Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Update12Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type List21Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BotDetection
}

// Status returns HTTPResponse.Status
func (r List21Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r List21Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Create11Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Create11Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Create11Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Delete13Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Delete13Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Delete13Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get22Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BotDetection
}

// Status returns HTTPResponse.Status
func (r Get22Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get22Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Update10Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BotDetection
}

// Status returns HTTPResponse.Status
func (r Update10Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Update10Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCertificatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CertificateEntity
}

// Status returns HTTPResponse.Status
func (r ListCertificatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCertificatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCertificateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CertificateEntity
}

// Status returns HTTPResponse.Status
func (r CreateCertificateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCertificateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RotateCertificateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CertificateEntity
}

// Status returns HTTPResponse.Status
func (r RotateCertificateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RotateCertificateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCertificateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCertificateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCertificateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindCertificateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CertificateEntity
}

// Status returns HTTPResponse.Status
func (r FindCertificateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindCertificateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCertificateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CertificateEntity
}

// Status returns HTTPResponse.Status
func (r UpdateCertificateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCertificateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCertificatePublicKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCertificatePublicKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCertificatePublicKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCertificatePublicKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CertificateKey
}

// Status returns HTTPResponse.Status
func (r GetCertificatePublicKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCertificatePublicKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type List22Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BotDetection
}

// Status returns HTTPResponse.Status
func (r List22Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r List22Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Create12Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Create12Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Create12Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Delete14Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Delete14Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Delete14Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get23Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceIdentifierResource
}

// Status returns HTTPResponse.Status
func (r Get23Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get23Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Update11Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BotDetection
}

// Status returns HTTPResponse.Status
func (r Update11Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Update11Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get19Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Get19Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get19Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Create9Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Create9Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Create9Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Delete11Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Delete11Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Delete11Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Update8Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Email
}

// Status returns HTTPResponse.Status
func (r Update8Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Update8Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDomainEntrypointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Entrypoint
}

// Status returns HTTPResponse.Status
func (r GetDomainEntrypointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDomainEntrypointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type List17Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ExtensionGrant
}

// Status returns HTTPResponse.Status
func (r List17Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r List17Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Create7Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Create7Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Create7Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Delete9Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Delete9Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Delete9Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get17Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExtensionGrant
}

// Status returns HTTPResponse.Status
func (r Get17Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get17Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Update6Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ExtensionGrant
}

// Status returns HTTPResponse.Status
func (r Update6Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Update6Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListFactorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Factor
}

// Status returns HTTPResponse.Status
func (r ListFactorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListFactorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFactorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Factor
}

// Status returns HTTPResponse.Status
func (r CreateFactorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFactorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFactorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteFactorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFactorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFactorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Factor
}

// Status returns HTTPResponse.Status
func (r GetFactorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFactorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateFactorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Factor
}

// Status returns HTTPResponse.Status
func (r UpdateFactorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateFactorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDomainFlowsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FlowEntity
}

// Status returns HTTPResponse.Status
func (r ListDomainFlowsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDomainFlowsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DefineDomainFlowsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FlowEntity
}

// Status returns HTTPResponse.Status
func (r DefineDomainFlowsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DefineDomainFlowsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDomainFlowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FlowEntity
}

// Status returns HTTPResponse.Status
func (r GetDomainFlowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDomainFlowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDomainFlowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *FlowEntity
}

// Status returns HTTPResponse.Status
func (r UpdateDomainFlowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDomainFlowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get18Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Get18Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get18Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Create8Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Create8Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Create8Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RenderDomainTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PreviewResponse
}

// Status returns HTTPResponse.Status
func (r RenderDomainTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RenderDomainTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Delete10Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Delete10Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Delete10Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Update7Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Form
}

// Status returns HTTPResponse.Status
func (r Update7Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Update7Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GroupPage
}

// Status returns HTTPResponse.Status
func (r ListGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Group
}

// Status returns HTTPResponse.Status
func (r CreateGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Group
}

// Status returns HTTPResponse.Status
func (r FindGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Group
}

// Status returns HTTPResponse.Status
func (r UpdateGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r GetGroupMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveGroupMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RemoveGroupMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveGroupMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddGroupMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AddGroupMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddGroupMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindGroupRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Role
}

// Status returns HTTPResponse.Status
func (r FindGroupRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindGroupRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AssignRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Group
}

// Status returns HTTPResponse.Status
func (r AssignRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AssignRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RevokeRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Group
}

// Status returns HTTPResponse.Status
func (r RevokeRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RevokeRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListI18nDictionariesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]I18nDictionary
}

// Status returns HTTPResponse.Status
func (r ListI18nDictionariesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListI18nDictionariesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateI18nDictionaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *I18nDictionary
}

// Status returns HTTPResponse.Status
func (r CreateI18nDictionaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateI18nDictionaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteI18nDictionaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteI18nDictionaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteI18nDictionaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetI18nDictionaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *I18nDictionary
}

// Status returns HTTPResponse.Status
func (r GetI18nDictionaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetI18nDictionaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutI18nDictionaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *I18nDictionary
}

// Status returns HTTPResponse.Status
func (r PutI18nDictionaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutI18nDictionaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceI18nDictionaryEntriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *I18nDictionary
}

// Status returns HTTPResponse.Status
func (r ReplaceI18nDictionaryEntriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceI18nDictionaryEntriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIdentityProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FilteredIdentityProviderInfo
}

// Status returns HTTPResponse.Status
func (r ListIdentityProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIdentityProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIdentityProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *IdentityProvider
}

// Status returns HTTPResponse.Status
func (r CreateIdentityProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIdentityProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIdentityProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIdentityProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIdentityProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindIdentityProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IdentityProvider
}

// Status returns HTTPResponse.Status
func (r FindIdentityProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindIdentityProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIdentityProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *IdentityProvider
}

// Status returns HTTPResponse.Status
func (r UpdateIdentityProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIdentityProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type List8Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MembershipListItem
}

// Status returns HTTPResponse.Status
func (r List8Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r List8Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddOrUpdateMember1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AddOrUpdateMember1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddOrUpdateMember1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Permissions1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r Permissions1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Permissions1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveMember2Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RemoveMember2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveMember2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type List18Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Reporter
}

// Status returns HTTPResponse.Status
func (r List18Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r List18Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Create10Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Reporter
}

// Status returns HTTPResponse.Status
func (r Create10Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Create10Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Delete12Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Delete12Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Delete12Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get20Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Reporter
}

// Status returns HTTPResponse.Status
func (r Get20Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get20Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Update9Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Reporter
}

// Status returns HTTPResponse.Status
func (r Update9Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Update9Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ServiceResource
}

// Status returns HTTPResponse.Status
func (r ListResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ServiceResource
}

// Status returns HTTPResponse.Status
func (r CreateResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServiceResource
}

// Status returns HTTPResponse.Status
func (r GetResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ServiceResource
}

// Status returns HTTPResponse.Status
func (r UpdateResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RolePage
}

// Status returns HTTPResponse.Status
func (r FindRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Role
}

// Status returns HTTPResponse.Status
func (r CreateRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoleEntity
}

// Status returns HTTPResponse.Status
func (r FindRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RoleEntity
}

// Status returns HTTPResponse.Status
func (r UpdateRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListScopesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScopePage
}

// Status returns HTTPResponse.Status
func (r ListScopesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListScopesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Scope
}

// Status returns HTTPResponse.Status
func (r CreateScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Scope
}

// Status returns HTTPResponse.Status
func (r FindScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Scope
}

// Status returns HTTPResponse.Status
func (r PatchScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Scope
}

// Status returns HTTPResponse.Status
func (r UpdateScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListThemesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ThemeEntity
}

// Status returns HTTPResponse.Status
func (r ListThemesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListThemesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateThemeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ThemeEntity
}

// Status returns HTTPResponse.Status
func (r CreateThemeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateThemeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteThemeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteThemeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteThemeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetThemeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ThemeEntity
	JSON404      *ThemeEntity
}

// Status returns HTTPResponse.Status
func (r GetThemeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetThemeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateThemeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ThemeEntity
	JSON404      *ThemeEntity
}

// Status returns HTTPResponse.Status
func (r UpdateThemeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateThemeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserPage
}

// Status returns HTTPResponse.Status
func (r ListUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *User
}

// Status returns HTTPResponse.Status
func (r CreateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserEntity
}

// Status returns HTTPResponse.Status
func (r FindUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *User
}

// Status returns HTTPResponse.Status
func (r UpdateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type List14Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Audit
}

// Status returns HTTPResponse.Status
func (r List14Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r List14Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get11Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Audit
}

// Status returns HTTPResponse.Status
func (r Get11Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get11Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Delete5Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Delete5Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Delete5Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type List10Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScopeApprovalEntity
}

// Status returns HTTPResponse.Status
func (r List10Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r List10Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RevokeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RevokeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RevokeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get9Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScopeApprovalEntity
}

// Status returns HTTPResponse.Status
func (r Get9Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get9Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type List13Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Credential
}

// Status returns HTTPResponse.Status
func (r List13Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r List13Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Revoke2Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Revoke2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Revoke2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get10Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Credential
}

// Status returns HTTPResponse.Status
func (r Get10Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get10Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type List9Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]User
}

// Status returns HTTPResponse.Status
func (r List9Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r List9Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Delete4Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Delete4Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Delete4Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type List12Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EnrolledFactorEntity
}

// Status returns HTTPResponse.Status
func (r List12Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r List12Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Delete6Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Delete6Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Delete6Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LockUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LockUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LockUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResetPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ResetPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResetPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type List11Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Role
}

// Status returns HTTPResponse.Status
func (r List11Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r List11Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AssignResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r AssignResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AssignResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Revoke1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r Revoke1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Revoke1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SendRegistrationConfirmationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SendRegistrationConfirmationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SendRegistrationConfirmationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *User
}

// Status returns HTTPResponse.Status
func (r UpdateUserStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnlockUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UnlockUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnlockUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUsernameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *User
}

// Status returns HTTPResponse.Status
func (r UpdateUsernameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUsernameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get7Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Get7Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get7Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Create4Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Create4Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Create4Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Delete3Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Delete3Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Delete3Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Update3Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Form
}

// Status returns HTTPResponse.Status
func (r Update3Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Update3Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type List3Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Group
}

// Status returns HTTPResponse.Status
func (r List3Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r List3Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Create2Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Create2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Create2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrganizationGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrganizationGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrganizationGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Group
}

// Status returns HTTPResponse.Status
func (r GetOrganizationGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateOrganizationGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *User
}

// Status returns HTTPResponse.Status
func (r UpdateOrganizationGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOrganizationGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type List4Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r List4Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r List4Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveMember1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RemoveMember1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveMember1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AddMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type List5Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FilteredIdentityProviderInfo
}

// Status returns HTTPResponse.Status
func (r List5Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r List5Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Create3Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Create3Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Create3Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Delete2Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Delete2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Delete2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get4Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IdentityProvider
}

// Status returns HTTPResponse.Status
func (r Get4Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get4Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Update2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *IdentityProvider
}

// Status returns HTTPResponse.Status
func (r Update2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Update2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MembershipListItem
}

// Status returns HTTPResponse.Status
func (r GetMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddOrUpdateMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AddOrUpdateMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddOrUpdateMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RemoveMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type List2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleEntity
}

// Status returns HTTPResponse.Status
func (r List2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r List2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Create1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Create1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Create1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Delete1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Delete1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Delete1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get3Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoleEntity
}

// Status returns HTTPResponse.Status
func (r Get3Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get3Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Update1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RoleEntity
}

// Status returns HTTPResponse.Status
func (r Update1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Update1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get6Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Domain
}

// Status returns HTTPResponse.Status
func (r Get6Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get6Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Domain
}

// Status returns HTTPResponse.Status
func (r PatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type List1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Domain
}

// Status returns HTTPResponse.Status
func (r List1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r List1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tag
}

// Status returns HTTPResponse.Status
func (r Get2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tag
}

// Status returns HTTPResponse.Status
func (r UpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOrganisationUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Page
}

// Status returns HTTPResponse.Status
func (r ListOrganisationUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOrganisationUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrganisationUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *User
}

// Status returns HTTPResponse.Status
func (r CreateOrganisationUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrganisationUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrganizationUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOrganizationUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrganizationUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get5Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserEntity
}

// Status returns HTTPResponse.Status
func (r Get5Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get5Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateOrganizationUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *User
}

// Status returns HTTPResponse.Status
func (r UpdateOrganizationUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOrganizationUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResetOrganizationUserPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ResetOrganizationUserPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResetOrganizationUserPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateOrganizationUserStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *User
}

// Status returns HTTPResponse.Status
func (r UpdateOrganizationUserStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOrganizationUserStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateOrganisationUsernameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *User
}

// Status returns HTTPResponse.Status
func (r UpdateOrganisationUsernameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOrganisationUsernameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type List25Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r List25Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r List25Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAlertServiceStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AlertServiceStatusEntity
}

// Status returns HTTPResponse.Status
func (r GetAlertServiceStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAlertServiceStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type List37Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r List37Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r List37Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSpelGrammarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSpelGrammarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSpelGrammarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get38Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InstallationEntity
	JSON404      *ErrorEntity
}

// Status returns HTTPResponse.Status
func (r Get38Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get38Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type List35Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r List35Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r List35Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get35Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Get35Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get35Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSchema9Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSchema9Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSchema9Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type List34Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r List34Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r List34Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get34Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Get34Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get34Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSchema8Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSchema8Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSchema8Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type List27Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r List27Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r List27Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get27Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Get27Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get27Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSchema1Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSchema1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSchema1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type List36Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r List36Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r List36Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get36Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Get36Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get36Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSchema10Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSchema10Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSchema10Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type List28Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r List28Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r List28Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get28Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Get28Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get28Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSchema2Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSchema2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSchema2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type List31Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r List31Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r List31Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get31Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Get31Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get31Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSchema5Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSchema5Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSchema5Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type List26Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r List26Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r List26Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get26Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Get26Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get26Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type List33Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]NotifierPlugin
}

// Status returns HTTPResponse.Status
func (r List33Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r List33Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get33Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NotifierPlugin
	JSON404      *ErrorEntity
}

// Status returns HTTPResponse.Status
func (r Get33Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get33Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSchema7Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON404      *ErrorEntity
}

// Status returns HTTPResponse.Status
func (r GetSchema7Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSchema7Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type List30Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r List30Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r List30Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get30Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Get30Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get30Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDocumentationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDocumentationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDocumentationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSchema4Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSchema4Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSchema4Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type List29Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r List29Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r List29Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get29Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Get29Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get29Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSchema3Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSchema3Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSchema3Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type List32Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r List32Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r List32Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get32Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Get32Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get32Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSchema6Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSchema6Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSchema6Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Get37Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Role
}

// Status returns HTTPResponse.Status
func (r Get37Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Get37Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubscribeNewsletterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SubscribeNewsletterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubscribeNewsletterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaglinesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetTaglinesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaglinesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListNotificationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserNotificationContent
}

// Status returns HTTPResponse.Status
func (r ListNotificationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListNotificationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MarkAsReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r MarkAsReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MarkAsReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostWithResponse request returning *PostResponse
func (c *ClientWithResponses) PostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostResponse, error) {
	rsp, err := c.Post(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostResponse(rsp)
}

// ListWithResponse request returning *ListResponse
func (c *ClientWithResponses) ListWithResponse(ctx context.Context, organizationId string, params *ListParams, reqEditors ...RequestEditorFn) (*ListResponse, error) {
	rsp, err := c.List(ctx, organizationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListResponse(rsp)
}

// Get1WithResponse request returning *Get1Response
func (c *ClientWithResponses) Get1WithResponse(ctx context.Context, organizationId string, audit string, reqEditors ...RequestEditorFn) (*Get1Response, error) {
	rsp, err := c.Get1(ctx, organizationId, audit, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet1Response(rsp)
}

// List24WithResponse request returning *List24Response
func (c *ClientWithResponses) List24WithResponse(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*List24Response, error) {
	rsp, err := c.List24(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseList24Response(rsp)
}

// Create14WithBodyWithResponse request with arbitrary body returning *Create14Response
func (c *ClientWithResponses) Create14WithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Create14Response, error) {
	rsp, err := c.Create14WithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreate14Response(rsp)
}

func (c *ClientWithResponses) Create14WithResponse(ctx context.Context, organizationId string, body Create14JSONRequestBody, reqEditors ...RequestEditorFn) (*Create14Response, error) {
	rsp, err := c.Create14(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreate14Response(rsp)
}

// Delete16WithResponse request returning *Delete16Response
func (c *ClientWithResponses) Delete16WithResponse(ctx context.Context, organizationId string, entrypointId string, reqEditors ...RequestEditorFn) (*Delete16Response, error) {
	rsp, err := c.Delete16(ctx, organizationId, entrypointId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDelete16Response(rsp)
}

// Get25WithResponse request returning *Get25Response
func (c *ClientWithResponses) Get25WithResponse(ctx context.Context, organizationId string, entrypointId string, reqEditors ...RequestEditorFn) (*Get25Response, error) {
	rsp, err := c.Get25(ctx, organizationId, entrypointId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet25Response(rsp)
}

// Update13WithBodyWithResponse request with arbitrary body returning *Update13Response
func (c *ClientWithResponses) Update13WithBodyWithResponse(ctx context.Context, organizationId string, entrypointId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Update13Response, error) {
	rsp, err := c.Update13WithBody(ctx, organizationId, entrypointId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdate13Response(rsp)
}

func (c *ClientWithResponses) Update13WithResponse(ctx context.Context, organizationId string, entrypointId string, body Update13JSONRequestBody, reqEditors ...RequestEditorFn) (*Update13Response, error) {
	rsp, err := c.Update13(ctx, organizationId, entrypointId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdate13Response(rsp)
}

// List6WithResponse request returning *List6Response
func (c *ClientWithResponses) List6WithResponse(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*List6Response, error) {
	rsp, err := c.List6(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseList6Response(rsp)
}

// ListDomainsWithResponse request returning *ListDomainsResponse
func (c *ClientWithResponses) ListDomainsWithResponse(ctx context.Context, organizationId string, environmentId string, params *ListDomainsParams, reqEditors ...RequestEditorFn) (*ListDomainsResponse, error) {
	rsp, err := c.ListDomains(ctx, organizationId, environmentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDomainsResponse(rsp)
}

// CreateDomainWithBodyWithResponse request with arbitrary body returning *CreateDomainResponse
func (c *ClientWithResponses) CreateDomainWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDomainResponse, error) {
	rsp, err := c.CreateDomainWithBody(ctx, organizationId, environmentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDomainResponse(rsp)
}

func (c *ClientWithResponses) CreateDomainWithResponse(ctx context.Context, organizationId string, environmentId string, body CreateDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDomainResponse, error) {
	rsp, err := c.CreateDomain(ctx, organizationId, environmentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDomainResponse(rsp)
}

// FindDomainByHridWithResponse request returning *FindDomainByHridResponse
func (c *ClientWithResponses) FindDomainByHridWithResponse(ctx context.Context, organizationId string, environmentId string, hrid string, reqEditors ...RequestEditorFn) (*FindDomainByHridResponse, error) {
	rsp, err := c.FindDomainByHrid(ctx, organizationId, environmentId, hrid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindDomainByHridResponse(rsp)
}

// DeleteDomainWithResponse request returning *DeleteDomainResponse
func (c *ClientWithResponses) DeleteDomainWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*DeleteDomainResponse, error) {
	rsp, err := c.DeleteDomain(ctx, organizationId, environmentId, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDomainResponse(rsp)
}

// FindDomainWithResponse request returning *FindDomainResponse
func (c *ClientWithResponses) FindDomainWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*FindDomainResponse, error) {
	rsp, err := c.FindDomain(ctx, organizationId, environmentId, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindDomainResponse(rsp)
}

// PatchDomainWithBodyWithResponse request with arbitrary body returning *PatchDomainResponse
func (c *ClientWithResponses) PatchDomainWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchDomainResponse, error) {
	rsp, err := c.PatchDomainWithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchDomainResponse(rsp)
}

func (c *ClientWithResponses) PatchDomainWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body PatchDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchDomainResponse, error) {
	rsp, err := c.PatchDomain(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchDomainResponse(rsp)
}

// UpdateDomainWithBodyWithResponse request with arbitrary body returning *UpdateDomainResponse
func (c *ClientWithResponses) UpdateDomainWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDomainResponse, error) {
	rsp, err := c.UpdateDomainWithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDomainResponse(rsp)
}

func (c *ClientWithResponses) UpdateDomainWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body UpdateDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDomainResponse, error) {
	rsp, err := c.UpdateDomain(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDomainResponse(rsp)
}

// ListAlertNotifiersWithResponse request returning *ListAlertNotifiersResponse
func (c *ClientWithResponses) ListAlertNotifiersWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*ListAlertNotifiersResponse, error) {
	rsp, err := c.ListAlertNotifiers(ctx, organizationId, environmentId, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAlertNotifiersResponse(rsp)
}

// CreateAlertNotifierWithBodyWithResponse request with arbitrary body returning *CreateAlertNotifierResponse
func (c *ClientWithResponses) CreateAlertNotifierWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAlertNotifierResponse, error) {
	rsp, err := c.CreateAlertNotifierWithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAlertNotifierResponse(rsp)
}

func (c *ClientWithResponses) CreateAlertNotifierWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body CreateAlertNotifierJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAlertNotifierResponse, error) {
	rsp, err := c.CreateAlertNotifier(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAlertNotifierResponse(rsp)
}

// DeleteAlertNotifierWithResponse request returning *DeleteAlertNotifierResponse
func (c *ClientWithResponses) DeleteAlertNotifierWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, notifierId string, reqEditors ...RequestEditorFn) (*DeleteAlertNotifierResponse, error) {
	rsp, err := c.DeleteAlertNotifier(ctx, organizationId, environmentId, domain, notifierId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAlertNotifierResponse(rsp)
}

// GetAlertNotifierWithResponse request returning *GetAlertNotifierResponse
func (c *ClientWithResponses) GetAlertNotifierWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, notifierId string, reqEditors ...RequestEditorFn) (*GetAlertNotifierResponse, error) {
	rsp, err := c.GetAlertNotifier(ctx, organizationId, environmentId, domain, notifierId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertNotifierResponse(rsp)
}

// PatchAlertNotifierWithBodyWithResponse request with arbitrary body returning *PatchAlertNotifierResponse
func (c *ClientWithResponses) PatchAlertNotifierWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, notifierId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchAlertNotifierResponse, error) {
	rsp, err := c.PatchAlertNotifierWithBody(ctx, organizationId, environmentId, domain, notifierId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchAlertNotifierResponse(rsp)
}

func (c *ClientWithResponses) PatchAlertNotifierWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, notifierId string, body PatchAlertNotifierJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchAlertNotifierResponse, error) {
	rsp, err := c.PatchAlertNotifier(ctx, organizationId, environmentId, domain, notifierId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchAlertNotifierResponse(rsp)
}

// List20WithResponse request returning *List20Response
func (c *ClientWithResponses) List20WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*List20Response, error) {
	rsp, err := c.List20(ctx, organizationId, environmentId, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseList20Response(rsp)
}

// List19WithBodyWithResponse request with arbitrary body returning *List19Response
func (c *ClientWithResponses) List19WithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*List19Response, error) {
	rsp, err := c.List19WithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseList19Response(rsp)
}

func (c *ClientWithResponses) List19WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body List19JSONRequestBody, reqEditors ...RequestEditorFn) (*List19Response, error) {
	rsp, err := c.List19(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseList19Response(rsp)
}

// Get21WithResponse request returning *Get21Response
func (c *ClientWithResponses) Get21WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *Get21Params, reqEditors ...RequestEditorFn) (*Get21Response, error) {
	rsp, err := c.Get21(ctx, organizationId, environmentId, domain, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet21Response(rsp)
}

// ListApplicationsWithResponse request returning *ListApplicationsResponse
func (c *ClientWithResponses) ListApplicationsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *ListApplicationsParams, reqEditors ...RequestEditorFn) (*ListApplicationsResponse, error) {
	rsp, err := c.ListApplications(ctx, organizationId, environmentId, domain, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListApplicationsResponse(rsp)
}

// CreateApplicationWithBodyWithResponse request with arbitrary body returning *CreateApplicationResponse
func (c *ClientWithResponses) CreateApplicationWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApplicationResponse, error) {
	rsp, err := c.CreateApplicationWithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApplicationResponse(rsp)
}

func (c *ClientWithResponses) CreateApplicationWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body CreateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateApplicationResponse, error) {
	rsp, err := c.CreateApplication(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApplicationResponse(rsp)
}

// DeleteApplicationWithResponse request returning *DeleteApplicationResponse
func (c *ClientWithResponses) DeleteApplicationWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*DeleteApplicationResponse, error) {
	rsp, err := c.DeleteApplication(ctx, organizationId, environmentId, domain, application, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApplicationResponse(rsp)
}

// FindApplicationWithResponse request returning *FindApplicationResponse
func (c *ClientWithResponses) FindApplicationWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*FindApplicationResponse, error) {
	rsp, err := c.FindApplication(ctx, organizationId, environmentId, domain, application, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindApplicationResponse(rsp)
}

// PatchApplicationWithBodyWithResponse request with arbitrary body returning *PatchApplicationResponse
func (c *ClientWithResponses) PatchApplicationWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchApplicationResponse, error) {
	rsp, err := c.PatchApplicationWithBody(ctx, organizationId, environmentId, domain, application, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApplicationResponse(rsp)
}

func (c *ClientWithResponses) PatchApplicationWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, body PatchApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchApplicationResponse, error) {
	rsp, err := c.PatchApplication(ctx, organizationId, environmentId, domain, application, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchApplicationResponse(rsp)
}

// UpdateApplicationWithBodyWithResponse request with arbitrary body returning *UpdateApplicationResponse
func (c *ClientWithResponses) UpdateApplicationWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApplicationResponse, error) {
	rsp, err := c.UpdateApplicationWithBody(ctx, organizationId, environmentId, domain, application, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateApplicationResponse(rsp)
}

func (c *ClientWithResponses) UpdateApplicationWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, body UpdateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateApplicationResponse, error) {
	rsp, err := c.UpdateApplication(ctx, organizationId, environmentId, domain, application, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateApplicationResponse(rsp)
}

// Get14WithResponse request returning *Get14Response
func (c *ClientWithResponses) Get14WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, params *Get14Params, reqEditors ...RequestEditorFn) (*Get14Response, error) {
	rsp, err := c.Get14(ctx, organizationId, environmentId, domain, application, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet14Response(rsp)
}

// Get13WithResponse request returning *Get13Response
func (c *ClientWithResponses) Get13WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, params *Get13Params, reqEditors ...RequestEditorFn) (*Get13Response, error) {
	rsp, err := c.Get13(ctx, organizationId, environmentId, domain, application, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet13Response(rsp)
}

// Create6WithBodyWithResponse request with arbitrary body returning *Create6Response
func (c *ClientWithResponses) Create6WithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Create6Response, error) {
	rsp, err := c.Create6WithBody(ctx, organizationId, environmentId, domain, application, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreate6Response(rsp)
}

func (c *ClientWithResponses) Create6WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, body Create6JSONRequestBody, reqEditors ...RequestEditorFn) (*Create6Response, error) {
	rsp, err := c.Create6(ctx, organizationId, environmentId, domain, application, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreate6Response(rsp)
}

// Delete8WithResponse request returning *Delete8Response
func (c *ClientWithResponses) Delete8WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, email string, reqEditors ...RequestEditorFn) (*Delete8Response, error) {
	rsp, err := c.Delete8(ctx, organizationId, environmentId, domain, application, email, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDelete8Response(rsp)
}

// Update5WithBodyWithResponse request with arbitrary body returning *Update5Response
func (c *ClientWithResponses) Update5WithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, email string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Update5Response, error) {
	rsp, err := c.Update5WithBody(ctx, organizationId, environmentId, domain, application, email, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdate5Response(rsp)
}

func (c *ClientWithResponses) Update5WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, email string, body Update5JSONRequestBody, reqEditors ...RequestEditorFn) (*Update5Response, error) {
	rsp, err := c.Update5(ctx, organizationId, environmentId, domain, application, email, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdate5Response(rsp)
}

// ListAppFlowsWithResponse request returning *ListAppFlowsResponse
func (c *ClientWithResponses) ListAppFlowsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*ListAppFlowsResponse, error) {
	rsp, err := c.ListAppFlows(ctx, organizationId, environmentId, domain, application, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAppFlowsResponse(rsp)
}

// DefineAppFlowsWithBodyWithResponse request with arbitrary body returning *DefineAppFlowsResponse
func (c *ClientWithResponses) DefineAppFlowsWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DefineAppFlowsResponse, error) {
	rsp, err := c.DefineAppFlowsWithBody(ctx, organizationId, environmentId, domain, application, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDefineAppFlowsResponse(rsp)
}

func (c *ClientWithResponses) DefineAppFlowsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, body DefineAppFlowsJSONRequestBody, reqEditors ...RequestEditorFn) (*DefineAppFlowsResponse, error) {
	rsp, err := c.DefineAppFlows(ctx, organizationId, environmentId, domain, application, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDefineAppFlowsResponse(rsp)
}

// GetAppFlowWithResponse request returning *GetAppFlowResponse
func (c *ClientWithResponses) GetAppFlowWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, flow string, reqEditors ...RequestEditorFn) (*GetAppFlowResponse, error) {
	rsp, err := c.GetAppFlow(ctx, organizationId, environmentId, domain, application, flow, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAppFlowResponse(rsp)
}

// UpdateAppFlowWithBodyWithResponse request with arbitrary body returning *UpdateAppFlowResponse
func (c *ClientWithResponses) UpdateAppFlowWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, flow string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAppFlowResponse, error) {
	rsp, err := c.UpdateAppFlowWithBody(ctx, organizationId, environmentId, domain, application, flow, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAppFlowResponse(rsp)
}

func (c *ClientWithResponses) UpdateAppFlowWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, flow string, body UpdateAppFlowJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAppFlowResponse, error) {
	rsp, err := c.UpdateAppFlow(ctx, organizationId, environmentId, domain, application, flow, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAppFlowResponse(rsp)
}

// Get12WithResponse request returning *Get12Response
func (c *ClientWithResponses) Get12WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, params *Get12Params, reqEditors ...RequestEditorFn) (*Get12Response, error) {
	rsp, err := c.Get12(ctx, organizationId, environmentId, domain, application, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet12Response(rsp)
}

// Create5WithBodyWithResponse request with arbitrary body returning *Create5Response
func (c *ClientWithResponses) Create5WithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Create5Response, error) {
	rsp, err := c.Create5WithBody(ctx, organizationId, environmentId, domain, application, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreate5Response(rsp)
}

func (c *ClientWithResponses) Create5WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, body Create5JSONRequestBody, reqEditors ...RequestEditorFn) (*Create5Response, error) {
	rsp, err := c.Create5(ctx, organizationId, environmentId, domain, application, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreate5Response(rsp)
}

// Delete7WithResponse request returning *Delete7Response
func (c *ClientWithResponses) Delete7WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, form string, reqEditors ...RequestEditorFn) (*Delete7Response, error) {
	rsp, err := c.Delete7(ctx, organizationId, environmentId, domain, application, form, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDelete7Response(rsp)
}

// Update4WithBodyWithResponse request with arbitrary body returning *Update4Response
func (c *ClientWithResponses) Update4WithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, form string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Update4Response, error) {
	rsp, err := c.Update4WithBody(ctx, organizationId, environmentId, domain, application, form, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdate4Response(rsp)
}

func (c *ClientWithResponses) Update4WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, form string, body Update4JSONRequestBody, reqEditors ...RequestEditorFn) (*Update4Response, error) {
	rsp, err := c.Update4(ctx, organizationId, environmentId, domain, application, form, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdate4Response(rsp)
}

// GetMembers1WithResponse request returning *GetMembers1Response
func (c *ClientWithResponses) GetMembers1WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*GetMembers1Response, error) {
	rsp, err := c.GetMembers1(ctx, organizationId, environmentId, domain, application, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMembers1Response(rsp)
}

// AddOrUpdateMember2WithBodyWithResponse request with arbitrary body returning *AddOrUpdateMember2Response
func (c *ClientWithResponses) AddOrUpdateMember2WithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddOrUpdateMember2Response, error) {
	rsp, err := c.AddOrUpdateMember2WithBody(ctx, organizationId, environmentId, domain, application, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddOrUpdateMember2Response(rsp)
}

func (c *ClientWithResponses) AddOrUpdateMember2WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, body AddOrUpdateMember2JSONRequestBody, reqEditors ...RequestEditorFn) (*AddOrUpdateMember2Response, error) {
	rsp, err := c.AddOrUpdateMember2(ctx, organizationId, environmentId, domain, application, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddOrUpdateMember2Response(rsp)
}

// Permissions2WithResponse request returning *Permissions2Response
func (c *ClientWithResponses) Permissions2WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*Permissions2Response, error) {
	rsp, err := c.Permissions2(ctx, organizationId, environmentId, domain, application, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePermissions2Response(rsp)
}

// RemoveMember3WithResponse request returning *RemoveMember3Response
func (c *ClientWithResponses) RemoveMember3WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, member string, reqEditors ...RequestEditorFn) (*RemoveMember3Response, error) {
	rsp, err := c.RemoveMember3(ctx, organizationId, environmentId, domain, application, member, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveMember3Response(rsp)
}

// List15WithResponse request returning *List15Response
func (c *ClientWithResponses) List15WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, params *List15Params, reqEditors ...RequestEditorFn) (*List15Response, error) {
	rsp, err := c.List15(ctx, organizationId, environmentId, domain, application, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseList15Response(rsp)
}

// Get15WithResponse request returning *Get15Response
func (c *ClientWithResponses) Get15WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, resource string, reqEditors ...RequestEditorFn) (*Get15Response, error) {
	rsp, err := c.Get15(ctx, organizationId, environmentId, domain, application, resource, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet15Response(rsp)
}

// List16WithResponse request returning *List16Response
func (c *ClientWithResponses) List16WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, resource string, reqEditors ...RequestEditorFn) (*List16Response, error) {
	rsp, err := c.List16(ctx, organizationId, environmentId, domain, application, resource, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseList16Response(rsp)
}

// Get16WithResponse request returning *Get16Response
func (c *ClientWithResponses) Get16WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, resource string, policy string, reqEditors ...RequestEditorFn) (*Get16Response, error) {
	rsp, err := c.Get16(ctx, organizationId, environmentId, domain, application, resource, policy, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet16Response(rsp)
}

// RenewClientSecretWithResponse request returning *RenewClientSecretResponse
func (c *ClientWithResponses) RenewClientSecretWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*RenewClientSecretResponse, error) {
	rsp, err := c.RenewClientSecret(ctx, organizationId, environmentId, domain, application, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRenewClientSecretResponse(rsp)
}

// UpdateApplicationTypeWithBodyWithResponse request with arbitrary body returning *UpdateApplicationTypeResponse
func (c *ClientWithResponses) UpdateApplicationTypeWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApplicationTypeResponse, error) {
	rsp, err := c.UpdateApplicationTypeWithBody(ctx, organizationId, environmentId, domain, application, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateApplicationTypeResponse(rsp)
}

func (c *ClientWithResponses) UpdateApplicationTypeWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, body UpdateApplicationTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateApplicationTypeResponse, error) {
	rsp, err := c.UpdateApplicationType(ctx, organizationId, environmentId, domain, application, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateApplicationTypeResponse(rsp)
}

// List7WithResponse request returning *List7Response
func (c *ClientWithResponses) List7WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *List7Params, reqEditors ...RequestEditorFn) (*List7Response, error) {
	rsp, err := c.List7(ctx, organizationId, environmentId, domain, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseList7Response(rsp)
}

// Get8WithResponse request returning *Get8Response
func (c *ClientWithResponses) Get8WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, audit string, reqEditors ...RequestEditorFn) (*Get8Response, error) {
	rsp, err := c.Get8(ctx, organizationId, environmentId, domain, audit, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet8Response(rsp)
}

// List23WithResponse request returning *List23Response
func (c *ClientWithResponses) List23WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*List23Response, error) {
	rsp, err := c.List23(ctx, organizationId, environmentId, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseList23Response(rsp)
}

// Create13WithBodyWithResponse request with arbitrary body returning *Create13Response
func (c *ClientWithResponses) Create13WithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Create13Response, error) {
	rsp, err := c.Create13WithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreate13Response(rsp)
}

func (c *ClientWithResponses) Create13WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body Create13JSONRequestBody, reqEditors ...RequestEditorFn) (*Create13Response, error) {
	rsp, err := c.Create13(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreate13Response(rsp)
}

// Delete15WithResponse request returning *Delete15Response
func (c *ClientWithResponses) Delete15WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, authDeviceNotifier string, reqEditors ...RequestEditorFn) (*Delete15Response, error) {
	rsp, err := c.Delete15(ctx, organizationId, environmentId, domain, authDeviceNotifier, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDelete15Response(rsp)
}

// Get24WithResponse request returning *Get24Response
func (c *ClientWithResponses) Get24WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, authDeviceNotifier string, reqEditors ...RequestEditorFn) (*Get24Response, error) {
	rsp, err := c.Get24(ctx, organizationId, environmentId, domain, authDeviceNotifier, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet24Response(rsp)
}

// Update12WithBodyWithResponse request with arbitrary body returning *Update12Response
func (c *ClientWithResponses) Update12WithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, authDeviceNotifier string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Update12Response, error) {
	rsp, err := c.Update12WithBody(ctx, organizationId, environmentId, domain, authDeviceNotifier, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdate12Response(rsp)
}

func (c *ClientWithResponses) Update12WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, authDeviceNotifier string, body Update12JSONRequestBody, reqEditors ...RequestEditorFn) (*Update12Response, error) {
	rsp, err := c.Update12(ctx, organizationId, environmentId, domain, authDeviceNotifier, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdate12Response(rsp)
}

// List21WithResponse request returning *List21Response
func (c *ClientWithResponses) List21WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*List21Response, error) {
	rsp, err := c.List21(ctx, organizationId, environmentId, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseList21Response(rsp)
}

// Create11WithBodyWithResponse request with arbitrary body returning *Create11Response
func (c *ClientWithResponses) Create11WithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Create11Response, error) {
	rsp, err := c.Create11WithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreate11Response(rsp)
}

func (c *ClientWithResponses) Create11WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body Create11JSONRequestBody, reqEditors ...RequestEditorFn) (*Create11Response, error) {
	rsp, err := c.Create11(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreate11Response(rsp)
}

// Delete13WithResponse request returning *Delete13Response
func (c *ClientWithResponses) Delete13WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, botDetection string, reqEditors ...RequestEditorFn) (*Delete13Response, error) {
	rsp, err := c.Delete13(ctx, organizationId, environmentId, domain, botDetection, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDelete13Response(rsp)
}

// Get22WithResponse request returning *Get22Response
func (c *ClientWithResponses) Get22WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, botDetection string, reqEditors ...RequestEditorFn) (*Get22Response, error) {
	rsp, err := c.Get22(ctx, organizationId, environmentId, domain, botDetection, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet22Response(rsp)
}

// Update10WithBodyWithResponse request with arbitrary body returning *Update10Response
func (c *ClientWithResponses) Update10WithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, botDetection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Update10Response, error) {
	rsp, err := c.Update10WithBody(ctx, organizationId, environmentId, domain, botDetection, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdate10Response(rsp)
}

func (c *ClientWithResponses) Update10WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, botDetection string, body Update10JSONRequestBody, reqEditors ...RequestEditorFn) (*Update10Response, error) {
	rsp, err := c.Update10(ctx, organizationId, environmentId, domain, botDetection, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdate10Response(rsp)
}

// ListCertificatesWithResponse request returning *ListCertificatesResponse
func (c *ClientWithResponses) ListCertificatesWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *ListCertificatesParams, reqEditors ...RequestEditorFn) (*ListCertificatesResponse, error) {
	rsp, err := c.ListCertificates(ctx, organizationId, environmentId, domain, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCertificatesResponse(rsp)
}

// CreateCertificateWithBodyWithResponse request with arbitrary body returning *CreateCertificateResponse
func (c *ClientWithResponses) CreateCertificateWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCertificateResponse, error) {
	rsp, err := c.CreateCertificateWithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCertificateResponse(rsp)
}

func (c *ClientWithResponses) CreateCertificateWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body CreateCertificateJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCertificateResponse, error) {
	rsp, err := c.CreateCertificate(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCertificateResponse(rsp)
}

// RotateCertificateWithResponse request returning *RotateCertificateResponse
func (c *ClientWithResponses) RotateCertificateWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*RotateCertificateResponse, error) {
	rsp, err := c.RotateCertificate(ctx, organizationId, environmentId, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRotateCertificateResponse(rsp)
}

// DeleteCertificateWithResponse request returning *DeleteCertificateResponse
func (c *ClientWithResponses) DeleteCertificateWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, reqEditors ...RequestEditorFn) (*DeleteCertificateResponse, error) {
	rsp, err := c.DeleteCertificate(ctx, organizationId, environmentId, domain, certificate, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCertificateResponse(rsp)
}

// FindCertificateWithResponse request returning *FindCertificateResponse
func (c *ClientWithResponses) FindCertificateWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, reqEditors ...RequestEditorFn) (*FindCertificateResponse, error) {
	rsp, err := c.FindCertificate(ctx, organizationId, environmentId, domain, certificate, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindCertificateResponse(rsp)
}

// UpdateCertificateWithBodyWithResponse request with arbitrary body returning *UpdateCertificateResponse
func (c *ClientWithResponses) UpdateCertificateWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCertificateResponse, error) {
	rsp, err := c.UpdateCertificateWithBody(ctx, organizationId, environmentId, domain, certificate, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCertificateResponse(rsp)
}

func (c *ClientWithResponses) UpdateCertificateWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, body UpdateCertificateJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCertificateResponse, error) {
	rsp, err := c.UpdateCertificate(ctx, organizationId, environmentId, domain, certificate, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCertificateResponse(rsp)
}

// GetCertificatePublicKeyWithResponse request returning *GetCertificatePublicKeyResponse
func (c *ClientWithResponses) GetCertificatePublicKeyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, reqEditors ...RequestEditorFn) (*GetCertificatePublicKeyResponse, error) {
	rsp, err := c.GetCertificatePublicKey(ctx, organizationId, environmentId, domain, certificate, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCertificatePublicKeyResponse(rsp)
}

// GetCertificatePublicKeysWithResponse request returning *GetCertificatePublicKeysResponse
func (c *ClientWithResponses) GetCertificatePublicKeysWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, reqEditors ...RequestEditorFn) (*GetCertificatePublicKeysResponse, error) {
	rsp, err := c.GetCertificatePublicKeys(ctx, organizationId, environmentId, domain, certificate, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCertificatePublicKeysResponse(rsp)
}

// List22WithResponse request returning *List22Response
func (c *ClientWithResponses) List22WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*List22Response, error) {
	rsp, err := c.List22(ctx, organizationId, environmentId, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseList22Response(rsp)
}

// Create12WithBodyWithResponse request with arbitrary body returning *Create12Response
func (c *ClientWithResponses) Create12WithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Create12Response, error) {
	rsp, err := c.Create12WithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreate12Response(rsp)
}

func (c *ClientWithResponses) Create12WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body Create12JSONRequestBody, reqEditors ...RequestEditorFn) (*Create12Response, error) {
	rsp, err := c.Create12(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreate12Response(rsp)
}

// Delete14WithResponse request returning *Delete14Response
func (c *ClientWithResponses) Delete14WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, deviceIdentifier string, reqEditors ...RequestEditorFn) (*Delete14Response, error) {
	rsp, err := c.Delete14(ctx, organizationId, environmentId, domain, deviceIdentifier, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDelete14Response(rsp)
}

// Get23WithResponse request returning *Get23Response
func (c *ClientWithResponses) Get23WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, deviceIdentifier string, reqEditors ...RequestEditorFn) (*Get23Response, error) {
	rsp, err := c.Get23(ctx, organizationId, environmentId, domain, deviceIdentifier, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet23Response(rsp)
}

// Update11WithBodyWithResponse request with arbitrary body returning *Update11Response
func (c *ClientWithResponses) Update11WithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, deviceIdentifier string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Update11Response, error) {
	rsp, err := c.Update11WithBody(ctx, organizationId, environmentId, domain, deviceIdentifier, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdate11Response(rsp)
}

func (c *ClientWithResponses) Update11WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, deviceIdentifier string, body Update11JSONRequestBody, reqEditors ...RequestEditorFn) (*Update11Response, error) {
	rsp, err := c.Update11(ctx, organizationId, environmentId, domain, deviceIdentifier, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdate11Response(rsp)
}

// Get19WithResponse request returning *Get19Response
func (c *ClientWithResponses) Get19WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *Get19Params, reqEditors ...RequestEditorFn) (*Get19Response, error) {
	rsp, err := c.Get19(ctx, organizationId, environmentId, domain, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet19Response(rsp)
}

// Create9WithBodyWithResponse request with arbitrary body returning *Create9Response
func (c *ClientWithResponses) Create9WithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Create9Response, error) {
	rsp, err := c.Create9WithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreate9Response(rsp)
}

func (c *ClientWithResponses) Create9WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body Create9JSONRequestBody, reqEditors ...RequestEditorFn) (*Create9Response, error) {
	rsp, err := c.Create9(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreate9Response(rsp)
}

// Delete11WithResponse request returning *Delete11Response
func (c *ClientWithResponses) Delete11WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, email string, reqEditors ...RequestEditorFn) (*Delete11Response, error) {
	rsp, err := c.Delete11(ctx, organizationId, environmentId, domain, email, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDelete11Response(rsp)
}

// Update8WithBodyWithResponse request with arbitrary body returning *Update8Response
func (c *ClientWithResponses) Update8WithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, email string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Update8Response, error) {
	rsp, err := c.Update8WithBody(ctx, organizationId, environmentId, domain, email, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdate8Response(rsp)
}

func (c *ClientWithResponses) Update8WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, email string, body Update8JSONRequestBody, reqEditors ...RequestEditorFn) (*Update8Response, error) {
	rsp, err := c.Update8(ctx, organizationId, environmentId, domain, email, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdate8Response(rsp)
}

// GetDomainEntrypointsWithResponse request returning *GetDomainEntrypointsResponse
func (c *ClientWithResponses) GetDomainEntrypointsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*GetDomainEntrypointsResponse, error) {
	rsp, err := c.GetDomainEntrypoints(ctx, organizationId, environmentId, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDomainEntrypointsResponse(rsp)
}

// List17WithResponse request returning *List17Response
func (c *ClientWithResponses) List17WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*List17Response, error) {
	rsp, err := c.List17(ctx, organizationId, environmentId, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseList17Response(rsp)
}

// Create7WithBodyWithResponse request with arbitrary body returning *Create7Response
func (c *ClientWithResponses) Create7WithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Create7Response, error) {
	rsp, err := c.Create7WithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreate7Response(rsp)
}

func (c *ClientWithResponses) Create7WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body Create7JSONRequestBody, reqEditors ...RequestEditorFn) (*Create7Response, error) {
	rsp, err := c.Create7(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreate7Response(rsp)
}

// Delete9WithResponse request returning *Delete9Response
func (c *ClientWithResponses) Delete9WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, extensionGrant string, reqEditors ...RequestEditorFn) (*Delete9Response, error) {
	rsp, err := c.Delete9(ctx, organizationId, environmentId, domain, extensionGrant, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDelete9Response(rsp)
}

// Get17WithResponse request returning *Get17Response
func (c *ClientWithResponses) Get17WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, extensionGrant string, reqEditors ...RequestEditorFn) (*Get17Response, error) {
	rsp, err := c.Get17(ctx, organizationId, environmentId, domain, extensionGrant, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet17Response(rsp)
}

// Update6WithBodyWithResponse request with arbitrary body returning *Update6Response
func (c *ClientWithResponses) Update6WithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, extensionGrant string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Update6Response, error) {
	rsp, err := c.Update6WithBody(ctx, organizationId, environmentId, domain, extensionGrant, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdate6Response(rsp)
}

func (c *ClientWithResponses) Update6WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, extensionGrant string, body Update6JSONRequestBody, reqEditors ...RequestEditorFn) (*Update6Response, error) {
	rsp, err := c.Update6(ctx, organizationId, environmentId, domain, extensionGrant, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdate6Response(rsp)
}

// ListFactorsWithResponse request returning *ListFactorsResponse
func (c *ClientWithResponses) ListFactorsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*ListFactorsResponse, error) {
	rsp, err := c.ListFactors(ctx, organizationId, environmentId, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListFactorsResponse(rsp)
}

// CreateFactorWithBodyWithResponse request with arbitrary body returning *CreateFactorResponse
func (c *ClientWithResponses) CreateFactorWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFactorResponse, error) {
	rsp, err := c.CreateFactorWithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFactorResponse(rsp)
}

func (c *ClientWithResponses) CreateFactorWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body CreateFactorJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFactorResponse, error) {
	rsp, err := c.CreateFactor(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFactorResponse(rsp)
}

// DeleteFactorWithResponse request returning *DeleteFactorResponse
func (c *ClientWithResponses) DeleteFactorWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, factor string, reqEditors ...RequestEditorFn) (*DeleteFactorResponse, error) {
	rsp, err := c.DeleteFactor(ctx, organizationId, environmentId, domain, factor, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFactorResponse(rsp)
}

// GetFactorWithResponse request returning *GetFactorResponse
func (c *ClientWithResponses) GetFactorWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, factor string, reqEditors ...RequestEditorFn) (*GetFactorResponse, error) {
	rsp, err := c.GetFactor(ctx, organizationId, environmentId, domain, factor, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFactorResponse(rsp)
}

// UpdateFactorWithBodyWithResponse request with arbitrary body returning *UpdateFactorResponse
func (c *ClientWithResponses) UpdateFactorWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, factor string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFactorResponse, error) {
	rsp, err := c.UpdateFactorWithBody(ctx, organizationId, environmentId, domain, factor, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFactorResponse(rsp)
}

func (c *ClientWithResponses) UpdateFactorWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, factor string, body UpdateFactorJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFactorResponse, error) {
	rsp, err := c.UpdateFactor(ctx, organizationId, environmentId, domain, factor, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFactorResponse(rsp)
}

// ListDomainFlowsWithResponse request returning *ListDomainFlowsResponse
func (c *ClientWithResponses) ListDomainFlowsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*ListDomainFlowsResponse, error) {
	rsp, err := c.ListDomainFlows(ctx, organizationId, environmentId, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDomainFlowsResponse(rsp)
}

// DefineDomainFlowsWithBodyWithResponse request with arbitrary body returning *DefineDomainFlowsResponse
func (c *ClientWithResponses) DefineDomainFlowsWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DefineDomainFlowsResponse, error) {
	rsp, err := c.DefineDomainFlowsWithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDefineDomainFlowsResponse(rsp)
}

func (c *ClientWithResponses) DefineDomainFlowsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body DefineDomainFlowsJSONRequestBody, reqEditors ...RequestEditorFn) (*DefineDomainFlowsResponse, error) {
	rsp, err := c.DefineDomainFlows(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDefineDomainFlowsResponse(rsp)
}

// GetDomainFlowWithResponse request returning *GetDomainFlowResponse
func (c *ClientWithResponses) GetDomainFlowWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, flow string, reqEditors ...RequestEditorFn) (*GetDomainFlowResponse, error) {
	rsp, err := c.GetDomainFlow(ctx, organizationId, environmentId, domain, flow, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDomainFlowResponse(rsp)
}

// UpdateDomainFlowWithBodyWithResponse request with arbitrary body returning *UpdateDomainFlowResponse
func (c *ClientWithResponses) UpdateDomainFlowWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, flow string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDomainFlowResponse, error) {
	rsp, err := c.UpdateDomainFlowWithBody(ctx, organizationId, environmentId, domain, flow, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDomainFlowResponse(rsp)
}

func (c *ClientWithResponses) UpdateDomainFlowWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, flow string, body UpdateDomainFlowJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDomainFlowResponse, error) {
	rsp, err := c.UpdateDomainFlow(ctx, organizationId, environmentId, domain, flow, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDomainFlowResponse(rsp)
}

// Get18WithResponse request returning *Get18Response
func (c *ClientWithResponses) Get18WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *Get18Params, reqEditors ...RequestEditorFn) (*Get18Response, error) {
	rsp, err := c.Get18(ctx, organizationId, environmentId, domain, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet18Response(rsp)
}

// Create8WithBodyWithResponse request with arbitrary body returning *Create8Response
func (c *ClientWithResponses) Create8WithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Create8Response, error) {
	rsp, err := c.Create8WithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreate8Response(rsp)
}

func (c *ClientWithResponses) Create8WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body Create8JSONRequestBody, reqEditors ...RequestEditorFn) (*Create8Response, error) {
	rsp, err := c.Create8(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreate8Response(rsp)
}

// RenderDomainTemplateWithBodyWithResponse request with arbitrary body returning *RenderDomainTemplateResponse
func (c *ClientWithResponses) RenderDomainTemplateWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RenderDomainTemplateResponse, error) {
	rsp, err := c.RenderDomainTemplateWithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRenderDomainTemplateResponse(rsp)
}

func (c *ClientWithResponses) RenderDomainTemplateWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body RenderDomainTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*RenderDomainTemplateResponse, error) {
	rsp, err := c.RenderDomainTemplate(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRenderDomainTemplateResponse(rsp)
}

// Delete10WithResponse request returning *Delete10Response
func (c *ClientWithResponses) Delete10WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, form string, reqEditors ...RequestEditorFn) (*Delete10Response, error) {
	rsp, err := c.Delete10(ctx, organizationId, environmentId, domain, form, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDelete10Response(rsp)
}

// Update7WithBodyWithResponse request with arbitrary body returning *Update7Response
func (c *ClientWithResponses) Update7WithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, form string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Update7Response, error) {
	rsp, err := c.Update7WithBody(ctx, organizationId, environmentId, domain, form, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdate7Response(rsp)
}

func (c *ClientWithResponses) Update7WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, form string, body Update7JSONRequestBody, reqEditors ...RequestEditorFn) (*Update7Response, error) {
	rsp, err := c.Update7(ctx, organizationId, environmentId, domain, form, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdate7Response(rsp)
}

// ListGroupsWithResponse request returning *ListGroupsResponse
func (c *ClientWithResponses) ListGroupsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *ListGroupsParams, reqEditors ...RequestEditorFn) (*ListGroupsResponse, error) {
	rsp, err := c.ListGroups(ctx, organizationId, environmentId, domain, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListGroupsResponse(rsp)
}

// CreateGroupWithBodyWithResponse request with arbitrary body returning *CreateGroupResponse
func (c *ClientWithResponses) CreateGroupWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateGroupResponse, error) {
	rsp, err := c.CreateGroupWithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGroupResponse(rsp)
}

func (c *ClientWithResponses) CreateGroupWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body CreateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateGroupResponse, error) {
	rsp, err := c.CreateGroup(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGroupResponse(rsp)
}

// DeleteGroupWithResponse request returning *DeleteGroupResponse
func (c *ClientWithResponses) DeleteGroupWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, group string, reqEditors ...RequestEditorFn) (*DeleteGroupResponse, error) {
	rsp, err := c.DeleteGroup(ctx, organizationId, environmentId, domain, group, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGroupResponse(rsp)
}

// FindGroupWithResponse request returning *FindGroupResponse
func (c *ClientWithResponses) FindGroupWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, group string, reqEditors ...RequestEditorFn) (*FindGroupResponse, error) {
	rsp, err := c.FindGroup(ctx, organizationId, environmentId, domain, group, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindGroupResponse(rsp)
}

// UpdateGroupWithBodyWithResponse request with arbitrary body returning *UpdateGroupResponse
func (c *ClientWithResponses) UpdateGroupWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, group string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateGroupResponse, error) {
	rsp, err := c.UpdateGroupWithBody(ctx, organizationId, environmentId, domain, group, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateGroupResponse(rsp)
}

func (c *ClientWithResponses) UpdateGroupWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, group string, body UpdateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateGroupResponse, error) {
	rsp, err := c.UpdateGroup(ctx, organizationId, environmentId, domain, group, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateGroupResponse(rsp)
}

// GetGroupMembersWithResponse request returning *GetGroupMembersResponse
func (c *ClientWithResponses) GetGroupMembersWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, group string, params *GetGroupMembersParams, reqEditors ...RequestEditorFn) (*GetGroupMembersResponse, error) {
	rsp, err := c.GetGroupMembers(ctx, organizationId, environmentId, domain, group, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupMembersResponse(rsp)
}

// RemoveGroupMemberWithResponse request returning *RemoveGroupMemberResponse
func (c *ClientWithResponses) RemoveGroupMemberWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, group string, member string, reqEditors ...RequestEditorFn) (*RemoveGroupMemberResponse, error) {
	rsp, err := c.RemoveGroupMember(ctx, organizationId, environmentId, domain, group, member, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveGroupMemberResponse(rsp)
}

// AddGroupMemberWithResponse request returning *AddGroupMemberResponse
func (c *ClientWithResponses) AddGroupMemberWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, group string, member string, reqEditors ...RequestEditorFn) (*AddGroupMemberResponse, error) {
	rsp, err := c.AddGroupMember(ctx, organizationId, environmentId, domain, group, member, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddGroupMemberResponse(rsp)
}

// FindGroupRolesWithResponse request returning *FindGroupRolesResponse
func (c *ClientWithResponses) FindGroupRolesWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, group string, reqEditors ...RequestEditorFn) (*FindGroupRolesResponse, error) {
	rsp, err := c.FindGroupRoles(ctx, organizationId, environmentId, domain, group, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindGroupRolesResponse(rsp)
}

// AssignRolesWithBodyWithResponse request with arbitrary body returning *AssignRolesResponse
func (c *ClientWithResponses) AssignRolesWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, group string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssignRolesResponse, error) {
	rsp, err := c.AssignRolesWithBody(ctx, organizationId, environmentId, domain, group, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssignRolesResponse(rsp)
}

func (c *ClientWithResponses) AssignRolesWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, group string, body AssignRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*AssignRolesResponse, error) {
	rsp, err := c.AssignRoles(ctx, organizationId, environmentId, domain, group, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssignRolesResponse(rsp)
}

// RevokeRoleWithResponse request returning *RevokeRoleResponse
func (c *ClientWithResponses) RevokeRoleWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, group string, role string, reqEditors ...RequestEditorFn) (*RevokeRoleResponse, error) {
	rsp, err := c.RevokeRole(ctx, organizationId, environmentId, domain, group, role, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRevokeRoleResponse(rsp)
}

// ListI18nDictionariesWithResponse request returning *ListI18nDictionariesResponse
func (c *ClientWithResponses) ListI18nDictionariesWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*ListI18nDictionariesResponse, error) {
	rsp, err := c.ListI18nDictionaries(ctx, organizationId, environmentId, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListI18nDictionariesResponse(rsp)
}

// CreateI18nDictionaryWithBodyWithResponse request with arbitrary body returning *CreateI18nDictionaryResponse
func (c *ClientWithResponses) CreateI18nDictionaryWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateI18nDictionaryResponse, error) {
	rsp, err := c.CreateI18nDictionaryWithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateI18nDictionaryResponse(rsp)
}

// DeleteI18nDictionaryWithResponse request returning *DeleteI18nDictionaryResponse
func (c *ClientWithResponses) DeleteI18nDictionaryWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, dictionary string, reqEditors ...RequestEditorFn) (*DeleteI18nDictionaryResponse, error) {
	rsp, err := c.DeleteI18nDictionary(ctx, organizationId, environmentId, domain, dictionary, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteI18nDictionaryResponse(rsp)
}

// GetI18nDictionaryWithResponse request returning *GetI18nDictionaryResponse
func (c *ClientWithResponses) GetI18nDictionaryWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, dictionary string, reqEditors ...RequestEditorFn) (*GetI18nDictionaryResponse, error) {
	rsp, err := c.GetI18nDictionary(ctx, organizationId, environmentId, domain, dictionary, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetI18nDictionaryResponse(rsp)
}

// PutI18nDictionaryWithBodyWithResponse request with arbitrary body returning *PutI18nDictionaryResponse
func (c *ClientWithResponses) PutI18nDictionaryWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, dictionary string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutI18nDictionaryResponse, error) {
	rsp, err := c.PutI18nDictionaryWithBody(ctx, organizationId, environmentId, domain, dictionary, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutI18nDictionaryResponse(rsp)
}

// ReplaceI18nDictionaryEntriesWithBodyWithResponse request with arbitrary body returning *ReplaceI18nDictionaryEntriesResponse
func (c *ClientWithResponses) ReplaceI18nDictionaryEntriesWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, dictionary string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceI18nDictionaryEntriesResponse, error) {
	rsp, err := c.ReplaceI18nDictionaryEntriesWithBody(ctx, organizationId, environmentId, domain, dictionary, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceI18nDictionaryEntriesResponse(rsp)
}

// ListIdentityProvidersWithResponse request returning *ListIdentityProvidersResponse
func (c *ClientWithResponses) ListIdentityProvidersWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *ListIdentityProvidersParams, reqEditors ...RequestEditorFn) (*ListIdentityProvidersResponse, error) {
	rsp, err := c.ListIdentityProviders(ctx, organizationId, environmentId, domain, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIdentityProvidersResponse(rsp)
}

// CreateIdentityProviderWithBodyWithResponse request with arbitrary body returning *CreateIdentityProviderResponse
func (c *ClientWithResponses) CreateIdentityProviderWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIdentityProviderResponse, error) {
	rsp, err := c.CreateIdentityProviderWithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIdentityProviderResponse(rsp)
}

func (c *ClientWithResponses) CreateIdentityProviderWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body CreateIdentityProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateIdentityProviderResponse, error) {
	rsp, err := c.CreateIdentityProvider(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIdentityProviderResponse(rsp)
}

// DeleteIdentityProviderWithResponse request returning *DeleteIdentityProviderResponse
func (c *ClientWithResponses) DeleteIdentityProviderWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, identity string, reqEditors ...RequestEditorFn) (*DeleteIdentityProviderResponse, error) {
	rsp, err := c.DeleteIdentityProvider(ctx, organizationId, environmentId, domain, identity, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIdentityProviderResponse(rsp)
}

// FindIdentityProviderWithResponse request returning *FindIdentityProviderResponse
func (c *ClientWithResponses) FindIdentityProviderWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, identity string, reqEditors ...RequestEditorFn) (*FindIdentityProviderResponse, error) {
	rsp, err := c.FindIdentityProvider(ctx, organizationId, environmentId, domain, identity, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindIdentityProviderResponse(rsp)
}

// UpdateIdentityProviderWithBodyWithResponse request with arbitrary body returning *UpdateIdentityProviderResponse
func (c *ClientWithResponses) UpdateIdentityProviderWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, identity string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIdentityProviderResponse, error) {
	rsp, err := c.UpdateIdentityProviderWithBody(ctx, organizationId, environmentId, domain, identity, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIdentityProviderResponse(rsp)
}

func (c *ClientWithResponses) UpdateIdentityProviderWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, identity string, body UpdateIdentityProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateIdentityProviderResponse, error) {
	rsp, err := c.UpdateIdentityProvider(ctx, organizationId, environmentId, domain, identity, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIdentityProviderResponse(rsp)
}

// List8WithResponse request returning *List8Response
func (c *ClientWithResponses) List8WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*List8Response, error) {
	rsp, err := c.List8(ctx, organizationId, environmentId, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseList8Response(rsp)
}

// AddOrUpdateMember1WithBodyWithResponse request with arbitrary body returning *AddOrUpdateMember1Response
func (c *ClientWithResponses) AddOrUpdateMember1WithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddOrUpdateMember1Response, error) {
	rsp, err := c.AddOrUpdateMember1WithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddOrUpdateMember1Response(rsp)
}

func (c *ClientWithResponses) AddOrUpdateMember1WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body AddOrUpdateMember1JSONRequestBody, reqEditors ...RequestEditorFn) (*AddOrUpdateMember1Response, error) {
	rsp, err := c.AddOrUpdateMember1(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddOrUpdateMember1Response(rsp)
}

// Permissions1WithResponse request returning *Permissions1Response
func (c *ClientWithResponses) Permissions1WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*Permissions1Response, error) {
	rsp, err := c.Permissions1(ctx, organizationId, environmentId, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePermissions1Response(rsp)
}

// RemoveMember2WithResponse request returning *RemoveMember2Response
func (c *ClientWithResponses) RemoveMember2WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, member string, reqEditors ...RequestEditorFn) (*RemoveMember2Response, error) {
	rsp, err := c.RemoveMember2(ctx, organizationId, environmentId, domain, member, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveMember2Response(rsp)
}

// List18WithResponse request returning *List18Response
func (c *ClientWithResponses) List18WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *List18Params, reqEditors ...RequestEditorFn) (*List18Response, error) {
	rsp, err := c.List18(ctx, organizationId, environmentId, domain, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseList18Response(rsp)
}

// Create10WithBodyWithResponse request with arbitrary body returning *Create10Response
func (c *ClientWithResponses) Create10WithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Create10Response, error) {
	rsp, err := c.Create10WithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreate10Response(rsp)
}

func (c *ClientWithResponses) Create10WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body Create10JSONRequestBody, reqEditors ...RequestEditorFn) (*Create10Response, error) {
	rsp, err := c.Create10(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreate10Response(rsp)
}

// Delete12WithResponse request returning *Delete12Response
func (c *ClientWithResponses) Delete12WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reporter string, reqEditors ...RequestEditorFn) (*Delete12Response, error) {
	rsp, err := c.Delete12(ctx, organizationId, environmentId, domain, reporter, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDelete12Response(rsp)
}

// Get20WithResponse request returning *Get20Response
func (c *ClientWithResponses) Get20WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reporter string, reqEditors ...RequestEditorFn) (*Get20Response, error) {
	rsp, err := c.Get20(ctx, organizationId, environmentId, domain, reporter, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet20Response(rsp)
}

// Update9WithBodyWithResponse request with arbitrary body returning *Update9Response
func (c *ClientWithResponses) Update9WithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reporter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Update9Response, error) {
	rsp, err := c.Update9WithBody(ctx, organizationId, environmentId, domain, reporter, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdate9Response(rsp)
}

func (c *ClientWithResponses) Update9WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reporter string, body Update9JSONRequestBody, reqEditors ...RequestEditorFn) (*Update9Response, error) {
	rsp, err := c.Update9(ctx, organizationId, environmentId, domain, reporter, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdate9Response(rsp)
}

// ListResourcesWithResponse request returning *ListResourcesResponse
func (c *ClientWithResponses) ListResourcesWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*ListResourcesResponse, error) {
	rsp, err := c.ListResources(ctx, organizationId, environmentId, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListResourcesResponse(rsp)
}

// CreateResourceWithBodyWithResponse request with arbitrary body returning *CreateResourceResponse
func (c *ClientWithResponses) CreateResourceWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateResourceResponse, error) {
	rsp, err := c.CreateResourceWithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateResourceResponse(rsp)
}

func (c *ClientWithResponses) CreateResourceWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body CreateResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateResourceResponse, error) {
	rsp, err := c.CreateResource(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateResourceResponse(rsp)
}

// DeleteResourceWithResponse request returning *DeleteResourceResponse
func (c *ClientWithResponses) DeleteResourceWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, resource string, reqEditors ...RequestEditorFn) (*DeleteResourceResponse, error) {
	rsp, err := c.DeleteResource(ctx, organizationId, environmentId, domain, resource, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteResourceResponse(rsp)
}

// GetResourceWithResponse request returning *GetResourceResponse
func (c *ClientWithResponses) GetResourceWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, resource string, reqEditors ...RequestEditorFn) (*GetResourceResponse, error) {
	rsp, err := c.GetResource(ctx, organizationId, environmentId, domain, resource, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResourceResponse(rsp)
}

// UpdateResourceWithBodyWithResponse request with arbitrary body returning *UpdateResourceResponse
func (c *ClientWithResponses) UpdateResourceWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, resource string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateResourceResponse, error) {
	rsp, err := c.UpdateResourceWithBody(ctx, organizationId, environmentId, domain, resource, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateResourceResponse(rsp)
}

func (c *ClientWithResponses) UpdateResourceWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, resource string, body UpdateResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateResourceResponse, error) {
	rsp, err := c.UpdateResource(ctx, organizationId, environmentId, domain, resource, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateResourceResponse(rsp)
}

// FindRolesWithResponse request returning *FindRolesResponse
func (c *ClientWithResponses) FindRolesWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *FindRolesParams, reqEditors ...RequestEditorFn) (*FindRolesResponse, error) {
	rsp, err := c.FindRoles(ctx, organizationId, environmentId, domain, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindRolesResponse(rsp)
}

// CreateRoleWithBodyWithResponse request with arbitrary body returning *CreateRoleResponse
func (c *ClientWithResponses) CreateRoleWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRoleResponse, error) {
	rsp, err := c.CreateRoleWithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRoleResponse(rsp)
}

func (c *ClientWithResponses) CreateRoleWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body CreateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRoleResponse, error) {
	rsp, err := c.CreateRole(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRoleResponse(rsp)
}

// DeleteRoleWithResponse request returning *DeleteRoleResponse
func (c *ClientWithResponses) DeleteRoleWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, role string, reqEditors ...RequestEditorFn) (*DeleteRoleResponse, error) {
	rsp, err := c.DeleteRole(ctx, organizationId, environmentId, domain, role, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRoleResponse(rsp)
}

// FindRoleWithResponse request returning *FindRoleResponse
func (c *ClientWithResponses) FindRoleWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, role string, reqEditors ...RequestEditorFn) (*FindRoleResponse, error) {
	rsp, err := c.FindRole(ctx, organizationId, environmentId, domain, role, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindRoleResponse(rsp)
}

// UpdateRoleWithBodyWithResponse request with arbitrary body returning *UpdateRoleResponse
func (c *ClientWithResponses) UpdateRoleWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, role string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRoleResponse, error) {
	rsp, err := c.UpdateRoleWithBody(ctx, organizationId, environmentId, domain, role, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRoleResponse(rsp)
}

func (c *ClientWithResponses) UpdateRoleWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, role string, body UpdateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRoleResponse, error) {
	rsp, err := c.UpdateRole(ctx, organizationId, environmentId, domain, role, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRoleResponse(rsp)
}

// ListScopesWithResponse request returning *ListScopesResponse
func (c *ClientWithResponses) ListScopesWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *ListScopesParams, reqEditors ...RequestEditorFn) (*ListScopesResponse, error) {
	rsp, err := c.ListScopes(ctx, organizationId, environmentId, domain, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListScopesResponse(rsp)
}

// CreateScopeWithBodyWithResponse request with arbitrary body returning *CreateScopeResponse
func (c *ClientWithResponses) CreateScopeWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateScopeResponse, error) {
	rsp, err := c.CreateScopeWithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateScopeResponse(rsp)
}

func (c *ClientWithResponses) CreateScopeWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body CreateScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateScopeResponse, error) {
	rsp, err := c.CreateScope(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateScopeResponse(rsp)
}

// DeleteScopeWithResponse request returning *DeleteScopeResponse
func (c *ClientWithResponses) DeleteScopeWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, scope string, reqEditors ...RequestEditorFn) (*DeleteScopeResponse, error) {
	rsp, err := c.DeleteScope(ctx, organizationId, environmentId, domain, scope, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteScopeResponse(rsp)
}

// FindScopeWithResponse request returning *FindScopeResponse
func (c *ClientWithResponses) FindScopeWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, scope string, reqEditors ...RequestEditorFn) (*FindScopeResponse, error) {
	rsp, err := c.FindScope(ctx, organizationId, environmentId, domain, scope, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindScopeResponse(rsp)
}

// PatchScopeWithBodyWithResponse request with arbitrary body returning *PatchScopeResponse
func (c *ClientWithResponses) PatchScopeWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, scope string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchScopeResponse, error) {
	rsp, err := c.PatchScopeWithBody(ctx, organizationId, environmentId, domain, scope, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchScopeResponse(rsp)
}

func (c *ClientWithResponses) PatchScopeWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, scope string, body PatchScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchScopeResponse, error) {
	rsp, err := c.PatchScope(ctx, organizationId, environmentId, domain, scope, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchScopeResponse(rsp)
}

// UpdateScopeWithBodyWithResponse request with arbitrary body returning *UpdateScopeResponse
func (c *ClientWithResponses) UpdateScopeWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, scope string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateScopeResponse, error) {
	rsp, err := c.UpdateScopeWithBody(ctx, organizationId, environmentId, domain, scope, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateScopeResponse(rsp)
}

func (c *ClientWithResponses) UpdateScopeWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, scope string, body UpdateScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateScopeResponse, error) {
	rsp, err := c.UpdateScope(ctx, organizationId, environmentId, domain, scope, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateScopeResponse(rsp)
}

// ListThemesWithResponse request returning *ListThemesResponse
func (c *ClientWithResponses) ListThemesWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*ListThemesResponse, error) {
	rsp, err := c.ListThemes(ctx, organizationId, environmentId, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListThemesResponse(rsp)
}

// CreateThemeWithBodyWithResponse request with arbitrary body returning *CreateThemeResponse
func (c *ClientWithResponses) CreateThemeWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateThemeResponse, error) {
	rsp, err := c.CreateThemeWithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateThemeResponse(rsp)
}

func (c *ClientWithResponses) CreateThemeWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body CreateThemeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateThemeResponse, error) {
	rsp, err := c.CreateTheme(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateThemeResponse(rsp)
}

// DeleteThemeWithResponse request returning *DeleteThemeResponse
func (c *ClientWithResponses) DeleteThemeWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, themeId string, reqEditors ...RequestEditorFn) (*DeleteThemeResponse, error) {
	rsp, err := c.DeleteTheme(ctx, organizationId, environmentId, domain, themeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteThemeResponse(rsp)
}

// GetThemeWithResponse request returning *GetThemeResponse
func (c *ClientWithResponses) GetThemeWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, themeId string, reqEditors ...RequestEditorFn) (*GetThemeResponse, error) {
	rsp, err := c.GetTheme(ctx, organizationId, environmentId, domain, themeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetThemeResponse(rsp)
}

// UpdateThemeWithBodyWithResponse request with arbitrary body returning *UpdateThemeResponse
func (c *ClientWithResponses) UpdateThemeWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, themeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateThemeResponse, error) {
	rsp, err := c.UpdateThemeWithBody(ctx, organizationId, environmentId, domain, themeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateThemeResponse(rsp)
}

func (c *ClientWithResponses) UpdateThemeWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, themeId string, body UpdateThemeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateThemeResponse, error) {
	rsp, err := c.UpdateTheme(ctx, organizationId, environmentId, domain, themeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateThemeResponse(rsp)
}

// ListUsersWithResponse request returning *ListUsersResponse
func (c *ClientWithResponses) ListUsersWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *ListUsersParams, reqEditors ...RequestEditorFn) (*ListUsersResponse, error) {
	rsp, err := c.ListUsers(ctx, organizationId, environmentId, domain, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUsersResponse(rsp)
}

// CreateUserWithBodyWithResponse request with arbitrary body returning *CreateUserResponse
func (c *ClientWithResponses) CreateUserWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserResponse, error) {
	rsp, err := c.CreateUserWithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserResponse(rsp)
}

func (c *ClientWithResponses) CreateUserWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserResponse, error) {
	rsp, err := c.CreateUser(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserResponse(rsp)
}

// DeleteUserWithResponse request returning *DeleteUserResponse
func (c *ClientWithResponses) DeleteUserWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error) {
	rsp, err := c.DeleteUser(ctx, organizationId, environmentId, domain, user, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserResponse(rsp)
}

// FindUserWithResponse request returning *FindUserResponse
func (c *ClientWithResponses) FindUserWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*FindUserResponse, error) {
	rsp, err := c.FindUser(ctx, organizationId, environmentId, domain, user, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindUserResponse(rsp)
}

// UpdateUserWithBodyWithResponse request with arbitrary body returning *UpdateUserResponse
func (c *ClientWithResponses) UpdateUserWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error) {
	rsp, err := c.UpdateUserWithBody(ctx, organizationId, environmentId, domain, user, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error) {
	rsp, err := c.UpdateUser(ctx, organizationId, environmentId, domain, user, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserResponse(rsp)
}

// List14WithResponse request returning *List14Response
func (c *ClientWithResponses) List14WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, params *List14Params, reqEditors ...RequestEditorFn) (*List14Response, error) {
	rsp, err := c.List14(ctx, organizationId, environmentId, domain, user, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseList14Response(rsp)
}

// Get11WithResponse request returning *Get11Response
func (c *ClientWithResponses) Get11WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, audit string, reqEditors ...RequestEditorFn) (*Get11Response, error) {
	rsp, err := c.Get11(ctx, organizationId, environmentId, domain, user, audit, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet11Response(rsp)
}

// Delete5WithResponse request returning *Delete5Response
func (c *ClientWithResponses) Delete5WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, params *Delete5Params, reqEditors ...RequestEditorFn) (*Delete5Response, error) {
	rsp, err := c.Delete5(ctx, organizationId, environmentId, domain, user, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDelete5Response(rsp)
}

// List10WithResponse request returning *List10Response
func (c *ClientWithResponses) List10WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, params *List10Params, reqEditors ...RequestEditorFn) (*List10Response, error) {
	rsp, err := c.List10(ctx, organizationId, environmentId, domain, user, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseList10Response(rsp)
}

// RevokeWithResponse request returning *RevokeResponse
func (c *ClientWithResponses) RevokeWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, consent string, reqEditors ...RequestEditorFn) (*RevokeResponse, error) {
	rsp, err := c.Revoke(ctx, organizationId, environmentId, domain, user, consent, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRevokeResponse(rsp)
}

// Get9WithResponse request returning *Get9Response
func (c *ClientWithResponses) Get9WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, consent string, reqEditors ...RequestEditorFn) (*Get9Response, error) {
	rsp, err := c.Get9(ctx, organizationId, environmentId, domain, user, consent, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet9Response(rsp)
}

// List13WithResponse request returning *List13Response
func (c *ClientWithResponses) List13WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*List13Response, error) {
	rsp, err := c.List13(ctx, organizationId, environmentId, domain, user, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseList13Response(rsp)
}

// Revoke2WithResponse request returning *Revoke2Response
func (c *ClientWithResponses) Revoke2WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, credential string, reqEditors ...RequestEditorFn) (*Revoke2Response, error) {
	rsp, err := c.Revoke2(ctx, organizationId, environmentId, domain, user, credential, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRevoke2Response(rsp)
}

// Get10WithResponse request returning *Get10Response
func (c *ClientWithResponses) Get10WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, credential string, reqEditors ...RequestEditorFn) (*Get10Response, error) {
	rsp, err := c.Get10(ctx, organizationId, environmentId, domain, user, credential, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet10Response(rsp)
}

// List9WithResponse request returning *List9Response
func (c *ClientWithResponses) List9WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*List9Response, error) {
	rsp, err := c.List9(ctx, organizationId, environmentId, domain, user, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseList9Response(rsp)
}

// Delete4WithResponse request returning *Delete4Response
func (c *ClientWithResponses) Delete4WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, device string, reqEditors ...RequestEditorFn) (*Delete4Response, error) {
	rsp, err := c.Delete4(ctx, organizationId, environmentId, domain, user, device, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDelete4Response(rsp)
}

// List12WithResponse request returning *List12Response
func (c *ClientWithResponses) List12WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*List12Response, error) {
	rsp, err := c.List12(ctx, organizationId, environmentId, domain, user, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseList12Response(rsp)
}

// Delete6WithResponse request returning *Delete6Response
func (c *ClientWithResponses) Delete6WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, factor string, reqEditors ...RequestEditorFn) (*Delete6Response, error) {
	rsp, err := c.Delete6(ctx, organizationId, environmentId, domain, user, factor, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDelete6Response(rsp)
}

// LockUserWithResponse request returning *LockUserResponse
func (c *ClientWithResponses) LockUserWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*LockUserResponse, error) {
	rsp, err := c.LockUser(ctx, organizationId, environmentId, domain, user, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLockUserResponse(rsp)
}

// ResetPasswordWithBodyWithResponse request with arbitrary body returning *ResetPasswordResponse
func (c *ClientWithResponses) ResetPasswordWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetPasswordResponse, error) {
	rsp, err := c.ResetPasswordWithBody(ctx, organizationId, environmentId, domain, user, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetPasswordResponse(rsp)
}

// List11WithResponse request returning *List11Response
func (c *ClientWithResponses) List11WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, params *List11Params, reqEditors ...RequestEditorFn) (*List11Response, error) {
	rsp, err := c.List11(ctx, organizationId, environmentId, domain, user, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseList11Response(rsp)
}

// AssignWithBodyWithResponse request with arbitrary body returning *AssignResponse
func (c *ClientWithResponses) AssignWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AssignResponse, error) {
	rsp, err := c.AssignWithBody(ctx, organizationId, environmentId, domain, user, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssignResponse(rsp)
}

func (c *ClientWithResponses) AssignWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, body AssignJSONRequestBody, reqEditors ...RequestEditorFn) (*AssignResponse, error) {
	rsp, err := c.Assign(ctx, organizationId, environmentId, domain, user, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssignResponse(rsp)
}

// Revoke1WithResponse request returning *Revoke1Response
func (c *ClientWithResponses) Revoke1WithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, role string, reqEditors ...RequestEditorFn) (*Revoke1Response, error) {
	rsp, err := c.Revoke1(ctx, organizationId, environmentId, domain, user, role, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRevoke1Response(rsp)
}

// SendRegistrationConfirmationWithResponse request returning *SendRegistrationConfirmationResponse
func (c *ClientWithResponses) SendRegistrationConfirmationWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*SendRegistrationConfirmationResponse, error) {
	rsp, err := c.SendRegistrationConfirmation(ctx, organizationId, environmentId, domain, user, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendRegistrationConfirmationResponse(rsp)
}

// UpdateUserStatusWithBodyWithResponse request with arbitrary body returning *UpdateUserStatusResponse
func (c *ClientWithResponses) UpdateUserStatusWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserStatusResponse, error) {
	rsp, err := c.UpdateUserStatusWithBody(ctx, organizationId, environmentId, domain, user, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserStatusResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserStatusWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, body UpdateUserStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserStatusResponse, error) {
	rsp, err := c.UpdateUserStatus(ctx, organizationId, environmentId, domain, user, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserStatusResponse(rsp)
}

// UnlockUserWithResponse request returning *UnlockUserResponse
func (c *ClientWithResponses) UnlockUserWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*UnlockUserResponse, error) {
	rsp, err := c.UnlockUser(ctx, organizationId, environmentId, domain, user, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnlockUserResponse(rsp)
}

// UpdateUsernameWithBodyWithResponse request with arbitrary body returning *UpdateUsernameResponse
func (c *ClientWithResponses) UpdateUsernameWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUsernameResponse, error) {
	rsp, err := c.UpdateUsernameWithBody(ctx, organizationId, environmentId, domain, user, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUsernameResponse(rsp)
}

func (c *ClientWithResponses) UpdateUsernameWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, body UpdateUsernameJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUsernameResponse, error) {
	rsp, err := c.UpdateUsername(ctx, organizationId, environmentId, domain, user, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUsernameResponse(rsp)
}

// PermissionsWithResponse request returning *PermissionsResponse
func (c *ClientWithResponses) PermissionsWithResponse(ctx context.Context, organizationId string, environmentId string, reqEditors ...RequestEditorFn) (*PermissionsResponse, error) {
	rsp, err := c.Permissions(ctx, organizationId, environmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePermissionsResponse(rsp)
}

// Get7WithResponse request returning *Get7Response
func (c *ClientWithResponses) Get7WithResponse(ctx context.Context, organizationId string, params *Get7Params, reqEditors ...RequestEditorFn) (*Get7Response, error) {
	rsp, err := c.Get7(ctx, organizationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet7Response(rsp)
}

// Create4WithBodyWithResponse request with arbitrary body returning *Create4Response
func (c *ClientWithResponses) Create4WithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Create4Response, error) {
	rsp, err := c.Create4WithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreate4Response(rsp)
}

func (c *ClientWithResponses) Create4WithResponse(ctx context.Context, organizationId string, body Create4JSONRequestBody, reqEditors ...RequestEditorFn) (*Create4Response, error) {
	rsp, err := c.Create4(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreate4Response(rsp)
}

// Delete3WithResponse request returning *Delete3Response
func (c *ClientWithResponses) Delete3WithResponse(ctx context.Context, organizationId string, form string, reqEditors ...RequestEditorFn) (*Delete3Response, error) {
	rsp, err := c.Delete3(ctx, organizationId, form, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDelete3Response(rsp)
}

// Update3WithBodyWithResponse request with arbitrary body returning *Update3Response
func (c *ClientWithResponses) Update3WithBodyWithResponse(ctx context.Context, organizationId string, form string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Update3Response, error) {
	rsp, err := c.Update3WithBody(ctx, organizationId, form, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdate3Response(rsp)
}

func (c *ClientWithResponses) Update3WithResponse(ctx context.Context, organizationId string, form string, body Update3JSONRequestBody, reqEditors ...RequestEditorFn) (*Update3Response, error) {
	rsp, err := c.Update3(ctx, organizationId, form, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdate3Response(rsp)
}

// List3WithResponse request returning *List3Response
func (c *ClientWithResponses) List3WithResponse(ctx context.Context, organizationId string, params *List3Params, reqEditors ...RequestEditorFn) (*List3Response, error) {
	rsp, err := c.List3(ctx, organizationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseList3Response(rsp)
}

// Create2WithBodyWithResponse request with arbitrary body returning *Create2Response
func (c *ClientWithResponses) Create2WithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Create2Response, error) {
	rsp, err := c.Create2WithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreate2Response(rsp)
}

func (c *ClientWithResponses) Create2WithResponse(ctx context.Context, organizationId string, body Create2JSONRequestBody, reqEditors ...RequestEditorFn) (*Create2Response, error) {
	rsp, err := c.Create2(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreate2Response(rsp)
}

// DeleteOrganizationGroupWithResponse request returning *DeleteOrganizationGroupResponse
func (c *ClientWithResponses) DeleteOrganizationGroupWithResponse(ctx context.Context, organizationId string, group string, reqEditors ...RequestEditorFn) (*DeleteOrganizationGroupResponse, error) {
	rsp, err := c.DeleteOrganizationGroup(ctx, organizationId, group, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrganizationGroupResponse(rsp)
}

// GetOrganizationGroupWithResponse request returning *GetOrganizationGroupResponse
func (c *ClientWithResponses) GetOrganizationGroupWithResponse(ctx context.Context, organizationId string, group string, reqEditors ...RequestEditorFn) (*GetOrganizationGroupResponse, error) {
	rsp, err := c.GetOrganizationGroup(ctx, organizationId, group, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationGroupResponse(rsp)
}

// UpdateOrganizationGroupWithBodyWithResponse request with arbitrary body returning *UpdateOrganizationGroupResponse
func (c *ClientWithResponses) UpdateOrganizationGroupWithBodyWithResponse(ctx context.Context, organizationId string, group string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrganizationGroupResponse, error) {
	rsp, err := c.UpdateOrganizationGroupWithBody(ctx, organizationId, group, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationGroupResponse(rsp)
}

func (c *ClientWithResponses) UpdateOrganizationGroupWithResponse(ctx context.Context, organizationId string, group string, body UpdateOrganizationGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrganizationGroupResponse, error) {
	rsp, err := c.UpdateOrganizationGroup(ctx, organizationId, group, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationGroupResponse(rsp)
}

// List4WithResponse request returning *List4Response
func (c *ClientWithResponses) List4WithResponse(ctx context.Context, organizationId string, group string, params *List4Params, reqEditors ...RequestEditorFn) (*List4Response, error) {
	rsp, err := c.List4(ctx, organizationId, group, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseList4Response(rsp)
}

// RemoveMember1WithResponse request returning *RemoveMember1Response
func (c *ClientWithResponses) RemoveMember1WithResponse(ctx context.Context, organizationId string, group string, member string, reqEditors ...RequestEditorFn) (*RemoveMember1Response, error) {
	rsp, err := c.RemoveMember1(ctx, organizationId, group, member, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveMember1Response(rsp)
}

// AddMemberWithResponse request returning *AddMemberResponse
func (c *ClientWithResponses) AddMemberWithResponse(ctx context.Context, organizationId string, group string, member string, reqEditors ...RequestEditorFn) (*AddMemberResponse, error) {
	rsp, err := c.AddMember(ctx, organizationId, group, member, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddMemberResponse(rsp)
}

// List5WithResponse request returning *List5Response
func (c *ClientWithResponses) List5WithResponse(ctx context.Context, organizationId string, params *List5Params, reqEditors ...RequestEditorFn) (*List5Response, error) {
	rsp, err := c.List5(ctx, organizationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseList5Response(rsp)
}

// Create3WithBodyWithResponse request with arbitrary body returning *Create3Response
func (c *ClientWithResponses) Create3WithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Create3Response, error) {
	rsp, err := c.Create3WithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreate3Response(rsp)
}

func (c *ClientWithResponses) Create3WithResponse(ctx context.Context, organizationId string, body Create3JSONRequestBody, reqEditors ...RequestEditorFn) (*Create3Response, error) {
	rsp, err := c.Create3(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreate3Response(rsp)
}

// Delete2WithResponse request returning *Delete2Response
func (c *ClientWithResponses) Delete2WithResponse(ctx context.Context, organizationId string, identity string, reqEditors ...RequestEditorFn) (*Delete2Response, error) {
	rsp, err := c.Delete2(ctx, organizationId, identity, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDelete2Response(rsp)
}

// Get4WithResponse request returning *Get4Response
func (c *ClientWithResponses) Get4WithResponse(ctx context.Context, organizationId string, identity string, reqEditors ...RequestEditorFn) (*Get4Response, error) {
	rsp, err := c.Get4(ctx, organizationId, identity, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet4Response(rsp)
}

// Update2WithBodyWithResponse request with arbitrary body returning *Update2Response
func (c *ClientWithResponses) Update2WithBodyWithResponse(ctx context.Context, organizationId string, identity string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Update2Response, error) {
	rsp, err := c.Update2WithBody(ctx, organizationId, identity, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdate2Response(rsp)
}

func (c *ClientWithResponses) Update2WithResponse(ctx context.Context, organizationId string, identity string, body Update2JSONRequestBody, reqEditors ...RequestEditorFn) (*Update2Response, error) {
	rsp, err := c.Update2(ctx, organizationId, identity, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdate2Response(rsp)
}

// GetMembersWithResponse request returning *GetMembersResponse
func (c *ClientWithResponses) GetMembersWithResponse(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*GetMembersResponse, error) {
	rsp, err := c.GetMembers(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMembersResponse(rsp)
}

// AddOrUpdateMemberWithBodyWithResponse request with arbitrary body returning *AddOrUpdateMemberResponse
func (c *ClientWithResponses) AddOrUpdateMemberWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddOrUpdateMemberResponse, error) {
	rsp, err := c.AddOrUpdateMemberWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddOrUpdateMemberResponse(rsp)
}

func (c *ClientWithResponses) AddOrUpdateMemberWithResponse(ctx context.Context, organizationId string, body AddOrUpdateMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*AddOrUpdateMemberResponse, error) {
	rsp, err := c.AddOrUpdateMember(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddOrUpdateMemberResponse(rsp)
}

// RemoveMemberWithResponse request returning *RemoveMemberResponse
func (c *ClientWithResponses) RemoveMemberWithResponse(ctx context.Context, organizationId string, member string, reqEditors ...RequestEditorFn) (*RemoveMemberResponse, error) {
	rsp, err := c.RemoveMember(ctx, organizationId, member, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveMemberResponse(rsp)
}

// List2WithResponse request returning *List2Response
func (c *ClientWithResponses) List2WithResponse(ctx context.Context, organizationId string, params *List2Params, reqEditors ...RequestEditorFn) (*List2Response, error) {
	rsp, err := c.List2(ctx, organizationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseList2Response(rsp)
}

// Create1WithBodyWithResponse request with arbitrary body returning *Create1Response
func (c *ClientWithResponses) Create1WithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Create1Response, error) {
	rsp, err := c.Create1WithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreate1Response(rsp)
}

func (c *ClientWithResponses) Create1WithResponse(ctx context.Context, organizationId string, body Create1JSONRequestBody, reqEditors ...RequestEditorFn) (*Create1Response, error) {
	rsp, err := c.Create1(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreate1Response(rsp)
}

// Delete1WithResponse request returning *Delete1Response
func (c *ClientWithResponses) Delete1WithResponse(ctx context.Context, organizationId string, role string, reqEditors ...RequestEditorFn) (*Delete1Response, error) {
	rsp, err := c.Delete1(ctx, organizationId, role, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDelete1Response(rsp)
}

// Get3WithResponse request returning *Get3Response
func (c *ClientWithResponses) Get3WithResponse(ctx context.Context, organizationId string, role string, reqEditors ...RequestEditorFn) (*Get3Response, error) {
	rsp, err := c.Get3(ctx, organizationId, role, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet3Response(rsp)
}

// Update1WithBodyWithResponse request with arbitrary body returning *Update1Response
func (c *ClientWithResponses) Update1WithBodyWithResponse(ctx context.Context, organizationId string, role string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Update1Response, error) {
	rsp, err := c.Update1WithBody(ctx, organizationId, role, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdate1Response(rsp)
}

func (c *ClientWithResponses) Update1WithResponse(ctx context.Context, organizationId string, role string, body Update1JSONRequestBody, reqEditors ...RequestEditorFn) (*Update1Response, error) {
	rsp, err := c.Update1(ctx, organizationId, role, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdate1Response(rsp)
}

// Get6WithResponse request returning *Get6Response
func (c *ClientWithResponses) Get6WithResponse(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*Get6Response, error) {
	rsp, err := c.Get6(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet6Response(rsp)
}

// PatchWithBodyWithResponse request with arbitrary body returning *PatchResponse
func (c *ClientWithResponses) PatchWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchResponse, error) {
	rsp, err := c.PatchWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchResponse(rsp)
}

func (c *ClientWithResponses) PatchWithResponse(ctx context.Context, organizationId string, body PatchJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchResponse, error) {
	rsp, err := c.Patch(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchResponse(rsp)
}

// List1WithResponse request returning *List1Response
func (c *ClientWithResponses) List1WithResponse(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*List1Response, error) {
	rsp, err := c.List1(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseList1Response(rsp)
}

// CreateWithBodyWithResponse request with arbitrary body returning *CreateResponse
func (c *ClientWithResponses) CreateWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateResponse, error) {
	rsp, err := c.CreateWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateResponse(rsp)
}

func (c *ClientWithResponses) CreateWithResponse(ctx context.Context, organizationId string, body CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateResponse, error) {
	rsp, err := c.Create(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateResponse(rsp)
}

// DeleteWithResponse request returning *DeleteResponse
func (c *ClientWithResponses) DeleteWithResponse(ctx context.Context, organizationId string, tag string, reqEditors ...RequestEditorFn) (*DeleteResponse, error) {
	rsp, err := c.Delete(ctx, organizationId, tag, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteResponse(rsp)
}

// Get2WithResponse request returning *Get2Response
func (c *ClientWithResponses) Get2WithResponse(ctx context.Context, organizationId string, tag string, reqEditors ...RequestEditorFn) (*Get2Response, error) {
	rsp, err := c.Get2(ctx, organizationId, tag, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet2Response(rsp)
}

// UpdateWithBodyWithResponse request with arbitrary body returning *UpdateResponse
func (c *ClientWithResponses) UpdateWithBodyWithResponse(ctx context.Context, organizationId string, tag string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateResponse, error) {
	rsp, err := c.UpdateWithBody(ctx, organizationId, tag, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateResponse(rsp)
}

func (c *ClientWithResponses) UpdateWithResponse(ctx context.Context, organizationId string, tag string, body UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateResponse, error) {
	rsp, err := c.Update(ctx, organizationId, tag, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateResponse(rsp)
}

// ListOrganisationUsersWithResponse request returning *ListOrganisationUsersResponse
func (c *ClientWithResponses) ListOrganisationUsersWithResponse(ctx context.Context, organizationId string, params *ListOrganisationUsersParams, reqEditors ...RequestEditorFn) (*ListOrganisationUsersResponse, error) {
	rsp, err := c.ListOrganisationUsers(ctx, organizationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOrganisationUsersResponse(rsp)
}

// CreateOrganisationUserWithBodyWithResponse request with arbitrary body returning *CreateOrganisationUserResponse
func (c *ClientWithResponses) CreateOrganisationUserWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganisationUserResponse, error) {
	rsp, err := c.CreateOrganisationUserWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganisationUserResponse(rsp)
}

func (c *ClientWithResponses) CreateOrganisationUserWithResponse(ctx context.Context, organizationId string, body CreateOrganisationUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganisationUserResponse, error) {
	rsp, err := c.CreateOrganisationUser(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganisationUserResponse(rsp)
}

// DeleteOrganizationUserWithResponse request returning *DeleteOrganizationUserResponse
func (c *ClientWithResponses) DeleteOrganizationUserWithResponse(ctx context.Context, organizationId string, user string, reqEditors ...RequestEditorFn) (*DeleteOrganizationUserResponse, error) {
	rsp, err := c.DeleteOrganizationUser(ctx, organizationId, user, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrganizationUserResponse(rsp)
}

// Get5WithResponse request returning *Get5Response
func (c *ClientWithResponses) Get5WithResponse(ctx context.Context, organizationId string, user string, reqEditors ...RequestEditorFn) (*Get5Response, error) {
	rsp, err := c.Get5(ctx, organizationId, user, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet5Response(rsp)
}

// UpdateOrganizationUserWithBodyWithResponse request with arbitrary body returning *UpdateOrganizationUserResponse
func (c *ClientWithResponses) UpdateOrganizationUserWithBodyWithResponse(ctx context.Context, organizationId string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrganizationUserResponse, error) {
	rsp, err := c.UpdateOrganizationUserWithBody(ctx, organizationId, user, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationUserResponse(rsp)
}

func (c *ClientWithResponses) UpdateOrganizationUserWithResponse(ctx context.Context, organizationId string, user string, body UpdateOrganizationUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrganizationUserResponse, error) {
	rsp, err := c.UpdateOrganizationUser(ctx, organizationId, user, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationUserResponse(rsp)
}

// ResetOrganizationUserPasswordWithBodyWithResponse request with arbitrary body returning *ResetOrganizationUserPasswordResponse
func (c *ClientWithResponses) ResetOrganizationUserPasswordWithBodyWithResponse(ctx context.Context, organizationId string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetOrganizationUserPasswordResponse, error) {
	rsp, err := c.ResetOrganizationUserPasswordWithBody(ctx, organizationId, user, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetOrganizationUserPasswordResponse(rsp)
}

// UpdateOrganizationUserStatusWithBodyWithResponse request with arbitrary body returning *UpdateOrganizationUserStatusResponse
func (c *ClientWithResponses) UpdateOrganizationUserStatusWithBodyWithResponse(ctx context.Context, organizationId string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrganizationUserStatusResponse, error) {
	rsp, err := c.UpdateOrganizationUserStatusWithBody(ctx, organizationId, user, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationUserStatusResponse(rsp)
}

func (c *ClientWithResponses) UpdateOrganizationUserStatusWithResponse(ctx context.Context, organizationId string, user string, body UpdateOrganizationUserStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrganizationUserStatusResponse, error) {
	rsp, err := c.UpdateOrganizationUserStatus(ctx, organizationId, user, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganizationUserStatusResponse(rsp)
}

// UpdateOrganisationUsernameWithBodyWithResponse request with arbitrary body returning *UpdateOrganisationUsernameResponse
func (c *ClientWithResponses) UpdateOrganisationUsernameWithBodyWithResponse(ctx context.Context, organizationId string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrganisationUsernameResponse, error) {
	rsp, err := c.UpdateOrganisationUsernameWithBody(ctx, organizationId, user, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganisationUsernameResponse(rsp)
}

func (c *ClientWithResponses) UpdateOrganisationUsernameWithResponse(ctx context.Context, organizationId string, user string, body UpdateOrganisationUsernameJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrganisationUsernameResponse, error) {
	rsp, err := c.UpdateOrganisationUsername(ctx, organizationId, user, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOrganisationUsernameResponse(rsp)
}

// List25WithResponse request returning *List25Response
func (c *ClientWithResponses) List25WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*List25Response, error) {
	rsp, err := c.List25(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseList25Response(rsp)
}

// GetAlertServiceStatusWithResponse request returning *GetAlertServiceStatusResponse
func (c *ClientWithResponses) GetAlertServiceStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAlertServiceStatusResponse, error) {
	rsp, err := c.GetAlertServiceStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAlertServiceStatusResponse(rsp)
}

// List37WithResponse request returning *List37Response
func (c *ClientWithResponses) List37WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*List37Response, error) {
	rsp, err := c.List37(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseList37Response(rsp)
}

// GetSpelGrammarWithResponse request returning *GetSpelGrammarResponse
func (c *ClientWithResponses) GetSpelGrammarWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSpelGrammarResponse, error) {
	rsp, err := c.GetSpelGrammar(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSpelGrammarResponse(rsp)
}

// Get38WithResponse request returning *Get38Response
func (c *ClientWithResponses) Get38WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*Get38Response, error) {
	rsp, err := c.Get38(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet38Response(rsp)
}

// List35WithResponse request returning *List35Response
func (c *ClientWithResponses) List35WithResponse(ctx context.Context, params *List35Params, reqEditors ...RequestEditorFn) (*List35Response, error) {
	rsp, err := c.List35(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseList35Response(rsp)
}

// Get35WithResponse request returning *Get35Response
func (c *ClientWithResponses) Get35WithResponse(ctx context.Context, authDeviceNotifierId string, reqEditors ...RequestEditorFn) (*Get35Response, error) {
	rsp, err := c.Get35(ctx, authDeviceNotifierId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet35Response(rsp)
}

// GetSchema9WithResponse request returning *GetSchema9Response
func (c *ClientWithResponses) GetSchema9WithResponse(ctx context.Context, authDeviceNotifierId string, reqEditors ...RequestEditorFn) (*GetSchema9Response, error) {
	rsp, err := c.GetSchema9(ctx, authDeviceNotifierId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSchema9Response(rsp)
}

// List34WithResponse request returning *List34Response
func (c *ClientWithResponses) List34WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*List34Response, error) {
	rsp, err := c.List34(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseList34Response(rsp)
}

// Get34WithResponse request returning *Get34Response
func (c *ClientWithResponses) Get34WithResponse(ctx context.Context, botDetection string, reqEditors ...RequestEditorFn) (*Get34Response, error) {
	rsp, err := c.Get34(ctx, botDetection, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet34Response(rsp)
}

// GetSchema8WithResponse request returning *GetSchema8Response
func (c *ClientWithResponses) GetSchema8WithResponse(ctx context.Context, botDetection string, reqEditors ...RequestEditorFn) (*GetSchema8Response, error) {
	rsp, err := c.GetSchema8(ctx, botDetection, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSchema8Response(rsp)
}

// List27WithResponse request returning *List27Response
func (c *ClientWithResponses) List27WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*List27Response, error) {
	rsp, err := c.List27(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseList27Response(rsp)
}

// Get27WithResponse request returning *Get27Response
func (c *ClientWithResponses) Get27WithResponse(ctx context.Context, certificate string, reqEditors ...RequestEditorFn) (*Get27Response, error) {
	rsp, err := c.Get27(ctx, certificate, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet27Response(rsp)
}

// GetSchema1WithResponse request returning *GetSchema1Response
func (c *ClientWithResponses) GetSchema1WithResponse(ctx context.Context, certificate string, reqEditors ...RequestEditorFn) (*GetSchema1Response, error) {
	rsp, err := c.GetSchema1(ctx, certificate, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSchema1Response(rsp)
}

// List36WithResponse request returning *List36Response
func (c *ClientWithResponses) List36WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*List36Response, error) {
	rsp, err := c.List36(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseList36Response(rsp)
}

// Get36WithResponse request returning *Get36Response
func (c *ClientWithResponses) Get36WithResponse(ctx context.Context, deviceIdentifier string, reqEditors ...RequestEditorFn) (*Get36Response, error) {
	rsp, err := c.Get36(ctx, deviceIdentifier, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet36Response(rsp)
}

// GetSchema10WithResponse request returning *GetSchema10Response
func (c *ClientWithResponses) GetSchema10WithResponse(ctx context.Context, deviceIdentifier string, reqEditors ...RequestEditorFn) (*GetSchema10Response, error) {
	rsp, err := c.GetSchema10(ctx, deviceIdentifier, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSchema10Response(rsp)
}

// List28WithResponse request returning *List28Response
func (c *ClientWithResponses) List28WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*List28Response, error) {
	rsp, err := c.List28(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseList28Response(rsp)
}

// Get28WithResponse request returning *Get28Response
func (c *ClientWithResponses) Get28WithResponse(ctx context.Context, extensionGrant string, reqEditors ...RequestEditorFn) (*Get28Response, error) {
	rsp, err := c.Get28(ctx, extensionGrant, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet28Response(rsp)
}

// GetSchema2WithResponse request returning *GetSchema2Response
func (c *ClientWithResponses) GetSchema2WithResponse(ctx context.Context, extensionGrant string, reqEditors ...RequestEditorFn) (*GetSchema2Response, error) {
	rsp, err := c.GetSchema2(ctx, extensionGrant, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSchema2Response(rsp)
}

// List31WithResponse request returning *List31Response
func (c *ClientWithResponses) List31WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*List31Response, error) {
	rsp, err := c.List31(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseList31Response(rsp)
}

// Get31WithResponse request returning *Get31Response
func (c *ClientWithResponses) Get31WithResponse(ctx context.Context, factor string, reqEditors ...RequestEditorFn) (*Get31Response, error) {
	rsp, err := c.Get31(ctx, factor, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet31Response(rsp)
}

// GetSchema5WithResponse request returning *GetSchema5Response
func (c *ClientWithResponses) GetSchema5WithResponse(ctx context.Context, factor string, reqEditors ...RequestEditorFn) (*GetSchema5Response, error) {
	rsp, err := c.GetSchema5(ctx, factor, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSchema5Response(rsp)
}

// List26WithResponse request returning *List26Response
func (c *ClientWithResponses) List26WithResponse(ctx context.Context, params *List26Params, reqEditors ...RequestEditorFn) (*List26Response, error) {
	rsp, err := c.List26(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseList26Response(rsp)
}

// Get26WithResponse request returning *Get26Response
func (c *ClientWithResponses) Get26WithResponse(ctx context.Context, identity string, reqEditors ...RequestEditorFn) (*Get26Response, error) {
	rsp, err := c.Get26(ctx, identity, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet26Response(rsp)
}

// GetSchemaWithResponse request returning *GetSchemaResponse
func (c *ClientWithResponses) GetSchemaWithResponse(ctx context.Context, identity string, reqEditors ...RequestEditorFn) (*GetSchemaResponse, error) {
	rsp, err := c.GetSchema(ctx, identity, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSchemaResponse(rsp)
}

// List33WithResponse request returning *List33Response
func (c *ClientWithResponses) List33WithResponse(ctx context.Context, params *List33Params, reqEditors ...RequestEditorFn) (*List33Response, error) {
	rsp, err := c.List33(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseList33Response(rsp)
}

// Get33WithResponse request returning *Get33Response
func (c *ClientWithResponses) Get33WithResponse(ctx context.Context, notifierId string, reqEditors ...RequestEditorFn) (*Get33Response, error) {
	rsp, err := c.Get33(ctx, notifierId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet33Response(rsp)
}

// GetSchema7WithResponse request returning *GetSchema7Response
func (c *ClientWithResponses) GetSchema7WithResponse(ctx context.Context, notifierId string, reqEditors ...RequestEditorFn) (*GetSchema7Response, error) {
	rsp, err := c.GetSchema7(ctx, notifierId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSchema7Response(rsp)
}

// List30WithResponse request returning *List30Response
func (c *ClientWithResponses) List30WithResponse(ctx context.Context, params *List30Params, reqEditors ...RequestEditorFn) (*List30Response, error) {
	rsp, err := c.List30(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseList30Response(rsp)
}

// Get30WithResponse request returning *Get30Response
func (c *ClientWithResponses) Get30WithResponse(ctx context.Context, policy string, reqEditors ...RequestEditorFn) (*Get30Response, error) {
	rsp, err := c.Get30(ctx, policy, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet30Response(rsp)
}

// GetDocumentationWithResponse request returning *GetDocumentationResponse
func (c *ClientWithResponses) GetDocumentationWithResponse(ctx context.Context, policy string, reqEditors ...RequestEditorFn) (*GetDocumentationResponse, error) {
	rsp, err := c.GetDocumentation(ctx, policy, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDocumentationResponse(rsp)
}

// GetSchema4WithResponse request returning *GetSchema4Response
func (c *ClientWithResponses) GetSchema4WithResponse(ctx context.Context, policy string, reqEditors ...RequestEditorFn) (*GetSchema4Response, error) {
	rsp, err := c.GetSchema4(ctx, policy, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSchema4Response(rsp)
}

// List29WithResponse request returning *List29Response
func (c *ClientWithResponses) List29WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*List29Response, error) {
	rsp, err := c.List29(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseList29Response(rsp)
}

// Get29WithResponse request returning *Get29Response
func (c *ClientWithResponses) Get29WithResponse(ctx context.Context, reporter string, reqEditors ...RequestEditorFn) (*Get29Response, error) {
	rsp, err := c.Get29(ctx, reporter, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet29Response(rsp)
}

// GetSchema3WithResponse request returning *GetSchema3Response
func (c *ClientWithResponses) GetSchema3WithResponse(ctx context.Context, reporter string, reqEditors ...RequestEditorFn) (*GetSchema3Response, error) {
	rsp, err := c.GetSchema3(ctx, reporter, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSchema3Response(rsp)
}

// List32WithResponse request returning *List32Response
func (c *ClientWithResponses) List32WithResponse(ctx context.Context, params *List32Params, reqEditors ...RequestEditorFn) (*List32Response, error) {
	rsp, err := c.List32(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseList32Response(rsp)
}

// Get32WithResponse request returning *Get32Response
func (c *ClientWithResponses) Get32WithResponse(ctx context.Context, resource string, reqEditors ...RequestEditorFn) (*Get32Response, error) {
	rsp, err := c.Get32(ctx, resource, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet32Response(rsp)
}

// GetSchema6WithResponse request returning *GetSchema6Response
func (c *ClientWithResponses) GetSchema6WithResponse(ctx context.Context, resource string, reqEditors ...RequestEditorFn) (*GetSchema6Response, error) {
	rsp, err := c.GetSchema6(ctx, resource, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSchema6Response(rsp)
}

// Get37WithResponse request returning *Get37Response
func (c *ClientWithResponses) Get37WithResponse(ctx context.Context, role string, reqEditors ...RequestEditorFn) (*Get37Response, error) {
	rsp, err := c.Get37(ctx, role, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGet37Response(rsp)
}

// GetWithResponse request returning *GetResponse
func (c *ClientWithResponses) GetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetResponse, error) {
	rsp, err := c.Get(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResponse(rsp)
}

// SubscribeNewsletterWithBodyWithResponse request with arbitrary body returning *SubscribeNewsletterResponse
func (c *ClientWithResponses) SubscribeNewsletterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubscribeNewsletterResponse, error) {
	rsp, err := c.SubscribeNewsletterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubscribeNewsletterResponse(rsp)
}

// GetTaglinesWithResponse request returning *GetTaglinesResponse
func (c *ClientWithResponses) GetTaglinesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTaglinesResponse, error) {
	rsp, err := c.GetTaglines(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaglinesResponse(rsp)
}

// ListNotificationsWithResponse request returning *ListNotificationsResponse
func (c *ClientWithResponses) ListNotificationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListNotificationsResponse, error) {
	rsp, err := c.ListNotifications(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListNotificationsResponse(rsp)
}

// MarkAsReadWithResponse request returning *MarkAsReadResponse
func (c *ClientWithResponses) MarkAsReadWithResponse(ctx context.Context, notificationId string, reqEditors ...RequestEditorFn) (*MarkAsReadResponse, error) {
	rsp, err := c.MarkAsRead(ctx, notificationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMarkAsReadResponse(rsp)
}

// ParsePostResponse parses an HTTP response from a PostWithResponse call
func ParsePostResponse(rsp *http.Response) (*PostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AuthToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListResponse parses an HTTP response from a ListWithResponse call
func ParseListResponse(rsp *http.Response) (*ListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Audit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGet1Response parses an HTTP response from a Get1WithResponse call
func ParseGet1Response(rsp *http.Response) (*Get1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Audit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseList24Response parses an HTTP response from a List24WithResponse call
func ParseList24Response(rsp *http.Response) (*List24Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &List24Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Entrypoint
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreate14Response parses an HTTP response from a Create14WithResponse call
func ParseCreate14Response(rsp *http.Response) (*Create14Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Create14Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDelete16Response parses an HTTP response from a Delete16WithResponse call
func ParseDelete16Response(rsp *http.Response) (*Delete16Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Delete16Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGet25Response parses an HTTP response from a Get25WithResponse call
func ParseGet25Response(rsp *http.Response) (*Get25Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get25Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Entrypoint
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdate13Response parses an HTTP response from a Update13WithResponse call
func ParseUpdate13Response(rsp *http.Response) (*Update13Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Update13Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Entrypoint
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseList6Response parses an HTTP response from a List6WithResponse call
func ParseList6Response(rsp *http.Response) (*List6Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &List6Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Environment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListDomainsResponse parses an HTTP response from a ListDomainsWithResponse call
func ParseListDomainsResponse(rsp *http.Response) (*ListDomainsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDomainsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Domain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateDomainResponse parses an HTTP response from a CreateDomainWithResponse call
func ParseCreateDomainResponse(rsp *http.Response) (*CreateDomainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Domain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseFindDomainByHridResponse parses an HTTP response from a FindDomainByHridWithResponse call
func ParseFindDomainByHridResponse(rsp *http.Response) (*FindDomainByHridResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindDomainByHridResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Domain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteDomainResponse parses an HTTP response from a DeleteDomainWithResponse call
func ParseDeleteDomainResponse(rsp *http.Response) (*DeleteDomainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFindDomainResponse parses an HTTP response from a FindDomainWithResponse call
func ParseFindDomainResponse(rsp *http.Response) (*FindDomainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Domain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchDomainResponse parses an HTTP response from a PatchDomainWithResponse call
func ParsePatchDomainResponse(rsp *http.Response) (*PatchDomainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Domain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateDomainResponse parses an HTTP response from a UpdateDomainWithResponse call
func ParseUpdateDomainResponse(rsp *http.Response) (*UpdateDomainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Domain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListAlertNotifiersResponse parses an HTTP response from a ListAlertNotifiersWithResponse call
func ParseListAlertNotifiersResponse(rsp *http.Response) (*ListAlertNotifiersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAlertNotifiersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AlertNotifier
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateAlertNotifierResponse parses an HTTP response from a CreateAlertNotifierWithResponse call
func ParseCreateAlertNotifierResponse(rsp *http.Response) (*CreateAlertNotifierResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAlertNotifierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlertNotifier
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAlertNotifierResponse parses an HTTP response from a DeleteAlertNotifierWithResponse call
func ParseDeleteAlertNotifierResponse(rsp *http.Response) (*DeleteAlertNotifierResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAlertNotifierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAlertNotifierResponse parses an HTTP response from a GetAlertNotifierWithResponse call
func ParseGetAlertNotifierResponse(rsp *http.Response) (*GetAlertNotifierResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlertNotifierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlertNotifier
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchAlertNotifierResponse parses an HTTP response from a PatchAlertNotifierWithResponse call
func ParsePatchAlertNotifierResponse(rsp *http.Response) (*PatchAlertNotifierResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchAlertNotifierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlertNotifier
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseList20Response parses an HTTP response from a List20WithResponse call
func ParseList20Response(rsp *http.Response) (*List20Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &List20Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AlertTrigger
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseList19Response parses an HTTP response from a List19WithResponse call
func ParseList19Response(rsp *http.Response) (*List19Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &List19Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AlertTrigger
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGet21Response parses an HTTP response from a Get21WithResponse call
func ParseGet21Response(rsp *http.Response) (*Get21Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get21Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListApplicationsResponse parses an HTTP response from a ListApplicationsWithResponse call
func ParseListApplicationsResponse(rsp *http.Response) (*ListApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplicationPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateApplicationResponse parses an HTTP response from a CreateApplicationWithResponse call
func ParseCreateApplicationResponse(rsp *http.Response) (*CreateApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Application
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteApplicationResponse parses an HTTP response from a DeleteApplicationWithResponse call
func ParseDeleteApplicationResponse(rsp *http.Response) (*DeleteApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFindApplicationResponse parses an HTTP response from a FindApplicationWithResponse call
func ParseFindApplicationResponse(rsp *http.Response) (*FindApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Application
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchApplicationResponse parses an HTTP response from a PatchApplicationWithResponse call
func ParsePatchApplicationResponse(rsp *http.Response) (*PatchApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Application
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateApplicationResponse parses an HTTP response from a UpdateApplicationWithResponse call
func ParseUpdateApplicationResponse(rsp *http.Response) (*UpdateApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Application
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGet14Response parses an HTTP response from a Get14WithResponse call
func ParseGet14Response(rsp *http.Response) (*Get14Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get14Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGet13Response parses an HTTP response from a Get13WithResponse call
func ParseGet13Response(rsp *http.Response) (*Get13Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get13Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreate6Response parses an HTTP response from a Create6WithResponse call
func ParseCreate6Response(rsp *http.Response) (*Create6Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Create6Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDelete8Response parses an HTTP response from a Delete8WithResponse call
func ParseDelete8Response(rsp *http.Response) (*Delete8Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Delete8Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdate5Response parses an HTTP response from a Update5WithResponse call
func ParseUpdate5Response(rsp *http.Response) (*Update5Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Update5Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Email
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseListAppFlowsResponse parses an HTTP response from a ListAppFlowsWithResponse call
func ParseListAppFlowsResponse(rsp *http.Response) (*ListAppFlowsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAppFlowsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FlowEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDefineAppFlowsResponse parses an HTTP response from a DefineAppFlowsWithResponse call
func ParseDefineAppFlowsResponse(rsp *http.Response) (*DefineAppFlowsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DefineAppFlowsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FlowEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAppFlowResponse parses an HTTP response from a GetAppFlowWithResponse call
func ParseGetAppFlowResponse(rsp *http.Response) (*GetAppFlowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAppFlowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FlowEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateAppFlowResponse parses an HTTP response from a UpdateAppFlowWithResponse call
func ParseUpdateAppFlowResponse(rsp *http.Response) (*UpdateAppFlowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAppFlowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest FlowEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGet12Response parses an HTTP response from a Get12WithResponse call
func ParseGet12Response(rsp *http.Response) (*Get12Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get12Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreate5Response parses an HTTP response from a Create5WithResponse call
func ParseCreate5Response(rsp *http.Response) (*Create5Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Create5Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDelete7Response parses an HTTP response from a Delete7WithResponse call
func ParseDelete7Response(rsp *http.Response) (*Delete7Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Delete7Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdate4Response parses an HTTP response from a Update4WithResponse call
func ParseUpdate4Response(rsp *http.Response) (*Update4Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Update4Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Form
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetMembers1Response parses an HTTP response from a GetMembers1WithResponse call
func ParseGetMembers1Response(rsp *http.Response) (*GetMembers1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMembers1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MembershipListItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddOrUpdateMember2Response parses an HTTP response from a AddOrUpdateMember2WithResponse call
func ParseAddOrUpdateMember2Response(rsp *http.Response) (*AddOrUpdateMember2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddOrUpdateMember2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePermissions2Response parses an HTTP response from a Permissions2WithResponse call
func ParsePermissions2Response(rsp *http.Response) (*Permissions2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Permissions2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRemoveMember3Response parses an HTTP response from a RemoveMember3WithResponse call
func ParseRemoveMember3Response(rsp *http.Response) (*RemoveMember3Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveMember3Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseList15Response parses an HTTP response from a List15WithResponse call
func ParseList15Response(rsp *http.Response) (*List15Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &List15Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceListItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGet15Response parses an HTTP response from a Get15WithResponse call
func ParseGet15Response(rsp *http.Response) (*Get15Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get15Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Resource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseList16Response parses an HTTP response from a List16WithResponse call
func ParseList16Response(rsp *http.Response) (*List16Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &List16Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AccessPolicyListItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGet16Response parses an HTTP response from a Get16WithResponse call
func ParseGet16Response(rsp *http.Response) (*Get16Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get16Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccessPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRenewClientSecretResponse parses an HTTP response from a RenewClientSecretWithResponse call
func ParseRenewClientSecretResponse(rsp *http.Response) (*RenewClientSecretResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RenewClientSecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Application
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateApplicationTypeResponse parses an HTTP response from a UpdateApplicationTypeWithResponse call
func ParseUpdateApplicationTypeResponse(rsp *http.Response) (*UpdateApplicationTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateApplicationTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Application
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseList7Response parses an HTTP response from a List7WithResponse call
func ParseList7Response(rsp *http.Response) (*List7Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &List7Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Audit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGet8Response parses an HTTP response from a Get8WithResponse call
func ParseGet8Response(rsp *http.Response) (*Get8Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get8Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Audit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseList23Response parses an HTTP response from a List23WithResponse call
func ParseList23Response(rsp *http.Response) (*List23Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &List23Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AuthenticationDeviceNotifier
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreate13Response parses an HTTP response from a Create13WithResponse call
func ParseCreate13Response(rsp *http.Response) (*Create13Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Create13Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDelete15Response parses an HTTP response from a Delete15WithResponse call
func ParseDelete15Response(rsp *http.Response) (*Delete15Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Delete15Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGet24Response parses an HTTP response from a Get24WithResponse call
func ParseGet24Response(rsp *http.Response) (*Get24Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get24Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthenticationDeviceNotifier
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdate12Response parses an HTTP response from a Update12WithResponse call
func ParseUpdate12Response(rsp *http.Response) (*Update12Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Update12Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AuthenticationDeviceNotifier
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseList21Response parses an HTTP response from a List21WithResponse call
func ParseList21Response(rsp *http.Response) (*List21Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &List21Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BotDetection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreate11Response parses an HTTP response from a Create11WithResponse call
func ParseCreate11Response(rsp *http.Response) (*Create11Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Create11Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDelete13Response parses an HTTP response from a Delete13WithResponse call
func ParseDelete13Response(rsp *http.Response) (*Delete13Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Delete13Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGet22Response parses an HTTP response from a Get22WithResponse call
func ParseGet22Response(rsp *http.Response) (*Get22Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get22Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BotDetection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdate10Response parses an HTTP response from a Update10WithResponse call
func ParseUpdate10Response(rsp *http.Response) (*Update10Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Update10Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BotDetection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseListCertificatesResponse parses an HTTP response from a ListCertificatesWithResponse call
func ParseListCertificatesResponse(rsp *http.Response) (*ListCertificatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCertificatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CertificateEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateCertificateResponse parses an HTTP response from a CreateCertificateWithResponse call
func ParseCreateCertificateResponse(rsp *http.Response) (*CreateCertificateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCertificateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CertificateEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseRotateCertificateResponse parses an HTTP response from a RotateCertificateWithResponse call
func ParseRotateCertificateResponse(rsp *http.Response) (*RotateCertificateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RotateCertificateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CertificateEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteCertificateResponse parses an HTTP response from a DeleteCertificateWithResponse call
func ParseDeleteCertificateResponse(rsp *http.Response) (*DeleteCertificateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCertificateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFindCertificateResponse parses an HTTP response from a FindCertificateWithResponse call
func ParseFindCertificateResponse(rsp *http.Response) (*FindCertificateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindCertificateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CertificateEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateCertificateResponse parses an HTTP response from a UpdateCertificateWithResponse call
func ParseUpdateCertificateResponse(rsp *http.Response) (*UpdateCertificateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCertificateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CertificateEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetCertificatePublicKeyResponse parses an HTTP response from a GetCertificatePublicKeyWithResponse call
func ParseGetCertificatePublicKeyResponse(rsp *http.Response) (*GetCertificatePublicKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCertificatePublicKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCertificatePublicKeysResponse parses an HTTP response from a GetCertificatePublicKeysWithResponse call
func ParseGetCertificatePublicKeysResponse(rsp *http.Response) (*GetCertificatePublicKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCertificatePublicKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CertificateKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseList22Response parses an HTTP response from a List22WithResponse call
func ParseList22Response(rsp *http.Response) (*List22Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &List22Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BotDetection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreate12Response parses an HTTP response from a Create12WithResponse call
func ParseCreate12Response(rsp *http.Response) (*Create12Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Create12Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDelete14Response parses an HTTP response from a Delete14WithResponse call
func ParseDelete14Response(rsp *http.Response) (*Delete14Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Delete14Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGet23Response parses an HTTP response from a Get23WithResponse call
func ParseGet23Response(rsp *http.Response) (*Get23Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get23Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceIdentifierResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdate11Response parses an HTTP response from a Update11WithResponse call
func ParseUpdate11Response(rsp *http.Response) (*Update11Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Update11Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BotDetection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGet19Response parses an HTTP response from a Get19WithResponse call
func ParseGet19Response(rsp *http.Response) (*Get19Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get19Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreate9Response parses an HTTP response from a Create9WithResponse call
func ParseCreate9Response(rsp *http.Response) (*Create9Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Create9Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDelete11Response parses an HTTP response from a Delete11WithResponse call
func ParseDelete11Response(rsp *http.Response) (*Delete11Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Delete11Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdate8Response parses an HTTP response from a Update8WithResponse call
func ParseUpdate8Response(rsp *http.Response) (*Update8Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Update8Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Email
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetDomainEntrypointsResponse parses an HTTP response from a GetDomainEntrypointsWithResponse call
func ParseGetDomainEntrypointsResponse(rsp *http.Response) (*GetDomainEntrypointsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDomainEntrypointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Entrypoint
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseList17Response parses an HTTP response from a List17WithResponse call
func ParseList17Response(rsp *http.Response) (*List17Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &List17Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ExtensionGrant
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreate7Response parses an HTTP response from a Create7WithResponse call
func ParseCreate7Response(rsp *http.Response) (*Create7Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Create7Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDelete9Response parses an HTTP response from a Delete9WithResponse call
func ParseDelete9Response(rsp *http.Response) (*Delete9Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Delete9Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGet17Response parses an HTTP response from a Get17WithResponse call
func ParseGet17Response(rsp *http.Response) (*Get17Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get17Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExtensionGrant
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdate6Response parses an HTTP response from a Update6WithResponse call
func ParseUpdate6Response(rsp *http.Response) (*Update6Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Update6Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ExtensionGrant
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseListFactorsResponse parses an HTTP response from a ListFactorsWithResponse call
func ParseListFactorsResponse(rsp *http.Response) (*ListFactorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListFactorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Factor
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateFactorResponse parses an HTTP response from a CreateFactorWithResponse call
func ParseCreateFactorResponse(rsp *http.Response) (*CreateFactorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFactorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Factor
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteFactorResponse parses an HTTP response from a DeleteFactorWithResponse call
func ParseDeleteFactorResponse(rsp *http.Response) (*DeleteFactorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFactorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetFactorResponse parses an HTTP response from a GetFactorWithResponse call
func ParseGetFactorResponse(rsp *http.Response) (*GetFactorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFactorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Factor
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateFactorResponse parses an HTTP response from a UpdateFactorWithResponse call
func ParseUpdateFactorResponse(rsp *http.Response) (*UpdateFactorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateFactorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Factor
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseListDomainFlowsResponse parses an HTTP response from a ListDomainFlowsWithResponse call
func ParseListDomainFlowsResponse(rsp *http.Response) (*ListDomainFlowsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDomainFlowsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FlowEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDefineDomainFlowsResponse parses an HTTP response from a DefineDomainFlowsWithResponse call
func ParseDefineDomainFlowsResponse(rsp *http.Response) (*DefineDomainFlowsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DefineDomainFlowsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FlowEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDomainFlowResponse parses an HTTP response from a GetDomainFlowWithResponse call
func ParseGetDomainFlowResponse(rsp *http.Response) (*GetDomainFlowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDomainFlowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FlowEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateDomainFlowResponse parses an HTTP response from a UpdateDomainFlowWithResponse call
func ParseUpdateDomainFlowResponse(rsp *http.Response) (*UpdateDomainFlowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDomainFlowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest FlowEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGet18Response parses an HTTP response from a Get18WithResponse call
func ParseGet18Response(rsp *http.Response) (*Get18Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get18Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreate8Response parses an HTTP response from a Create8WithResponse call
func ParseCreate8Response(rsp *http.Response) (*Create8Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Create8Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRenderDomainTemplateResponse parses an HTTP response from a RenderDomainTemplateWithResponse call
func ParseRenderDomainTemplateResponse(rsp *http.Response) (*RenderDomainTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RenderDomainTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PreviewResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDelete10Response parses an HTTP response from a Delete10WithResponse call
func ParseDelete10Response(rsp *http.Response) (*Delete10Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Delete10Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdate7Response parses an HTTP response from a Update7WithResponse call
func ParseUpdate7Response(rsp *http.Response) (*Update7Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Update7Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Form
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseListGroupsResponse parses an HTTP response from a ListGroupsWithResponse call
func ParseListGroupsResponse(rsp *http.Response) (*ListGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GroupPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateGroupResponse parses an HTTP response from a CreateGroupWithResponse call
func ParseCreateGroupResponse(rsp *http.Response) (*CreateGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteGroupResponse parses an HTTP response from a DeleteGroupWithResponse call
func ParseDeleteGroupResponse(rsp *http.Response) (*DeleteGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFindGroupResponse parses an HTTP response from a FindGroupWithResponse call
func ParseFindGroupResponse(rsp *http.Response) (*FindGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateGroupResponse parses an HTTP response from a UpdateGroupWithResponse call
func ParseUpdateGroupResponse(rsp *http.Response) (*UpdateGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetGroupMembersResponse parses an HTTP response from a GetGroupMembersWithResponse call
func ParseGetGroupMembersResponse(rsp *http.Response) (*GetGroupMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGroupMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRemoveGroupMemberResponse parses an HTTP response from a RemoveGroupMemberWithResponse call
func ParseRemoveGroupMemberResponse(rsp *http.Response) (*RemoveGroupMemberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveGroupMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAddGroupMemberResponse parses an HTTP response from a AddGroupMemberWithResponse call
func ParseAddGroupMemberResponse(rsp *http.Response) (*AddGroupMemberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddGroupMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFindGroupRolesResponse parses an HTTP response from a FindGroupRolesWithResponse call
func ParseFindGroupRolesResponse(rsp *http.Response) (*FindGroupRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindGroupRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Role
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAssignRolesResponse parses an HTTP response from a AssignRolesWithResponse call
func ParseAssignRolesResponse(rsp *http.Response) (*AssignRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AssignRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRevokeRoleResponse parses an HTTP response from a RevokeRoleWithResponse call
func ParseRevokeRoleResponse(rsp *http.Response) (*RevokeRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RevokeRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListI18nDictionariesResponse parses an HTTP response from a ListI18nDictionariesWithResponse call
func ParseListI18nDictionariesResponse(rsp *http.Response) (*ListI18nDictionariesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListI18nDictionariesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []I18nDictionary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateI18nDictionaryResponse parses an HTTP response from a CreateI18nDictionaryWithResponse call
func ParseCreateI18nDictionaryResponse(rsp *http.Response) (*CreateI18nDictionaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateI18nDictionaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest I18nDictionary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteI18nDictionaryResponse parses an HTTP response from a DeleteI18nDictionaryWithResponse call
func ParseDeleteI18nDictionaryResponse(rsp *http.Response) (*DeleteI18nDictionaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteI18nDictionaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetI18nDictionaryResponse parses an HTTP response from a GetI18nDictionaryWithResponse call
func ParseGetI18nDictionaryResponse(rsp *http.Response) (*GetI18nDictionaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetI18nDictionaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest I18nDictionary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutI18nDictionaryResponse parses an HTTP response from a PutI18nDictionaryWithResponse call
func ParsePutI18nDictionaryResponse(rsp *http.Response) (*PutI18nDictionaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutI18nDictionaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest I18nDictionary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReplaceI18nDictionaryEntriesResponse parses an HTTP response from a ReplaceI18nDictionaryEntriesWithResponse call
func ParseReplaceI18nDictionaryEntriesResponse(rsp *http.Response) (*ReplaceI18nDictionaryEntriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceI18nDictionaryEntriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest I18nDictionary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListIdentityProvidersResponse parses an HTTP response from a ListIdentityProvidersWithResponse call
func ParseListIdentityProvidersResponse(rsp *http.Response) (*ListIdentityProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIdentityProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FilteredIdentityProviderInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateIdentityProviderResponse parses an HTTP response from a CreateIdentityProviderWithResponse call
func ParseCreateIdentityProviderResponse(rsp *http.Response) (*CreateIdentityProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIdentityProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest IdentityProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteIdentityProviderResponse parses an HTTP response from a DeleteIdentityProviderWithResponse call
func ParseDeleteIdentityProviderResponse(rsp *http.Response) (*DeleteIdentityProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIdentityProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFindIdentityProviderResponse parses an HTTP response from a FindIdentityProviderWithResponse call
func ParseFindIdentityProviderResponse(rsp *http.Response) (*FindIdentityProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindIdentityProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IdentityProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateIdentityProviderResponse parses an HTTP response from a UpdateIdentityProviderWithResponse call
func ParseUpdateIdentityProviderResponse(rsp *http.Response) (*UpdateIdentityProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIdentityProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest IdentityProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseList8Response parses an HTTP response from a List8WithResponse call
func ParseList8Response(rsp *http.Response) (*List8Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &List8Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MembershipListItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddOrUpdateMember1Response parses an HTTP response from a AddOrUpdateMember1WithResponse call
func ParseAddOrUpdateMember1Response(rsp *http.Response) (*AddOrUpdateMember1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddOrUpdateMember1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePermissions1Response parses an HTTP response from a Permissions1WithResponse call
func ParsePermissions1Response(rsp *http.Response) (*Permissions1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Permissions1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRemoveMember2Response parses an HTTP response from a RemoveMember2WithResponse call
func ParseRemoveMember2Response(rsp *http.Response) (*RemoveMember2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveMember2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseList18Response parses an HTTP response from a List18WithResponse call
func ParseList18Response(rsp *http.Response) (*List18Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &List18Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Reporter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreate10Response parses an HTTP response from a Create10WithResponse call
func ParseCreate10Response(rsp *http.Response) (*Create10Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Create10Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Reporter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDelete12Response parses an HTTP response from a Delete12WithResponse call
func ParseDelete12Response(rsp *http.Response) (*Delete12Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Delete12Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGet20Response parses an HTTP response from a Get20WithResponse call
func ParseGet20Response(rsp *http.Response) (*Get20Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get20Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Reporter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdate9Response parses an HTTP response from a Update9WithResponse call
func ParseUpdate9Response(rsp *http.Response) (*Update9Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Update9Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Reporter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseListResourcesResponse parses an HTTP response from a ListResourcesWithResponse call
func ParseListResourcesResponse(rsp *http.Response) (*ListResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ServiceResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateResourceResponse parses an HTTP response from a CreateResourceWithResponse call
func ParseCreateResourceResponse(rsp *http.Response) (*CreateResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ServiceResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteResourceResponse parses an HTTP response from a DeleteResourceWithResponse call
func ParseDeleteResourceResponse(rsp *http.Response) (*DeleteResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetResourceResponse parses an HTTP response from a GetResourceWithResponse call
func ParseGetResourceResponse(rsp *http.Response) (*GetResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServiceResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateResourceResponse parses an HTTP response from a UpdateResourceWithResponse call
func ParseUpdateResourceResponse(rsp *http.Response) (*UpdateResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ServiceResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseFindRolesResponse parses an HTTP response from a FindRolesWithResponse call
func ParseFindRolesResponse(rsp *http.Response) (*FindRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RolePage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateRoleResponse parses an HTTP response from a CreateRoleWithResponse call
func ParseCreateRoleResponse(rsp *http.Response) (*CreateRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Role
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteRoleResponse parses an HTTP response from a DeleteRoleWithResponse call
func ParseDeleteRoleResponse(rsp *http.Response) (*DeleteRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFindRoleResponse parses an HTTP response from a FindRoleWithResponse call
func ParseFindRoleResponse(rsp *http.Response) (*FindRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoleEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateRoleResponse parses an HTTP response from a UpdateRoleWithResponse call
func ParseUpdateRoleResponse(rsp *http.Response) (*UpdateRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RoleEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseListScopesResponse parses an HTTP response from a ListScopesWithResponse call
func ParseListScopesResponse(rsp *http.Response) (*ListScopesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListScopesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScopePage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateScopeResponse parses an HTTP response from a CreateScopeWithResponse call
func ParseCreateScopeResponse(rsp *http.Response) (*CreateScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Scope
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteScopeResponse parses an HTTP response from a DeleteScopeWithResponse call
func ParseDeleteScopeResponse(rsp *http.Response) (*DeleteScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFindScopeResponse parses an HTTP response from a FindScopeWithResponse call
func ParseFindScopeResponse(rsp *http.Response) (*FindScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Scope
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchScopeResponse parses an HTTP response from a PatchScopeWithResponse call
func ParsePatchScopeResponse(rsp *http.Response) (*PatchScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Scope
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateScopeResponse parses an HTTP response from a UpdateScopeWithResponse call
func ParseUpdateScopeResponse(rsp *http.Response) (*UpdateScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Scope
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListThemesResponse parses an HTTP response from a ListThemesWithResponse call
func ParseListThemesResponse(rsp *http.Response) (*ListThemesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListThemesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ThemeEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateThemeResponse parses an HTTP response from a CreateThemeWithResponse call
func ParseCreateThemeResponse(rsp *http.Response) (*CreateThemeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateThemeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ThemeEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteThemeResponse parses an HTTP response from a DeleteThemeWithResponse call
func ParseDeleteThemeResponse(rsp *http.Response) (*DeleteThemeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteThemeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetThemeResponse parses an HTTP response from a GetThemeWithResponse call
func ParseGetThemeResponse(rsp *http.Response) (*GetThemeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetThemeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ThemeEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ThemeEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateThemeResponse parses an HTTP response from a UpdateThemeWithResponse call
func ParseUpdateThemeResponse(rsp *http.Response) (*UpdateThemeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateThemeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ThemeEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ThemeEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListUsersResponse parses an HTTP response from a ListUsersWithResponse call
func ParseListUsersResponse(rsp *http.Response) (*ListUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateUserResponse parses an HTTP response from a CreateUserWithResponse call
func ParseCreateUserResponse(rsp *http.Response) (*CreateUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteUserResponse parses an HTTP response from a DeleteUserWithResponse call
func ParseDeleteUserResponse(rsp *http.Response) (*DeleteUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFindUserResponse parses an HTTP response from a FindUserWithResponse call
func ParseFindUserResponse(rsp *http.Response) (*FindUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateUserResponse parses an HTTP response from a UpdateUserWithResponse call
func ParseUpdateUserResponse(rsp *http.Response) (*UpdateUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseList14Response parses an HTTP response from a List14WithResponse call
func ParseList14Response(rsp *http.Response) (*List14Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &List14Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Audit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGet11Response parses an HTTP response from a Get11WithResponse call
func ParseGet11Response(rsp *http.Response) (*Get11Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get11Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Audit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDelete5Response parses an HTTP response from a Delete5WithResponse call
func ParseDelete5Response(rsp *http.Response) (*Delete5Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Delete5Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseList10Response parses an HTTP response from a List10WithResponse call
func ParseList10Response(rsp *http.Response) (*List10Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &List10Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScopeApprovalEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRevokeResponse parses an HTTP response from a RevokeWithResponse call
func ParseRevokeResponse(rsp *http.Response) (*RevokeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RevokeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGet9Response parses an HTTP response from a Get9WithResponse call
func ParseGet9Response(rsp *http.Response) (*Get9Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get9Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScopeApprovalEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseList13Response parses an HTTP response from a List13WithResponse call
func ParseList13Response(rsp *http.Response) (*List13Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &List13Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Credential
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRevoke2Response parses an HTTP response from a Revoke2WithResponse call
func ParseRevoke2Response(rsp *http.Response) (*Revoke2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Revoke2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGet10Response parses an HTTP response from a Get10WithResponse call
func ParseGet10Response(rsp *http.Response) (*Get10Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get10Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Credential
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseList9Response parses an HTTP response from a List9WithResponse call
func ParseList9Response(rsp *http.Response) (*List9Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &List9Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDelete4Response parses an HTTP response from a Delete4WithResponse call
func ParseDelete4Response(rsp *http.Response) (*Delete4Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Delete4Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseList12Response parses an HTTP response from a List12WithResponse call
func ParseList12Response(rsp *http.Response) (*List12Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &List12Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EnrolledFactorEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDelete6Response parses an HTTP response from a Delete6WithResponse call
func ParseDelete6Response(rsp *http.Response) (*Delete6Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Delete6Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseLockUserResponse parses an HTTP response from a LockUserWithResponse call
func ParseLockUserResponse(rsp *http.Response) (*LockUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LockUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseResetPasswordResponse parses an HTTP response from a ResetPasswordWithResponse call
func ParseResetPasswordResponse(rsp *http.Response) (*ResetPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResetPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseList11Response parses an HTTP response from a List11WithResponse call
func ParseList11Response(rsp *http.Response) (*List11Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &List11Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Role
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAssignResponse parses an HTTP response from a AssignWithResponse call
func ParseAssignResponse(rsp *http.Response) (*AssignResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AssignResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRevoke1Response parses an HTTP response from a Revoke1WithResponse call
func ParseRevoke1Response(rsp *http.Response) (*Revoke1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Revoke1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSendRegistrationConfirmationResponse parses an HTTP response from a SendRegistrationConfirmationWithResponse call
func ParseSendRegistrationConfirmationResponse(rsp *http.Response) (*SendRegistrationConfirmationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SendRegistrationConfirmationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateUserStatusResponse parses an HTTP response from a UpdateUserStatusWithResponse call
func ParseUpdateUserStatusResponse(rsp *http.Response) (*UpdateUserStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseUnlockUserResponse parses an HTTP response from a UnlockUserWithResponse call
func ParseUnlockUserResponse(rsp *http.Response) (*UnlockUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnlockUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateUsernameResponse parses an HTTP response from a UpdateUsernameWithResponse call
func ParseUpdateUsernameResponse(rsp *http.Response) (*UpdateUsernameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUsernameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePermissionsResponse parses an HTTP response from a PermissionsWithResponse call
func ParsePermissionsResponse(rsp *http.Response) (*PermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGet7Response parses an HTTP response from a Get7WithResponse call
func ParseGet7Response(rsp *http.Response) (*Get7Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get7Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreate4Response parses an HTTP response from a Create4WithResponse call
func ParseCreate4Response(rsp *http.Response) (*Create4Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Create4Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDelete3Response parses an HTTP response from a Delete3WithResponse call
func ParseDelete3Response(rsp *http.Response) (*Delete3Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Delete3Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdate3Response parses an HTTP response from a Update3WithResponse call
func ParseUpdate3Response(rsp *http.Response) (*Update3Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Update3Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Form
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseList3Response parses an HTTP response from a List3WithResponse call
func ParseList3Response(rsp *http.Response) (*List3Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &List3Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreate2Response parses an HTTP response from a Create2WithResponse call
func ParseCreate2Response(rsp *http.Response) (*Create2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Create2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteOrganizationGroupResponse parses an HTTP response from a DeleteOrganizationGroupWithResponse call
func ParseDeleteOrganizationGroupResponse(rsp *http.Response) (*DeleteOrganizationGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrganizationGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOrganizationGroupResponse parses an HTTP response from a GetOrganizationGroupWithResponse call
func ParseGetOrganizationGroupResponse(rsp *http.Response) (*GetOrganizationGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateOrganizationGroupResponse parses an HTTP response from a UpdateOrganizationGroupWithResponse call
func ParseUpdateOrganizationGroupResponse(rsp *http.Response) (*UpdateOrganizationGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateOrganizationGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseList4Response parses an HTTP response from a List4WithResponse call
func ParseList4Response(rsp *http.Response) (*List4Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &List4Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRemoveMember1Response parses an HTTP response from a RemoveMember1WithResponse call
func ParseRemoveMember1Response(rsp *http.Response) (*RemoveMember1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveMember1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAddMemberResponse parses an HTTP response from a AddMemberWithResponse call
func ParseAddMemberResponse(rsp *http.Response) (*AddMemberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseList5Response parses an HTTP response from a List5WithResponse call
func ParseList5Response(rsp *http.Response) (*List5Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &List5Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FilteredIdentityProviderInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreate3Response parses an HTTP response from a Create3WithResponse call
func ParseCreate3Response(rsp *http.Response) (*Create3Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Create3Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDelete2Response parses an HTTP response from a Delete2WithResponse call
func ParseDelete2Response(rsp *http.Response) (*Delete2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Delete2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGet4Response parses an HTTP response from a Get4WithResponse call
func ParseGet4Response(rsp *http.Response) (*Get4Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get4Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IdentityProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdate2Response parses an HTTP response from a Update2WithResponse call
func ParseUpdate2Response(rsp *http.Response) (*Update2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Update2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest IdentityProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetMembersResponse parses an HTTP response from a GetMembersWithResponse call
func ParseGetMembersResponse(rsp *http.Response) (*GetMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MembershipListItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddOrUpdateMemberResponse parses an HTTP response from a AddOrUpdateMemberWithResponse call
func ParseAddOrUpdateMemberResponse(rsp *http.Response) (*AddOrUpdateMemberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddOrUpdateMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRemoveMemberResponse parses an HTTP response from a RemoveMemberWithResponse call
func ParseRemoveMemberResponse(rsp *http.Response) (*RemoveMemberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseList2Response parses an HTTP response from a List2WithResponse call
func ParseList2Response(rsp *http.Response) (*List2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &List2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreate1Response parses an HTTP response from a Create1WithResponse call
func ParseCreate1Response(rsp *http.Response) (*Create1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Create1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDelete1Response parses an HTTP response from a Delete1WithResponse call
func ParseDelete1Response(rsp *http.Response) (*Delete1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Delete1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGet3Response parses an HTTP response from a Get3WithResponse call
func ParseGet3Response(rsp *http.Response) (*Get3Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get3Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoleEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdate1Response parses an HTTP response from a Update1WithResponse call
func ParseUpdate1Response(rsp *http.Response) (*Update1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Update1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RoleEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGet6Response parses an HTTP response from a Get6WithResponse call
func ParseGet6Response(rsp *http.Response) (*Get6Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get6Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Domain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchResponse parses an HTTP response from a PatchWithResponse call
func ParsePatchResponse(rsp *http.Response) (*PatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Domain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseList1Response parses an HTTP response from a List1WithResponse call
func ParseList1Response(rsp *http.Response) (*List1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &List1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Domain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateResponse parses an HTTP response from a CreateWithResponse call
func ParseCreateResponse(rsp *http.Response) (*CreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteResponse parses an HTTP response from a DeleteWithResponse call
func ParseDeleteResponse(rsp *http.Response) (*DeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGet2Response parses an HTTP response from a Get2WithResponse call
func ParseGet2Response(rsp *http.Response) (*Get2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateResponse parses an HTTP response from a UpdateWithResponse call
func ParseUpdateResponse(rsp *http.Response) (*UpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListOrganisationUsersResponse parses an HTTP response from a ListOrganisationUsersWithResponse call
func ParseListOrganisationUsersResponse(rsp *http.Response) (*ListOrganisationUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOrganisationUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Page
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateOrganisationUserResponse parses an HTTP response from a CreateOrganisationUserWithResponse call
func ParseCreateOrganisationUserResponse(rsp *http.Response) (*CreateOrganisationUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrganisationUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteOrganizationUserResponse parses an HTTP response from a DeleteOrganizationUserWithResponse call
func ParseDeleteOrganizationUserResponse(rsp *http.Response) (*DeleteOrganizationUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrganizationUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGet5Response parses an HTTP response from a Get5WithResponse call
func ParseGet5Response(rsp *http.Response) (*Get5Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get5Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateOrganizationUserResponse parses an HTTP response from a UpdateOrganizationUserWithResponse call
func ParseUpdateOrganizationUserResponse(rsp *http.Response) (*UpdateOrganizationUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateOrganizationUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseResetOrganizationUserPasswordResponse parses an HTTP response from a ResetOrganizationUserPasswordWithResponse call
func ParseResetOrganizationUserPasswordResponse(rsp *http.Response) (*ResetOrganizationUserPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResetOrganizationUserPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateOrganizationUserStatusResponse parses an HTTP response from a UpdateOrganizationUserStatusWithResponse call
func ParseUpdateOrganizationUserStatusResponse(rsp *http.Response) (*UpdateOrganizationUserStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateOrganizationUserStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseUpdateOrganisationUsernameResponse parses an HTTP response from a UpdateOrganisationUsernameWithResponse call
func ParseUpdateOrganisationUsernameResponse(rsp *http.Response) (*UpdateOrganisationUsernameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateOrganisationUsernameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseList25Response parses an HTTP response from a List25WithResponse call
func ParseList25Response(rsp *http.Response) (*List25Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &List25Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAlertServiceStatusResponse parses an HTTP response from a GetAlertServiceStatusWithResponse call
func ParseGetAlertServiceStatusResponse(rsp *http.Response) (*GetAlertServiceStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAlertServiceStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlertServiceStatusEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseList37Response parses an HTTP response from a List37WithResponse call
func ParseList37Response(rsp *http.Response) (*List37Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &List37Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSpelGrammarResponse parses an HTTP response from a GetSpelGrammarWithResponse call
func ParseGetSpelGrammarResponse(rsp *http.Response) (*GetSpelGrammarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSpelGrammarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGet38Response parses an HTTP response from a Get38WithResponse call
func ParseGet38Response(rsp *http.Response) (*Get38Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get38Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InstallationEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseList35Response parses an HTTP response from a List35WithResponse call
func ParseList35Response(rsp *http.Response) (*List35Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &List35Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGet35Response parses an HTTP response from a Get35WithResponse call
func ParseGet35Response(rsp *http.Response) (*Get35Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get35Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSchema9Response parses an HTTP response from a GetSchema9WithResponse call
func ParseGetSchema9Response(rsp *http.Response) (*GetSchema9Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSchema9Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseList34Response parses an HTTP response from a List34WithResponse call
func ParseList34Response(rsp *http.Response) (*List34Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &List34Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGet34Response parses an HTTP response from a Get34WithResponse call
func ParseGet34Response(rsp *http.Response) (*Get34Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get34Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSchema8Response parses an HTTP response from a GetSchema8WithResponse call
func ParseGetSchema8Response(rsp *http.Response) (*GetSchema8Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSchema8Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseList27Response parses an HTTP response from a List27WithResponse call
func ParseList27Response(rsp *http.Response) (*List27Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &List27Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGet27Response parses an HTTP response from a Get27WithResponse call
func ParseGet27Response(rsp *http.Response) (*Get27Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get27Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSchema1Response parses an HTTP response from a GetSchema1WithResponse call
func ParseGetSchema1Response(rsp *http.Response) (*GetSchema1Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSchema1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseList36Response parses an HTTP response from a List36WithResponse call
func ParseList36Response(rsp *http.Response) (*List36Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &List36Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGet36Response parses an HTTP response from a Get36WithResponse call
func ParseGet36Response(rsp *http.Response) (*Get36Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get36Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSchema10Response parses an HTTP response from a GetSchema10WithResponse call
func ParseGetSchema10Response(rsp *http.Response) (*GetSchema10Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSchema10Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseList28Response parses an HTTP response from a List28WithResponse call
func ParseList28Response(rsp *http.Response) (*List28Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &List28Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGet28Response parses an HTTP response from a Get28WithResponse call
func ParseGet28Response(rsp *http.Response) (*Get28Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get28Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSchema2Response parses an HTTP response from a GetSchema2WithResponse call
func ParseGetSchema2Response(rsp *http.Response) (*GetSchema2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSchema2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseList31Response parses an HTTP response from a List31WithResponse call
func ParseList31Response(rsp *http.Response) (*List31Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &List31Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGet31Response parses an HTTP response from a Get31WithResponse call
func ParseGet31Response(rsp *http.Response) (*Get31Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get31Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSchema5Response parses an HTTP response from a GetSchema5WithResponse call
func ParseGetSchema5Response(rsp *http.Response) (*GetSchema5Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSchema5Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseList26Response parses an HTTP response from a List26WithResponse call
func ParseList26Response(rsp *http.Response) (*List26Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &List26Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGet26Response parses an HTTP response from a Get26WithResponse call
func ParseGet26Response(rsp *http.Response) (*Get26Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get26Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSchemaResponse parses an HTTP response from a GetSchemaWithResponse call
func ParseGetSchemaResponse(rsp *http.Response) (*GetSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseList33Response parses an HTTP response from a List33WithResponse call
func ParseList33Response(rsp *http.Response) (*List33Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &List33Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []NotifierPlugin
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGet33Response parses an HTTP response from a Get33WithResponse call
func ParseGet33Response(rsp *http.Response) (*Get33Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get33Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NotifierPlugin
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetSchema7Response parses an HTTP response from a GetSchema7WithResponse call
func ParseGetSchema7Response(rsp *http.Response) (*GetSchema7Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSchema7Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseList30Response parses an HTTP response from a List30WithResponse call
func ParseList30Response(rsp *http.Response) (*List30Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &List30Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGet30Response parses an HTTP response from a Get30WithResponse call
func ParseGet30Response(rsp *http.Response) (*Get30Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get30Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDocumentationResponse parses an HTTP response from a GetDocumentationWithResponse call
func ParseGetDocumentationResponse(rsp *http.Response) (*GetDocumentationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDocumentationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSchema4Response parses an HTTP response from a GetSchema4WithResponse call
func ParseGetSchema4Response(rsp *http.Response) (*GetSchema4Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSchema4Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseList29Response parses an HTTP response from a List29WithResponse call
func ParseList29Response(rsp *http.Response) (*List29Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &List29Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGet29Response parses an HTTP response from a Get29WithResponse call
func ParseGet29Response(rsp *http.Response) (*Get29Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get29Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSchema3Response parses an HTTP response from a GetSchema3WithResponse call
func ParseGetSchema3Response(rsp *http.Response) (*GetSchema3Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSchema3Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseList32Response parses an HTTP response from a List32WithResponse call
func ParseList32Response(rsp *http.Response) (*List32Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &List32Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGet32Response parses an HTTP response from a Get32WithResponse call
func ParseGet32Response(rsp *http.Response) (*Get32Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get32Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSchema6Response parses an HTTP response from a GetSchema6WithResponse call
func ParseGetSchema6Response(rsp *http.Response) (*GetSchema6Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSchema6Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGet37Response parses an HTTP response from a Get37WithResponse call
func ParseGet37Response(rsp *http.Response) (*Get37Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Get37Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Role
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetResponse parses an HTTP response from a GetWithResponse call
func ParseGetResponse(rsp *http.Response) (*GetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSubscribeNewsletterResponse parses an HTTP response from a SubscribeNewsletterWithResponse call
func ParseSubscribeNewsletterResponse(rsp *http.Response) (*SubscribeNewsletterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubscribeNewsletterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTaglinesResponse parses an HTTP response from a GetTaglinesWithResponse call
func ParseGetTaglinesResponse(rsp *http.Response) (*GetTaglinesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaglinesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListNotificationsResponse parses an HTTP response from a ListNotificationsWithResponse call
func ParseListNotificationsResponse(rsp *http.Response) (*ListNotificationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListNotificationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserNotificationContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseMarkAsReadResponse parses an HTTP response from a MarkAsReadWithResponse call
func ParseMarkAsReadResponse(rsp *http.Response) (*MarkAsReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MarkAsReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
