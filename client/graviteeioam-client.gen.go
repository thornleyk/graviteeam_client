// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	Basic_authScopes    = "basic_auth.Scopes"
	Gravitee_authScopes = "gravitee_auth.Scopes"
)

// Defines values for AccessPolicyType.
const (
	GROOVY AccessPolicyType = "GROOVY"
)

// Defines values for AlertNotifierReferenceType.
const (
	AlertNotifierReferenceTypeAPPLICATION  AlertNotifierReferenceType = "APPLICATION"
	AlertNotifierReferenceTypeDOMAIN       AlertNotifierReferenceType = "DOMAIN"
	AlertNotifierReferenceTypeENVIRONMENT  AlertNotifierReferenceType = "ENVIRONMENT"
	AlertNotifierReferenceTypeORGANIZATION AlertNotifierReferenceType = "ORGANIZATION"
	AlertNotifierReferenceTypePLATFORM     AlertNotifierReferenceType = "PLATFORM"
)

// Defines values for AlertTriggerReferenceType.
const (
	AlertTriggerReferenceTypeAPPLICATION  AlertTriggerReferenceType = "APPLICATION"
	AlertTriggerReferenceTypeDOMAIN       AlertTriggerReferenceType = "DOMAIN"
	AlertTriggerReferenceTypeENVIRONMENT  AlertTriggerReferenceType = "ENVIRONMENT"
	AlertTriggerReferenceTypeORGANIZATION AlertTriggerReferenceType = "ORGANIZATION"
	AlertTriggerReferenceTypePLATFORM     AlertTriggerReferenceType = "PLATFORM"
)

// Defines values for AlertTriggerType.
const (
	AlertTriggerTypeRISKASSESSMENT       AlertTriggerType = "RISK_ASSESSMENT"
	AlertTriggerTypeTOOMANYLOGINFAILURES AlertTriggerType = "TOO_MANY_LOGIN_FAILURES"
)

// Defines values for ApplicationType.
const (
	ApplicationTypeBROWSER        ApplicationType = "BROWSER"
	ApplicationTypeNATIVE         ApplicationType = "NATIVE"
	ApplicationTypeRESOURCESERVER ApplicationType = "RESOURCE_SERVER"
	ApplicationTypeSERVICE        ApplicationType = "SERVICE"
	ApplicationTypeWEB            ApplicationType = "WEB"
)

// Defines values for AuditReferenceType.
const (
	AuditReferenceTypeAPPLICATION  AuditReferenceType = "APPLICATION"
	AuditReferenceTypeDOMAIN       AuditReferenceType = "DOMAIN"
	AuditReferenceTypeENVIRONMENT  AuditReferenceType = "ENVIRONMENT"
	AuditReferenceTypeORGANIZATION AuditReferenceType = "ORGANIZATION"
	AuditReferenceTypePLATFORM     AuditReferenceType = "PLATFORM"
)

// Defines values for AuditEntityReferenceType.
const (
	AuditEntityReferenceTypeAPPLICATION  AuditEntityReferenceType = "APPLICATION"
	AuditEntityReferenceTypeDOMAIN       AuditEntityReferenceType = "DOMAIN"
	AuditEntityReferenceTypeENVIRONMENT  AuditEntityReferenceType = "ENVIRONMENT"
	AuditEntityReferenceTypeORGANIZATION AuditEntityReferenceType = "ORGANIZATION"
	AuditEntityReferenceTypePLATFORM     AuditEntityReferenceType = "PLATFORM"
)

// Defines values for AuthenticationDeviceNotifierReferenceType.
const (
	AuthenticationDeviceNotifierReferenceTypeAPPLICATION  AuthenticationDeviceNotifierReferenceType = "APPLICATION"
	AuthenticationDeviceNotifierReferenceTypeDOMAIN       AuthenticationDeviceNotifierReferenceType = "DOMAIN"
	AuthenticationDeviceNotifierReferenceTypeENVIRONMENT  AuthenticationDeviceNotifierReferenceType = "ENVIRONMENT"
	AuthenticationDeviceNotifierReferenceTypeORGANIZATION AuthenticationDeviceNotifierReferenceType = "ORGANIZATION"
	AuthenticationDeviceNotifierReferenceTypePLATFORM     AuthenticationDeviceNotifierReferenceType = "PLATFORM"
)

// Defines values for BotDetectionReferenceType.
const (
	BotDetectionReferenceTypeAPPLICATION  BotDetectionReferenceType = "APPLICATION"
	BotDetectionReferenceTypeDOMAIN       BotDetectionReferenceType = "DOMAIN"
	BotDetectionReferenceTypeENVIRONMENT  BotDetectionReferenceType = "ENVIRONMENT"
	BotDetectionReferenceTypeORGANIZATION BotDetectionReferenceType = "ORGANIZATION"
	BotDetectionReferenceTypePLATFORM     BotDetectionReferenceType = "PLATFORM"
)

// Defines values for CertificateEntityStatus.
const (
	EXPIRED    CertificateEntityStatus = "EXPIRED"
	RENEWED    CertificateEntityStatus = "RENEWED"
	VALID      CertificateEntityStatus = "VALID"
	WILLEXPIRE CertificateEntityStatus = "WILL_EXPIRE"
)

// Defines values for CredentialReferenceType.
const (
	CredentialReferenceTypeAPPLICATION  CredentialReferenceType = "APPLICATION"
	CredentialReferenceTypeDOMAIN       CredentialReferenceType = "DOMAIN"
	CredentialReferenceTypeENVIRONMENT  CredentialReferenceType = "ENVIRONMENT"
	CredentialReferenceTypeORGANIZATION CredentialReferenceType = "ORGANIZATION"
	CredentialReferenceTypePLATFORM     CredentialReferenceType = "PLATFORM"
)

// Defines values for DomainReferenceType.
const (
	DomainReferenceTypeAPPLICATION  DomainReferenceType = "APPLICATION"
	DomainReferenceTypeDOMAIN       DomainReferenceType = "DOMAIN"
	DomainReferenceTypeENVIRONMENT  DomainReferenceType = "ENVIRONMENT"
	DomainReferenceTypeORGANIZATION DomainReferenceType = "ORGANIZATION"
	DomainReferenceTypePLATFORM     DomainReferenceType = "PLATFORM"
)

// Defines values for EmailReferenceType.
const (
	EmailReferenceTypeAPPLICATION  EmailReferenceType = "APPLICATION"
	EmailReferenceTypeDOMAIN       EmailReferenceType = "DOMAIN"
	EmailReferenceTypeENVIRONMENT  EmailReferenceType = "ENVIRONMENT"
	EmailReferenceTypeORGANIZATION EmailReferenceType = "ORGANIZATION"
	EmailReferenceTypePLATFORM     EmailReferenceType = "PLATFORM"
)

// Defines values for EnrolledFactorStatus.
const (
	ACTIVATED         EnrolledFactorStatus = "ACTIVATED"
	NULL              EnrolledFactorStatus = "NULL"
	PENDINGACTIVATION EnrolledFactorStatus = "PENDING_ACTIVATION"
	REVOKED           EnrolledFactorStatus = "REVOKED"
)

// Defines values for EnrolledFactorChannelType.
const (
	EnrolledFactorChannelTypeCALL  EnrolledFactorChannelType = "CALL"
	EnrolledFactorChannelTypeEMAIL EnrolledFactorChannelType = "EMAIL"
	EnrolledFactorChannelTypeHTTP  EnrolledFactorChannelType = "HTTP"
	EnrolledFactorChannelTypeSMS   EnrolledFactorChannelType = "SMS"
)

// Defines values for FactorFactorType.
const (
	FactorFactorTypeCALL         FactorFactorType = "CALL"
	FactorFactorTypeEMAIL        FactorFactorType = "EMAIL"
	FactorFactorTypeFIDO2        FactorFactorType = "FIDO2"
	FactorFactorTypeHTTP         FactorFactorType = "HTTP"
	FactorFactorTypeOTP          FactorFactorType = "OTP"
	FactorFactorTypeRECOVERYCODE FactorFactorType = "RECOVERY_CODE"
	FactorFactorTypeSMS          FactorFactorType = "SMS"
)

// Defines values for FlowType.
const (
	FlowTypeCONSENT                  FlowType = "CONSENT"
	FlowTypeLOGIN                    FlowType = "LOGIN"
	FlowTypeLOGINIDENTIFIER          FlowType = "LOGIN_IDENTIFIER"
	FlowTypeREGISTER                 FlowType = "REGISTER"
	FlowTypeREGISTRATIONCONFIRMATION FlowType = "REGISTRATION_CONFIRMATION"
	FlowTypeRESETPASSWORD            FlowType = "RESET_PASSWORD"
	FlowTypeROOT                     FlowType = "ROOT"
)

// Defines values for FlowEntityType.
const (
	FlowEntityTypeCONSENT                  FlowEntityType = "CONSENT"
	FlowEntityTypeLOGIN                    FlowEntityType = "LOGIN"
	FlowEntityTypeLOGINIDENTIFIER          FlowEntityType = "LOGIN_IDENTIFIER"
	FlowEntityTypeREGISTER                 FlowEntityType = "REGISTER"
	FlowEntityTypeREGISTRATIONCONFIRMATION FlowEntityType = "REGISTRATION_CONFIRMATION"
	FlowEntityTypeRESETPASSWORD            FlowEntityType = "RESET_PASSWORD"
	FlowEntityTypeROOT                     FlowEntityType = "ROOT"
)

// Defines values for FormReferenceType.
const (
	FormReferenceTypeAPPLICATION  FormReferenceType = "APPLICATION"
	FormReferenceTypeDOMAIN       FormReferenceType = "DOMAIN"
	FormReferenceTypeENVIRONMENT  FormReferenceType = "ENVIRONMENT"
	FormReferenceTypeORGANIZATION FormReferenceType = "ORGANIZATION"
	FormReferenceTypePLATFORM     FormReferenceType = "PLATFORM"
)

// Defines values for GroupReferenceType.
const (
	GroupReferenceTypeAPPLICATION  GroupReferenceType = "APPLICATION"
	GroupReferenceTypeDOMAIN       GroupReferenceType = "DOMAIN"
	GroupReferenceTypeENVIRONMENT  GroupReferenceType = "ENVIRONMENT"
	GroupReferenceTypeORGANIZATION GroupReferenceType = "ORGANIZATION"
	GroupReferenceTypePLATFORM     GroupReferenceType = "PLATFORM"
)

// Defines values for I18nDictionaryReferenceType.
const (
	I18nDictionaryReferenceTypeAPPLICATION  I18nDictionaryReferenceType = "APPLICATION"
	I18nDictionaryReferenceTypeDOMAIN       I18nDictionaryReferenceType = "DOMAIN"
	I18nDictionaryReferenceTypeENVIRONMENT  I18nDictionaryReferenceType = "ENVIRONMENT"
	I18nDictionaryReferenceTypeORGANIZATION I18nDictionaryReferenceType = "ORGANIZATION"
	I18nDictionaryReferenceTypePLATFORM     I18nDictionaryReferenceType = "PLATFORM"
)

// Defines values for IdentityProviderReferenceType.
const (
	IdentityProviderReferenceTypeAPPLICATION  IdentityProviderReferenceType = "APPLICATION"
	IdentityProviderReferenceTypeDOMAIN       IdentityProviderReferenceType = "DOMAIN"
	IdentityProviderReferenceTypeENVIRONMENT  IdentityProviderReferenceType = "ENVIRONMENT"
	IdentityProviderReferenceTypeORGANIZATION IdentityProviderReferenceType = "ORGANIZATION"
	IdentityProviderReferenceTypePLATFORM     IdentityProviderReferenceType = "PLATFORM"
)

// Defines values for MembershipMemberType.
const (
	MembershipMemberTypeGROUP MembershipMemberType = "GROUP"
	MembershipMemberTypeUSER  MembershipMemberType = "USER"
)

// Defines values for MembershipReferenceType.
const (
	MembershipReferenceTypeAPPLICATION  MembershipReferenceType = "APPLICATION"
	MembershipReferenceTypeDOMAIN       MembershipReferenceType = "DOMAIN"
	MembershipReferenceTypeENVIRONMENT  MembershipReferenceType = "ENVIRONMENT"
	MembershipReferenceTypeORGANIZATION MembershipReferenceType = "ORGANIZATION"
	MembershipReferenceTypePLATFORM     MembershipReferenceType = "PLATFORM"
)

// Defines values for NewApplicationType.
const (
	NewApplicationTypeBROWSER        NewApplicationType = "BROWSER"
	NewApplicationTypeNATIVE         NewApplicationType = "NATIVE"
	NewApplicationTypeRESOURCESERVER NewApplicationType = "RESOURCE_SERVER"
	NewApplicationTypeSERVICE        NewApplicationType = "SERVICE"
	NewApplicationTypeWEB            NewApplicationType = "WEB"
)

// Defines values for NewEmailTemplate.
const (
	NewEmailTemplateBLOCKEDACCOUNT           NewEmailTemplate = "BLOCKED_ACCOUNT"
	NewEmailTemplateCERTIFICATEEXPIRATION    NewEmailTemplate = "CERTIFICATE_EXPIRATION"
	NewEmailTemplateCOMPLETEPROFILE          NewEmailTemplate = "COMPLETE_PROFILE"
	NewEmailTemplateERROR                    NewEmailTemplate = "ERROR"
	NewEmailTemplateFORGOTPASSWORD           NewEmailTemplate = "FORGOT_PASSWORD"
	NewEmailTemplateIDENTIFIERFIRSTLOGIN     NewEmailTemplate = "IDENTIFIER_FIRST_LOGIN"
	NewEmailTemplateLOGIN                    NewEmailTemplate = "LOGIN"
	NewEmailTemplateMFACHALLENGE             NewEmailTemplate = "MFA_CHALLENGE"
	NewEmailTemplateMFACHALLENGEALTERNATIVES NewEmailTemplate = "MFA_CHALLENGE_ALTERNATIVES"
	NewEmailTemplateMFAENROLL                NewEmailTemplate = "MFA_ENROLL"
	NewEmailTemplateMFARECOVERYCODE          NewEmailTemplate = "MFA_RECOVERY_CODE"
	NewEmailTemplateOAUTH2USERCONSENT        NewEmailTemplate = "OAUTH2_USER_CONSENT"
	NewEmailTemplateREGISTRATION             NewEmailTemplate = "REGISTRATION"
	NewEmailTemplateREGISTRATIONCONFIRMATION NewEmailTemplate = "REGISTRATION_CONFIRMATION"
	NewEmailTemplateRESETPASSWORD            NewEmailTemplate = "RESET_PASSWORD"
	NewEmailTemplateVERIFYATTEMPT            NewEmailTemplate = "VERIFY_ATTEMPT"
	NewEmailTemplateWEBAUTHNLOGIN            NewEmailTemplate = "WEBAUTHN_LOGIN"
	NewEmailTemplateWEBAUTHNREGISTER         NewEmailTemplate = "WEBAUTHN_REGISTER"
)

// Defines values for NewFormTemplate.
const (
	NewFormTemplateBLOCKEDACCOUNT           NewFormTemplate = "BLOCKED_ACCOUNT"
	NewFormTemplateCERTIFICATEEXPIRATION    NewFormTemplate = "CERTIFICATE_EXPIRATION"
	NewFormTemplateCOMPLETEPROFILE          NewFormTemplate = "COMPLETE_PROFILE"
	NewFormTemplateERROR                    NewFormTemplate = "ERROR"
	NewFormTemplateFORGOTPASSWORD           NewFormTemplate = "FORGOT_PASSWORD"
	NewFormTemplateIDENTIFIERFIRSTLOGIN     NewFormTemplate = "IDENTIFIER_FIRST_LOGIN"
	NewFormTemplateLOGIN                    NewFormTemplate = "LOGIN"
	NewFormTemplateMFACHALLENGE             NewFormTemplate = "MFA_CHALLENGE"
	NewFormTemplateMFACHALLENGEALTERNATIVES NewFormTemplate = "MFA_CHALLENGE_ALTERNATIVES"
	NewFormTemplateMFAENROLL                NewFormTemplate = "MFA_ENROLL"
	NewFormTemplateMFARECOVERYCODE          NewFormTemplate = "MFA_RECOVERY_CODE"
	NewFormTemplateOAUTH2USERCONSENT        NewFormTemplate = "OAUTH2_USER_CONSENT"
	NewFormTemplateREGISTRATION             NewFormTemplate = "REGISTRATION"
	NewFormTemplateREGISTRATIONCONFIRMATION NewFormTemplate = "REGISTRATION_CONFIRMATION"
	NewFormTemplateRESETPASSWORD            NewFormTemplate = "RESET_PASSWORD"
	NewFormTemplateVERIFYATTEMPT            NewFormTemplate = "VERIFY_ATTEMPT"
	NewFormTemplateWEBAUTHNLOGIN            NewFormTemplate = "WEBAUTHN_LOGIN"
	NewFormTemplateWEBAUTHNREGISTER         NewFormTemplate = "WEBAUTHN_REGISTER"
)

// Defines values for NewMembershipMemberType.
const (
	NewMembershipMemberTypeGROUP NewMembershipMemberType = "GROUP"
	NewMembershipMemberTypeUSER  NewMembershipMemberType = "USER"
)

// Defines values for NewRoleAssignableType.
const (
	NewRoleAssignableTypeAPPLICATION  NewRoleAssignableType = "APPLICATION"
	NewRoleAssignableTypeDOMAIN       NewRoleAssignableType = "DOMAIN"
	NewRoleAssignableTypeENVIRONMENT  NewRoleAssignableType = "ENVIRONMENT"
	NewRoleAssignableTypeORGANIZATION NewRoleAssignableType = "ORGANIZATION"
	NewRoleAssignableTypePLATFORM     NewRoleAssignableType = "PLATFORM"
)

// Defines values for OrganizationReferenceType.
const (
	OrganizationReferenceTypeAPPLICATION  OrganizationReferenceType = "APPLICATION"
	OrganizationReferenceTypeDOMAIN       OrganizationReferenceType = "DOMAIN"
	OrganizationReferenceTypeENVIRONMENT  OrganizationReferenceType = "ENVIRONMENT"
	OrganizationReferenceTypeORGANIZATION OrganizationReferenceType = "ORGANIZATION"
	OrganizationReferenceTypePLATFORM     OrganizationReferenceType = "PLATFORM"
)

// Defines values for PatchAlertTriggerType.
const (
	PatchAlertTriggerTypeRISKASSESSMENT       PatchAlertTriggerType = "RISK_ASSESSMENT"
	PatchAlertTriggerTypeTOOMANYLOGINFAILURES PatchAlertTriggerType = "TOO_MANY_LOGIN_FAILURES"
)

// Defines values for PatchApplicationRequiredPermissions.
const (
	PatchApplicationRequiredPermissionsAPPLICATION                  PatchApplicationRequiredPermissions = "APPLICATION"
	PatchApplicationRequiredPermissionsAPPLICATIONANALYTICS         PatchApplicationRequiredPermissions = "APPLICATION_ANALYTICS"
	PatchApplicationRequiredPermissionsAPPLICATIONCERTIFICATE       PatchApplicationRequiredPermissions = "APPLICATION_CERTIFICATE"
	PatchApplicationRequiredPermissionsAPPLICATIONEMAILTEMPLATE     PatchApplicationRequiredPermissions = "APPLICATION_EMAIL_TEMPLATE"
	PatchApplicationRequiredPermissionsAPPLICATIONFACTOR            PatchApplicationRequiredPermissions = "APPLICATION_FACTOR"
	PatchApplicationRequiredPermissionsAPPLICATIONFLOW              PatchApplicationRequiredPermissions = "APPLICATION_FLOW"
	PatchApplicationRequiredPermissionsAPPLICATIONFORM              PatchApplicationRequiredPermissions = "APPLICATION_FORM"
	PatchApplicationRequiredPermissionsAPPLICATIONIDENTITYPROVIDER  PatchApplicationRequiredPermissions = "APPLICATION_IDENTITY_PROVIDER"
	PatchApplicationRequiredPermissionsAPPLICATIONMEMBER            PatchApplicationRequiredPermissions = "APPLICATION_MEMBER"
	PatchApplicationRequiredPermissionsAPPLICATIONOPENID            PatchApplicationRequiredPermissions = "APPLICATION_OPENID"
	PatchApplicationRequiredPermissionsAPPLICATIONRESOURCE          PatchApplicationRequiredPermissions = "APPLICATION_RESOURCE"
	PatchApplicationRequiredPermissionsAPPLICATIONSAML              PatchApplicationRequiredPermissions = "APPLICATION_SAML"
	PatchApplicationRequiredPermissionsAPPLICATIONSETTINGS          PatchApplicationRequiredPermissions = "APPLICATION_SETTINGS"
	PatchApplicationRequiredPermissionsDOMAIN                       PatchApplicationRequiredPermissions = "DOMAIN"
	PatchApplicationRequiredPermissionsDOMAINALERT                  PatchApplicationRequiredPermissions = "DOMAIN_ALERT"
	PatchApplicationRequiredPermissionsDOMAINALERTNOTIFIER          PatchApplicationRequiredPermissions = "DOMAIN_ALERT_NOTIFIER"
	PatchApplicationRequiredPermissionsDOMAINANALYTICS              PatchApplicationRequiredPermissions = "DOMAIN_ANALYTICS"
	PatchApplicationRequiredPermissionsDOMAINAUDIT                  PatchApplicationRequiredPermissions = "DOMAIN_AUDIT"
	PatchApplicationRequiredPermissionsDOMAINAUTHDEVICENOTIFIER     PatchApplicationRequiredPermissions = "DOMAIN_AUTHDEVICE_NOTIFIER"
	PatchApplicationRequiredPermissionsDOMAINBOTDETECTION           PatchApplicationRequiredPermissions = "DOMAIN_BOT_DETECTION"
	PatchApplicationRequiredPermissionsDOMAINCERTIFICATE            PatchApplicationRequiredPermissions = "DOMAIN_CERTIFICATE"
	PatchApplicationRequiredPermissionsDOMAINDEVICEIDENTIFIER       PatchApplicationRequiredPermissions = "DOMAIN_DEVICE_IDENTIFIER"
	PatchApplicationRequiredPermissionsDOMAINEMAILTEMPLATE          PatchApplicationRequiredPermissions = "DOMAIN_EMAIL_TEMPLATE"
	PatchApplicationRequiredPermissionsDOMAINEXTENSIONGRANT         PatchApplicationRequiredPermissions = "DOMAIN_EXTENSION_GRANT"
	PatchApplicationRequiredPermissionsDOMAINEXTENSIONPOINT         PatchApplicationRequiredPermissions = "DOMAIN_EXTENSION_POINT"
	PatchApplicationRequiredPermissionsDOMAINFACTOR                 PatchApplicationRequiredPermissions = "DOMAIN_FACTOR"
	PatchApplicationRequiredPermissionsDOMAINFLOW                   PatchApplicationRequiredPermissions = "DOMAIN_FLOW"
	PatchApplicationRequiredPermissionsDOMAINFORM                   PatchApplicationRequiredPermissions = "DOMAIN_FORM"
	PatchApplicationRequiredPermissionsDOMAINGROUP                  PatchApplicationRequiredPermissions = "DOMAIN_GROUP"
	PatchApplicationRequiredPermissionsDOMAINI18NDICTIONARY         PatchApplicationRequiredPermissions = "DOMAIN_I18N_DICTIONARY"
	PatchApplicationRequiredPermissionsDOMAINIDENTITYPROVIDER       PatchApplicationRequiredPermissions = "DOMAIN_IDENTITY_PROVIDER"
	PatchApplicationRequiredPermissionsDOMAINMEMBER                 PatchApplicationRequiredPermissions = "DOMAIN_MEMBER"
	PatchApplicationRequiredPermissionsDOMAINOPENID                 PatchApplicationRequiredPermissions = "DOMAIN_OPENID"
	PatchApplicationRequiredPermissionsDOMAINREPORTER               PatchApplicationRequiredPermissions = "DOMAIN_REPORTER"
	PatchApplicationRequiredPermissionsDOMAINRESOURCE               PatchApplicationRequiredPermissions = "DOMAIN_RESOURCE"
	PatchApplicationRequiredPermissionsDOMAINROLE                   PatchApplicationRequiredPermissions = "DOMAIN_ROLE"
	PatchApplicationRequiredPermissionsDOMAINSAML                   PatchApplicationRequiredPermissions = "DOMAIN_SAML"
	PatchApplicationRequiredPermissionsDOMAINSCIM                   PatchApplicationRequiredPermissions = "DOMAIN_SCIM"
	PatchApplicationRequiredPermissionsDOMAINSCOPE                  PatchApplicationRequiredPermissions = "DOMAIN_SCOPE"
	PatchApplicationRequiredPermissionsDOMAINSETTINGS               PatchApplicationRequiredPermissions = "DOMAIN_SETTINGS"
	PatchApplicationRequiredPermissionsDOMAINTHEME                  PatchApplicationRequiredPermissions = "DOMAIN_THEME"
	PatchApplicationRequiredPermissionsDOMAINUMA                    PatchApplicationRequiredPermissions = "DOMAIN_UMA"
	PatchApplicationRequiredPermissionsDOMAINUMASCOPE               PatchApplicationRequiredPermissions = "DOMAIN_UMA_SCOPE"
	PatchApplicationRequiredPermissionsDOMAINUSER                   PatchApplicationRequiredPermissions = "DOMAIN_USER"
	PatchApplicationRequiredPermissionsDOMAINUSERDEVICE             PatchApplicationRequiredPermissions = "DOMAIN_USER_DEVICE"
	PatchApplicationRequiredPermissionsENVIRONMENT                  PatchApplicationRequiredPermissions = "ENVIRONMENT"
	PatchApplicationRequiredPermissionsINSTALLATION                 PatchApplicationRequiredPermissions = "INSTALLATION"
	PatchApplicationRequiredPermissionsORGANIZATION                 PatchApplicationRequiredPermissions = "ORGANIZATION"
	PatchApplicationRequiredPermissionsORGANIZATIONAUDIT            PatchApplicationRequiredPermissions = "ORGANIZATION_AUDIT"
	PatchApplicationRequiredPermissionsORGANIZATIONENTRYPOINT       PatchApplicationRequiredPermissions = "ORGANIZATION_ENTRYPOINT"
	PatchApplicationRequiredPermissionsORGANIZATIONFORM             PatchApplicationRequiredPermissions = "ORGANIZATION_FORM"
	PatchApplicationRequiredPermissionsORGANIZATIONGROUP            PatchApplicationRequiredPermissions = "ORGANIZATION_GROUP"
	PatchApplicationRequiredPermissionsORGANIZATIONIDENTITYPROVIDER PatchApplicationRequiredPermissions = "ORGANIZATION_IDENTITY_PROVIDER"
	PatchApplicationRequiredPermissionsORGANIZATIONMEMBER           PatchApplicationRequiredPermissions = "ORGANIZATION_MEMBER"
	PatchApplicationRequiredPermissionsORGANIZATIONREPORTER         PatchApplicationRequiredPermissions = "ORGANIZATION_REPORTER"
	PatchApplicationRequiredPermissionsORGANIZATIONROLE             PatchApplicationRequiredPermissions = "ORGANIZATION_ROLE"
	PatchApplicationRequiredPermissionsORGANIZATIONSCOPE            PatchApplicationRequiredPermissions = "ORGANIZATION_SCOPE"
	PatchApplicationRequiredPermissionsORGANIZATIONSETTINGS         PatchApplicationRequiredPermissions = "ORGANIZATION_SETTINGS"
	PatchApplicationRequiredPermissionsORGANIZATIONTAG              PatchApplicationRequiredPermissions = "ORGANIZATION_TAG"
	PatchApplicationRequiredPermissionsORGANIZATIONUSER             PatchApplicationRequiredPermissions = "ORGANIZATION_USER"
)

// Defines values for PatchApplicationSettingsRequiredPermissions.
const (
	PatchApplicationSettingsRequiredPermissionsAPPLICATION                  PatchApplicationSettingsRequiredPermissions = "APPLICATION"
	PatchApplicationSettingsRequiredPermissionsAPPLICATIONANALYTICS         PatchApplicationSettingsRequiredPermissions = "APPLICATION_ANALYTICS"
	PatchApplicationSettingsRequiredPermissionsAPPLICATIONCERTIFICATE       PatchApplicationSettingsRequiredPermissions = "APPLICATION_CERTIFICATE"
	PatchApplicationSettingsRequiredPermissionsAPPLICATIONEMAILTEMPLATE     PatchApplicationSettingsRequiredPermissions = "APPLICATION_EMAIL_TEMPLATE"
	PatchApplicationSettingsRequiredPermissionsAPPLICATIONFACTOR            PatchApplicationSettingsRequiredPermissions = "APPLICATION_FACTOR"
	PatchApplicationSettingsRequiredPermissionsAPPLICATIONFLOW              PatchApplicationSettingsRequiredPermissions = "APPLICATION_FLOW"
	PatchApplicationSettingsRequiredPermissionsAPPLICATIONFORM              PatchApplicationSettingsRequiredPermissions = "APPLICATION_FORM"
	PatchApplicationSettingsRequiredPermissionsAPPLICATIONIDENTITYPROVIDER  PatchApplicationSettingsRequiredPermissions = "APPLICATION_IDENTITY_PROVIDER"
	PatchApplicationSettingsRequiredPermissionsAPPLICATIONMEMBER            PatchApplicationSettingsRequiredPermissions = "APPLICATION_MEMBER"
	PatchApplicationSettingsRequiredPermissionsAPPLICATIONOPENID            PatchApplicationSettingsRequiredPermissions = "APPLICATION_OPENID"
	PatchApplicationSettingsRequiredPermissionsAPPLICATIONRESOURCE          PatchApplicationSettingsRequiredPermissions = "APPLICATION_RESOURCE"
	PatchApplicationSettingsRequiredPermissionsAPPLICATIONSAML              PatchApplicationSettingsRequiredPermissions = "APPLICATION_SAML"
	PatchApplicationSettingsRequiredPermissionsAPPLICATIONSETTINGS          PatchApplicationSettingsRequiredPermissions = "APPLICATION_SETTINGS"
	PatchApplicationSettingsRequiredPermissionsDOMAIN                       PatchApplicationSettingsRequiredPermissions = "DOMAIN"
	PatchApplicationSettingsRequiredPermissionsDOMAINALERT                  PatchApplicationSettingsRequiredPermissions = "DOMAIN_ALERT"
	PatchApplicationSettingsRequiredPermissionsDOMAINALERTNOTIFIER          PatchApplicationSettingsRequiredPermissions = "DOMAIN_ALERT_NOTIFIER"
	PatchApplicationSettingsRequiredPermissionsDOMAINANALYTICS              PatchApplicationSettingsRequiredPermissions = "DOMAIN_ANALYTICS"
	PatchApplicationSettingsRequiredPermissionsDOMAINAUDIT                  PatchApplicationSettingsRequiredPermissions = "DOMAIN_AUDIT"
	PatchApplicationSettingsRequiredPermissionsDOMAINAUTHDEVICENOTIFIER     PatchApplicationSettingsRequiredPermissions = "DOMAIN_AUTHDEVICE_NOTIFIER"
	PatchApplicationSettingsRequiredPermissionsDOMAINBOTDETECTION           PatchApplicationSettingsRequiredPermissions = "DOMAIN_BOT_DETECTION"
	PatchApplicationSettingsRequiredPermissionsDOMAINCERTIFICATE            PatchApplicationSettingsRequiredPermissions = "DOMAIN_CERTIFICATE"
	PatchApplicationSettingsRequiredPermissionsDOMAINDEVICEIDENTIFIER       PatchApplicationSettingsRequiredPermissions = "DOMAIN_DEVICE_IDENTIFIER"
	PatchApplicationSettingsRequiredPermissionsDOMAINEMAILTEMPLATE          PatchApplicationSettingsRequiredPermissions = "DOMAIN_EMAIL_TEMPLATE"
	PatchApplicationSettingsRequiredPermissionsDOMAINEXTENSIONGRANT         PatchApplicationSettingsRequiredPermissions = "DOMAIN_EXTENSION_GRANT"
	PatchApplicationSettingsRequiredPermissionsDOMAINEXTENSIONPOINT         PatchApplicationSettingsRequiredPermissions = "DOMAIN_EXTENSION_POINT"
	PatchApplicationSettingsRequiredPermissionsDOMAINFACTOR                 PatchApplicationSettingsRequiredPermissions = "DOMAIN_FACTOR"
	PatchApplicationSettingsRequiredPermissionsDOMAINFLOW                   PatchApplicationSettingsRequiredPermissions = "DOMAIN_FLOW"
	PatchApplicationSettingsRequiredPermissionsDOMAINFORM                   PatchApplicationSettingsRequiredPermissions = "DOMAIN_FORM"
	PatchApplicationSettingsRequiredPermissionsDOMAINGROUP                  PatchApplicationSettingsRequiredPermissions = "DOMAIN_GROUP"
	PatchApplicationSettingsRequiredPermissionsDOMAINI18NDICTIONARY         PatchApplicationSettingsRequiredPermissions = "DOMAIN_I18N_DICTIONARY"
	PatchApplicationSettingsRequiredPermissionsDOMAINIDENTITYPROVIDER       PatchApplicationSettingsRequiredPermissions = "DOMAIN_IDENTITY_PROVIDER"
	PatchApplicationSettingsRequiredPermissionsDOMAINMEMBER                 PatchApplicationSettingsRequiredPermissions = "DOMAIN_MEMBER"
	PatchApplicationSettingsRequiredPermissionsDOMAINOPENID                 PatchApplicationSettingsRequiredPermissions = "DOMAIN_OPENID"
	PatchApplicationSettingsRequiredPermissionsDOMAINREPORTER               PatchApplicationSettingsRequiredPermissions = "DOMAIN_REPORTER"
	PatchApplicationSettingsRequiredPermissionsDOMAINRESOURCE               PatchApplicationSettingsRequiredPermissions = "DOMAIN_RESOURCE"
	PatchApplicationSettingsRequiredPermissionsDOMAINROLE                   PatchApplicationSettingsRequiredPermissions = "DOMAIN_ROLE"
	PatchApplicationSettingsRequiredPermissionsDOMAINSAML                   PatchApplicationSettingsRequiredPermissions = "DOMAIN_SAML"
	PatchApplicationSettingsRequiredPermissionsDOMAINSCIM                   PatchApplicationSettingsRequiredPermissions = "DOMAIN_SCIM"
	PatchApplicationSettingsRequiredPermissionsDOMAINSCOPE                  PatchApplicationSettingsRequiredPermissions = "DOMAIN_SCOPE"
	PatchApplicationSettingsRequiredPermissionsDOMAINSETTINGS               PatchApplicationSettingsRequiredPermissions = "DOMAIN_SETTINGS"
	PatchApplicationSettingsRequiredPermissionsDOMAINTHEME                  PatchApplicationSettingsRequiredPermissions = "DOMAIN_THEME"
	PatchApplicationSettingsRequiredPermissionsDOMAINUMA                    PatchApplicationSettingsRequiredPermissions = "DOMAIN_UMA"
	PatchApplicationSettingsRequiredPermissionsDOMAINUMASCOPE               PatchApplicationSettingsRequiredPermissions = "DOMAIN_UMA_SCOPE"
	PatchApplicationSettingsRequiredPermissionsDOMAINUSER                   PatchApplicationSettingsRequiredPermissions = "DOMAIN_USER"
	PatchApplicationSettingsRequiredPermissionsDOMAINUSERDEVICE             PatchApplicationSettingsRequiredPermissions = "DOMAIN_USER_DEVICE"
	PatchApplicationSettingsRequiredPermissionsENVIRONMENT                  PatchApplicationSettingsRequiredPermissions = "ENVIRONMENT"
	PatchApplicationSettingsRequiredPermissionsINSTALLATION                 PatchApplicationSettingsRequiredPermissions = "INSTALLATION"
	PatchApplicationSettingsRequiredPermissionsORGANIZATION                 PatchApplicationSettingsRequiredPermissions = "ORGANIZATION"
	PatchApplicationSettingsRequiredPermissionsORGANIZATIONAUDIT            PatchApplicationSettingsRequiredPermissions = "ORGANIZATION_AUDIT"
	PatchApplicationSettingsRequiredPermissionsORGANIZATIONENTRYPOINT       PatchApplicationSettingsRequiredPermissions = "ORGANIZATION_ENTRYPOINT"
	PatchApplicationSettingsRequiredPermissionsORGANIZATIONFORM             PatchApplicationSettingsRequiredPermissions = "ORGANIZATION_FORM"
	PatchApplicationSettingsRequiredPermissionsORGANIZATIONGROUP            PatchApplicationSettingsRequiredPermissions = "ORGANIZATION_GROUP"
	PatchApplicationSettingsRequiredPermissionsORGANIZATIONIDENTITYPROVIDER PatchApplicationSettingsRequiredPermissions = "ORGANIZATION_IDENTITY_PROVIDER"
	PatchApplicationSettingsRequiredPermissionsORGANIZATIONMEMBER           PatchApplicationSettingsRequiredPermissions = "ORGANIZATION_MEMBER"
	PatchApplicationSettingsRequiredPermissionsORGANIZATIONREPORTER         PatchApplicationSettingsRequiredPermissions = "ORGANIZATION_REPORTER"
	PatchApplicationSettingsRequiredPermissionsORGANIZATIONROLE             PatchApplicationSettingsRequiredPermissions = "ORGANIZATION_ROLE"
	PatchApplicationSettingsRequiredPermissionsORGANIZATIONSCOPE            PatchApplicationSettingsRequiredPermissions = "ORGANIZATION_SCOPE"
	PatchApplicationSettingsRequiredPermissionsORGANIZATIONSETTINGS         PatchApplicationSettingsRequiredPermissions = "ORGANIZATION_SETTINGS"
	PatchApplicationSettingsRequiredPermissionsORGANIZATIONTAG              PatchApplicationSettingsRequiredPermissions = "ORGANIZATION_TAG"
	PatchApplicationSettingsRequiredPermissionsORGANIZATIONUSER             PatchApplicationSettingsRequiredPermissions = "ORGANIZATION_USER"
)

// Defines values for PatchApplicationTypeType.
const (
	BROWSER        PatchApplicationTypeType = "BROWSER"
	NATIVE         PatchApplicationTypeType = "NATIVE"
	RESOURCESERVER PatchApplicationTypeType = "RESOURCE_SERVER"
	SERVICE        PatchApplicationTypeType = "SERVICE"
	WEB            PatchApplicationTypeType = "WEB"
)

// Defines values for PatchDomainRequiredPermissions.
const (
	PatchDomainRequiredPermissionsAPPLICATION                  PatchDomainRequiredPermissions = "APPLICATION"
	PatchDomainRequiredPermissionsAPPLICATIONANALYTICS         PatchDomainRequiredPermissions = "APPLICATION_ANALYTICS"
	PatchDomainRequiredPermissionsAPPLICATIONCERTIFICATE       PatchDomainRequiredPermissions = "APPLICATION_CERTIFICATE"
	PatchDomainRequiredPermissionsAPPLICATIONEMAILTEMPLATE     PatchDomainRequiredPermissions = "APPLICATION_EMAIL_TEMPLATE"
	PatchDomainRequiredPermissionsAPPLICATIONFACTOR            PatchDomainRequiredPermissions = "APPLICATION_FACTOR"
	PatchDomainRequiredPermissionsAPPLICATIONFLOW              PatchDomainRequiredPermissions = "APPLICATION_FLOW"
	PatchDomainRequiredPermissionsAPPLICATIONFORM              PatchDomainRequiredPermissions = "APPLICATION_FORM"
	PatchDomainRequiredPermissionsAPPLICATIONIDENTITYPROVIDER  PatchDomainRequiredPermissions = "APPLICATION_IDENTITY_PROVIDER"
	PatchDomainRequiredPermissionsAPPLICATIONMEMBER            PatchDomainRequiredPermissions = "APPLICATION_MEMBER"
	PatchDomainRequiredPermissionsAPPLICATIONOPENID            PatchDomainRequiredPermissions = "APPLICATION_OPENID"
	PatchDomainRequiredPermissionsAPPLICATIONRESOURCE          PatchDomainRequiredPermissions = "APPLICATION_RESOURCE"
	PatchDomainRequiredPermissionsAPPLICATIONSAML              PatchDomainRequiredPermissions = "APPLICATION_SAML"
	PatchDomainRequiredPermissionsAPPLICATIONSETTINGS          PatchDomainRequiredPermissions = "APPLICATION_SETTINGS"
	PatchDomainRequiredPermissionsDOMAIN                       PatchDomainRequiredPermissions = "DOMAIN"
	PatchDomainRequiredPermissionsDOMAINALERT                  PatchDomainRequiredPermissions = "DOMAIN_ALERT"
	PatchDomainRequiredPermissionsDOMAINALERTNOTIFIER          PatchDomainRequiredPermissions = "DOMAIN_ALERT_NOTIFIER"
	PatchDomainRequiredPermissionsDOMAINANALYTICS              PatchDomainRequiredPermissions = "DOMAIN_ANALYTICS"
	PatchDomainRequiredPermissionsDOMAINAUDIT                  PatchDomainRequiredPermissions = "DOMAIN_AUDIT"
	PatchDomainRequiredPermissionsDOMAINAUTHDEVICENOTIFIER     PatchDomainRequiredPermissions = "DOMAIN_AUTHDEVICE_NOTIFIER"
	PatchDomainRequiredPermissionsDOMAINBOTDETECTION           PatchDomainRequiredPermissions = "DOMAIN_BOT_DETECTION"
	PatchDomainRequiredPermissionsDOMAINCERTIFICATE            PatchDomainRequiredPermissions = "DOMAIN_CERTIFICATE"
	PatchDomainRequiredPermissionsDOMAINDEVICEIDENTIFIER       PatchDomainRequiredPermissions = "DOMAIN_DEVICE_IDENTIFIER"
	PatchDomainRequiredPermissionsDOMAINEMAILTEMPLATE          PatchDomainRequiredPermissions = "DOMAIN_EMAIL_TEMPLATE"
	PatchDomainRequiredPermissionsDOMAINEXTENSIONGRANT         PatchDomainRequiredPermissions = "DOMAIN_EXTENSION_GRANT"
	PatchDomainRequiredPermissionsDOMAINEXTENSIONPOINT         PatchDomainRequiredPermissions = "DOMAIN_EXTENSION_POINT"
	PatchDomainRequiredPermissionsDOMAINFACTOR                 PatchDomainRequiredPermissions = "DOMAIN_FACTOR"
	PatchDomainRequiredPermissionsDOMAINFLOW                   PatchDomainRequiredPermissions = "DOMAIN_FLOW"
	PatchDomainRequiredPermissionsDOMAINFORM                   PatchDomainRequiredPermissions = "DOMAIN_FORM"
	PatchDomainRequiredPermissionsDOMAINGROUP                  PatchDomainRequiredPermissions = "DOMAIN_GROUP"
	PatchDomainRequiredPermissionsDOMAINI18NDICTIONARY         PatchDomainRequiredPermissions = "DOMAIN_I18N_DICTIONARY"
	PatchDomainRequiredPermissionsDOMAINIDENTITYPROVIDER       PatchDomainRequiredPermissions = "DOMAIN_IDENTITY_PROVIDER"
	PatchDomainRequiredPermissionsDOMAINMEMBER                 PatchDomainRequiredPermissions = "DOMAIN_MEMBER"
	PatchDomainRequiredPermissionsDOMAINOPENID                 PatchDomainRequiredPermissions = "DOMAIN_OPENID"
	PatchDomainRequiredPermissionsDOMAINREPORTER               PatchDomainRequiredPermissions = "DOMAIN_REPORTER"
	PatchDomainRequiredPermissionsDOMAINRESOURCE               PatchDomainRequiredPermissions = "DOMAIN_RESOURCE"
	PatchDomainRequiredPermissionsDOMAINROLE                   PatchDomainRequiredPermissions = "DOMAIN_ROLE"
	PatchDomainRequiredPermissionsDOMAINSAML                   PatchDomainRequiredPermissions = "DOMAIN_SAML"
	PatchDomainRequiredPermissionsDOMAINSCIM                   PatchDomainRequiredPermissions = "DOMAIN_SCIM"
	PatchDomainRequiredPermissionsDOMAINSCOPE                  PatchDomainRequiredPermissions = "DOMAIN_SCOPE"
	PatchDomainRequiredPermissionsDOMAINSETTINGS               PatchDomainRequiredPermissions = "DOMAIN_SETTINGS"
	PatchDomainRequiredPermissionsDOMAINTHEME                  PatchDomainRequiredPermissions = "DOMAIN_THEME"
	PatchDomainRequiredPermissionsDOMAINUMA                    PatchDomainRequiredPermissions = "DOMAIN_UMA"
	PatchDomainRequiredPermissionsDOMAINUMASCOPE               PatchDomainRequiredPermissions = "DOMAIN_UMA_SCOPE"
	PatchDomainRequiredPermissionsDOMAINUSER                   PatchDomainRequiredPermissions = "DOMAIN_USER"
	PatchDomainRequiredPermissionsDOMAINUSERDEVICE             PatchDomainRequiredPermissions = "DOMAIN_USER_DEVICE"
	PatchDomainRequiredPermissionsENVIRONMENT                  PatchDomainRequiredPermissions = "ENVIRONMENT"
	PatchDomainRequiredPermissionsINSTALLATION                 PatchDomainRequiredPermissions = "INSTALLATION"
	PatchDomainRequiredPermissionsORGANIZATION                 PatchDomainRequiredPermissions = "ORGANIZATION"
	PatchDomainRequiredPermissionsORGANIZATIONAUDIT            PatchDomainRequiredPermissions = "ORGANIZATION_AUDIT"
	PatchDomainRequiredPermissionsORGANIZATIONENTRYPOINT       PatchDomainRequiredPermissions = "ORGANIZATION_ENTRYPOINT"
	PatchDomainRequiredPermissionsORGANIZATIONFORM             PatchDomainRequiredPermissions = "ORGANIZATION_FORM"
	PatchDomainRequiredPermissionsORGANIZATIONGROUP            PatchDomainRequiredPermissions = "ORGANIZATION_GROUP"
	PatchDomainRequiredPermissionsORGANIZATIONIDENTITYPROVIDER PatchDomainRequiredPermissions = "ORGANIZATION_IDENTITY_PROVIDER"
	PatchDomainRequiredPermissionsORGANIZATIONMEMBER           PatchDomainRequiredPermissions = "ORGANIZATION_MEMBER"
	PatchDomainRequiredPermissionsORGANIZATIONREPORTER         PatchDomainRequiredPermissions = "ORGANIZATION_REPORTER"
	PatchDomainRequiredPermissionsORGANIZATIONROLE             PatchDomainRequiredPermissions = "ORGANIZATION_ROLE"
	PatchDomainRequiredPermissionsORGANIZATIONSCOPE            PatchDomainRequiredPermissions = "ORGANIZATION_SCOPE"
	PatchDomainRequiredPermissionsORGANIZATIONSETTINGS         PatchDomainRequiredPermissions = "ORGANIZATION_SETTINGS"
	PatchDomainRequiredPermissionsORGANIZATIONTAG              PatchDomainRequiredPermissions = "ORGANIZATION_TAG"
	PatchDomainRequiredPermissionsORGANIZATIONUSER             PatchDomainRequiredPermissions = "ORGANIZATION_USER"
)

// Defines values for PatchOIDCSettingsRequiredPermissions.
const (
	PatchOIDCSettingsRequiredPermissionsAPPLICATION                  PatchOIDCSettingsRequiredPermissions = "APPLICATION"
	PatchOIDCSettingsRequiredPermissionsAPPLICATIONANALYTICS         PatchOIDCSettingsRequiredPermissions = "APPLICATION_ANALYTICS"
	PatchOIDCSettingsRequiredPermissionsAPPLICATIONCERTIFICATE       PatchOIDCSettingsRequiredPermissions = "APPLICATION_CERTIFICATE"
	PatchOIDCSettingsRequiredPermissionsAPPLICATIONEMAILTEMPLATE     PatchOIDCSettingsRequiredPermissions = "APPLICATION_EMAIL_TEMPLATE"
	PatchOIDCSettingsRequiredPermissionsAPPLICATIONFACTOR            PatchOIDCSettingsRequiredPermissions = "APPLICATION_FACTOR"
	PatchOIDCSettingsRequiredPermissionsAPPLICATIONFLOW              PatchOIDCSettingsRequiredPermissions = "APPLICATION_FLOW"
	PatchOIDCSettingsRequiredPermissionsAPPLICATIONFORM              PatchOIDCSettingsRequiredPermissions = "APPLICATION_FORM"
	PatchOIDCSettingsRequiredPermissionsAPPLICATIONIDENTITYPROVIDER  PatchOIDCSettingsRequiredPermissions = "APPLICATION_IDENTITY_PROVIDER"
	PatchOIDCSettingsRequiredPermissionsAPPLICATIONMEMBER            PatchOIDCSettingsRequiredPermissions = "APPLICATION_MEMBER"
	PatchOIDCSettingsRequiredPermissionsAPPLICATIONOPENID            PatchOIDCSettingsRequiredPermissions = "APPLICATION_OPENID"
	PatchOIDCSettingsRequiredPermissionsAPPLICATIONRESOURCE          PatchOIDCSettingsRequiredPermissions = "APPLICATION_RESOURCE"
	PatchOIDCSettingsRequiredPermissionsAPPLICATIONSAML              PatchOIDCSettingsRequiredPermissions = "APPLICATION_SAML"
	PatchOIDCSettingsRequiredPermissionsAPPLICATIONSETTINGS          PatchOIDCSettingsRequiredPermissions = "APPLICATION_SETTINGS"
	PatchOIDCSettingsRequiredPermissionsDOMAIN                       PatchOIDCSettingsRequiredPermissions = "DOMAIN"
	PatchOIDCSettingsRequiredPermissionsDOMAINALERT                  PatchOIDCSettingsRequiredPermissions = "DOMAIN_ALERT"
	PatchOIDCSettingsRequiredPermissionsDOMAINALERTNOTIFIER          PatchOIDCSettingsRequiredPermissions = "DOMAIN_ALERT_NOTIFIER"
	PatchOIDCSettingsRequiredPermissionsDOMAINANALYTICS              PatchOIDCSettingsRequiredPermissions = "DOMAIN_ANALYTICS"
	PatchOIDCSettingsRequiredPermissionsDOMAINAUDIT                  PatchOIDCSettingsRequiredPermissions = "DOMAIN_AUDIT"
	PatchOIDCSettingsRequiredPermissionsDOMAINAUTHDEVICENOTIFIER     PatchOIDCSettingsRequiredPermissions = "DOMAIN_AUTHDEVICE_NOTIFIER"
	PatchOIDCSettingsRequiredPermissionsDOMAINBOTDETECTION           PatchOIDCSettingsRequiredPermissions = "DOMAIN_BOT_DETECTION"
	PatchOIDCSettingsRequiredPermissionsDOMAINCERTIFICATE            PatchOIDCSettingsRequiredPermissions = "DOMAIN_CERTIFICATE"
	PatchOIDCSettingsRequiredPermissionsDOMAINDEVICEIDENTIFIER       PatchOIDCSettingsRequiredPermissions = "DOMAIN_DEVICE_IDENTIFIER"
	PatchOIDCSettingsRequiredPermissionsDOMAINEMAILTEMPLATE          PatchOIDCSettingsRequiredPermissions = "DOMAIN_EMAIL_TEMPLATE"
	PatchOIDCSettingsRequiredPermissionsDOMAINEXTENSIONGRANT         PatchOIDCSettingsRequiredPermissions = "DOMAIN_EXTENSION_GRANT"
	PatchOIDCSettingsRequiredPermissionsDOMAINEXTENSIONPOINT         PatchOIDCSettingsRequiredPermissions = "DOMAIN_EXTENSION_POINT"
	PatchOIDCSettingsRequiredPermissionsDOMAINFACTOR                 PatchOIDCSettingsRequiredPermissions = "DOMAIN_FACTOR"
	PatchOIDCSettingsRequiredPermissionsDOMAINFLOW                   PatchOIDCSettingsRequiredPermissions = "DOMAIN_FLOW"
	PatchOIDCSettingsRequiredPermissionsDOMAINFORM                   PatchOIDCSettingsRequiredPermissions = "DOMAIN_FORM"
	PatchOIDCSettingsRequiredPermissionsDOMAINGROUP                  PatchOIDCSettingsRequiredPermissions = "DOMAIN_GROUP"
	PatchOIDCSettingsRequiredPermissionsDOMAINI18NDICTIONARY         PatchOIDCSettingsRequiredPermissions = "DOMAIN_I18N_DICTIONARY"
	PatchOIDCSettingsRequiredPermissionsDOMAINIDENTITYPROVIDER       PatchOIDCSettingsRequiredPermissions = "DOMAIN_IDENTITY_PROVIDER"
	PatchOIDCSettingsRequiredPermissionsDOMAINMEMBER                 PatchOIDCSettingsRequiredPermissions = "DOMAIN_MEMBER"
	PatchOIDCSettingsRequiredPermissionsDOMAINOPENID                 PatchOIDCSettingsRequiredPermissions = "DOMAIN_OPENID"
	PatchOIDCSettingsRequiredPermissionsDOMAINREPORTER               PatchOIDCSettingsRequiredPermissions = "DOMAIN_REPORTER"
	PatchOIDCSettingsRequiredPermissionsDOMAINRESOURCE               PatchOIDCSettingsRequiredPermissions = "DOMAIN_RESOURCE"
	PatchOIDCSettingsRequiredPermissionsDOMAINROLE                   PatchOIDCSettingsRequiredPermissions = "DOMAIN_ROLE"
	PatchOIDCSettingsRequiredPermissionsDOMAINSAML                   PatchOIDCSettingsRequiredPermissions = "DOMAIN_SAML"
	PatchOIDCSettingsRequiredPermissionsDOMAINSCIM                   PatchOIDCSettingsRequiredPermissions = "DOMAIN_SCIM"
	PatchOIDCSettingsRequiredPermissionsDOMAINSCOPE                  PatchOIDCSettingsRequiredPermissions = "DOMAIN_SCOPE"
	PatchOIDCSettingsRequiredPermissionsDOMAINSETTINGS               PatchOIDCSettingsRequiredPermissions = "DOMAIN_SETTINGS"
	PatchOIDCSettingsRequiredPermissionsDOMAINTHEME                  PatchOIDCSettingsRequiredPermissions = "DOMAIN_THEME"
	PatchOIDCSettingsRequiredPermissionsDOMAINUMA                    PatchOIDCSettingsRequiredPermissions = "DOMAIN_UMA"
	PatchOIDCSettingsRequiredPermissionsDOMAINUMASCOPE               PatchOIDCSettingsRequiredPermissions = "DOMAIN_UMA_SCOPE"
	PatchOIDCSettingsRequiredPermissionsDOMAINUSER                   PatchOIDCSettingsRequiredPermissions = "DOMAIN_USER"
	PatchOIDCSettingsRequiredPermissionsDOMAINUSERDEVICE             PatchOIDCSettingsRequiredPermissions = "DOMAIN_USER_DEVICE"
	PatchOIDCSettingsRequiredPermissionsENVIRONMENT                  PatchOIDCSettingsRequiredPermissions = "ENVIRONMENT"
	PatchOIDCSettingsRequiredPermissionsINSTALLATION                 PatchOIDCSettingsRequiredPermissions = "INSTALLATION"
	PatchOIDCSettingsRequiredPermissionsORGANIZATION                 PatchOIDCSettingsRequiredPermissions = "ORGANIZATION"
	PatchOIDCSettingsRequiredPermissionsORGANIZATIONAUDIT            PatchOIDCSettingsRequiredPermissions = "ORGANIZATION_AUDIT"
	PatchOIDCSettingsRequiredPermissionsORGANIZATIONENTRYPOINT       PatchOIDCSettingsRequiredPermissions = "ORGANIZATION_ENTRYPOINT"
	PatchOIDCSettingsRequiredPermissionsORGANIZATIONFORM             PatchOIDCSettingsRequiredPermissions = "ORGANIZATION_FORM"
	PatchOIDCSettingsRequiredPermissionsORGANIZATIONGROUP            PatchOIDCSettingsRequiredPermissions = "ORGANIZATION_GROUP"
	PatchOIDCSettingsRequiredPermissionsORGANIZATIONIDENTITYPROVIDER PatchOIDCSettingsRequiredPermissions = "ORGANIZATION_IDENTITY_PROVIDER"
	PatchOIDCSettingsRequiredPermissionsORGANIZATIONMEMBER           PatchOIDCSettingsRequiredPermissions = "ORGANIZATION_MEMBER"
	PatchOIDCSettingsRequiredPermissionsORGANIZATIONREPORTER         PatchOIDCSettingsRequiredPermissions = "ORGANIZATION_REPORTER"
	PatchOIDCSettingsRequiredPermissionsORGANIZATIONROLE             PatchOIDCSettingsRequiredPermissions = "ORGANIZATION_ROLE"
	PatchOIDCSettingsRequiredPermissionsORGANIZATIONSCOPE            PatchOIDCSettingsRequiredPermissions = "ORGANIZATION_SCOPE"
	PatchOIDCSettingsRequiredPermissionsORGANIZATIONSETTINGS         PatchOIDCSettingsRequiredPermissions = "ORGANIZATION_SETTINGS"
	PatchOIDCSettingsRequiredPermissionsORGANIZATIONTAG              PatchOIDCSettingsRequiredPermissions = "ORGANIZATION_TAG"
	PatchOIDCSettingsRequiredPermissionsORGANIZATIONUSER             PatchOIDCSettingsRequiredPermissions = "ORGANIZATION_USER"
)

// Defines values for PatchSAMLSettingsRequiredPermissions.
const (
	PatchSAMLSettingsRequiredPermissionsAPPLICATION                  PatchSAMLSettingsRequiredPermissions = "APPLICATION"
	PatchSAMLSettingsRequiredPermissionsAPPLICATIONANALYTICS         PatchSAMLSettingsRequiredPermissions = "APPLICATION_ANALYTICS"
	PatchSAMLSettingsRequiredPermissionsAPPLICATIONCERTIFICATE       PatchSAMLSettingsRequiredPermissions = "APPLICATION_CERTIFICATE"
	PatchSAMLSettingsRequiredPermissionsAPPLICATIONEMAILTEMPLATE     PatchSAMLSettingsRequiredPermissions = "APPLICATION_EMAIL_TEMPLATE"
	PatchSAMLSettingsRequiredPermissionsAPPLICATIONFACTOR            PatchSAMLSettingsRequiredPermissions = "APPLICATION_FACTOR"
	PatchSAMLSettingsRequiredPermissionsAPPLICATIONFLOW              PatchSAMLSettingsRequiredPermissions = "APPLICATION_FLOW"
	PatchSAMLSettingsRequiredPermissionsAPPLICATIONFORM              PatchSAMLSettingsRequiredPermissions = "APPLICATION_FORM"
	PatchSAMLSettingsRequiredPermissionsAPPLICATIONIDENTITYPROVIDER  PatchSAMLSettingsRequiredPermissions = "APPLICATION_IDENTITY_PROVIDER"
	PatchSAMLSettingsRequiredPermissionsAPPLICATIONMEMBER            PatchSAMLSettingsRequiredPermissions = "APPLICATION_MEMBER"
	PatchSAMLSettingsRequiredPermissionsAPPLICATIONOPENID            PatchSAMLSettingsRequiredPermissions = "APPLICATION_OPENID"
	PatchSAMLSettingsRequiredPermissionsAPPLICATIONRESOURCE          PatchSAMLSettingsRequiredPermissions = "APPLICATION_RESOURCE"
	PatchSAMLSettingsRequiredPermissionsAPPLICATIONSAML              PatchSAMLSettingsRequiredPermissions = "APPLICATION_SAML"
	PatchSAMLSettingsRequiredPermissionsAPPLICATIONSETTINGS          PatchSAMLSettingsRequiredPermissions = "APPLICATION_SETTINGS"
	PatchSAMLSettingsRequiredPermissionsDOMAIN                       PatchSAMLSettingsRequiredPermissions = "DOMAIN"
	PatchSAMLSettingsRequiredPermissionsDOMAINALERT                  PatchSAMLSettingsRequiredPermissions = "DOMAIN_ALERT"
	PatchSAMLSettingsRequiredPermissionsDOMAINALERTNOTIFIER          PatchSAMLSettingsRequiredPermissions = "DOMAIN_ALERT_NOTIFIER"
	PatchSAMLSettingsRequiredPermissionsDOMAINANALYTICS              PatchSAMLSettingsRequiredPermissions = "DOMAIN_ANALYTICS"
	PatchSAMLSettingsRequiredPermissionsDOMAINAUDIT                  PatchSAMLSettingsRequiredPermissions = "DOMAIN_AUDIT"
	PatchSAMLSettingsRequiredPermissionsDOMAINAUTHDEVICENOTIFIER     PatchSAMLSettingsRequiredPermissions = "DOMAIN_AUTHDEVICE_NOTIFIER"
	PatchSAMLSettingsRequiredPermissionsDOMAINBOTDETECTION           PatchSAMLSettingsRequiredPermissions = "DOMAIN_BOT_DETECTION"
	PatchSAMLSettingsRequiredPermissionsDOMAINCERTIFICATE            PatchSAMLSettingsRequiredPermissions = "DOMAIN_CERTIFICATE"
	PatchSAMLSettingsRequiredPermissionsDOMAINDEVICEIDENTIFIER       PatchSAMLSettingsRequiredPermissions = "DOMAIN_DEVICE_IDENTIFIER"
	PatchSAMLSettingsRequiredPermissionsDOMAINEMAILTEMPLATE          PatchSAMLSettingsRequiredPermissions = "DOMAIN_EMAIL_TEMPLATE"
	PatchSAMLSettingsRequiredPermissionsDOMAINEXTENSIONGRANT         PatchSAMLSettingsRequiredPermissions = "DOMAIN_EXTENSION_GRANT"
	PatchSAMLSettingsRequiredPermissionsDOMAINEXTENSIONPOINT         PatchSAMLSettingsRequiredPermissions = "DOMAIN_EXTENSION_POINT"
	PatchSAMLSettingsRequiredPermissionsDOMAINFACTOR                 PatchSAMLSettingsRequiredPermissions = "DOMAIN_FACTOR"
	PatchSAMLSettingsRequiredPermissionsDOMAINFLOW                   PatchSAMLSettingsRequiredPermissions = "DOMAIN_FLOW"
	PatchSAMLSettingsRequiredPermissionsDOMAINFORM                   PatchSAMLSettingsRequiredPermissions = "DOMAIN_FORM"
	PatchSAMLSettingsRequiredPermissionsDOMAINGROUP                  PatchSAMLSettingsRequiredPermissions = "DOMAIN_GROUP"
	PatchSAMLSettingsRequiredPermissionsDOMAINI18NDICTIONARY         PatchSAMLSettingsRequiredPermissions = "DOMAIN_I18N_DICTIONARY"
	PatchSAMLSettingsRequiredPermissionsDOMAINIDENTITYPROVIDER       PatchSAMLSettingsRequiredPermissions = "DOMAIN_IDENTITY_PROVIDER"
	PatchSAMLSettingsRequiredPermissionsDOMAINMEMBER                 PatchSAMLSettingsRequiredPermissions = "DOMAIN_MEMBER"
	PatchSAMLSettingsRequiredPermissionsDOMAINOPENID                 PatchSAMLSettingsRequiredPermissions = "DOMAIN_OPENID"
	PatchSAMLSettingsRequiredPermissionsDOMAINREPORTER               PatchSAMLSettingsRequiredPermissions = "DOMAIN_REPORTER"
	PatchSAMLSettingsRequiredPermissionsDOMAINRESOURCE               PatchSAMLSettingsRequiredPermissions = "DOMAIN_RESOURCE"
	PatchSAMLSettingsRequiredPermissionsDOMAINROLE                   PatchSAMLSettingsRequiredPermissions = "DOMAIN_ROLE"
	PatchSAMLSettingsRequiredPermissionsDOMAINSAML                   PatchSAMLSettingsRequiredPermissions = "DOMAIN_SAML"
	PatchSAMLSettingsRequiredPermissionsDOMAINSCIM                   PatchSAMLSettingsRequiredPermissions = "DOMAIN_SCIM"
	PatchSAMLSettingsRequiredPermissionsDOMAINSCOPE                  PatchSAMLSettingsRequiredPermissions = "DOMAIN_SCOPE"
	PatchSAMLSettingsRequiredPermissionsDOMAINSETTINGS               PatchSAMLSettingsRequiredPermissions = "DOMAIN_SETTINGS"
	PatchSAMLSettingsRequiredPermissionsDOMAINTHEME                  PatchSAMLSettingsRequiredPermissions = "DOMAIN_THEME"
	PatchSAMLSettingsRequiredPermissionsDOMAINUMA                    PatchSAMLSettingsRequiredPermissions = "DOMAIN_UMA"
	PatchSAMLSettingsRequiredPermissionsDOMAINUMASCOPE               PatchSAMLSettingsRequiredPermissions = "DOMAIN_UMA_SCOPE"
	PatchSAMLSettingsRequiredPermissionsDOMAINUSER                   PatchSAMLSettingsRequiredPermissions = "DOMAIN_USER"
	PatchSAMLSettingsRequiredPermissionsDOMAINUSERDEVICE             PatchSAMLSettingsRequiredPermissions = "DOMAIN_USER_DEVICE"
	PatchSAMLSettingsRequiredPermissionsENVIRONMENT                  PatchSAMLSettingsRequiredPermissions = "ENVIRONMENT"
	PatchSAMLSettingsRequiredPermissionsINSTALLATION                 PatchSAMLSettingsRequiredPermissions = "INSTALLATION"
	PatchSAMLSettingsRequiredPermissionsORGANIZATION                 PatchSAMLSettingsRequiredPermissions = "ORGANIZATION"
	PatchSAMLSettingsRequiredPermissionsORGANIZATIONAUDIT            PatchSAMLSettingsRequiredPermissions = "ORGANIZATION_AUDIT"
	PatchSAMLSettingsRequiredPermissionsORGANIZATIONENTRYPOINT       PatchSAMLSettingsRequiredPermissions = "ORGANIZATION_ENTRYPOINT"
	PatchSAMLSettingsRequiredPermissionsORGANIZATIONFORM             PatchSAMLSettingsRequiredPermissions = "ORGANIZATION_FORM"
	PatchSAMLSettingsRequiredPermissionsORGANIZATIONGROUP            PatchSAMLSettingsRequiredPermissions = "ORGANIZATION_GROUP"
	PatchSAMLSettingsRequiredPermissionsORGANIZATIONIDENTITYPROVIDER PatchSAMLSettingsRequiredPermissions = "ORGANIZATION_IDENTITY_PROVIDER"
	PatchSAMLSettingsRequiredPermissionsORGANIZATIONMEMBER           PatchSAMLSettingsRequiredPermissions = "ORGANIZATION_MEMBER"
	PatchSAMLSettingsRequiredPermissionsORGANIZATIONREPORTER         PatchSAMLSettingsRequiredPermissions = "ORGANIZATION_REPORTER"
	PatchSAMLSettingsRequiredPermissionsORGANIZATIONROLE             PatchSAMLSettingsRequiredPermissions = "ORGANIZATION_ROLE"
	PatchSAMLSettingsRequiredPermissionsORGANIZATIONSCOPE            PatchSAMLSettingsRequiredPermissions = "ORGANIZATION_SCOPE"
	PatchSAMLSettingsRequiredPermissionsORGANIZATIONSETTINGS         PatchSAMLSettingsRequiredPermissions = "ORGANIZATION_SETTINGS"
	PatchSAMLSettingsRequiredPermissionsORGANIZATIONTAG              PatchSAMLSettingsRequiredPermissions = "ORGANIZATION_TAG"
	PatchSAMLSettingsRequiredPermissionsORGANIZATIONUSER             PatchSAMLSettingsRequiredPermissions = "ORGANIZATION_USER"
)

// Defines values for PreviewRequestType.
const (
	PreviewRequestTypeEMAIL PreviewRequestType = "EMAIL"
	PreviewRequestTypeFORM  PreviewRequestType = "FORM"
)

// Defines values for PreviewResponseType.
const (
	PreviewResponseTypeEMAIL PreviewResponseType = "EMAIL"
	PreviewResponseTypeFORM  PreviewResponseType = "FORM"
)

// Defines values for RoleAssignableType.
const (
	RoleAssignableTypeAPPLICATION  RoleAssignableType = "APPLICATION"
	RoleAssignableTypeDOMAIN       RoleAssignableType = "DOMAIN"
	RoleAssignableTypeENVIRONMENT  RoleAssignableType = "ENVIRONMENT"
	RoleAssignableTypeORGANIZATION RoleAssignableType = "ORGANIZATION"
	RoleAssignableTypePLATFORM     RoleAssignableType = "PLATFORM"
)

// Defines values for RolePermissionAcls.
const (
	RolePermissionAclsCREATE RolePermissionAcls = "CREATE"
	RolePermissionAclsDELETE RolePermissionAcls = "DELETE"
	RolePermissionAclsLIST   RolePermissionAcls = "LIST"
	RolePermissionAclsREAD   RolePermissionAcls = "READ"
	RolePermissionAclsUPDATE RolePermissionAcls = "UPDATE"
)

// Defines values for RoleReferenceType.
const (
	RoleReferenceTypeAPPLICATION  RoleReferenceType = "APPLICATION"
	RoleReferenceTypeDOMAIN       RoleReferenceType = "DOMAIN"
	RoleReferenceTypeENVIRONMENT  RoleReferenceType = "ENVIRONMENT"
	RoleReferenceTypeORGANIZATION RoleReferenceType = "ORGANIZATION"
	RoleReferenceTypePLATFORM     RoleReferenceType = "PLATFORM"
)

// Defines values for RoleEntityReferenceType.
const (
	RoleEntityReferenceTypeAPPLICATION  RoleEntityReferenceType = "APPLICATION"
	RoleEntityReferenceTypeDOMAIN       RoleEntityReferenceType = "DOMAIN"
	RoleEntityReferenceTypeENVIRONMENT  RoleEntityReferenceType = "ENVIRONMENT"
	RoleEntityReferenceTypeORGANIZATION RoleEntityReferenceType = "ORGANIZATION"
	RoleEntityReferenceTypePLATFORM     RoleEntityReferenceType = "PLATFORM"
)

// Defines values for ScopeApprovalEntityStatus.
const (
	APPROVED ScopeApprovalEntityStatus = "APPROVED"
	DENIED   ScopeApprovalEntityStatus = "DENIED"
)

// Defines values for ServiceResourceReferenceType.
const (
	ServiceResourceReferenceTypeAPPLICATION  ServiceResourceReferenceType = "APPLICATION"
	ServiceResourceReferenceTypeDOMAIN       ServiceResourceReferenceType = "DOMAIN"
	ServiceResourceReferenceTypeENVIRONMENT  ServiceResourceReferenceType = "ENVIRONMENT"
	ServiceResourceReferenceTypeORGANIZATION ServiceResourceReferenceType = "ORGANIZATION"
	ServiceResourceReferenceTypePLATFORM     ServiceResourceReferenceType = "PLATFORM"
)

// Defines values for ThemeReferenceType.
const (
	ThemeReferenceTypeAPPLICATION  ThemeReferenceType = "APPLICATION"
	ThemeReferenceTypeDOMAIN       ThemeReferenceType = "DOMAIN"
	ThemeReferenceTypeENVIRONMENT  ThemeReferenceType = "ENVIRONMENT"
	ThemeReferenceTypeORGANIZATION ThemeReferenceType = "ORGANIZATION"
	ThemeReferenceTypePLATFORM     ThemeReferenceType = "PLATFORM"
)

// Defines values for ThemeEntityReferenceType.
const (
	ThemeEntityReferenceTypeAPPLICATION  ThemeEntityReferenceType = "APPLICATION"
	ThemeEntityReferenceTypeDOMAIN       ThemeEntityReferenceType = "DOMAIN"
	ThemeEntityReferenceTypeENVIRONMENT  ThemeEntityReferenceType = "ENVIRONMENT"
	ThemeEntityReferenceTypeORGANIZATION ThemeEntityReferenceType = "ORGANIZATION"
	ThemeEntityReferenceTypePLATFORM     ThemeEntityReferenceType = "PLATFORM"
)

// Defines values for TokenClaimTokenType.
const (
	ACCESSTOKEN  TokenClaimTokenType = "ACCESS_TOKEN"
	IDTOKEN      TokenClaimTokenType = "ID_TOKEN"
	REFRESHTOKEN TokenClaimTokenType = "REFRESH_TOKEN"
)

// Defines values for UserReferenceType.
const (
	UserReferenceTypeAPPLICATION  UserReferenceType = "APPLICATION"
	UserReferenceTypeDOMAIN       UserReferenceType = "DOMAIN"
	UserReferenceTypeENVIRONMENT  UserReferenceType = "ENVIRONMENT"
	UserReferenceTypeORGANIZATION UserReferenceType = "ORGANIZATION"
	UserReferenceTypePLATFORM     UserReferenceType = "PLATFORM"
)

// Defines values for UserEntityReferenceType.
const (
	UserEntityReferenceTypeAPPLICATION  UserEntityReferenceType = "APPLICATION"
	UserEntityReferenceTypeDOMAIN       UserEntityReferenceType = "DOMAIN"
	UserEntityReferenceTypeENVIRONMENT  UserEntityReferenceType = "ENVIRONMENT"
	UserEntityReferenceTypeORGANIZATION UserEntityReferenceType = "ORGANIZATION"
	UserEntityReferenceTypePLATFORM     UserEntityReferenceType = "PLATFORM"
)

// Defines values for UserNotificationContentStatus.
const (
	UserNotificationContentStatusREAD   UserNotificationContentStatus = "READ"
	UserNotificationContentStatusUNREAD UserNotificationContentStatus = "UNREAD"
)

// Defines values for WebAuthnSettingsAttestationConveyancePreference.
const (
	DIRECT   WebAuthnSettingsAttestationConveyancePreference = "DIRECT"
	INDIRECT WebAuthnSettingsAttestationConveyancePreference = "INDIRECT"
	NONE     WebAuthnSettingsAttestationConveyancePreference = "NONE"
)

// Defines values for WebAuthnSettingsAuthenticatorAttachment.
const (
	WebAuthnSettingsAuthenticatorAttachmentCROSSPLATFORM WebAuthnSettingsAuthenticatorAttachment = "CROSS_PLATFORM"
	WebAuthnSettingsAuthenticatorAttachmentPLATFORM      WebAuthnSettingsAuthenticatorAttachment = "PLATFORM"
)

// Defines values for WebAuthnSettingsUserVerification.
const (
	DISCOURAGED WebAuthnSettingsUserVerification = "DISCOURAGED"
	PREFERRED   WebAuthnSettingsUserVerification = "PREFERRED"
	REQUIRED    WebAuthnSettingsUserVerification = "REQUIRED"
)

// Defines values for DomainGetAnalyticsParamsType.
const (
	DomainGetAnalyticsParamsTypeCount     DomainGetAnalyticsParamsType = "count"
	DomainGetAnalyticsParamsTypeDateHisto DomainGetAnalyticsParamsType = "date_histo"
	DomainGetAnalyticsParamsTypeGroupBy   DomainGetAnalyticsParamsType = "group_by"
)

// Defines values for ApplicationGetAnalyticsParamsType.
const (
	ApplicationGetAnalyticsParamsTypeCount     ApplicationGetAnalyticsParamsType = "count"
	ApplicationGetAnalyticsParamsTypeDateHisto ApplicationGetAnalyticsParamsType = "date_histo"
	ApplicationGetAnalyticsParamsTypeGroupBy   ApplicationGetAnalyticsParamsType = "group_by"
)

// Defines values for ApplicationListEmailsParamsTemplate.
const (
	ApplicationListEmailsParamsTemplateBLOCKEDACCOUNT           ApplicationListEmailsParamsTemplate = "BLOCKED_ACCOUNT"
	ApplicationListEmailsParamsTemplateCERTIFICATEEXPIRATION    ApplicationListEmailsParamsTemplate = "CERTIFICATE_EXPIRATION"
	ApplicationListEmailsParamsTemplateCOMPLETEPROFILE          ApplicationListEmailsParamsTemplate = "COMPLETE_PROFILE"
	ApplicationListEmailsParamsTemplateERROR                    ApplicationListEmailsParamsTemplate = "ERROR"
	ApplicationListEmailsParamsTemplateFORGOTPASSWORD           ApplicationListEmailsParamsTemplate = "FORGOT_PASSWORD"
	ApplicationListEmailsParamsTemplateIDENTIFIERFIRSTLOGIN     ApplicationListEmailsParamsTemplate = "IDENTIFIER_FIRST_LOGIN"
	ApplicationListEmailsParamsTemplateLOGIN                    ApplicationListEmailsParamsTemplate = "LOGIN"
	ApplicationListEmailsParamsTemplateMFACHALLENGE             ApplicationListEmailsParamsTemplate = "MFA_CHALLENGE"
	ApplicationListEmailsParamsTemplateMFACHALLENGEALTERNATIVES ApplicationListEmailsParamsTemplate = "MFA_CHALLENGE_ALTERNATIVES"
	ApplicationListEmailsParamsTemplateMFAENROLL                ApplicationListEmailsParamsTemplate = "MFA_ENROLL"
	ApplicationListEmailsParamsTemplateMFARECOVERYCODE          ApplicationListEmailsParamsTemplate = "MFA_RECOVERY_CODE"
	ApplicationListEmailsParamsTemplateOAUTH2USERCONSENT        ApplicationListEmailsParamsTemplate = "OAUTH2_USER_CONSENT"
	ApplicationListEmailsParamsTemplateREGISTRATION             ApplicationListEmailsParamsTemplate = "REGISTRATION"
	ApplicationListEmailsParamsTemplateREGISTRATIONCONFIRMATION ApplicationListEmailsParamsTemplate = "REGISTRATION_CONFIRMATION"
	ApplicationListEmailsParamsTemplateRESETPASSWORD            ApplicationListEmailsParamsTemplate = "RESET_PASSWORD"
	ApplicationListEmailsParamsTemplateVERIFYATTEMPT            ApplicationListEmailsParamsTemplate = "VERIFY_ATTEMPT"
	ApplicationListEmailsParamsTemplateWEBAUTHNLOGIN            ApplicationListEmailsParamsTemplate = "WEBAUTHN_LOGIN"
	ApplicationListEmailsParamsTemplateWEBAUTHNREGISTER         ApplicationListEmailsParamsTemplate = "WEBAUTHN_REGISTER"
)

// Defines values for ApplicationListFormsParamsTemplate.
const (
	ApplicationListFormsParamsTemplateBLOCKEDACCOUNT           ApplicationListFormsParamsTemplate = "BLOCKED_ACCOUNT"
	ApplicationListFormsParamsTemplateCERTIFICATEEXPIRATION    ApplicationListFormsParamsTemplate = "CERTIFICATE_EXPIRATION"
	ApplicationListFormsParamsTemplateCOMPLETEPROFILE          ApplicationListFormsParamsTemplate = "COMPLETE_PROFILE"
	ApplicationListFormsParamsTemplateERROR                    ApplicationListFormsParamsTemplate = "ERROR"
	ApplicationListFormsParamsTemplateFORGOTPASSWORD           ApplicationListFormsParamsTemplate = "FORGOT_PASSWORD"
	ApplicationListFormsParamsTemplateIDENTIFIERFIRSTLOGIN     ApplicationListFormsParamsTemplate = "IDENTIFIER_FIRST_LOGIN"
	ApplicationListFormsParamsTemplateLOGIN                    ApplicationListFormsParamsTemplate = "LOGIN"
	ApplicationListFormsParamsTemplateMFACHALLENGE             ApplicationListFormsParamsTemplate = "MFA_CHALLENGE"
	ApplicationListFormsParamsTemplateMFACHALLENGEALTERNATIVES ApplicationListFormsParamsTemplate = "MFA_CHALLENGE_ALTERNATIVES"
	ApplicationListFormsParamsTemplateMFAENROLL                ApplicationListFormsParamsTemplate = "MFA_ENROLL"
	ApplicationListFormsParamsTemplateMFARECOVERYCODE          ApplicationListFormsParamsTemplate = "MFA_RECOVERY_CODE"
	ApplicationListFormsParamsTemplateOAUTH2USERCONSENT        ApplicationListFormsParamsTemplate = "OAUTH2_USER_CONSENT"
	ApplicationListFormsParamsTemplateREGISTRATION             ApplicationListFormsParamsTemplate = "REGISTRATION"
	ApplicationListFormsParamsTemplateREGISTRATIONCONFIRMATION ApplicationListFormsParamsTemplate = "REGISTRATION_CONFIRMATION"
	ApplicationListFormsParamsTemplateRESETPASSWORD            ApplicationListFormsParamsTemplate = "RESET_PASSWORD"
	ApplicationListFormsParamsTemplateVERIFYATTEMPT            ApplicationListFormsParamsTemplate = "VERIFY_ATTEMPT"
	ApplicationListFormsParamsTemplateWEBAUTHNLOGIN            ApplicationListFormsParamsTemplate = "WEBAUTHN_LOGIN"
	ApplicationListFormsParamsTemplateWEBAUTHNREGISTER         ApplicationListFormsParamsTemplate = "WEBAUTHN_REGISTER"
)

// Defines values for EnvironmentListDomainEmailsParamsTemplate.
const (
	EnvironmentListDomainEmailsParamsTemplateBLOCKEDACCOUNT           EnvironmentListDomainEmailsParamsTemplate = "BLOCKED_ACCOUNT"
	EnvironmentListDomainEmailsParamsTemplateCERTIFICATEEXPIRATION    EnvironmentListDomainEmailsParamsTemplate = "CERTIFICATE_EXPIRATION"
	EnvironmentListDomainEmailsParamsTemplateCOMPLETEPROFILE          EnvironmentListDomainEmailsParamsTemplate = "COMPLETE_PROFILE"
	EnvironmentListDomainEmailsParamsTemplateERROR                    EnvironmentListDomainEmailsParamsTemplate = "ERROR"
	EnvironmentListDomainEmailsParamsTemplateFORGOTPASSWORD           EnvironmentListDomainEmailsParamsTemplate = "FORGOT_PASSWORD"
	EnvironmentListDomainEmailsParamsTemplateIDENTIFIERFIRSTLOGIN     EnvironmentListDomainEmailsParamsTemplate = "IDENTIFIER_FIRST_LOGIN"
	EnvironmentListDomainEmailsParamsTemplateLOGIN                    EnvironmentListDomainEmailsParamsTemplate = "LOGIN"
	EnvironmentListDomainEmailsParamsTemplateMFACHALLENGE             EnvironmentListDomainEmailsParamsTemplate = "MFA_CHALLENGE"
	EnvironmentListDomainEmailsParamsTemplateMFACHALLENGEALTERNATIVES EnvironmentListDomainEmailsParamsTemplate = "MFA_CHALLENGE_ALTERNATIVES"
	EnvironmentListDomainEmailsParamsTemplateMFAENROLL                EnvironmentListDomainEmailsParamsTemplate = "MFA_ENROLL"
	EnvironmentListDomainEmailsParamsTemplateMFARECOVERYCODE          EnvironmentListDomainEmailsParamsTemplate = "MFA_RECOVERY_CODE"
	EnvironmentListDomainEmailsParamsTemplateOAUTH2USERCONSENT        EnvironmentListDomainEmailsParamsTemplate = "OAUTH2_USER_CONSENT"
	EnvironmentListDomainEmailsParamsTemplateREGISTRATION             EnvironmentListDomainEmailsParamsTemplate = "REGISTRATION"
	EnvironmentListDomainEmailsParamsTemplateREGISTRATIONCONFIRMATION EnvironmentListDomainEmailsParamsTemplate = "REGISTRATION_CONFIRMATION"
	EnvironmentListDomainEmailsParamsTemplateRESETPASSWORD            EnvironmentListDomainEmailsParamsTemplate = "RESET_PASSWORD"
	EnvironmentListDomainEmailsParamsTemplateVERIFYATTEMPT            EnvironmentListDomainEmailsParamsTemplate = "VERIFY_ATTEMPT"
	EnvironmentListDomainEmailsParamsTemplateWEBAUTHNLOGIN            EnvironmentListDomainEmailsParamsTemplate = "WEBAUTHN_LOGIN"
	EnvironmentListDomainEmailsParamsTemplateWEBAUTHNREGISTER         EnvironmentListDomainEmailsParamsTemplate = "WEBAUTHN_REGISTER"
)

// Defines values for EnvironmentListDomainFormsParamsTemplate.
const (
	EnvironmentListDomainFormsParamsTemplateBLOCKEDACCOUNT           EnvironmentListDomainFormsParamsTemplate = "BLOCKED_ACCOUNT"
	EnvironmentListDomainFormsParamsTemplateCERTIFICATEEXPIRATION    EnvironmentListDomainFormsParamsTemplate = "CERTIFICATE_EXPIRATION"
	EnvironmentListDomainFormsParamsTemplateCOMPLETEPROFILE          EnvironmentListDomainFormsParamsTemplate = "COMPLETE_PROFILE"
	EnvironmentListDomainFormsParamsTemplateERROR                    EnvironmentListDomainFormsParamsTemplate = "ERROR"
	EnvironmentListDomainFormsParamsTemplateFORGOTPASSWORD           EnvironmentListDomainFormsParamsTemplate = "FORGOT_PASSWORD"
	EnvironmentListDomainFormsParamsTemplateIDENTIFIERFIRSTLOGIN     EnvironmentListDomainFormsParamsTemplate = "IDENTIFIER_FIRST_LOGIN"
	EnvironmentListDomainFormsParamsTemplateLOGIN                    EnvironmentListDomainFormsParamsTemplate = "LOGIN"
	EnvironmentListDomainFormsParamsTemplateMFACHALLENGE             EnvironmentListDomainFormsParamsTemplate = "MFA_CHALLENGE"
	EnvironmentListDomainFormsParamsTemplateMFACHALLENGEALTERNATIVES EnvironmentListDomainFormsParamsTemplate = "MFA_CHALLENGE_ALTERNATIVES"
	EnvironmentListDomainFormsParamsTemplateMFAENROLL                EnvironmentListDomainFormsParamsTemplate = "MFA_ENROLL"
	EnvironmentListDomainFormsParamsTemplateMFARECOVERYCODE          EnvironmentListDomainFormsParamsTemplate = "MFA_RECOVERY_CODE"
	EnvironmentListDomainFormsParamsTemplateOAUTH2USERCONSENT        EnvironmentListDomainFormsParamsTemplate = "OAUTH2_USER_CONSENT"
	EnvironmentListDomainFormsParamsTemplateREGISTRATION             EnvironmentListDomainFormsParamsTemplate = "REGISTRATION"
	EnvironmentListDomainFormsParamsTemplateREGISTRATIONCONFIRMATION EnvironmentListDomainFormsParamsTemplate = "REGISTRATION_CONFIRMATION"
	EnvironmentListDomainFormsParamsTemplateRESETPASSWORD            EnvironmentListDomainFormsParamsTemplate = "RESET_PASSWORD"
	EnvironmentListDomainFormsParamsTemplateVERIFYATTEMPT            EnvironmentListDomainFormsParamsTemplate = "VERIFY_ATTEMPT"
	EnvironmentListDomainFormsParamsTemplateWEBAUTHNLOGIN            EnvironmentListDomainFormsParamsTemplate = "WEBAUTHN_LOGIN"
	EnvironmentListDomainFormsParamsTemplateWEBAUTHNREGISTER         EnvironmentListDomainFormsParamsTemplate = "WEBAUTHN_REGISTER"
)

// Defines values for OrganizationListPlatfomFormTemplatesParamsTemplate.
const (
	BLOCKEDACCOUNT           OrganizationListPlatfomFormTemplatesParamsTemplate = "BLOCKED_ACCOUNT"
	CERTIFICATEEXPIRATION    OrganizationListPlatfomFormTemplatesParamsTemplate = "CERTIFICATE_EXPIRATION"
	COMPLETEPROFILE          OrganizationListPlatfomFormTemplatesParamsTemplate = "COMPLETE_PROFILE"
	ERROR                    OrganizationListPlatfomFormTemplatesParamsTemplate = "ERROR"
	FORGOTPASSWORD           OrganizationListPlatfomFormTemplatesParamsTemplate = "FORGOT_PASSWORD"
	IDENTIFIERFIRSTLOGIN     OrganizationListPlatfomFormTemplatesParamsTemplate = "IDENTIFIER_FIRST_LOGIN"
	LOGIN                    OrganizationListPlatfomFormTemplatesParamsTemplate = "LOGIN"
	MFACHALLENGE             OrganizationListPlatfomFormTemplatesParamsTemplate = "MFA_CHALLENGE"
	MFACHALLENGEALTERNATIVES OrganizationListPlatfomFormTemplatesParamsTemplate = "MFA_CHALLENGE_ALTERNATIVES"
	MFAENROLL                OrganizationListPlatfomFormTemplatesParamsTemplate = "MFA_ENROLL"
	MFARECOVERYCODE          OrganizationListPlatfomFormTemplatesParamsTemplate = "MFA_RECOVERY_CODE"
	OAUTH2USERCONSENT        OrganizationListPlatfomFormTemplatesParamsTemplate = "OAUTH2_USER_CONSENT"
	REGISTRATION             OrganizationListPlatfomFormTemplatesParamsTemplate = "REGISTRATION"
	REGISTRATIONCONFIRMATION OrganizationListPlatfomFormTemplatesParamsTemplate = "REGISTRATION_CONFIRMATION"
	RESETPASSWORD            OrganizationListPlatfomFormTemplatesParamsTemplate = "RESET_PASSWORD"
	VERIFYATTEMPT            OrganizationListPlatfomFormTemplatesParamsTemplate = "VERIFY_ATTEMPT"
	WEBAUTHNLOGIN            OrganizationListPlatfomFormTemplatesParamsTemplate = "WEBAUTHN_LOGIN"
	WEBAUTHNREGISTER         OrganizationListPlatfomFormTemplatesParamsTemplate = "WEBAUTHN_REGISTER"
)

// Defines values for OrganizationListPlatformRolesParamsType.
const (
	APPLICATION  OrganizationListPlatformRolesParamsType = "APPLICATION"
	DOMAIN       OrganizationListPlatformRolesParamsType = "DOMAIN"
	ENVIRONMENT  OrganizationListPlatformRolesParamsType = "ENVIRONMENT"
	ORGANIZATION OrganizationListPlatformRolesParamsType = "ORGANIZATION"
	PLATFORM     OrganizationListPlatformRolesParamsType = "PLATFORM"
)

// AccessPolicy defines model for AccessPolicy.
type AccessPolicy struct {
	Condition   *string           `json:"condition,omitempty"`
	CreatedAt   *int64            `json:"createdAt,omitempty"`
	Description *string           `json:"description,omitempty"`
	Domain      *string           `json:"domain,omitempty"`
	Enabled     *bool             `json:"enabled,omitempty"`
	Id          *string           `json:"id,omitempty"`
	Name        *string           `json:"name,omitempty"`
	Order       *int32            `json:"order,omitempty"`
	Resource    *string           `json:"resource,omitempty"`
	Type        *AccessPolicyType `json:"type,omitempty"`
	UpdatedAt   *int64            `json:"updatedAt,omitempty"`
}

// AccessPolicyType defines model for AccessPolicy.Type.
type AccessPolicyType string

// AccessPolicyListItem defines model for AccessPolicyListItem.
type AccessPolicyListItem struct {
	CreatedAt   *int64  `json:"createdAt,omitempty"`
	Description *string `json:"description,omitempty"`
	Id          *string `json:"id,omitempty"`
	Name        *string `json:"name,omitempty"`
	UpdatedAt   *int64  `json:"updatedAt,omitempty"`
}

// AccountSettings defines model for AccountSettings.
type AccountSettings struct {
	AccountBlockedDuration                      *int32       `json:"accountBlockedDuration,omitempty"`
	AutoLoginAfterRegistration                  *bool        `json:"autoLoginAfterRegistration,omitempty"`
	AutoLoginAfterResetPassword                 *bool        `json:"autoLoginAfterResetPassword,omitempty"`
	BotDetectionPlugin                          *string      `json:"botDetectionPlugin,omitempty"`
	CompleteRegistrationWhenResetPassword       *bool        `json:"completeRegistrationWhenResetPassword,omitempty"`
	DefaultIdentityProviderForRegistration      *string      `json:"defaultIdentityProviderForRegistration,omitempty"`
	DeletePasswordlessDevicesAfterResetPassword *bool        `json:"deletePasswordlessDevicesAfterResetPassword,omitempty"`
	DynamicUserRegistration                     *bool        `json:"dynamicUserRegistration,omitempty"`
	Inherited                                   *bool        `json:"inherited,omitempty"`
	LoginAttemptsDetectionEnabled               *bool        `json:"loginAttemptsDetectionEnabled,omitempty"`
	LoginAttemptsResetTime                      *int32       `json:"loginAttemptsResetTime,omitempty"`
	MaxLoginAttempts                            *int32       `json:"maxLoginAttempts,omitempty"`
	MfaChallengeAttemptsDetectionEnabled        *bool        `json:"mfaChallengeAttemptsDetectionEnabled,omitempty"`
	MfaChallengeAttemptsResetTime               *int32       `json:"mfaChallengeAttemptsResetTime,omitempty"`
	MfaChallengeMaxAttempts                     *int32       `json:"mfaChallengeMaxAttempts,omitempty"`
	MfaChallengeSendVerifyAlertEmail            *bool        `json:"mfaChallengeSendVerifyAlertEmail,omitempty"`
	RedirectUriAfterRegistration                *string      `json:"redirectUriAfterRegistration,omitempty"`
	RedirectUriAfterResetPassword               *string      `json:"redirectUriAfterResetPassword,omitempty"`
	ResetPasswordConfirmIdentity                *bool        `json:"resetPasswordConfirmIdentity,omitempty"`
	ResetPasswordCustomForm                     *bool        `json:"resetPasswordCustomForm,omitempty"`
	ResetPasswordCustomFormFields               *[]FormField `json:"resetPasswordCustomFormFields,omitempty"`
	ResetPasswordInvalidateTokens               *bool        `json:"resetPasswordInvalidateTokens,omitempty"`
	SendRecoverAccountEmail                     *bool        `json:"sendRecoverAccountEmail,omitempty"`
	UseBotDetection                             *bool        `json:"useBotDetection,omitempty"`
}

// Address defines model for Address.
type Address struct {
	Country       *string `json:"country,omitempty"`
	Formatted     *string `json:"formatted,omitempty"`
	Locality      *string `json:"locality,omitempty"`
	PostalCode    *string `json:"postalCode,omitempty"`
	Primary       *bool   `json:"primary,omitempty"`
	Region        *string `json:"region,omitempty"`
	StreetAddress *string `json:"streetAddress,omitempty"`
	Type          *string `json:"type,omitempty"`
}

// AlertNotifier defines model for AlertNotifier.
type AlertNotifier struct {
	Configuration *string                     `json:"configuration,omitempty"`
	CreatedAt     *int64                      `json:"createdAt,omitempty"`
	Enabled       *bool                       `json:"enabled,omitempty"`
	Id            *string                     `json:"id,omitempty"`
	Name          *string                     `json:"name,omitempty"`
	ReferenceId   *string                     `json:"referenceId,omitempty"`
	ReferenceType *AlertNotifierReferenceType `json:"referenceType,omitempty"`
	Type          *string                     `json:"type,omitempty"`
	UpdatedAt     *int64                      `json:"updatedAt,omitempty"`
}

// AlertNotifierReferenceType defines model for AlertNotifier.ReferenceType.
type AlertNotifierReferenceType string

// AlertServiceStatusEntity defines model for AlertServiceStatusEntity.
type AlertServiceStatusEntity struct {
	Available *bool `json:"available,omitempty"`
}

// AlertTrigger defines model for AlertTrigger.
type AlertTrigger struct {
	AlertNotifiers *[]string                  `json:"alertNotifiers,omitempty"`
	CreatedAt      *int64                     `json:"createdAt,omitempty"`
	Enabled        *bool                      `json:"enabled,omitempty"`
	Id             *string                    `json:"id,omitempty"`
	ReferenceId    *string                    `json:"referenceId,omitempty"`
	ReferenceType  *AlertTriggerReferenceType `json:"referenceType,omitempty"`
	Type           *AlertTriggerType          `json:"type,omitempty"`
	UpdatedAt      *int64                     `json:"updatedAt,omitempty"`
}

// AlertTriggerReferenceType defines model for AlertTrigger.ReferenceType.
type AlertTriggerReferenceType string

// AlertTriggerType defines model for AlertTrigger.Type.
type AlertTriggerType string

// Application defines model for Application.
type Application struct {
	Certificate       *string                            `json:"certificate,omitempty"`
	CreatedAt         *int64                             `json:"createdAt,omitempty"`
	Description       *string                            `json:"description,omitempty"`
	Domain            *string                            `json:"domain,omitempty"`
	Enabled           *bool                              `json:"enabled,omitempty"`
	Factors           *[]string                          `json:"factors,omitempty"`
	Id                *string                            `json:"id,omitempty"`
	IdentityProviders *[]ApplicationIdentityProvider     `json:"identityProviders,omitempty"`
	Metadata          *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Name              *string                            `json:"name,omitempty"`
	PasswordSettings  *PasswordSettings                  `json:"passwordSettings,omitempty"`
	Settings          *ApplicationSettings               `json:"settings,omitempty"`
	Template          *bool                              `json:"template,omitempty"`
	Type              *ApplicationType                   `json:"type,omitempty"`
	UpdatedAt         *int64                             `json:"updatedAt,omitempty"`
}

// ApplicationType defines model for Application.Type.
type ApplicationType string

// ApplicationAdvancedSettings defines model for ApplicationAdvancedSettings.
type ApplicationAdvancedSettings struct {
	FlowsInherited *bool `json:"flowsInherited,omitempty"`
	SkipConsent    *bool `json:"skipConsent,omitempty"`
}

// ApplicationEntity defines model for ApplicationEntity.
type ApplicationEntity struct {
	ClientId *string `json:"clientId,omitempty"`
	Id       *string `json:"id,omitempty"`
	Name     *string `json:"name,omitempty"`
}

// ApplicationIdentityProvider defines model for ApplicationIdentityProvider.
type ApplicationIdentityProvider struct {
	Identity      *string `json:"identity,omitempty"`
	Priority      *int32  `json:"priority,omitempty"`
	SelectionRule *string `json:"selectionRule,omitempty"`
}

// ApplicationOAuthSettings defines model for ApplicationOAuthSettings.
type ApplicationOAuthSettings struct {
	AccessTokenValiditySeconds            *int32                      `json:"accessTokenValiditySeconds,omitempty"`
	ApplicationType                       *string                     `json:"applicationType,omitempty"`
	AuthorizationEncryptedResponseAlg     *string                     `json:"authorizationEncryptedResponseAlg,omitempty"`
	AuthorizationEncryptedResponseEnc     *string                     `json:"authorizationEncryptedResponseEnc,omitempty"`
	AuthorizationSignedResponseAlg        *string                     `json:"authorizationSignedResponseAlg,omitempty"`
	BackchannelAuthRequestSignAlg         *string                     `json:"backchannelAuthRequestSignAlg,omitempty"`
	BackchannelClientNotificationEndpoint *string                     `json:"backchannelClientNotificationEndpoint,omitempty"`
	BackchannelTokenDeliveryMode          *string                     `json:"backchannelTokenDeliveryMode,omitempty"`
	BackchannelUserCodeParameter          *bool                       `json:"backchannelUserCodeParameter,omitempty"`
	ClientId                              *string                     `json:"clientId,omitempty"`
	ClientIdIssuedAt                      *int64                      `json:"clientIdIssuedAt,omitempty"`
	ClientName                            *string                     `json:"clientName,omitempty"`
	ClientSecret                          *string                     `json:"clientSecret,omitempty"`
	ClientSecretExpiresAt                 *int64                      `json:"clientSecretExpiresAt,omitempty"`
	ClientType                            *string                     `json:"clientType,omitempty"`
	ClientUri                             *string                     `json:"clientUri,omitempty"`
	Contacts                              *[]string                   `json:"contacts,omitempty"`
	DefaultACRvalues                      *[]string                   `json:"defaultACRvalues,omitempty"`
	DefaultMaxAge                         *int32                      `json:"defaultMaxAge,omitempty"`
	DefaultScopes                         *[]string                   `json:"defaultScopes,omitempty"`
	DisableRefreshTokenRotation           *bool                       `json:"disableRefreshTokenRotation,omitempty"`
	EnhanceScopesWithUserPermissions      *bool                       `json:"enhanceScopesWithUserPermissions,omitempty"`
	ForcePKCE                             *bool                       `json:"forcePKCE,omitempty"`
	ForceS256CodeChallengeMethod          *bool                       `json:"forceS256CodeChallengeMethod,omitempty"`
	GrantTypes                            *[]string                   `json:"grantTypes,omitempty"`
	IdTokenEncryptedResponseAlg           *string                     `json:"idTokenEncryptedResponseAlg,omitempty"`
	IdTokenEncryptedResponseEnc           *string                     `json:"idTokenEncryptedResponseEnc,omitempty"`
	IdTokenSignedResponseAlg              *string                     `json:"idTokenSignedResponseAlg,omitempty"`
	IdTokenValiditySeconds                *int32                      `json:"idTokenValiditySeconds,omitempty"`
	InitiateLoginUri                      *string                     `json:"initiateLoginUri,omitempty"`
	Jwks                                  *JWKSet                     `json:"jwks,omitempty"`
	JwksUri                               *string                     `json:"jwksUri,omitempty"`
	LogoUri                               *string                     `json:"logoUri,omitempty"`
	PolicyUri                             *string                     `json:"policyUri,omitempty"`
	PostLogoutRedirectUris                *[]string                   `json:"postLogoutRedirectUris,omitempty"`
	RedirectUris                          *[]string                   `json:"redirectUris,omitempty"`
	RefreshTokenValiditySeconds           *int32                      `json:"refreshTokenValiditySeconds,omitempty"`
	RegistrationAccessToken               *string                     `json:"registrationAccessToken,omitempty"`
	RegistrationClientUri                 *string                     `json:"registrationClientUri,omitempty"`
	RequestObjectEncryptionAlg            *string                     `json:"requestObjectEncryptionAlg,omitempty"`
	RequestObjectEncryptionEnc            *string                     `json:"requestObjectEncryptionEnc,omitempty"`
	RequestObjectSigningAlg               *string                     `json:"requestObjectSigningAlg,omitempty"`
	RequestUris                           *[]string                   `json:"requestUris,omitempty"`
	RequireAuthTime                       *bool                       `json:"requireAuthTime,omitempty"`
	RequireParRequest                     *bool                       `json:"requireParRequest,omitempty"`
	ResponseTypes                         *[]string                   `json:"responseTypes,omitempty"`
	ScopeApprovals                        *map[string]int32           `json:"scopeApprovals,omitempty"`
	ScopeSettings                         *[]ApplicationScopeSettings `json:"scopeSettings,omitempty"`
	Scopes                                *[]string                   `json:"scopes,omitempty"`
	SectorIdentifierUri                   *string                     `json:"sectorIdentifierUri,omitempty"`
	SilentReAuthentication                *bool                       `json:"silentReAuthentication,omitempty"`
	SingleSignOut                         *bool                       `json:"singleSignOut,omitempty"`
	SoftwareId                            *string                     `json:"softwareId,omitempty"`
	SoftwareStatement                     *string                     `json:"softwareStatement,omitempty"`
	SoftwareVersion                       *string                     `json:"softwareVersion,omitempty"`
	SubjectType                           *string                     `json:"subjectType,omitempty"`
	TlsClientAuthSanDns                   *string                     `json:"tlsClientAuthSanDns,omitempty"`
	TlsClientAuthSanEmail                 *string                     `json:"tlsClientAuthSanEmail,omitempty"`
	TlsClientAuthSanIp                    *string                     `json:"tlsClientAuthSanIp,omitempty"`
	TlsClientAuthSanUri                   *string                     `json:"tlsClientAuthSanUri,omitempty"`
	TlsClientAuthSubjectDn                *string                     `json:"tlsClientAuthSubjectDn,omitempty"`
	TlsClientCertificateBoundAccessTokens *bool                       `json:"tlsClientCertificateBoundAccessTokens,omitempty"`
	TokenCustomClaims                     *[]TokenClaim               `json:"tokenCustomClaims,omitempty"`
	TokenEndpointAuthMethod               *string                     `json:"tokenEndpointAuthMethod,omitempty"`
	TokenEndpointAuthSigningAlg           *string                     `json:"tokenEndpointAuthSigningAlg,omitempty"`
	TosUri                                *string                     `json:"tosUri,omitempty"`
	UserinfoEncryptedResponseAlg          *string                     `json:"userinfoEncryptedResponseAlg,omitempty"`
	UserinfoEncryptedResponseEnc          *string                     `json:"userinfoEncryptedResponseEnc,omitempty"`
	UserinfoSignedResponseAlg             *string                     `json:"userinfoSignedResponseAlg,omitempty"`
}

// ApplicationPage defines model for ApplicationPage.
type ApplicationPage struct {
	CurrentPage *int32         `json:"currentPage,omitempty"`
	Data        *[]Application `json:"data,omitempty"`
	TotalCount  *int64         `json:"totalCount,omitempty"`
}

// ApplicationSAMLSettings defines model for ApplicationSAMLSettings.
type ApplicationSAMLSettings struct {
	AttributeConsumeServiceUrl *string `json:"attributeConsumeServiceUrl,omitempty"`
	Certificate                *string `json:"certificate,omitempty"`
	EntityId                   *string `json:"entityId,omitempty"`
	SingleLogoutServiceUrl     *string `json:"singleLogoutServiceUrl,omitempty"`
	WantAssertionsSigned       *bool   `json:"wantAssertionsSigned,omitempty"`
	WantResponseSigned         *bool   `json:"wantResponseSigned,omitempty"`
}

// ApplicationScopeSettings defines model for ApplicationScopeSettings.
type ApplicationScopeSettings struct {
	DefaultScope  *bool   `json:"defaultScope,omitempty"`
	Scope         *string `json:"scope,omitempty"`
	ScopeApproval *int32  `json:"scopeApproval,omitempty"`
}

// ApplicationSettings defines model for ApplicationSettings.
type ApplicationSettings struct {
	Account          *AccountSettings             `json:"account,omitempty"`
	Advanced         *ApplicationAdvancedSettings `json:"advanced,omitempty"`
	CookieSettings   *CookieSettings              `json:"cookieSettings,omitempty"`
	Login            *LoginSettings               `json:"login,omitempty"`
	Mfa              *MFASettings                 `json:"mfa,omitempty"`
	Oauth            *ApplicationOAuthSettings    `json:"oauth,omitempty"`
	PasswordSettings *PasswordSettings            `json:"passwordSettings,omitempty"`
	RiskAssessment   *RiskAssessmentSettings      `json:"riskAssessment,omitempty"`
	Saml             *ApplicationSAMLSettings     `json:"saml,omitempty"`
}

// AssessmentSettings defines model for AssessmentSettings.
type AssessmentSettings struct {
	Enabled    *bool               `json:"enabled,omitempty"`
	Thresholds *map[string]float64 `json:"thresholds,omitempty"`
}

// Attribute defines model for Attribute.
type Attribute struct {
	Primary *bool   `json:"primary,omitempty"`
	Type    *string `json:"type,omitempty"`
	Value   *string `json:"value,omitempty"`
}

// Audit defines model for Audit.
type Audit struct {
	AccessPoint   *AuditAccessPoint   `json:"accessPoint,omitempty"`
	Actor         *AuditEntity        `json:"actor,omitempty"`
	Id            *string             `json:"id,omitempty"`
	Outcome       *AuditOutcome       `json:"outcome,omitempty"`
	ReferenceId   *string             `json:"referenceId,omitempty"`
	ReferenceType *AuditReferenceType `json:"referenceType,omitempty"`
	Target        *AuditEntity        `json:"target,omitempty"`
	TransactionId *string             `json:"transactionId,omitempty"`
	Type          *string             `json:"type,omitempty"`
}

// AuditReferenceType defines model for Audit.ReferenceType.
type AuditReferenceType string

// AuditAccessPoint defines model for AuditAccessPoint.
type AuditAccessPoint struct {
	AlternativeId *string `json:"alternativeId,omitempty"`
	DisplayName   *string `json:"displayName,omitempty"`
	Id            *string `json:"id,omitempty"`
	IpAddress     *string `json:"ipAddress,omitempty"`
	UserAgent     *string `json:"userAgent,omitempty"`
}

// AuditEntity defines model for AuditEntity.
type AuditEntity struct {
	AlternativeId *string                            `json:"alternativeId,omitempty"`
	Attributes    *map[string]map[string]interface{} `json:"attributes,omitempty"`
	DisplayName   *string                            `json:"displayName,omitempty"`
	Id            *string                            `json:"id,omitempty"`
	ReferenceId   *string                            `json:"referenceId,omitempty"`
	ReferenceType *AuditEntityReferenceType          `json:"referenceType,omitempty"`
	Type          *string                            `json:"type,omitempty"`
}

// AuditEntityReferenceType defines model for AuditEntity.ReferenceType.
type AuditEntityReferenceType string

// AuditOutcome defines model for AuditOutcome.
type AuditOutcome struct {
	Message *string `json:"message,omitempty"`
	Status  *string `json:"status,omitempty"`
}

// AuthToken defines model for AuthToken.
type AuthToken struct {
	AccessToken *string `json:"access_token,omitempty"`
	ExpiresAt   *string `json:"expires_at,omitempty"`
	TokenType   *string `json:"token_type,omitempty"`
}

// AuthenticationDeviceNotifier defines model for AuthenticationDeviceNotifier.
type AuthenticationDeviceNotifier struct {
	Configuration *string                                    `json:"configuration,omitempty"`
	CreatedAt     *int64                                     `json:"createdAt,omitempty"`
	Id            *string                                    `json:"id,omitempty"`
	Name          *string                                    `json:"name,omitempty"`
	ReferenceId   *string                                    `json:"referenceId,omitempty"`
	ReferenceType *AuthenticationDeviceNotifierReferenceType `json:"referenceType,omitempty"`
	Type          *string                                    `json:"type,omitempty"`
	UpdatedAt     *int64                                     `json:"updatedAt,omitempty"`
}

// AuthenticationDeviceNotifierReferenceType defines model for AuthenticationDeviceNotifier.ReferenceType.
type AuthenticationDeviceNotifierReferenceType string

// BotDetection defines model for BotDetection.
type BotDetection struct {
	Configuration *string                    `json:"configuration,omitempty"`
	CreatedAt     *int64                     `json:"createdAt,omitempty"`
	DetectionType *string                    `json:"detectionType,omitempty"`
	Id            *string                    `json:"id,omitempty"`
	Name          *string                    `json:"name,omitempty"`
	ReferenceId   *string                    `json:"referenceId,omitempty"`
	ReferenceType *BotDetectionReferenceType `json:"referenceType,omitempty"`
	Type          *string                    `json:"type,omitempty"`
	UpdatedAt     *int64                     `json:"updatedAt,omitempty"`
}

// BotDetectionReferenceType defines model for BotDetection.ReferenceType.
type BotDetectionReferenceType string

// CIBASettingNotifier defines model for CIBASettingNotifier.
type CIBASettingNotifier struct {
	Id *string `json:"id,omitempty"`
}

// CIBASettings defines model for CIBASettings.
type CIBASettings struct {
	AuthReqExpiry        *int32                 `json:"authReqExpiry,omitempty"`
	BindingMessageLength *int32                 `json:"bindingMessageLength,omitempty"`
	DeviceNotifiers      *[]CIBASettingNotifier `json:"deviceNotifiers,omitempty"`
	Enabled              *bool                  `json:"enabled,omitempty"`
	TokenReqInterval     *int32                 `json:"tokenReqInterval,omitempty"`
}

// Certificate defines model for Certificate.
type Certificate struct {
	Value *string `json:"value,omitempty"`
}

// CertificateEntity defines model for CertificateEntity.
type CertificateEntity struct {
	Applications  *[]Application                     `json:"applications,omitempty"`
	Configuration *string                            `json:"configuration,omitempty"`
	CreatedAt     *int64                             `json:"createdAt,omitempty"`
	Domain        *string                            `json:"domain,omitempty"`
	ExpiresAt     *int64                             `json:"expiresAt,omitempty"`
	Id            *string                            `json:"id,omitempty"`
	Metadata      *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Name          *string                            `json:"name,omitempty"`
	Status        *CertificateEntityStatus           `json:"status,omitempty"`
	System        *bool                              `json:"system,omitempty"`
	Type          *string                            `json:"type,omitempty"`
	UpdatedAt     *int64                             `json:"updatedAt,omitempty"`
}

// CertificateEntityStatus defines model for CertificateEntity.Status.
type CertificateEntityStatus string

// CertificateKey defines model for CertificateKey.
type CertificateKey struct {
	Fmt      *string                            `json:"fmt,omitempty"`
	Metadata *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Payload  *string                            `json:"payload,omitempty"`
}

// ClientRegistrationSettings defines model for ClientRegistrationSettings.
type ClientRegistrationSettings struct {
	AllowHttpSchemeRedirectUri           *bool     `json:"allowHttpSchemeRedirectUri,omitempty"`
	AllowLocalhostRedirectUri            *bool     `json:"allowLocalhostRedirectUri,omitempty"`
	AllowWildCardRedirectUri             *bool     `json:"allowWildCardRedirectUri,omitempty"`
	AllowedScopes                        *[]string `json:"allowedScopes,omitempty"`
	AllowedScopesEnabled                 *bool     `json:"allowedScopesEnabled,omitempty"`
	ClientTemplateEnabled                *bool     `json:"clientTemplateEnabled,omitempty"`
	DefaultScopes                        *[]string `json:"defaultScopes,omitempty"`
	DynamicClientRegistrationEnabled     *bool     `json:"dynamicClientRegistrationEnabled,omitempty"`
	OpenDynamicClientRegistrationEnabled *bool     `json:"openDynamicClientRegistrationEnabled,omitempty"`
}

// CookieSettings defines model for CookieSettings.
type CookieSettings struct {
	Inherited *bool            `json:"inherited,omitempty"`
	Session   *SessionSettings `json:"session,omitempty"`
}

// CorsSettings defines model for CorsSettings.
type CorsSettings struct {
	AllowCredentials *bool     `json:"allowCredentials,omitempty"`
	AllowedHeaders   *[]string `json:"allowedHeaders,omitempty"`
	AllowedMethods   *[]string `json:"allowedMethods,omitempty"`
	AllowedOrigins   *[]string `json:"allowedOrigins,omitempty"`
	Enabled          *bool     `json:"enabled,omitempty"`
	MaxAge           *int32    `json:"maxAge,omitempty"`
}

// Credential defines model for Credential.
type Credential struct {
	Aaguid                     *string                  `json:"aaguid,omitempty"`
	AccessedAt                 *int64                   `json:"accessedAt,omitempty"`
	AttestationStatement       *string                  `json:"attestationStatement,omitempty"`
	AttestationStatementFormat *string                  `json:"attestationStatementFormat,omitempty"`
	Counter                    *int64                   `json:"counter,omitempty"`
	CreatedAt                  *int64                   `json:"createdAt,omitempty"`
	CredentialId               *string                  `json:"credentialId,omitempty"`
	Id                         *string                  `json:"id,omitempty"`
	IpAddress                  *string                  `json:"ipAddress,omitempty"`
	LastCheckedAt              *int64                   `json:"lastCheckedAt,omitempty"`
	PublicKey                  *string                  `json:"publicKey,omitempty"`
	ReferenceId                *string                  `json:"referenceId,omitempty"`
	ReferenceType              *CredentialReferenceType `json:"referenceType,omitempty"`
	UpdatedAt                  *int64                   `json:"updatedAt,omitempty"`
	UserAgent                  *string                  `json:"userAgent,omitempty"`
	UserId                     *string                  `json:"userId,omitempty"`
	Username                   *string                  `json:"username,omitempty"`
}

// CredentialReferenceType defines model for Credential.ReferenceType.
type CredentialReferenceType string

// DeviceIdentifierResource defines model for DeviceIdentifierResource.
type DeviceIdentifierResource = map[string]interface{}

// Domain defines model for Domain.
type Domain struct {
	AccountSettings                          *AccountSettings                      `json:"accountSettings,omitempty"`
	AlertEnabled                             *bool                                 `json:"alertEnabled,omitempty"`
	CorsSettings                             *CorsSettings                         `json:"corsSettings,omitempty"`
	CreatedAt                                *int64                                `json:"createdAt,omitempty"`
	Description                              *string                               `json:"description,omitempty"`
	DynamicClientRegistrationEnabled         *bool                                 `json:"dynamicClientRegistrationEnabled,omitempty"`
	DynamicClientRegistrationTemplateEnabled *bool                                 `json:"dynamicClientRegistrationTemplateEnabled,omitempty"`
	Enabled                                  *bool                                 `json:"enabled,omitempty"`
	Hrid                                     *string                               `json:"hrid,omitempty"`
	Id                                       *string                               `json:"id,omitempty"`
	Identities                               *[]string                             `json:"identities,omitempty"`
	LoginSettings                            *LoginSettings                        `json:"loginSettings,omitempty"`
	Master                                   *bool                                 `json:"master,omitempty"`
	Name                                     *string                               `json:"name,omitempty"`
	Oidc                                     *OIDCSettings                         `json:"oidc,omitempty"`
	OpenDynamicClientRegistrationEnabled     *bool                                 `json:"openDynamicClientRegistrationEnabled,omitempty"`
	PasswordSettings                         *PasswordSettings                     `json:"passwordSettings,omitempty"`
	Path                                     *string                               `json:"path,omitempty"`
	RedirectUriLocalhostAllowed              *bool                                 `json:"redirectUriLocalhostAllowed,omitempty"`
	RedirectUriStrictMatching                *bool                                 `json:"redirectUriStrictMatching,omitempty"`
	RedirectUriUnsecuredHttpSchemeAllowed    *bool                                 `json:"redirectUriUnsecuredHttpSchemeAllowed,omitempty"`
	RedirectUriWildcardAllowed               *bool                                 `json:"redirectUriWildcardAllowed,omitempty"`
	ReferenceId                              *string                               `json:"referenceId,omitempty"`
	ReferenceType                            *DomainReferenceType                  `json:"referenceType,omitempty"`
	Saml                                     *SAMLSettings                         `json:"saml,omitempty"`
	Scim                                     *SCIMSettings                         `json:"scim,omitempty"`
	SelfServiceAccountManagementSettings     *SelfServiceAccountManagementSettings `json:"selfServiceAccountManagementSettings,omitempty"`
	Tags                                     *[]string                             `json:"tags,omitempty"`
	Uma                                      *UMASettings                          `json:"uma,omitempty"`
	UpdatedAt                                *int64                                `json:"updatedAt,omitempty"`
	VhostMode                                *bool                                 `json:"vhostMode,omitempty"`
	Vhosts                                   *[]VirtualHost                        `json:"vhosts,omitempty"`
	WebAuthnSettings                         *WebAuthnSettings                     `json:"webAuthnSettings,omitempty"`
}

// DomainReferenceType defines model for Domain.ReferenceType.
type DomainReferenceType string

// Email defines model for Email.
type Email struct {
	Client          *string             `json:"client,omitempty"`
	Content         *string             `json:"content,omitempty"`
	CreatedAt       *int64              `json:"createdAt,omitempty"`
	DefaultTemplate *bool               `json:"defaultTemplate,omitempty"`
	Enabled         *bool               `json:"enabled,omitempty"`
	ExpiresAfter    *int32              `json:"expiresAfter,omitempty"`
	From            *string             `json:"from,omitempty"`
	FromName        *string             `json:"fromName,omitempty"`
	Id              *string             `json:"id,omitempty"`
	ReferenceId     *string             `json:"referenceId,omitempty"`
	ReferenceType   *EmailReferenceType `json:"referenceType,omitempty"`
	Subject         *string             `json:"subject,omitempty"`
	Template        *string             `json:"template,omitempty"`
	UpdatedAt       *int64              `json:"updatedAt,omitempty"`
}

// EmailReferenceType defines model for Email.ReferenceType.
type EmailReferenceType string

// EmailValue defines model for EmailValue.
type EmailValue struct {
	Email string `json:"email"`
}

// EnrolledFactor defines model for EnrolledFactor.
type EnrolledFactor struct {
	AppId     *string                 `json:"appId,omitempty"`
	Channel   *EnrolledFactorChannel  `json:"channel,omitempty"`
	CreatedAt *int64                  `json:"createdAt,omitempty"`
	FactorId  *string                 `json:"factorId,omitempty"`
	Primary   *bool                   `json:"primary,omitempty"`
	Security  *EnrolledFactorSecurity `json:"security,omitempty"`
	Status    *EnrolledFactorStatus   `json:"status,omitempty"`
	UpdatedAt *int64                  `json:"updatedAt,omitempty"`
}

// EnrolledFactorStatus defines model for EnrolledFactor.Status.
type EnrolledFactorStatus string

// EnrolledFactorChannel defines model for EnrolledFactorChannel.
type EnrolledFactorChannel struct {
	Target *string                    `json:"target,omitempty"`
	Type   *EnrolledFactorChannelType `json:"type,omitempty"`
}

// EnrolledFactorChannelType defines model for EnrolledFactorChannel.Type.
type EnrolledFactorChannelType string

// EnrolledFactorEntity defines model for EnrolledFactorEntity.
type EnrolledFactorEntity struct {
	CreatedAt *int64  `json:"createdAt,omitempty"`
	Id        *string `json:"id,omitempty"`
	Name      *string `json:"name,omitempty"`
	Type      *string `json:"type,omitempty"`
	UpdatedAt *int64  `json:"updatedAt,omitempty"`
}

// EnrolledFactorSecurity defines model for EnrolledFactorSecurity.
type EnrolledFactorSecurity struct {
	AdditionalData *map[string]map[string]interface{} `json:"additionalData,omitempty"`
	Type           *string                            `json:"type,omitempty"`
	Value          *string                            `json:"value,omitempty"`
}

// EnrollmentSettings defines model for EnrollmentSettings.
type EnrollmentSettings struct {
	ForceEnrollment *bool  `json:"forceEnrollment,omitempty"`
	SkipTimeSeconds *int64 `json:"skipTimeSeconds,omitempty"`
}

// Entrypoint defines model for Entrypoint.
type Entrypoint struct {
	CreatedAt         *int64    `json:"createdAt,omitempty"`
	DefaultEntrypoint *bool     `json:"defaultEntrypoint,omitempty"`
	Description       *string   `json:"description,omitempty"`
	Id                *string   `json:"id,omitempty"`
	Name              *string   `json:"name,omitempty"`
	OrganizationId    *string   `json:"organizationId,omitempty"`
	Tags              *[]string `json:"tags,omitempty"`
	UpdatedAt         *int64    `json:"updatedAt,omitempty"`
	Url               *string   `json:"url,omitempty"`
}

// Environment defines model for Environment.
type Environment struct {
	CreatedAt          *int64    `json:"createdAt,omitempty"`
	Description        *string   `json:"description,omitempty"`
	DomainRestrictions *[]string `json:"domainRestrictions,omitempty"`
	Hrids              *[]string `json:"hrids,omitempty"`
	Id                 *string   `json:"id,omitempty"`
	Name               *string   `json:"name,omitempty"`
	OrganizationId     *string   `json:"organizationId,omitempty"`
	UpdatedAt          *int64    `json:"updatedAt,omitempty"`
}

// ErrorEntity defines model for ErrorEntity.
type ErrorEntity struct {
	HttpStatus *int32  `json:"http_status,omitempty"`
	Message    *string `json:"message,omitempty"`
}

// ExtensionGrant defines model for ExtensionGrant.
type ExtensionGrant struct {
	Configuration    *string `json:"configuration,omitempty"`
	CreateUser       *bool   `json:"createUser,omitempty"`
	CreatedAt        *int64  `json:"createdAt,omitempty"`
	Domain           *string `json:"domain,omitempty"`
	GrantType        *string `json:"grantType,omitempty"`
	Id               *string `json:"id,omitempty"`
	IdentityProvider *string `json:"identityProvider,omitempty"`
	Name             *string `json:"name,omitempty"`
	Type             *string `json:"type,omitempty"`
	UpdatedAt        *int64  `json:"updatedAt,omitempty"`
	UserExists       *bool   `json:"userExists,omitempty"`
}

// Factor defines model for Factor.
type Factor struct {
	Configuration *string           `json:"configuration,omitempty"`
	CreatedAt     *int64            `json:"createdAt,omitempty"`
	Domain        *string           `json:"domain,omitempty"`
	FactorType    *FactorFactorType `json:"factorType,omitempty"`
	Id            *string           `json:"id,omitempty"`
	Name          *string           `json:"name,omitempty"`
	Type          *string           `json:"type,omitempty"`
	UpdatedAt     *int64            `json:"updatedAt,omitempty"`
}

// FactorFactorType defines model for Factor.FactorType.
type FactorFactorType string

// FilteredIdentityProviderInfo defines model for FilteredIdentityProviderInfo.
type FilteredIdentityProviderInfo struct {
	External *bool   `json:"external,omitempty"`
	Id       *string `json:"id,omitempty"`
	Name     *string `json:"name,omitempty"`
	System   *bool   `json:"system,omitempty"`
	Type     *string `json:"type,omitempty"`
}

// Flow defines model for Flow.
type Flow struct {
	Condition *string  `json:"condition,omitempty"`
	Enabled   *bool    `json:"enabled,omitempty"`
	Id        *string  `json:"id,omitempty"`
	Name      string   `json:"name"`
	Post      *[]Step  `json:"post,omitempty"`
	Pre       *[]Step  `json:"pre,omitempty"`
	Type      FlowType `json:"type"`
}

// FlowType defines model for Flow.Type.
type FlowType string

// FlowEntity defines model for FlowEntity.
type FlowEntity struct {
	Condition *string         `json:"condition,omitempty"`
	CreatedAt *int64          `json:"createdAt,omitempty"`
	Enabled   *bool           `json:"enabled,omitempty"`
	Id        *string         `json:"id,omitempty"`
	Name      *string         `json:"name,omitempty"`
	Post      *[]Step         `json:"post,omitempty"`
	Pre       *[]Step         `json:"pre,omitempty"`
	Type      *FlowEntityType `json:"type,omitempty"`
	UpdatedAt *int64          `json:"updatedAt,omitempty"`
}

// FlowEntityType defines model for FlowEntity.Type.
type FlowEntityType string

// Form defines model for Form.
type Form struct {
	Assets        *string            `json:"assets,omitempty"`
	Client        *string            `json:"client,omitempty"`
	Content       *string            `json:"content,omitempty"`
	CreatedAt     *int64             `json:"createdAt,omitempty"`
	Enabled       *bool              `json:"enabled,omitempty"`
	Id            *string            `json:"id,omitempty"`
	ReferenceId   *string            `json:"referenceId,omitempty"`
	ReferenceType *FormReferenceType `json:"referenceType,omitempty"`
	Template      *string            `json:"template,omitempty"`
	UpdatedAt     *int64             `json:"updatedAt,omitempty"`
}

// FormReferenceType defines model for Form.ReferenceType.
type FormReferenceType string

// FormField defines model for FormField.
type FormField struct {
	Key   *string `json:"key,omitempty"`
	Label *string `json:"label,omitempty"`
	Type  *string `json:"type,omitempty"`
}

// Group defines model for Group.
type Group struct {
	CreatedAt     *int64              `json:"createdAt,omitempty"`
	Description   *string             `json:"description,omitempty"`
	Id            *string             `json:"id,omitempty"`
	Members       *[]string           `json:"members,omitempty"`
	Name          *string             `json:"name,omitempty"`
	ReferenceId   *string             `json:"referenceId,omitempty"`
	ReferenceType *GroupReferenceType `json:"referenceType,omitempty"`
	Roles         *[]string           `json:"roles,omitempty"`
	UpdatedAt     *int64              `json:"updatedAt,omitempty"`
}

// GroupReferenceType defines model for Group.ReferenceType.
type GroupReferenceType string

// GroupPage defines model for GroupPage.
type GroupPage struct {
	CurrentPage *int32   `json:"currentPage,omitempty"`
	Data        *[]Group `json:"data,omitempty"`
	TotalCount  *int64   `json:"totalCount,omitempty"`
}

// I18nDictionary defines model for I18nDictionary.
type I18nDictionary struct {
	CreatedAt     *int64                       `json:"createdAt,omitempty"`
	Entries       *map[string]string           `json:"entries,omitempty"`
	Id            *string                      `json:"id,omitempty"`
	Locale        *string                      `json:"locale,omitempty"`
	Name          *string                      `json:"name,omitempty"`
	ReferenceId   *string                      `json:"referenceId,omitempty"`
	ReferenceType *I18nDictionaryReferenceType `json:"referenceType,omitempty"`
	UpdatedAt     *int64                       `json:"updatedAt,omitempty"`
}

// I18nDictionaryReferenceType defines model for I18nDictionary.ReferenceType.
type I18nDictionaryReferenceType string

// IdentityProvider defines model for IdentityProvider.
type IdentityProvider struct {
	Configuration   *string                        `json:"configuration,omitempty"`
	CreatedAt       *int64                         `json:"createdAt,omitempty"`
	DomainWhitelist *[]string                      `json:"domainWhitelist,omitempty"`
	External        *bool                          `json:"external,omitempty"`
	Id              *string                        `json:"id,omitempty"`
	Mappers         *map[string]string             `json:"mappers,omitempty"`
	Name            *string                        `json:"name,omitempty"`
	ReferenceId     *string                        `json:"referenceId,omitempty"`
	ReferenceType   *IdentityProviderReferenceType `json:"referenceType,omitempty"`
	RoleMapper      *map[string][]string           `json:"roleMapper,omitempty"`
	System          *bool                          `json:"system,omitempty"`
	Type            *string                        `json:"type,omitempty"`
	UpdatedAt       *int64                         `json:"updatedAt,omitempty"`
}

// IdentityProviderReferenceType defines model for IdentityProvider.ReferenceType.
type IdentityProviderReferenceType string

// InstallationEntity defines model for InstallationEntity.
type InstallationEntity struct {
	AdditionalInformation *map[string]string `json:"additionalInformation,omitempty"`
	CreatedAt             *int64             `json:"createdAt,omitempty"`
	Id                    *string            `json:"id,omitempty"`
	UpdatedAt             *int64             `json:"updatedAt,omitempty"`
}

// JWK defines model for JWK.
type JWK struct {
	Alg     *string   `json:"alg,omitempty"`
	KeyOps  *[]string `json:"keyOps,omitempty"`
	Kid     *string   `json:"kid,omitempty"`
	Kty     *string   `json:"kty,omitempty"`
	Use     *string   `json:"use,omitempty"`
	X5c     *[]string `json:"x5c,omitempty"`
	X5t     *string   `json:"x5t,omitempty"`
	X5tS256 *string   `json:"x5tS256,omitempty"`
	X5u     *string   `json:"x5u,omitempty"`
}

// JWKSet defines model for JWKSet.
type JWKSet struct {
	Keys *[]JWK `json:"keys,omitempty"`
}

// LoginSettings defines model for LoginSettings.
type LoginSettings struct {
	EnforcePasswordPolicyEnabled       *bool  `json:"enforcePasswordPolicyEnabled,omitempty"`
	ForgotPasswordEnabled              *bool  `json:"forgotPasswordEnabled,omitempty"`
	HideForm                           *bool  `json:"hideForm,omitempty"`
	IdentifierFirstEnabled             *bool  `json:"identifierFirstEnabled,omitempty"`
	Inherited                          *bool  `json:"inherited,omitempty"`
	PasswordlessEnabled                *bool  `json:"passwordlessEnabled,omitempty"`
	PasswordlessEnforcePasswordEnabled *bool  `json:"passwordlessEnforcePasswordEnabled,omitempty"`
	PasswordlessEnforcePasswordMaxAge  *int32 `json:"passwordlessEnforcePasswordMaxAge,omitempty"`
	PasswordlessRememberDeviceEnabled  *bool  `json:"passwordlessRememberDeviceEnabled,omitempty"`
	RegisterEnabled                    *bool  `json:"registerEnabled,omitempty"`
	RememberMeEnabled                  *bool  `json:"rememberMeEnabled,omitempty"`
}

// MFASettings defines model for MFASettings.
type MFASettings struct {
	AdaptiveAuthenticationRule *string                 `json:"adaptiveAuthenticationRule,omitempty"`
	Enrollment                 *EnrollmentSettings     `json:"enrollment,omitempty"`
	LoginRule                  *string                 `json:"loginRule,omitempty"`
	RememberDevice             *RememberDeviceSettings `json:"rememberDevice,omitempty"`
	StepUpAuthenticationRule   *string                 `json:"stepUpAuthenticationRule,omitempty"`
}

// Membership defines model for Membership.
type Membership struct {
	CreatedAt     *int64                   `json:"createdAt,omitempty"`
	Domain        *string                  `json:"domain,omitempty"`
	Id            *string                  `json:"id,omitempty"`
	MemberId      *string                  `json:"memberId,omitempty"`
	MemberType    *MembershipMemberType    `json:"memberType,omitempty"`
	ReferenceId   *string                  `json:"referenceId,omitempty"`
	ReferenceType *MembershipReferenceType `json:"referenceType,omitempty"`
	RoleId        *string                  `json:"roleId,omitempty"`
	UpdatedAt     *int64                   `json:"updatedAt,omitempty"`
}

// MembershipMemberType defines model for Membership.MemberType.
type MembershipMemberType string

// MembershipReferenceType defines model for Membership.ReferenceType.
type MembershipReferenceType string

// MembershipListItem defines model for MembershipListItem.
type MembershipListItem struct {
	Memberships *[]Membership                                 `json:"memberships,omitempty"`
	Metadata    *map[string]map[string]map[string]interface{} `json:"metadata,omitempty"`
}

// NewAlertNotifier defines model for NewAlertNotifier.
type NewAlertNotifier struct {
	Configuration string  `json:"configuration"`
	Enabled       *bool   `json:"enabled,omitempty"`
	Type          *string `json:"type,omitempty"`
}

// NewApplication defines model for NewApplication.
type NewApplication struct {
	ClientId     *string                            `json:"clientId,omitempty"`
	ClientSecret *string                            `json:"clientSecret,omitempty"`
	Description  *string                            `json:"description,omitempty"`
	Metadata     *map[string]map[string]interface{} `json:"metadata,omitempty"`
	Name         string                             `json:"name"`
	RedirectUris *[]string                          `json:"redirectUris,omitempty"`
	Type         NewApplicationType                 `json:"type"`
}

// NewApplicationType defines model for NewApplication.Type.
type NewApplicationType string

// NewAuthenticationDeviceNotifier defines model for NewAuthenticationDeviceNotifier.
type NewAuthenticationDeviceNotifier struct {
	Configuration string  `json:"configuration"`
	Id            *string `json:"id,omitempty"`
	Name          string  `json:"name"`
	Type          string  `json:"type"`
}

// NewBotDetection defines model for NewBotDetection.
type NewBotDetection struct {
	Configuration string  `json:"configuration"`
	DetectionType string  `json:"detectionType"`
	Id            *string `json:"id,omitempty"`
	Name          string  `json:"name"`
	Type          string  `json:"type"`
}

// NewCertificate defines model for NewCertificate.
type NewCertificate struct {
	Configuration string `json:"configuration"`
	Name          string `json:"name"`
	Type          string `json:"type"`
}

// NewDeviceIdentifier defines model for NewDeviceIdentifier.
type NewDeviceIdentifier struct {
	Configuration string  `json:"configuration"`
	Id            *string `json:"id,omitempty"`
	Name          string  `json:"name"`
	Type          string  `json:"type"`
}

// NewDictionary defines model for NewDictionary.
type NewDictionary struct {
	Locale *string `json:"locale,omitempty"`
	Name   *string `json:"name,omitempty"`
}

// NewDomain defines model for NewDomain.
type NewDomain struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
}

// NewEmail defines model for NewEmail.
type NewEmail struct {
	Content      string           `json:"content"`
	Enabled      *bool            `json:"enabled,omitempty"`
	ExpiresAfter int32            `json:"expiresAfter"`
	From         string           `json:"from"`
	FromName     *string          `json:"fromName,omitempty"`
	Subject      string           `json:"subject"`
	Template     NewEmailTemplate `json:"template"`
}

// NewEmailTemplate defines model for NewEmail.Template.
type NewEmailTemplate string

// NewEntrypoint defines model for NewEntrypoint.
type NewEntrypoint struct {
	Description *string  `json:"description,omitempty"`
	Name        string   `json:"name"`
	Tags        []string `json:"tags"`
	Url         string   `json:"url"`
}

// NewExtensionGrant defines model for NewExtensionGrant.
type NewExtensionGrant struct {
	Configuration    string  `json:"configuration"`
	CreateUser       *bool   `json:"createUser,omitempty"`
	GrantType        string  `json:"grantType"`
	IdentityProvider *string `json:"identityProvider,omitempty"`
	Name             string  `json:"name"`
	Type             string  `json:"type"`
	UserExists       *bool   `json:"userExists,omitempty"`
}

// NewFactor defines model for NewFactor.
type NewFactor struct {
	Configuration string  `json:"configuration"`
	FactorType    string  `json:"factorType"`
	Id            *string `json:"id,omitempty"`
	Name          string  `json:"name"`
	Type          string  `json:"type"`
}

// NewForm defines model for NewForm.
type NewForm struct {
	Assets   *string         `json:"assets,omitempty"`
	Content  string          `json:"content"`
	Enabled  *bool           `json:"enabled,omitempty"`
	Template NewFormTemplate `json:"template"`
}

// NewFormTemplate defines model for NewForm.Template.
type NewFormTemplate string

// NewGroup defines model for NewGroup.
type NewGroup struct {
	Description *string   `json:"description,omitempty"`
	Members     *[]string `json:"members,omitempty"`
	Name        string    `json:"name"`
}

// NewIdentityProvider defines model for NewIdentityProvider.
type NewIdentityProvider struct {
	Configuration   string    `json:"configuration"`
	DomainWhitelist *[]string `json:"domainWhitelist,omitempty"`
	External        *bool     `json:"external,omitempty"`
	Id              *string   `json:"id,omitempty"`
	Name            string    `json:"name"`
	Type            string    `json:"type"`
}

// NewMembership defines model for NewMembership.
type NewMembership struct {
	MemberId   string                  `json:"memberId"`
	MemberType NewMembershipMemberType `json:"memberType"`
	Role       string                  `json:"role"`
}

// NewMembershipMemberType defines model for NewMembership.MemberType.
type NewMembershipMemberType string

// NewReporter defines model for NewReporter.
type NewReporter struct {
	Configuration string  `json:"configuration"`
	Enabled       *bool   `json:"enabled,omitempty"`
	Id            *string `json:"id,omitempty"`
	Name          string  `json:"name"`
	Type          string  `json:"type"`
}

// NewRole defines model for NewRole.
type NewRole struct {
	AssignableType *NewRoleAssignableType `json:"assignableType,omitempty"`
	Description    *string                `json:"description,omitempty"`
	Name           string                 `json:"name"`
}

// NewRoleAssignableType defines model for NewRole.AssignableType.
type NewRoleAssignableType string

// NewScope defines model for NewScope.
type NewScope struct {
	Description   string  `json:"description"`
	Discovery     *bool   `json:"discovery,omitempty"`
	ExpiresIn     *int32  `json:"expiresIn,omitempty"`
	IconUri       *string `json:"iconUri,omitempty"`
	Key           string  `json:"key"`
	Name          string  `json:"name"`
	Parameterized *bool   `json:"parameterized,omitempty"`
}

// NewServiceResource defines model for NewServiceResource.
type NewServiceResource struct {
	Configuration string  `json:"configuration"`
	Id            *string `json:"id,omitempty"`
	Name          string  `json:"name"`
	Type          string  `json:"type"`
}

// NewTag defines model for NewTag.
type NewTag struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
}

// NewTheme defines model for NewTheme.
type NewTheme struct {
	Css                     *string `json:"css,omitempty"`
	FaviconUrl              *string `json:"faviconUrl,omitempty"`
	LogoUrl                 *string `json:"logoUrl,omitempty"`
	LogoWidth               *int32  `json:"logoWidth,omitempty"`
	PrimaryButtonColorHex   *string `json:"primaryButtonColorHex,omitempty"`
	PrimaryTextColorHex     *string `json:"primaryTextColorHex,omitempty"`
	SecondaryButtonColorHex *string `json:"secondaryButtonColorHex,omitempty"`
	SecondaryTextColorHex   *string `json:"secondaryTextColorHex,omitempty"`
}

// NewUser defines model for NewUser.
type NewUser struct {
	AccountNonExpired     *bool                              `json:"accountNonExpired,omitempty"`
	AccountNonLocked      *bool                              `json:"accountNonLocked,omitempty"`
	AdditionalInformation *map[string]map[string]interface{} `json:"additionalInformation,omitempty"`
	Client                *string                            `json:"client,omitempty"`
	CreatedAt             *int64                             `json:"createdAt,omitempty"`
	CredentialsNonExpired *bool                              `json:"credentialsNonExpired,omitempty"`
	Domain                *string                            `json:"domain,omitempty"`
	Email                 *string                            `json:"email,omitempty"`
	Enabled               *bool                              `json:"enabled,omitempty"`
	ExternalId            *string                            `json:"externalId,omitempty"`
	FirstName             *string                            `json:"firstName,omitempty"`
	Internal              *bool                              `json:"internal,omitempty"`
	LastName              *string                            `json:"lastName,omitempty"`
	LoggedAt              *int64                             `json:"loggedAt,omitempty"`
	LoginsCount           *int64                             `json:"loginsCount,omitempty"`
	Password              *string                            `json:"password,omitempty"`
	PreRegistration       *bool                              `json:"preRegistration,omitempty"`
	PreferredLanguage     *string                            `json:"preferredLanguage,omitempty"`
	RegistrationCompleted *bool                              `json:"registrationCompleted,omitempty"`
	Source                *string                            `json:"source,omitempty"`
	UpdatedAt             *int64                             `json:"updatedAt,omitempty"`
	Username              *string                            `json:"username,omitempty"`
}

// NotifierPlugin defines model for NotifierPlugin.
type NotifierPlugin struct {
	Description *string `json:"description,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	Icon        *string `json:"icon,omitempty"`
	Id          *string `json:"id,omitempty"`
	Name        *string `json:"name,omitempty"`
	Version     *string `json:"version,omitempty"`
}

// OIDCSettings defines model for OIDCSettings.
type OIDCSettings struct {
	CibaSettings               *CIBASettings               `json:"cibaSettings,omitempty"`
	ClientRegistrationSettings *ClientRegistrationSettings `json:"clientRegistrationSettings,omitempty"`
	PostLogoutRedirectUris     *[]string                   `json:"postLogoutRedirectUris,omitempty"`
	RedirectUriStrictMatching  *bool                       `json:"redirectUriStrictMatching,omitempty"`
	RequestUris                *[]string                   `json:"requestUris,omitempty"`
	SecurityProfileSettings    *SecurityProfileSettings    `json:"securityProfileSettings,omitempty"`
}

// Organization defines model for Organization.
type Organization struct {
	AccountSettings                          *AccountSettings                      `json:"accountSettings,omitempty"`
	AlertEnabled                             *bool                                 `json:"alertEnabled,omitempty"`
	CorsSettings                             *CorsSettings                         `json:"corsSettings,omitempty"`
	CreatedAt                                *int64                                `json:"createdAt,omitempty"`
	Description                              *string                               `json:"description,omitempty"`
	DynamicClientRegistrationEnabled         *bool                                 `json:"dynamicClientRegistrationEnabled,omitempty"`
	DynamicClientRegistrationTemplateEnabled *bool                                 `json:"dynamicClientRegistrationTemplateEnabled,omitempty"`
	Enabled                                  *bool                                 `json:"enabled,omitempty"`
	Hrid                                     *[]string                             `json:"hrid,omitempty"`
	Id                                       *string                               `json:"id,omitempty"`
	Identities                               *[]string                             `json:"identities,omitempty"`
	LoginSettings                            *LoginSettings                        `json:"loginSettings,omitempty"`
	Master                                   *bool                                 `json:"master,omitempty"`
	Name                                     *string                               `json:"name,omitempty"`
	Oidc                                     *OIDCSettings                         `json:"oidc,omitempty"`
	OpenDynamicClientRegistrationEnabled     *bool                                 `json:"openDynamicClientRegistrationEnabled,omitempty"`
	PasswordSettings                         *PasswordSettings                     `json:"passwordSettings,omitempty"`
	Path                                     *string                               `json:"path,omitempty"`
	RedirectUriLocalhostAllowed              *bool                                 `json:"redirectUriLocalhostAllowed,omitempty"`
	RedirectUriStrictMatching                *bool                                 `json:"redirectUriStrictMatching,omitempty"`
	RedirectUriUnsecuredHttpSchemeAllowed    *bool                                 `json:"redirectUriUnsecuredHttpSchemeAllowed,omitempty"`
	RedirectUriWildcardAllowed               *bool                                 `json:"redirectUriWildcardAllowed,omitempty"`
	ReferenceId                              *string                               `json:"referenceId,omitempty"`
	ReferenceType                            *OrganizationReferenceType            `json:"referenceType,omitempty"`
	Saml                                     *SAMLSettings                         `json:"saml,omitempty"`
	Scim                                     *SCIMSettings                         `json:"scim,omitempty"`
	SelfServiceAccountManagementSettings     *SelfServiceAccountManagementSettings `json:"selfServiceAccountManagementSettings,omitempty"`
	Tags                                     *[]string                             `json:"tags,omitempty"`
	Uma                                      *UMASettings                          `json:"uma,omitempty"`
	UpdatedAt                                *int64                                `json:"updatedAt,omitempty"`
	VhostMode                                *bool                                 `json:"vhostMode,omitempty"`
	Vhosts                                   *[]VirtualHost                        `json:"vhosts,omitempty"`
	WebAuthnSettings                         *WebAuthnSettings                     `json:"webAuthnSettings,omitempty"`
}

// OrganizationReferenceType defines model for Organization.ReferenceType.
type OrganizationReferenceType string

// Page defines model for Page.
type Page struct {
	CurrentPage *int32                    `json:"currentPage,omitempty"`
	Data        *[]map[string]interface{} `json:"data,omitempty"`
	TotalCount  *int64                    `json:"totalCount,omitempty"`
}

// PasswordSettings defines model for PasswordSettings.
type PasswordSettings struct {
	ExcludePasswordsInDictionary     *bool  `json:"excludePasswordsInDictionary,omitempty"`
	ExcludeUserProfileInfoInPassword *bool  `json:"excludeUserProfileInfoInPassword,omitempty"`
	ExpiryDuration                   *int32 `json:"expiryDuration,omitempty"`
	IncludeNumbers                   *bool  `json:"includeNumbers,omitempty"`
	IncludeSpecialCharacters         *bool  `json:"includeSpecialCharacters,omitempty"`
	Inherited                        *bool  `json:"inherited,omitempty"`
	LettersInMixedCase               *bool  `json:"lettersInMixedCase,omitempty"`
	MaxConsecutiveLetters            *int32 `json:"maxConsecutiveLetters,omitempty"`
	MaxLength                        *int32 `json:"maxLength,omitempty"`
	MinLength                        *int32 `json:"minLength,omitempty"`
	OldPasswords                     *int32 `json:"oldPasswords,omitempty"`
	PasswordHistoryEnabled           *bool  `json:"passwordHistoryEnabled,omitempty"`
}

// PasswordValue defines model for PasswordValue.
type PasswordValue struct {
	Password string `json:"password"`
}

// PatchAlertNotifier defines model for PatchAlertNotifier.
type PatchAlertNotifier struct {
	Configuration *string `json:"configuration,omitempty"`
	Enabled       *bool   `json:"enabled,omitempty"`
	Name          *string `json:"name,omitempty"`
}

// PatchAlertTrigger defines model for PatchAlertTrigger.
type PatchAlertTrigger struct {
	AlertNotifiers *[]string             `json:"alertNotifiers,omitempty"`
	Enabled        *bool                 `json:"enabled,omitempty"`
	Type           PatchAlertTriggerType `json:"type"`
}

// PatchAlertTriggerType defines model for PatchAlertTrigger.Type.
type PatchAlertTriggerType string

// PatchApplication defines model for PatchApplication.
type PatchApplication struct {
	Certificate         *string                                `json:"certificate,omitempty"`
	Description         *string                                `json:"description,omitempty"`
	Enabled             *bool                                  `json:"enabled,omitempty"`
	Factors             *[]string                              `json:"factors,omitempty"`
	IdentityProviders   *[]PatchApplicationIdentityProvider    `json:"identityProviders,omitempty"`
	Metadata            *map[string]map[string]interface{}     `json:"metadata,omitempty"`
	Name                *string                                `json:"name,omitempty"`
	RequiredPermissions *[]PatchApplicationRequiredPermissions `json:"requiredPermissions,omitempty"`
	Settings            *PatchApplicationSettings              `json:"settings,omitempty"`
	Template            *bool                                  `json:"template,omitempty"`
}

// PatchApplicationRequiredPermissions defines model for PatchApplication.RequiredPermissions.
type PatchApplicationRequiredPermissions string

// PatchApplicationAdvancedSettings defines model for PatchApplicationAdvancedSettings.
type PatchApplicationAdvancedSettings struct {
	FlowsInherited *bool `json:"flowsInherited,omitempty"`
	SkipConsent    *bool `json:"skipConsent,omitempty"`
}

// PatchApplicationIdentityProvider defines model for PatchApplicationIdentityProvider.
type PatchApplicationIdentityProvider struct {
	Identity      *string `json:"identity,omitempty"`
	Priority      *int32  `json:"priority,omitempty"`
	SelectionRule *string `json:"selectionRule,omitempty"`
}

// PatchApplicationOAuthSettings defines model for PatchApplicationOAuthSettings.
type PatchApplicationOAuthSettings struct {
	AccessTokenValiditySeconds            *int32                      `json:"accessTokenValiditySeconds,omitempty"`
	ApplicationType                       *string                     `json:"applicationType,omitempty"`
	AuthorizationEncryptedResponseAlg     *string                     `json:"authorizationEncryptedResponseAlg,omitempty"`
	AuthorizationEncryptedResponseEnc     *string                     `json:"authorizationEncryptedResponseEnc,omitempty"`
	AuthorizationSignedResponseAlg        *string                     `json:"authorizationSignedResponseAlg,omitempty"`
	ClientIdIssuedAt                      *int64                      `json:"clientIdIssuedAt,omitempty"`
	ClientName                            *string                     `json:"clientName,omitempty"`
	ClientSecretExpiresAt                 *int64                      `json:"clientSecretExpiresAt,omitempty"`
	ClientUri                             *string                     `json:"clientUri,omitempty"`
	Contacts                              *[]string                   `json:"contacts,omitempty"`
	DefaultACRvalues                      *[]string                   `json:"defaultACRvalues,omitempty"`
	DefaultMaxAge                         *int32                      `json:"defaultMaxAge,omitempty"`
	DisableRefreshTokenRotation           *bool                       `json:"disableRefreshTokenRotation,omitempty"`
	EnhanceScopesWithUserPermissions      *bool                       `json:"enhanceScopesWithUserPermissions,omitempty"`
	ForcePKCE                             *bool                       `json:"forcePKCE,omitempty"`
	ForceS256CodeChallengeMethod          *bool                       `json:"forceS256CodeChallengeMethod,omitempty"`
	GrantTypes                            *[]string                   `json:"grantTypes,omitempty"`
	IdTokenEncryptedResponseAlg           *string                     `json:"idTokenEncryptedResponseAlg,omitempty"`
	IdTokenEncryptedResponseEnc           *string                     `json:"idTokenEncryptedResponseEnc,omitempty"`
	IdTokenSignedResponseAlg              *string                     `json:"idTokenSignedResponseAlg,omitempty"`
	IdTokenValiditySeconds                *int32                      `json:"idTokenValiditySeconds,omitempty"`
	InitiateLoginUri                      *string                     `json:"initiateLoginUri,omitempty"`
	Jwks                                  *JWKSet                     `json:"jwks,omitempty"`
	JwksUri                               *string                     `json:"jwksUri,omitempty"`
	LogoUri                               *string                     `json:"logoUri,omitempty"`
	PolicyUri                             *string                     `json:"policyUri,omitempty"`
	PostLogoutRedirectUris                *[]string                   `json:"postLogoutRedirectUris,omitempty"`
	RedirectUris                          *[]string                   `json:"redirectUris,omitempty"`
	RefreshTokenValiditySeconds           *int32                      `json:"refreshTokenValiditySeconds,omitempty"`
	RegistrationAccessToken               *string                     `json:"registrationAccessToken,omitempty"`
	RegistrationClientUri                 *string                     `json:"registrationClientUri,omitempty"`
	RequestObjectEncryptionAlg            *string                     `json:"requestObjectEncryptionAlg,omitempty"`
	RequestObjectEncryptionEnc            *string                     `json:"requestObjectEncryptionEnc,omitempty"`
	RequestObjectSigningAlg               *string                     `json:"requestObjectSigningAlg,omitempty"`
	RequestUris                           *[]string                   `json:"requestUris,omitempty"`
	RequireAuthTime                       *bool                       `json:"requireAuthTime,omitempty"`
	ResponseTypes                         *[]string                   `json:"responseTypes,omitempty"`
	ScopeSettings                         *[]ApplicationScopeSettings `json:"scopeSettings,omitempty"`
	SectorIdentifierUri                   *string                     `json:"sectorIdentifierUri,omitempty"`
	SilentReAuthentication                *bool                       `json:"silentReAuthentication,omitempty"`
	SingleSignOut                         *bool                       `json:"singleSignOut,omitempty"`
	SoftwareId                            *string                     `json:"softwareId,omitempty"`
	SoftwareStatement                     *string                     `json:"softwareStatement,omitempty"`
	SoftwareVersion                       *string                     `json:"softwareVersion,omitempty"`
	SubjectType                           *string                     `json:"subjectType,omitempty"`
	TlsClientAuthSanDns                   *string                     `json:"tlsClientAuthSanDns,omitempty"`
	TlsClientAuthSanEmail                 *string                     `json:"tlsClientAuthSanEmail,omitempty"`
	TlsClientAuthSanIp                    *string                     `json:"tlsClientAuthSanIp,omitempty"`
	TlsClientAuthSanUri                   *string                     `json:"tlsClientAuthSanUri,omitempty"`
	TlsClientAuthSubjectDn                *string                     `json:"tlsClientAuthSubjectDn,omitempty"`
	TlsClientCertificateBoundAccessTokens *bool                       `json:"tlsClientCertificateBoundAccessTokens,omitempty"`
	TokenCustomClaims                     *[]TokenClaim               `json:"tokenCustomClaims,omitempty"`
	TokenEndpointAuthMethod               *string                     `json:"tokenEndpointAuthMethod,omitempty"`
	TokenEndpointAuthSigningAlg           *string                     `json:"tokenEndpointAuthSigningAlg,omitempty"`
	TosUri                                *string                     `json:"tosUri,omitempty"`
	UserinfoEncryptedResponseAlg          *string                     `json:"userinfoEncryptedResponseAlg,omitempty"`
	UserinfoEncryptedResponseEnc          *string                     `json:"userinfoEncryptedResponseEnc,omitempty"`
	UserinfoSignedResponseAlg             *string                     `json:"userinfoSignedResponseAlg,omitempty"`
}

// PatchApplicationSAMLSettings defines model for PatchApplicationSAMLSettings.
type PatchApplicationSAMLSettings struct {
	AttributeConsumeServiceUrl *string `json:"attributeConsumeServiceUrl,omitempty"`
	Certificate                *string `json:"certificate,omitempty"`
	EntityId                   *string `json:"entityId,omitempty"`
	SingleLogoutServiceUrl     *string `json:"singleLogoutServiceUrl,omitempty"`
	WantAssertionsSigned       *bool   `json:"wantAssertionsSigned,omitempty"`
	WantResponseSigned         *bool   `json:"wantResponseSigned,omitempty"`
}

// PatchApplicationSettings defines model for PatchApplicationSettings.
type PatchApplicationSettings struct {
	Account             *AccountSettings                               `json:"account,omitempty"`
	Advanced            *PatchApplicationAdvancedSettings              `json:"advanced,omitempty"`
	CookieSettings      *CookieSettings                                `json:"cookieSettings,omitempty"`
	Login               *LoginSettings                                 `json:"login,omitempty"`
	Mfa                 *PatchMFASettings                              `json:"mfa,omitempty"`
	Oauth               *PatchApplicationOAuthSettings                 `json:"oauth,omitempty"`
	PasswordSettings    *PatchPasswordSettings                         `json:"passwordSettings,omitempty"`
	RequiredPermissions *[]PatchApplicationSettingsRequiredPermissions `json:"requiredPermissions,omitempty"`
	RiskAssessment      *RiskAssessmentSettings                        `json:"riskAssessment,omitempty"`
	Saml                *PatchApplicationSAMLSettings                  `json:"saml,omitempty"`
}

// PatchApplicationSettingsRequiredPermissions defines model for PatchApplicationSettings.RequiredPermissions.
type PatchApplicationSettingsRequiredPermissions string

// PatchApplicationType defines model for PatchApplicationType.
type PatchApplicationType struct {
	Type PatchApplicationTypeType `json:"type"`
}

// PatchApplicationTypeType defines model for PatchApplicationType.Type.
type PatchApplicationTypeType string

// PatchCIBASettings defines model for PatchCIBASettings.
type PatchCIBASettings struct {
	AuthReqExpiry        *int32                 `json:"authReqExpiry,omitempty"`
	BindingMessageLength *int32                 `json:"bindingMessageLength,omitempty"`
	DeviceNotifiers      *[]CIBASettingNotifier `json:"deviceNotifiers,omitempty"`
	Enabled              *bool                  `json:"enabled,omitempty"`
	TokenReqInterval     *int32                 `json:"tokenReqInterval,omitempty"`
}

// PatchClientRegistrationSettings defines model for PatchClientRegistrationSettings.
type PatchClientRegistrationSettings struct {
	AllowHttpSchemeRedirectUri *bool     `json:"allowHttpSchemeRedirectUri,omitempty"`
	AllowLocalhostRedirectUri  *bool     `json:"allowLocalhostRedirectUri,omitempty"`
	AllowWildCardRedirectUri   *bool     `json:"allowWildCardRedirectUri,omitempty"`
	AllowedScopes              *[]string `json:"allowedScopes,omitempty"`
	DefaultScopes              *[]string `json:"defaultScopes,omitempty"`
}

// PatchDomain defines model for PatchDomain.
type PatchDomain struct {
	AccountSettings                      *AccountSettings                      `json:"accountSettings,omitempty"`
	AlertEnabled                         *bool                                 `json:"alertEnabled,omitempty"`
	CorsSettings                         *CorsSettings                         `json:"corsSettings,omitempty"`
	Description                          *string                               `json:"description,omitempty"`
	Enabled                              *bool                                 `json:"enabled,omitempty"`
	LoginSettings                        *LoginSettings                        `json:"loginSettings,omitempty"`
	Master                               *bool                                 `json:"master,omitempty"`
	Name                                 *string                               `json:"name,omitempty"`
	Oidc                                 *PatchOIDCSettings                    `json:"oidc,omitempty"`
	PasswordSettings                     *PatchPasswordSettings                `json:"passwordSettings,omitempty"`
	Path                                 *string                               `json:"path,omitempty"`
	RequiredPermissions                  *[]PatchDomainRequiredPermissions     `json:"requiredPermissions,omitempty"`
	Saml                                 *PatchSAMLSettings                    `json:"saml,omitempty"`
	Scim                                 *SCIMSettings                         `json:"scim,omitempty"`
	SelfServiceAccountManagementSettings *SelfServiceAccountManagementSettings `json:"selfServiceAccountManagementSettings,omitempty"`
	Tags                                 *[]string                             `json:"tags,omitempty"`
	Uma                                  *UMASettings                          `json:"uma,omitempty"`
	VhostMode                            *bool                                 `json:"vhostMode,omitempty"`
	Vhosts                               *[]VirtualHost                        `json:"vhosts,omitempty"`
	WebAuthnSettings                     *WebAuthnSettings                     `json:"webAuthnSettings,omitempty"`
}

// PatchDomainRequiredPermissions defines model for PatchDomain.RequiredPermissions.
type PatchDomainRequiredPermissions string

// PatchEnrollmentSettings defines model for PatchEnrollmentSettings.
type PatchEnrollmentSettings struct {
	ForceEnrollment *bool  `json:"forceEnrollment,omitempty"`
	SkipTimeSeconds *int64 `json:"skipTimeSeconds,omitempty"`
}

// PatchMFASettings defines model for PatchMFASettings.
type PatchMFASettings struct {
	AdaptiveAuthenticationRule *string                      `json:"adaptiveAuthenticationRule,omitempty"`
	Enrollment                 *PatchEnrollmentSettings     `json:"enrollment,omitempty"`
	LoginRule                  *string                      `json:"loginRule,omitempty"`
	RememberDevice             *PatchRememberDeviceSettings `json:"rememberDevice,omitempty"`
	StepUpAuthenticationRule   *string                      `json:"stepUpAuthenticationRule,omitempty"`
}

// PatchOIDCSettings defines model for PatchOIDCSettings.
type PatchOIDCSettings struct {
	CibaSettings               *PatchCIBASettings                      `json:"cibaSettings,omitempty"`
	ClientRegistrationSettings *PatchClientRegistrationSettings        `json:"clientRegistrationSettings,omitempty"`
	PostLogoutRedirectUris     *[]string                               `json:"postLogoutRedirectUris,omitempty"`
	RedirectUriStrictMatching  *bool                                   `json:"redirectUriStrictMatching,omitempty"`
	RequestUris                *[]string                               `json:"requestUris,omitempty"`
	RequiredPermissions        *[]PatchOIDCSettingsRequiredPermissions `json:"requiredPermissions,omitempty"`
	SecurityProfileSettings    *PatchSecurityProfileSettings           `json:"securityProfileSettings,omitempty"`
}

// PatchOIDCSettingsRequiredPermissions defines model for PatchOIDCSettings.RequiredPermissions.
type PatchOIDCSettingsRequiredPermissions string

// PatchOrganization defines model for PatchOrganization.
type PatchOrganization = map[string]interface{}

// PatchPasswordSettings defines model for PatchPasswordSettings.
type PatchPasswordSettings struct {
	ExcludePasswordsInDictionary     *bool  `json:"excludePasswordsInDictionary,omitempty"`
	ExcludeUserProfileInfoInPassword *bool  `json:"excludeUserProfileInfoInPassword,omitempty"`
	ExpiryDuration                   *int32 `json:"expiryDuration,omitempty"`
	IncludeNumbers                   *bool  `json:"includeNumbers,omitempty"`
	IncludeSpecialCharacters         *bool  `json:"includeSpecialCharacters,omitempty"`
	Inherited                        *bool  `json:"inherited,omitempty"`
	LettersInMixedCase               *bool  `json:"lettersInMixedCase,omitempty"`
	MaxConsecutiveLetters            *int32 `json:"maxConsecutiveLetters,omitempty"`
	MaxLength                        *int32 `json:"maxLength,omitempty"`
	MinLength                        *int32 `json:"minLength,omitempty"`
	OldPasswords                     *int32 `json:"oldPasswords,omitempty"`
	PasswordHistoryEnabled           *bool  `json:"passwordHistoryEnabled,omitempty"`
}

// PatchRememberDeviceSettings defines model for PatchRememberDeviceSettings.
type PatchRememberDeviceSettings struct {
	Active                *bool   `json:"active,omitempty"`
	DeviceIdentifierId    *string `json:"deviceIdentifierId,omitempty"`
	ExpirationTimeSeconds *int64  `json:"expirationTimeSeconds,omitempty"`
}

// PatchSAMLSettings defines model for PatchSAMLSettings.
type PatchSAMLSettings struct {
	Certificate         *string                                 `json:"certificate,omitempty"`
	Enabled             *bool                                   `json:"enabled,omitempty"`
	EntityId            *string                                 `json:"entityId,omitempty"`
	RequiredPermissions *[]PatchSAMLSettingsRequiredPermissions `json:"requiredPermissions,omitempty"`
}

// PatchSAMLSettingsRequiredPermissions defines model for PatchSAMLSettings.RequiredPermissions.
type PatchSAMLSettingsRequiredPermissions string

// PatchScope defines model for PatchScope.
type PatchScope struct {
	Description   *string `json:"description,omitempty"`
	Discovery     *bool   `json:"discovery,omitempty"`
	ExpiresIn     *int32  `json:"expiresIn,omitempty"`
	IconUri       *string `json:"iconUri,omitempty"`
	Name          *string `json:"name,omitempty"`
	Parameterized *bool   `json:"parameterized,omitempty"`
}

// PatchSecurityProfileSettings defines model for PatchSecurityProfileSettings.
type PatchSecurityProfileSettings struct {
	EnableFapiBrazil *bool `json:"enableFapiBrazil,omitempty"`
	EnablePlainFapi  *bool `json:"enablePlainFapi,omitempty"`
}

// PreviewRequest defines model for PreviewRequest.
type PreviewRequest struct {
	Content  *string            `json:"content,omitempty"`
	Template string             `json:"template"`
	Theme    *Theme             `json:"theme,omitempty"`
	Type     PreviewRequestType `json:"type"`
}

// PreviewRequestType defines model for PreviewRequest.Type.
type PreviewRequestType string

// PreviewResponse defines model for PreviewResponse.
type PreviewResponse struct {
	Content  *string              `json:"content,omitempty"`
	Template *string              `json:"template,omitempty"`
	Type     *PreviewResponseType `json:"type,omitempty"`
}

// PreviewResponseType defines model for PreviewResponse.Type.
type PreviewResponseType string

// RememberDeviceSettings defines model for RememberDeviceSettings.
type RememberDeviceSettings struct {
	Active                *bool   `json:"active,omitempty"`
	DeviceIdentifierId    *string `json:"deviceIdentifierId,omitempty"`
	ExpirationTimeSeconds *int64  `json:"expirationTimeSeconds,omitempty"`
}

// Reporter defines model for Reporter.
type Reporter struct {
	Configuration *string `json:"configuration,omitempty"`
	CreatedAt     *int64  `json:"createdAt,omitempty"`
	DataType      *string `json:"dataType,omitempty"`
	Domain        *string `json:"domain,omitempty"`
	Enabled       *bool   `json:"enabled,omitempty"`
	Id            *string `json:"id,omitempty"`
	Name          *string `json:"name,omitempty"`
	System        *bool   `json:"system,omitempty"`
	Type          *string `json:"type,omitempty"`
	UpdatedAt     *int64  `json:"updatedAt,omitempty"`
}

// ResetPasswordSettings defines model for ResetPasswordSettings.
type ResetPasswordSettings struct {
	OldPasswordRequired *bool  `json:"oldPasswordRequired,omitempty"`
	TokenAge            *int32 `json:"tokenAge,omitempty"`
}

// Resource defines model for Resource.
type Resource struct {
	ClientId       *string   `json:"clientId,omitempty"`
	CreatedAt      *int64    `json:"createdAt,omitempty"`
	Description    *string   `json:"description,omitempty"`
	Domain         *string   `json:"domain,omitempty"`
	IconUri        *string   `json:"iconUri,omitempty"`
	Id             *string   `json:"id,omitempty"`
	Name           *string   `json:"name,omitempty"`
	ResourceScopes *[]string `json:"resourceScopes,omitempty"`
	Type           *string   `json:"type,omitempty"`
	UpdatedAt      *int64    `json:"updatedAt,omitempty"`
	UserId         *string   `json:"userId,omitempty"`
}

// ResourceEntity defines model for ResourceEntity.
type ResourceEntity struct {
	ClientId        *string   `json:"clientId,omitempty"`
	CreatedAt       *int64    `json:"createdAt,omitempty"`
	Description     *string   `json:"description,omitempty"`
	Domain          *string   `json:"domain,omitempty"`
	IconUri         *string   `json:"iconUri,omitempty"`
	Id              *string   `json:"id,omitempty"`
	Name            *string   `json:"name,omitempty"`
	Policies        *int64    `json:"policies,omitempty"`
	ResourceScopes  *[]string `json:"resourceScopes,omitempty"`
	Type            *string   `json:"type,omitempty"`
	UpdatedAt       *int64    `json:"updatedAt,omitempty"`
	UserDisplayName *string   `json:"userDisplayName,omitempty"`
	UserId          *string   `json:"userId,omitempty"`
}

// ResourceListItem defines model for ResourceListItem.
type ResourceListItem struct {
	Metadata  *map[string]map[string]map[string]interface{} `json:"metadata,omitempty"`
	Resources *[]ResourceEntity                             `json:"resources,omitempty"`
}

// RiskAssessmentSettings defines model for RiskAssessmentSettings.
type RiskAssessmentSettings struct {
	DeviceAssessment       *AssessmentSettings `json:"deviceAssessment,omitempty"`
	Enabled                *bool               `json:"enabled,omitempty"`
	GeoVelocityAssessment  *AssessmentSettings `json:"geoVelocityAssessment,omitempty"`
	IpReputationAssessment *AssessmentSettings `json:"ipReputationAssessment,omitempty"`
}

// Role defines model for Role.
type Role struct {
	AssignableType *RoleAssignableType              `json:"assignableType,omitempty"`
	CreatedAt      *int64                           `json:"createdAt,omitempty"`
	DefaultRole    *bool                            `json:"defaultRole,omitempty"`
	Description    *string                          `json:"description,omitempty"`
	Id             *string                          `json:"id,omitempty"`
	InternalOnly   *bool                            `json:"internalOnly,omitempty"`
	Name           *string                          `json:"name,omitempty"`
	OauthScopes    *[]string                        `json:"oauthScopes,omitempty"`
	PermissionAcls *map[string][]RolePermissionAcls `json:"permissionAcls,omitempty"`
	ReferenceId    *string                          `json:"referenceId,omitempty"`
	ReferenceType  *RoleReferenceType               `json:"referenceType,omitempty"`
	System         *bool                            `json:"system,omitempty"`
	UpdatedAt      *int64                           `json:"updatedAt,omitempty"`
}

// RoleAssignableType defines model for Role.AssignableType.
type RoleAssignableType string

// RolePermissionAcls defines model for Role.PermissionAcls.
type RolePermissionAcls string

// RoleReferenceType defines model for Role.ReferenceType.
type RoleReferenceType string

// RoleEntity defines model for RoleEntity.
type RoleEntity struct {
	AssignableType       *string                  `json:"assignableType,omitempty"`
	AvailablePermissions *[]string                `json:"availablePermissions,omitempty"`
	CreatedAt            *int64                   `json:"createdAt,omitempty"`
	DefaultRole          *bool                    `json:"defaultRole,omitempty"`
	Description          *string                  `json:"description,omitempty"`
	Id                   *string                  `json:"id,omitempty"`
	Name                 *string                  `json:"name,omitempty"`
	Permissions          *[]string                `json:"permissions,omitempty"`
	ReferenceId          *string                  `json:"referenceId,omitempty"`
	ReferenceType        *RoleEntityReferenceType `json:"referenceType,omitempty"`
	System               *bool                    `json:"system,omitempty"`
	UpdatedAt            *int64                   `json:"updatedAt,omitempty"`
}

// RoleEntityReferenceType defines model for RoleEntity.ReferenceType.
type RoleEntityReferenceType string

// RolePage defines model for RolePage.
type RolePage struct {
	CurrentPage *int32  `json:"currentPage,omitempty"`
	Data        *[]Role `json:"data,omitempty"`
	TotalCount  *int64  `json:"totalCount,omitempty"`
}

// SAMLSettings defines model for SAMLSettings.
type SAMLSettings struct {
	Certificate *string `json:"certificate,omitempty"`
	Enabled     *bool   `json:"enabled,omitempty"`
	EntityId    *string `json:"entityId,omitempty"`
}

// SCIMSettings defines model for SCIMSettings.
type SCIMSettings struct {
	Enabled             *bool   `json:"enabled,omitempty"`
	IdpSelectionEnabled *bool   `json:"idpSelectionEnabled,omitempty"`
	IdpSelectionRule    *string `json:"idpSelectionRule,omitempty"`
}

// Scope defines model for Scope.
type Scope struct {
	Claims        *[]string `json:"claims,omitempty"`
	CreatedAt     *int64    `json:"createdAt,omitempty"`
	Description   *string   `json:"description,omitempty"`
	Discovery     *bool     `json:"discovery,omitempty"`
	Domain        *string   `json:"domain,omitempty"`
	ExpiresIn     *int32    `json:"expiresIn,omitempty"`
	IconUri       *string   `json:"iconUri,omitempty"`
	Id            *string   `json:"id,omitempty"`
	Key           *string   `json:"key,omitempty"`
	Name          *string   `json:"name,omitempty"`
	Parameterized *bool     `json:"parameterized,omitempty"`
	System        *bool     `json:"system,omitempty"`
	UpdatedAt     *int64    `json:"updatedAt,omitempty"`
}

// ScopeApprovalEntity defines model for ScopeApprovalEntity.
type ScopeApprovalEntity struct {
	ClientEntity  *ApplicationEntity         `json:"clientEntity,omitempty"`
	ClientId      *string                    `json:"clientId,omitempty"`
	CreatedAt     *int64                     `json:"createdAt,omitempty"`
	Domain        *string                    `json:"domain,omitempty"`
	ExpiresAt     *int64                     `json:"expiresAt,omitempty"`
	Id            *string                    `json:"id,omitempty"`
	Scope         *string                    `json:"scope,omitempty"`
	ScopeEntity   *ScopeEntity               `json:"scopeEntity,omitempty"`
	Status        *ScopeApprovalEntityStatus `json:"status,omitempty"`
	TransactionId *string                    `json:"transactionId,omitempty"`
	UpdatedAt     *int64                     `json:"updatedAt,omitempty"`
	UserId        *string                    `json:"userId,omitempty"`
}

// ScopeApprovalEntityStatus defines model for ScopeApprovalEntity.Status.
type ScopeApprovalEntityStatus string

// ScopeEntity defines model for ScopeEntity.
type ScopeEntity struct {
	Description *string `json:"description,omitempty"`
	Id          *string `json:"id,omitempty"`
	Key         *string `json:"key,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// ScopePage defines model for ScopePage.
type ScopePage struct {
	CurrentPage *int32   `json:"currentPage,omitempty"`
	Data        *[]Scope `json:"data,omitempty"`
	TotalCount  *int64   `json:"totalCount,omitempty"`
}

// SecurityProfileSettings defines model for SecurityProfileSettings.
type SecurityProfileSettings struct {
	EnableFapiBrazil *bool `json:"enableFapiBrazil,omitempty"`
	EnablePlainFapi  *bool `json:"enablePlainFapi,omitempty"`
}

// SelfServiceAccountManagementSettings defines model for SelfServiceAccountManagementSettings.
type SelfServiceAccountManagementSettings struct {
	Enabled       *bool                  `json:"enabled,omitempty"`
	ResetPassword *ResetPasswordSettings `json:"resetPassword,omitempty"`
}

// ServiceResource defines model for ServiceResource.
type ServiceResource struct {
	Configuration *string                       `json:"configuration,omitempty"`
	CreatedAt     *int64                        `json:"createdAt,omitempty"`
	Id            *string                       `json:"id,omitempty"`
	Name          *string                       `json:"name,omitempty"`
	ReferenceId   *string                       `json:"referenceId,omitempty"`
	ReferenceType *ServiceResourceReferenceType `json:"referenceType,omitempty"`
	Type          *string                       `json:"type,omitempty"`
	UpdatedAt     *int64                        `json:"updatedAt,omitempty"`
}

// ServiceResourceReferenceType defines model for ServiceResource.ReferenceType.
type ServiceResourceReferenceType string

// SessionSettings defines model for SessionSettings.
type SessionSettings struct {
	Persistent *bool `json:"persistent,omitempty"`
}

// StatusEntity defines model for StatusEntity.
type StatusEntity struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// Step defines model for Step.
type Step struct {
	Condition     *string `json:"condition,omitempty"`
	Configuration *string `json:"configuration,omitempty"`
	Description   *string `json:"description,omitempty"`
	Enabled       *bool   `json:"enabled,omitempty"`
	Name          *string `json:"name,omitempty"`
	Policy        *string `json:"policy,omitempty"`
}

// Tag defines model for Tag.
type Tag struct {
	CreatedAt      *int64  `json:"createdAt,omitempty"`
	Description    *string `json:"description,omitempty"`
	Id             *string `json:"id,omitempty"`
	Name           *string `json:"name,omitempty"`
	OrganizationId *string `json:"organizationId,omitempty"`
	UpdatedAt      *int64  `json:"updatedAt,omitempty"`
}

// Theme defines model for Theme.
type Theme struct {
	CreatedAt               *int64              `json:"createdAt,omitempty"`
	Css                     *string             `json:"css,omitempty"`
	FaviconUrl              *string             `json:"faviconUrl,omitempty"`
	Id                      *string             `json:"id,omitempty"`
	LogoUrl                 *string             `json:"logoUrl,omitempty"`
	LogoWidth               *int32              `json:"logoWidth,omitempty"`
	PrimaryButtonColorHex   *string             `json:"primaryButtonColorHex,omitempty"`
	PrimaryTextColorHex     *string             `json:"primaryTextColorHex,omitempty"`
	ReferenceId             *string             `json:"referenceId,omitempty"`
	ReferenceType           *ThemeReferenceType `json:"referenceType,omitempty"`
	SecondaryButtonColorHex *string             `json:"secondaryButtonColorHex,omitempty"`
	SecondaryTextColorHex   *string             `json:"secondaryTextColorHex,omitempty"`
	UpdatedAt               *int64              `json:"updatedAt,omitempty"`
}

// ThemeReferenceType defines model for Theme.ReferenceType.
type ThemeReferenceType string

// ThemeEntity defines model for ThemeEntity.
type ThemeEntity struct {
	CreatedAt               *int64                    `json:"createdAt,omitempty"`
	Css                     *string                   `json:"css,omitempty"`
	FaviconUrl              *string                   `json:"faviconUrl,omitempty"`
	Id                      *string                   `json:"id,omitempty"`
	LogoUrl                 *string                   `json:"logoUrl,omitempty"`
	LogoWidth               *int32                    `json:"logoWidth,omitempty"`
	PrimaryButtonColorHex   *string                   `json:"primaryButtonColorHex,omitempty"`
	PrimaryTextColorHex     *string                   `json:"primaryTextColorHex,omitempty"`
	ReferenceId             *string                   `json:"referenceId,omitempty"`
	ReferenceType           *ThemeEntityReferenceType `json:"referenceType,omitempty"`
	SecondaryButtonColorHex *string                   `json:"secondaryButtonColorHex,omitempty"`
	SecondaryTextColorHex   *string                   `json:"secondaryTextColorHex,omitempty"`
	UpdatedAt               *int64                    `json:"updatedAt,omitempty"`
}

// ThemeEntityReferenceType defines model for ThemeEntity.ReferenceType.
type ThemeEntityReferenceType string

// TokenClaim defines model for TokenClaim.
type TokenClaim struct {
	ClaimName  *string              `json:"claimName,omitempty"`
	ClaimValue *string              `json:"claimValue,omitempty"`
	TokenType  *TokenClaimTokenType `json:"tokenType,omitempty"`
}

// TokenClaimTokenType defines model for TokenClaim.TokenType.
type TokenClaimTokenType string

// UMASettings defines model for UMASettings.
type UMASettings struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// UpdateAuthenticationDeviceNotifier defines model for UpdateAuthenticationDeviceNotifier.
type UpdateAuthenticationDeviceNotifier struct {
	Configuration string `json:"configuration"`
	Name          string `json:"name"`
}

// UpdateBotDetection defines model for UpdateBotDetection.
type UpdateBotDetection struct {
	Configuration string `json:"configuration"`
	Name          string `json:"name"`
}

// UpdateCertificate defines model for UpdateCertificate.
type UpdateCertificate struct {
	Configuration string `json:"configuration"`
	Name          string `json:"name"`
}

// UpdateDeviceIdentifier defines model for UpdateDeviceIdentifier.
type UpdateDeviceIdentifier struct {
	Configuration string `json:"configuration"`
	Name          string `json:"name"`
}

// UpdateEmail defines model for UpdateEmail.
type UpdateEmail struct {
	Content      *string `json:"content,omitempty"`
	Enabled      *bool   `json:"enabled,omitempty"`
	ExpiresAfter *int32  `json:"expiresAfter,omitempty"`
	From         *string `json:"from,omitempty"`
	FromName     *string `json:"fromName,omitempty"`
	Subject      *string `json:"subject,omitempty"`
}

// UpdateEntrypoint defines model for UpdateEntrypoint.
type UpdateEntrypoint struct {
	Description *string  `json:"description,omitempty"`
	Name        string   `json:"name"`
	Tags        []string `json:"tags"`
	Url         string   `json:"url"`
}

// UpdateExtensionGrant defines model for UpdateExtensionGrant.
type UpdateExtensionGrant struct {
	Configuration    string  `json:"configuration"`
	CreateUser       *bool   `json:"createUser,omitempty"`
	GrantType        *string `json:"grantType,omitempty"`
	IdentityProvider *string `json:"identityProvider,omitempty"`
	Name             string  `json:"name"`
	UserExists       *bool   `json:"userExists,omitempty"`
}

// UpdateFactor defines model for UpdateFactor.
type UpdateFactor struct {
	Configuration string `json:"configuration"`
	Name          string `json:"name"`
}

// UpdateForm defines model for UpdateForm.
type UpdateForm struct {
	Assets  *string `json:"assets,omitempty"`
	Content *string `json:"content,omitempty"`
	Enabled *bool   `json:"enabled,omitempty"`
}

// UpdateGroup defines model for UpdateGroup.
type UpdateGroup struct {
	Description *string   `json:"description,omitempty"`
	Members     *[]string `json:"members,omitempty"`
	Name        string    `json:"name"`
	Roles       *[]string `json:"roles,omitempty"`
}

// UpdateI18nDictionary defines model for UpdateI18nDictionary.
type UpdateI18nDictionary struct {
	Entries *map[string]string `json:"entries,omitempty"`
	Locale  *string            `json:"locale,omitempty"`
	Name    *string            `json:"name,omitempty"`
}

// UpdateIdentityProvider defines model for UpdateIdentityProvider.
type UpdateIdentityProvider struct {
	Configuration   string               `json:"configuration"`
	DomainWhitelist *[]string            `json:"domainWhitelist,omitempty"`
	Mappers         *map[string]string   `json:"mappers,omitempty"`
	Name            string               `json:"name"`
	RoleMapper      *map[string][]string `json:"roleMapper,omitempty"`
}

// UpdateReporter defines model for UpdateReporter.
type UpdateReporter struct {
	Configuration string `json:"configuration"`
	Enabled       *bool  `json:"enabled,omitempty"`
	Name          string `json:"name"`
}

// UpdateRole defines model for UpdateRole.
type UpdateRole struct {
	Description *string   `json:"description,omitempty"`
	Name        string    `json:"name"`
	OauthScopes *[]string `json:"oauthScopes,omitempty"`
	Permissions *[]string `json:"permissions,omitempty"`
}

// UpdateScope defines model for UpdateScope.
type UpdateScope struct {
	Description   string  `json:"description"`
	Discovery     *bool   `json:"discovery,omitempty"`
	ExpiresIn     *int32  `json:"expiresIn,omitempty"`
	IconUri       *string `json:"iconUri,omitempty"`
	Name          string  `json:"name"`
	Parameterized *bool   `json:"parameterized,omitempty"`
}

// UpdateServiceResource defines model for UpdateServiceResource.
type UpdateServiceResource struct {
	Configuration string `json:"configuration"`
	Name          string `json:"name"`
}

// UpdateTag defines model for UpdateTag.
type UpdateTag struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
}

// UpdateUser defines model for UpdateUser.
type UpdateUser struct {
	AccountNonExpired     *bool                              `json:"accountNonExpired,omitempty"`
	AccountNonLocked      *bool                              `json:"accountNonLocked,omitempty"`
	AdditionalInformation *map[string]map[string]interface{} `json:"additionalInformation,omitempty"`
	Client                *string                            `json:"client,omitempty"`
	CreatedAt             *int64                             `json:"createdAt,omitempty"`
	CredentialsNonExpired *bool                              `json:"credentialsNonExpired,omitempty"`
	DisplayName           *string                            `json:"displayName,omitempty"`
	Email                 *string                            `json:"email,omitempty"`
	Enabled               *bool                              `json:"enabled,omitempty"`
	ExternalId            *string                            `json:"externalId,omitempty"`
	FirstName             *string                            `json:"firstName,omitempty"`
	LastName              *string                            `json:"lastName,omitempty"`
	LoggedAt              *int64                             `json:"loggedAt,omitempty"`
	LoginsCount           *int64                             `json:"loginsCount,omitempty"`
	PreRegistration       *bool                              `json:"preRegistration,omitempty"`
	PreferredLanguage     *string                            `json:"preferredLanguage,omitempty"`
	RegistrationCompleted *bool                              `json:"registrationCompleted,omitempty"`
	Source                *string                            `json:"source,omitempty"`
	UpdatedAt             *int64                             `json:"updatedAt,omitempty"`
}

// User defines model for User.
type User struct {
	AccountLockedAt          *int64                             `json:"accountLockedAt,omitempty"`
	AccountLockedUntil       *int64                             `json:"accountLockedUntil,omitempty"`
	AccountNonExpired        *bool                              `json:"accountNonExpired,omitempty"`
	AccountNonLocked         *bool                              `json:"accountNonLocked,omitempty"`
	AdditionalInformation    *map[string]map[string]interface{} `json:"additionalInformation,omitempty"`
	Address                  *map[string]map[string]interface{} `json:"address,omitempty"`
	Addresses                *[]Address                         `json:"addresses,omitempty"`
	Birthdate                *string                            `json:"birthdate,omitempty"`
	Client                   *string                            `json:"client,omitempty"`
	CreatedAt                *int64                             `json:"createdAt,omitempty"`
	CredentialsNonExpired    *bool                              `json:"credentialsNonExpired,omitempty"`
	DisplayName              *string                            `json:"displayName,omitempty"`
	DynamicRoles             *[]string                          `json:"dynamicRoles,omitempty"`
	Email                    *string                            `json:"email,omitempty"`
	Emails                   *[]Attribute                       `json:"emails,omitempty"`
	Enabled                  *bool                              `json:"enabled,omitempty"`
	Entitlements             *[]string                          `json:"entitlements,omitempty"`
	ExternalId               *string                            `json:"externalId,omitempty"`
	Factors                  *[]EnrolledFactor                  `json:"factors,omitempty"`
	FirstName                *string                            `json:"firstName,omitempty"`
	Groups                   *[]string                          `json:"groups,omitempty"`
	Id                       *string                            `json:"id,omitempty"`
	Ims                      *[]Attribute                       `json:"ims,omitempty"`
	Inactive                 *bool                              `json:"inactive,omitempty"`
	Internal                 *bool                              `json:"internal,omitempty"`
	LastLoginWithCredentials *int64                             `json:"lastLoginWithCredentials,omitempty"`
	LastLogoutAt             *int64                             `json:"lastLogoutAt,omitempty"`
	LastName                 *string                            `json:"lastName,omitempty"`
	LastPasswordReset        *int64                             `json:"lastPasswordReset,omitempty"`
	LastUsernameReset        *int64                             `json:"lastUsernameReset,omitempty"`
	Locale                   *string                            `json:"locale,omitempty"`
	LoggedAt                 *int64                             `json:"loggedAt,omitempty"`
	LoginsCount              *int64                             `json:"loginsCount,omitempty"`
	MfaEnrollmentSkippedAt   *int64                             `json:"mfaEnrollmentSkippedAt,omitempty"`
	MiddleName               *string                            `json:"middleName,omitempty"`
	Newsletter               *bool                              `json:"newsletter,omitempty"`
	NickName                 *string                            `json:"nickName,omitempty"`
	Password                 *string                            `json:"password,omitempty"`
	PhoneNumber              *string                            `json:"phoneNumber,omitempty"`
	PhoneNumbers             *[]Attribute                       `json:"phoneNumbers,omitempty"`
	Photos                   *[]Attribute                       `json:"photos,omitempty"`
	Picture                  *string                            `json:"picture,omitempty"`
	PreRegistration          *bool                              `json:"preRegistration,omitempty"`
	PreferredLanguage        *string                            `json:"preferredLanguage,omitempty"`
	Profile                  *string                            `json:"profile,omitempty"`
	ReferenceId              *string                            `json:"referenceId,omitempty"`
	ReferenceType            *UserReferenceType                 `json:"referenceType,omitempty"`
	RegistrationAccessToken  *string                            `json:"registrationAccessToken,omitempty"`
	RegistrationCompleted    *bool                              `json:"registrationCompleted,omitempty"`
	RegistrationUserUri      *string                            `json:"registrationUserUri,omitempty"`
	Roles                    *[]string                          `json:"roles,omitempty"`
	RolesPermissions         *[]Role                            `json:"rolesPermissions,omitempty"`
	Source                   *string                            `json:"source,omitempty"`
	Title                    *string                            `json:"title,omitempty"`
	Type                     *string                            `json:"type,omitempty"`
	UpdatedAt                *int64                             `json:"updatedAt,omitempty"`
	Username                 *string                            `json:"username,omitempty"`
	Website                  *string                            `json:"website,omitempty"`
	X509Certificates         *[]Certificate                     `json:"x509Certificates,omitempty"`
	ZoneInfo                 *string                            `json:"zoneInfo,omitempty"`
}

// UserReferenceType defines model for User.ReferenceType.
type UserReferenceType string

// UserEntity defines model for UserEntity.
type UserEntity struct {
	AccountLockedAt          *int64                             `json:"accountLockedAt,omitempty"`
	AccountLockedUntil       *int64                             `json:"accountLockedUntil,omitempty"`
	AccountNonExpired        *bool                              `json:"accountNonExpired,omitempty"`
	AccountNonLocked         *bool                              `json:"accountNonLocked,omitempty"`
	AdditionalInformation    *map[string]map[string]interface{} `json:"additionalInformation,omitempty"`
	Address                  *map[string]map[string]interface{} `json:"address,omitempty"`
	Addresses                *[]Address                         `json:"addresses,omitempty"`
	ApplicationEntity        *ApplicationEntity                 `json:"applicationEntity,omitempty"`
	Birthdate                *string                            `json:"birthdate,omitempty"`
	Client                   *string                            `json:"client,omitempty"`
	CreatedAt                *int64                             `json:"createdAt,omitempty"`
	CredentialsNonExpired    *bool                              `json:"credentialsNonExpired,omitempty"`
	DisplayName              *string                            `json:"displayName,omitempty"`
	DynamicRoles             *[]string                          `json:"dynamicRoles,omitempty"`
	Email                    *string                            `json:"email,omitempty"`
	Emails                   *[]Attribute                       `json:"emails,omitempty"`
	Enabled                  *bool                              `json:"enabled,omitempty"`
	Entitlements             *[]string                          `json:"entitlements,omitempty"`
	ExternalId               *string                            `json:"externalId,omitempty"`
	Factors                  *[]EnrolledFactor                  `json:"factors,omitempty"`
	FirstName                *string                            `json:"firstName,omitempty"`
	Groups                   *[]string                          `json:"groups,omitempty"`
	Id                       *string                            `json:"id,omitempty"`
	Ims                      *[]Attribute                       `json:"ims,omitempty"`
	Inactive                 *bool                              `json:"inactive,omitempty"`
	Internal                 *bool                              `json:"internal,omitempty"`
	LastLoginWithCredentials *int64                             `json:"lastLoginWithCredentials,omitempty"`
	LastLogoutAt             *int64                             `json:"lastLogoutAt,omitempty"`
	LastName                 *string                            `json:"lastName,omitempty"`
	LastPasswordReset        *int64                             `json:"lastPasswordReset,omitempty"`
	LastUsernameReset        *int64                             `json:"lastUsernameReset,omitempty"`
	Locale                   *string                            `json:"locale,omitempty"`
	LoggedAt                 *int64                             `json:"loggedAt,omitempty"`
	LoginsCount              *int64                             `json:"loginsCount,omitempty"`
	MfaEnrollmentSkippedAt   *int64                             `json:"mfaEnrollmentSkippedAt,omitempty"`
	MiddleName               *string                            `json:"middleName,omitempty"`
	Newsletter               *bool                              `json:"newsletter,omitempty"`
	NickName                 *string                            `json:"nickName,omitempty"`
	Password                 *string                            `json:"password,omitempty"`
	PhoneNumber              *string                            `json:"phoneNumber,omitempty"`
	PhoneNumbers             *[]Attribute                       `json:"phoneNumbers,omitempty"`
	Photos                   *[]Attribute                       `json:"photos,omitempty"`
	Picture                  *string                            `json:"picture,omitempty"`
	PreRegistration          *bool                              `json:"preRegistration,omitempty"`
	PreferredLanguage        *string                            `json:"preferredLanguage,omitempty"`
	Profile                  *string                            `json:"profile,omitempty"`
	ReferenceId              *string                            `json:"referenceId,omitempty"`
	ReferenceType            *UserEntityReferenceType           `json:"referenceType,omitempty"`
	RegistrationAccessToken  *string                            `json:"registrationAccessToken,omitempty"`
	RegistrationCompleted    *bool                              `json:"registrationCompleted,omitempty"`
	RegistrationUserUri      *string                            `json:"registrationUserUri,omitempty"`
	Roles                    *[]string                          `json:"roles,omitempty"`
	RolesPermissions         *[]Role                            `json:"rolesPermissions,omitempty"`
	Source                   *string                            `json:"source,omitempty"`
	SourceId                 *string                            `json:"sourceId,omitempty"`
	Title                    *string                            `json:"title,omitempty"`
	Type                     *string                            `json:"type,omitempty"`
	UpdatedAt                *int64                             `json:"updatedAt,omitempty"`
	Username                 *string                            `json:"username,omitempty"`
	Website                  *string                            `json:"website,omitempty"`
	X509Certificates         *[]Certificate                     `json:"x509Certificates,omitempty"`
	ZoneInfo                 *string                            `json:"zoneInfo,omitempty"`
}

// UserEntityReferenceType defines model for UserEntity.ReferenceType.
type UserEntityReferenceType string

// UserNotificationContent defines model for UserNotificationContent.
type UserNotificationContent struct {
	CreatedAt *int64                         `json:"createdAt,omitempty"`
	Id        *string                        `json:"id,omitempty"`
	Message   *string                        `json:"message,omitempty"`
	Status    *UserNotificationContentStatus `json:"status,omitempty"`
	Title     *string                        `json:"title,omitempty"`
}

// UserNotificationContentStatus defines model for UserNotificationContent.Status.
type UserNotificationContentStatus string

// UserPage defines model for UserPage.
type UserPage struct {
	CurrentPage *int32  `json:"currentPage,omitempty"`
	Data        *[]User `json:"data,omitempty"`
	TotalCount  *int64  `json:"totalCount,omitempty"`
}

// UsernameEntity defines model for UsernameEntity.
type UsernameEntity struct {
	Username *string `json:"username,omitempty"`
}

// VirtualHost defines model for VirtualHost.
type VirtualHost struct {
	Host               *string `json:"host,omitempty"`
	OverrideEntrypoint *bool   `json:"overrideEntrypoint,omitempty"`
	Path               *string `json:"path,omitempty"`
}

// WebAuthnSettings defines model for WebAuthnSettings.
type WebAuthnSettings struct {
	AttestationConveyancePreference     *WebAuthnSettingsAttestationConveyancePreference `json:"attestationConveyancePreference,omitempty"`
	AuthenticatorAttachment             *WebAuthnSettingsAuthenticatorAttachment         `json:"authenticatorAttachment,omitempty"`
	Certificates                        *map[string]map[string]interface{}               `json:"certificates,omitempty"`
	EnforceAuthenticatorIntegrity       *bool                                            `json:"enforceAuthenticatorIntegrity,omitempty"`
	EnforceAuthenticatorIntegrityMaxAge *int32                                           `json:"enforceAuthenticatorIntegrityMaxAge,omitempty"`
	ForceRegistration                   *bool                                            `json:"forceRegistration,omitempty"`
	Origin                              *string                                          `json:"origin,omitempty"`
	RelyingPartyId                      *string                                          `json:"relyingPartyId,omitempty"`
	RelyingPartyName                    *string                                          `json:"relyingPartyName,omitempty"`
	RequireResidentKey                  *bool                                            `json:"requireResidentKey,omitempty"`
	UserVerification                    *WebAuthnSettingsUserVerification                `json:"userVerification,omitempty"`
}

// WebAuthnSettingsAttestationConveyancePreference defines model for WebAuthnSettings.AttestationConveyancePreference.
type WebAuthnSettingsAttestationConveyancePreference string

// WebAuthnSettingsAuthenticatorAttachment defines model for WebAuthnSettings.AuthenticatorAttachment.
type WebAuthnSettingsAuthenticatorAttachment string

// WebAuthnSettingsUserVerification defines model for WebAuthnSettings.UserVerification.
type WebAuthnSettingsUserVerification string

// OrganizationListPlatformAuditsParams defines parameters for OrganizationListPlatformAudits.
type OrganizationListPlatformAuditsParams struct {
	Type   *string `form:"type,omitempty" json:"type,omitempty"`
	Status *string `form:"status,omitempty" json:"status,omitempty"`
	User   *string `form:"user,omitempty" json:"user,omitempty"`
	From   *int64  `form:"from,omitempty" json:"from,omitempty"`
	To     *int64  `form:"to,omitempty" json:"to,omitempty"`
	Size   *int32  `form:"size,omitempty" json:"size,omitempty"`
	Page   *int32  `form:"page,omitempty" json:"page,omitempty"`
}

// EnvironmentListDomainsParams defines parameters for EnvironmentListDomains.
type EnvironmentListDomainsParams struct {
	Page *int32  `form:"page,omitempty" json:"page,omitempty"`
	Size *int32  `form:"size,omitempty" json:"size,omitempty"`
	Q    *string `form:"q,omitempty" json:"q,omitempty"`
}

// EnvironmentPatchDomainAlertTriggersJSONBody defines parameters for EnvironmentPatchDomainAlertTriggers.
type EnvironmentPatchDomainAlertTriggersJSONBody = []PatchAlertTrigger

// DomainGetAnalyticsParams defines parameters for DomainGetAnalytics.
type DomainGetAnalyticsParams struct {
	// From Used to define the start date of the time window to query
	From *int64 `form:"from,omitempty" json:"from,omitempty"`

	// To Used to define the end date of the time window to query
	To *int64 `form:"to,omitempty" json:"to,omitempty"`

	// Interval The time interval when getting histogram data
	Interval *int64 `form:"interval,omitempty" json:"interval,omitempty"`

	// Size The number of data to retrieve
	Size *int32 `form:"size,omitempty" json:"size,omitempty"`

	// Type The type of data to retrieve
	Type  DomainGetAnalyticsParamsType `form:"type" json:"type"`
	Field *string                      `form:"field,omitempty" json:"field,omitempty"`
}

// DomainGetAnalyticsParamsType defines parameters for DomainGetAnalytics.
type DomainGetAnalyticsParamsType string

// EnvironmentListDomainApplicationsParams defines parameters for EnvironmentListDomainApplications.
type EnvironmentListDomainApplicationsParams struct {
	Page *int32  `form:"page,omitempty" json:"page,omitempty"`
	Size *int32  `form:"size,omitempty" json:"size,omitempty"`
	Q    *string `form:"q,omitempty" json:"q,omitempty"`
}

// ApplicationGetAnalyticsParams defines parameters for ApplicationGetAnalytics.
type ApplicationGetAnalyticsParams struct {
	// From Used to define the start date of the time window to query
	From *int64 `form:"from,omitempty" json:"from,omitempty"`

	// To Used to define the end date of the time window to query
	To *int64 `form:"to,omitempty" json:"to,omitempty"`

	// Interval The time interval when getting histogram data
	Interval *int64 `form:"interval,omitempty" json:"interval,omitempty"`

	// Size The number of data to retrieve
	Size *int32 `form:"size,omitempty" json:"size,omitempty"`

	// Type The type of data to retrieve
	Type  ApplicationGetAnalyticsParamsType `form:"type" json:"type"`
	Field *string                           `form:"field,omitempty" json:"field,omitempty"`
}

// ApplicationGetAnalyticsParamsType defines parameters for ApplicationGetAnalytics.
type ApplicationGetAnalyticsParamsType string

// ApplicationListEmailsParams defines parameters for ApplicationListEmails.
type ApplicationListEmailsParams struct {
	Template ApplicationListEmailsParamsTemplate `form:"template" json:"template"`
}

// ApplicationListEmailsParamsTemplate defines parameters for ApplicationListEmails.
type ApplicationListEmailsParamsTemplate string

// ApplicationCreateFlowJSONBody defines parameters for ApplicationCreateFlow.
type ApplicationCreateFlowJSONBody = []Flow

// ApplicationListFormsParams defines parameters for ApplicationListForms.
type ApplicationListFormsParams struct {
	Template ApplicationListFormsParamsTemplate `form:"template" json:"template"`
}

// ApplicationListFormsParamsTemplate defines parameters for ApplicationListForms.
type ApplicationListFormsParamsTemplate string

// ApplicationListResourcesParams defines parameters for ApplicationListResources.
type ApplicationListResourcesParams struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`
	Size *int32 `form:"size,omitempty" json:"size,omitempty"`
}

// EnvironmentListDomainAuditsParams defines parameters for EnvironmentListDomainAudits.
type EnvironmentListDomainAuditsParams struct {
	Type   *string `form:"type,omitempty" json:"type,omitempty"`
	Status *string `form:"status,omitempty" json:"status,omitempty"`
	User   *string `form:"user,omitempty" json:"user,omitempty"`
	From   *int64  `form:"from,omitempty" json:"from,omitempty"`
	To     *int64  `form:"to,omitempty" json:"to,omitempty"`
	Size   *int32  `form:"size,omitempty" json:"size,omitempty"`
	Page   *int32  `form:"page,omitempty" json:"page,omitempty"`
}

// EnvironmentListDomainCertificatesParams defines parameters for EnvironmentListDomainCertificates.
type EnvironmentListDomainCertificatesParams struct {
	Use *string `form:"use,omitempty" json:"use,omitempty"`
}

// EnvironmentListDomainEmailsParams defines parameters for EnvironmentListDomainEmails.
type EnvironmentListDomainEmailsParams struct {
	Template EnvironmentListDomainEmailsParamsTemplate `form:"template" json:"template"`
}

// EnvironmentListDomainEmailsParamsTemplate defines parameters for EnvironmentListDomainEmails.
type EnvironmentListDomainEmailsParamsTemplate string

// EnvironmentCreateOrUpdateDomainFlowsJSONBody defines parameters for EnvironmentCreateOrUpdateDomainFlows.
type EnvironmentCreateOrUpdateDomainFlowsJSONBody = []Flow

// EnvironmentListDomainFormsParams defines parameters for EnvironmentListDomainForms.
type EnvironmentListDomainFormsParams struct {
	Template EnvironmentListDomainFormsParamsTemplate `form:"template" json:"template"`
}

// EnvironmentListDomainFormsParamsTemplate defines parameters for EnvironmentListDomainForms.
type EnvironmentListDomainFormsParamsTemplate string

// EnvironmentListDomainGroupsParams defines parameters for EnvironmentListDomainGroups.
type EnvironmentListDomainGroupsParams struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`
	Size *int32 `form:"size,omitempty" json:"size,omitempty"`
}

// DomainGetGroupMemebersParams defines parameters for DomainGetGroupMemebers.
type DomainGetGroupMemebersParams struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`
	Size *int32 `form:"size,omitempty" json:"size,omitempty"`
}

// EnvironmentAddDomainGroupRoleJSONBody defines parameters for EnvironmentAddDomainGroupRole.
type EnvironmentAddDomainGroupRoleJSONBody = []string

// EnvironmentListDomainIdentityProvidersParams defines parameters for EnvironmentListDomainIdentityProviders.
type EnvironmentListDomainIdentityProvidersParams struct {
	UserProvider *bool `form:"userProvider,omitempty" json:"userProvider,omitempty"`
}

// EnvironmentListDomainReportersParams defines parameters for EnvironmentListDomainReporters.
type EnvironmentListDomainReportersParams struct {
	UserProvider *bool `form:"userProvider,omitempty" json:"userProvider,omitempty"`
}

// EnvironmentListDomainRolesParams defines parameters for EnvironmentListDomainRoles.
type EnvironmentListDomainRolesParams struct {
	Page *int32  `form:"page,omitempty" json:"page,omitempty"`
	Size *int32  `form:"size,omitempty" json:"size,omitempty"`
	Q    *string `form:"q,omitempty" json:"q,omitempty"`
}

// EnvironmentListDomainScopesParams defines parameters for EnvironmentListDomainScopes.
type EnvironmentListDomainScopesParams struct {
	Page *int32  `form:"page,omitempty" json:"page,omitempty"`
	Size *int32  `form:"size,omitempty" json:"size,omitempty"`
	Q    *string `form:"q,omitempty" json:"q,omitempty"`
}

// EnvironmentListDomainUsersParams defines parameters for EnvironmentListDomainUsers.
type EnvironmentListDomainUsersParams struct {
	Q      *string `form:"q,omitempty" json:"q,omitempty"`
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`
	Page   *int32  `form:"page,omitempty" json:"page,omitempty"`
	Size   *int32  `form:"size,omitempty" json:"size,omitempty"`
}

// EnvironmentListDomainUserAuditsParams defines parameters for EnvironmentListDomainUserAudits.
type EnvironmentListDomainUserAuditsParams struct {
	Type   *string `form:"type,omitempty" json:"type,omitempty"`
	Status *string `form:"status,omitempty" json:"status,omitempty"`
	From   *int64  `form:"from,omitempty" json:"from,omitempty"`
	To     *int64  `form:"to,omitempty" json:"to,omitempty"`
	Size   *int32  `form:"size,omitempty" json:"size,omitempty"`
	Page   *int32  `form:"page,omitempty" json:"page,omitempty"`
}

// DomainDeleteUserConsentsParams defines parameters for DomainDeleteUserConsents.
type DomainDeleteUserConsentsParams struct {
	ClientId *string `form:"clientId,omitempty" json:"clientId,omitempty"`
}

// EnvironmentListDomainUserConsentsParams defines parameters for EnvironmentListDomainUserConsents.
type EnvironmentListDomainUserConsentsParams struct {
	ClientId *string `form:"clientId,omitempty" json:"clientId,omitempty"`
}

// EnvironmentListDomainUserRolesParams defines parameters for EnvironmentListDomainUserRoles.
type EnvironmentListDomainUserRolesParams struct {
	Dynamic *bool `form:"dynamic,omitempty" json:"dynamic,omitempty"`
}

// DomainAddOrUpdateUserRoleJSONBody defines parameters for DomainAddOrUpdateUserRole.
type DomainAddOrUpdateUserRoleJSONBody = []string

// OrganizationListPlatfomFormTemplatesParams defines parameters for OrganizationListPlatfomFormTemplates.
type OrganizationListPlatfomFormTemplatesParams struct {
	Template OrganizationListPlatfomFormTemplatesParamsTemplate `form:"template" json:"template"`
}

// OrganizationListPlatfomFormTemplatesParamsTemplate defines parameters for OrganizationListPlatfomFormTemplates.
type OrganizationListPlatfomFormTemplatesParamsTemplate string

// OrganizationListPlatformGroupsParams defines parameters for OrganizationListPlatformGroups.
type OrganizationListPlatformGroupsParams struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`
	Size *int32 `form:"size,omitempty" json:"size,omitempty"`
}

// OrganizationListPlatformGroupMembersParams defines parameters for OrganizationListPlatformGroupMembers.
type OrganizationListPlatformGroupMembersParams struct {
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`
	Size *int32 `form:"size,omitempty" json:"size,omitempty"`
}

// OrganizationListPlatformIdentityProvidersParams defines parameters for OrganizationListPlatformIdentityProviders.
type OrganizationListPlatformIdentityProvidersParams struct {
	UserProvider *bool `form:"userProvider,omitempty" json:"userProvider,omitempty"`
}

// OrganizationListPlatformRolesParams defines parameters for OrganizationListPlatformRoles.
type OrganizationListPlatformRolesParams struct {
	Type *OrganizationListPlatformRolesParamsType `form:"type,omitempty" json:"type,omitempty"`
}

// OrganizationListPlatformRolesParamsType defines parameters for OrganizationListPlatformRoles.
type OrganizationListPlatformRolesParamsType string

// OrganizationListPlatformUsersParams defines parameters for OrganizationListPlatformUsers.
type OrganizationListPlatformUsersParams struct {
	Q      *string `form:"q,omitempty" json:"q,omitempty"`
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`
	Page   *int32  `form:"page,omitempty" json:"page,omitempty"`
	Size   *int32  `form:"size,omitempty" json:"size,omitempty"`
}

// PlatformListPluginAuthDeviceNotifiersParams defines parameters for PlatformListPluginAuthDeviceNotifiers.
type PlatformListPluginAuthDeviceNotifiersParams struct {
	Expand *[]string `form:"expand,omitempty" json:"expand,omitempty"`
}

// PlatformListProviderPluginsParams defines parameters for PlatformListProviderPlugins.
type PlatformListProviderPluginsParams struct {
	External *bool     `form:"external,omitempty" json:"external,omitempty"`
	Expand   *[]string `form:"expand,omitempty" json:"expand,omitempty"`
}

// PlatformListPluginNotifiersParams defines parameters for PlatformListPluginNotifiers.
type PlatformListPluginNotifiersParams struct {
	Expand *[]string `form:"expand,omitempty" json:"expand,omitempty"`
}

// PlatformListPluginPoliciesParams defines parameters for PlatformListPluginPolicies.
type PlatformListPluginPoliciesParams struct {
	Expand *[]string `form:"expand,omitempty" json:"expand,omitempty"`
}

// PlatformListPluginResourcesParams defines parameters for PlatformListPluginResources.
type PlatformListPluginResourcesParams struct {
	Expand *[]string `form:"expand,omitempty" json:"expand,omitempty"`
}

// Create14JSONRequestBody defines body for Create14 for application/json ContentType.
type Create14JSONRequestBody = NewEntrypoint

// OrganizationUpdateEntrypointJSONRequestBody defines body for OrganizationUpdateEntrypoint for application/json ContentType.
type OrganizationUpdateEntrypointJSONRequestBody = UpdateEntrypoint

// EnvironmentCreateDomainJSONRequestBody defines body for EnvironmentCreateDomain for application/json ContentType.
type EnvironmentCreateDomainJSONRequestBody = NewDomain

// EnvironmentPatchDomainJSONRequestBody defines body for EnvironmentPatchDomain for application/json ContentType.
type EnvironmentPatchDomainJSONRequestBody = PatchDomain

// DomainUpdateJSONRequestBody defines body for DomainUpdate for application/json ContentType.
type DomainUpdateJSONRequestBody = PatchDomain

// EnvironmentCreateDomainAlertNotifierJSONRequestBody defines body for EnvironmentCreateDomainAlertNotifier for application/json ContentType.
type EnvironmentCreateDomainAlertNotifierJSONRequestBody = NewAlertNotifier

// EnvironmentPatchDomainAlertNotifierJSONRequestBody defines body for EnvironmentPatchDomainAlertNotifier for application/json ContentType.
type EnvironmentPatchDomainAlertNotifierJSONRequestBody = PatchAlertNotifier

// EnvironmentPatchDomainAlertTriggersJSONRequestBody defines body for EnvironmentPatchDomainAlertTriggers for application/json ContentType.
type EnvironmentPatchDomainAlertTriggersJSONRequestBody = EnvironmentPatchDomainAlertTriggersJSONBody

// EnvironmentCreateDomainApplicationJSONRequestBody defines body for EnvironmentCreateDomainApplication for application/json ContentType.
type EnvironmentCreateDomainApplicationJSONRequestBody = NewApplication

// EnvironmentPatchDomainApplicationJSONRequestBody defines body for EnvironmentPatchDomainApplication for application/json ContentType.
type EnvironmentPatchDomainApplicationJSONRequestBody = PatchApplication

// DomainUpdateApplicationJSONRequestBody defines body for DomainUpdateApplication for application/json ContentType.
type DomainUpdateApplicationJSONRequestBody = PatchApplication

// ApplicationCreateEmailJSONRequestBody defines body for ApplicationCreateEmail for application/json ContentType.
type ApplicationCreateEmailJSONRequestBody = NewEmail

// ApplicationUpdateEmailJSONRequestBody defines body for ApplicationUpdateEmail for application/json ContentType.
type ApplicationUpdateEmailJSONRequestBody = UpdateEmail

// ApplicationCreateFlowJSONRequestBody defines body for ApplicationCreateFlow for application/json ContentType.
type ApplicationCreateFlowJSONRequestBody = ApplicationCreateFlowJSONBody

// ApplicationUpdateFlowJSONRequestBody defines body for ApplicationUpdateFlow for application/json ContentType.
type ApplicationUpdateFlowJSONRequestBody = Flow

// ApplicationCreateFormJSONRequestBody defines body for ApplicationCreateForm for application/json ContentType.
type ApplicationCreateFormJSONRequestBody = NewForm

// ApplicationUpdateFormJSONRequestBody defines body for ApplicationUpdateForm for application/json ContentType.
type ApplicationUpdateFormJSONRequestBody = UpdateForm

// ApplicationAddOrUpdateMemberJSONRequestBody defines body for ApplicationAddOrUpdateMember for application/json ContentType.
type ApplicationAddOrUpdateMemberJSONRequestBody = NewMembership

// ApplicationUpdateTypeJSONRequestBody defines body for ApplicationUpdateType for application/json ContentType.
type ApplicationUpdateTypeJSONRequestBody = PatchApplicationType

// EnvironmentCreateDomainAuthDeviceNotifiersJSONRequestBody defines body for EnvironmentCreateDomainAuthDeviceNotifiers for application/json ContentType.
type EnvironmentCreateDomainAuthDeviceNotifiersJSONRequestBody = NewAuthenticationDeviceNotifier

// DomainUpdateAuthDeviceNotifierJSONRequestBody defines body for DomainUpdateAuthDeviceNotifier for application/json ContentType.
type DomainUpdateAuthDeviceNotifierJSONRequestBody = UpdateAuthenticationDeviceNotifier

// EnvironmentCreateDomainBotDetectionJSONRequestBody defines body for EnvironmentCreateDomainBotDetection for application/json ContentType.
type EnvironmentCreateDomainBotDetectionJSONRequestBody = NewBotDetection

// DomainUpdateBotDetectionJSONRequestBody defines body for DomainUpdateBotDetection for application/json ContentType.
type DomainUpdateBotDetectionJSONRequestBody = UpdateBotDetection

// EnvironmentCreateDomainCertificateJSONRequestBody defines body for EnvironmentCreateDomainCertificate for application/json ContentType.
type EnvironmentCreateDomainCertificateJSONRequestBody = NewCertificate

// DomainUpdateCertificateJSONRequestBody defines body for DomainUpdateCertificate for application/json ContentType.
type DomainUpdateCertificateJSONRequestBody = UpdateCertificate

// EnvironmentCreateDomainDeviceIdentifierJSONRequestBody defines body for EnvironmentCreateDomainDeviceIdentifier for application/json ContentType.
type EnvironmentCreateDomainDeviceIdentifierJSONRequestBody = NewDeviceIdentifier

// DomainUpdateDeviceIdentifierJSONRequestBody defines body for DomainUpdateDeviceIdentifier for application/json ContentType.
type DomainUpdateDeviceIdentifierJSONRequestBody = UpdateDeviceIdentifier

// EnvironmentCreateDomainEmailJSONRequestBody defines body for EnvironmentCreateDomainEmail for application/json ContentType.
type EnvironmentCreateDomainEmailJSONRequestBody = NewEmail

// DomainUpdateEmailJSONRequestBody defines body for DomainUpdateEmail for application/json ContentType.
type DomainUpdateEmailJSONRequestBody = UpdateEmail

// EnvironmentCreateDomainExtensionGrantJSONRequestBody defines body for EnvironmentCreateDomainExtensionGrant for application/json ContentType.
type EnvironmentCreateDomainExtensionGrantJSONRequestBody = NewExtensionGrant

// DomainUpdateExtensionGrantJSONRequestBody defines body for DomainUpdateExtensionGrant for application/json ContentType.
type DomainUpdateExtensionGrantJSONRequestBody = UpdateExtensionGrant

// EnvironmentCreateDomainFactorJSONRequestBody defines body for EnvironmentCreateDomainFactor for application/json ContentType.
type EnvironmentCreateDomainFactorJSONRequestBody = NewFactor

// DomainUpdateFactorJSONRequestBody defines body for DomainUpdateFactor for application/json ContentType.
type DomainUpdateFactorJSONRequestBody = UpdateFactor

// EnvironmentCreateOrUpdateDomainFlowsJSONRequestBody defines body for EnvironmentCreateOrUpdateDomainFlows for application/json ContentType.
type EnvironmentCreateOrUpdateDomainFlowsJSONRequestBody = EnvironmentCreateOrUpdateDomainFlowsJSONBody

// DomainUpdateFlowJSONRequestBody defines body for DomainUpdateFlow for application/json ContentType.
type DomainUpdateFlowJSONRequestBody = Flow

// EnvironmentCreateDomainFormJSONRequestBody defines body for EnvironmentCreateDomainForm for application/json ContentType.
type EnvironmentCreateDomainFormJSONRequestBody = NewForm

// EnvironmentPreviewDomainFormJSONRequestBody defines body for EnvironmentPreviewDomainForm for application/json ContentType.
type EnvironmentPreviewDomainFormJSONRequestBody = PreviewRequest

// DomainUpdateFormJSONRequestBody defines body for DomainUpdateForm for application/json ContentType.
type DomainUpdateFormJSONRequestBody = UpdateForm

// EnvironmentCreateDomainGroupJSONRequestBody defines body for EnvironmentCreateDomainGroup for application/json ContentType.
type EnvironmentCreateDomainGroupJSONRequestBody = NewGroup

// DomainUpdateGroupJSONRequestBody defines body for DomainUpdateGroup for application/json ContentType.
type DomainUpdateGroupJSONRequestBody = UpdateGroup

// EnvironmentAddDomainGroupRoleJSONRequestBody defines body for EnvironmentAddDomainGroupRole for application/json ContentType.
type EnvironmentAddDomainGroupRoleJSONRequestBody = EnvironmentAddDomainGroupRoleJSONBody

// EnvironmentCreateDomainIdentityProviderJSONRequestBody defines body for EnvironmentCreateDomainIdentityProvider for application/json ContentType.
type EnvironmentCreateDomainIdentityProviderJSONRequestBody = NewIdentityProvider

// DomainUpdateIdentityProviderJSONRequestBody defines body for DomainUpdateIdentityProvider for application/json ContentType.
type DomainUpdateIdentityProviderJSONRequestBody = UpdateIdentityProvider

// DomainAddOrUpdateMemberJSONRequestBody defines body for DomainAddOrUpdateMember for application/json ContentType.
type DomainAddOrUpdateMemberJSONRequestBody = NewMembership

// EnvironmentCreateDomainReporterJSONRequestBody defines body for EnvironmentCreateDomainReporter for application/json ContentType.
type EnvironmentCreateDomainReporterJSONRequestBody = NewReporter

// DomainUpdateReporterJSONRequestBody defines body for DomainUpdateReporter for application/json ContentType.
type DomainUpdateReporterJSONRequestBody = UpdateReporter

// EnvironmentCreateDomainResourceJSONRequestBody defines body for EnvironmentCreateDomainResource for application/json ContentType.
type EnvironmentCreateDomainResourceJSONRequestBody = NewServiceResource

// DomainUpdateResourceJSONRequestBody defines body for DomainUpdateResource for application/json ContentType.
type DomainUpdateResourceJSONRequestBody = UpdateServiceResource

// EnvironmentCreateDomainMemberRoleJSONRequestBody defines body for EnvironmentCreateDomainMemberRole for application/json ContentType.
type EnvironmentCreateDomainMemberRoleJSONRequestBody = NewRole

// DomainUpdateRoleJSONRequestBody defines body for DomainUpdateRole for application/json ContentType.
type DomainUpdateRoleJSONRequestBody = UpdateRole

// EnvironmentCreateDomainScopeJSONRequestBody defines body for EnvironmentCreateDomainScope for application/json ContentType.
type EnvironmentCreateDomainScopeJSONRequestBody = NewScope

// PatchScopeJSONRequestBody defines body for PatchScope for application/json ContentType.
type PatchScopeJSONRequestBody = PatchScope

// UpdateScopeJSONRequestBody defines body for UpdateScope for application/json ContentType.
type UpdateScopeJSONRequestBody = UpdateScope

// EnvironmentCreateDomainThemeJSONRequestBody defines body for EnvironmentCreateDomainTheme for application/json ContentType.
type EnvironmentCreateDomainThemeJSONRequestBody = NewTheme

// DomainUpdateThemeJSONRequestBody defines body for DomainUpdateTheme for application/json ContentType.
type DomainUpdateThemeJSONRequestBody = ThemeEntity

// EnvironmentCreateDomainUserJSONRequestBody defines body for EnvironmentCreateDomainUser for application/json ContentType.
type EnvironmentCreateDomainUserJSONRequestBody = NewUser

// DomainUpdateUserJSONRequestBody defines body for DomainUpdateUser for application/json ContentType.
type DomainUpdateUserJSONRequestBody = UpdateUser

// DomainAddOrUpdateUserRoleJSONRequestBody defines body for DomainAddOrUpdateUserRole for application/json ContentType.
type DomainAddOrUpdateUserRoleJSONRequestBody = DomainAddOrUpdateUserRoleJSONBody

// DomainUpdateUserStatusJSONRequestBody defines body for DomainUpdateUserStatus for application/json ContentType.
type DomainUpdateUserStatusJSONRequestBody = StatusEntity

// EnvironmentResetDomainUserNameJSONRequestBody defines body for EnvironmentResetDomainUserName for application/json ContentType.
type EnvironmentResetDomainUserNameJSONRequestBody = UsernameEntity

// OrganizationCreatePlatfomFormTemplateJSONRequestBody defines body for OrganizationCreatePlatfomFormTemplate for application/json ContentType.
type OrganizationCreatePlatfomFormTemplateJSONRequestBody = NewForm

// OrganizationUpdatePlatfomFormTemplateJSONRequestBody defines body for OrganizationUpdatePlatfomFormTemplate for application/json ContentType.
type OrganizationUpdatePlatfomFormTemplateJSONRequestBody = UpdateForm

// OrganizationCreatePlatformGroupJSONRequestBody defines body for OrganizationCreatePlatformGroup for application/json ContentType.
type OrganizationCreatePlatformGroupJSONRequestBody = NewGroup

// OrganizationUpdatePlatformGroupJSONRequestBody defines body for OrganizationUpdatePlatformGroup for application/json ContentType.
type OrganizationUpdatePlatformGroupJSONRequestBody = UpdateGroup

// OrganizationCreatePlatformIdentityProviderJSONRequestBody defines body for OrganizationCreatePlatformIdentityProvider for application/json ContentType.
type OrganizationCreatePlatformIdentityProviderJSONRequestBody = NewIdentityProvider

// OrganizationUpdatePlatformIdentityProviderJSONRequestBody defines body for OrganizationUpdatePlatformIdentityProvider for application/json ContentType.
type OrganizationUpdatePlatformIdentityProviderJSONRequestBody = UpdateIdentityProvider

// OrganizationAddOrUpdatePlatformMemberJSONRequestBody defines body for OrganizationAddOrUpdatePlatformMember for application/json ContentType.
type OrganizationAddOrUpdatePlatformMemberJSONRequestBody = NewMembership

// OrganizationCreatePlatformRoleJSONRequestBody defines body for OrganizationCreatePlatformRole for application/json ContentType.
type OrganizationCreatePlatformRoleJSONRequestBody = NewRole

// OrganizationUpdatePlatformRoleJSONRequestBody defines body for OrganizationUpdatePlatformRole for application/json ContentType.
type OrganizationUpdatePlatformRoleJSONRequestBody = UpdateRole

// OrganizationUpdatePlatformSettingsJSONRequestBody defines body for OrganizationUpdatePlatformSettings for application/json ContentType.
type OrganizationUpdatePlatformSettingsJSONRequestBody = PatchOrganization

// OrganizationCreatePlatformShardingTagJSONRequestBody defines body for OrganizationCreatePlatformShardingTag for application/json ContentType.
type OrganizationCreatePlatformShardingTagJSONRequestBody = NewTag

// OrganizationUpdatePlatformShardingTagJSONRequestBody defines body for OrganizationUpdatePlatformShardingTag for application/json ContentType.
type OrganizationUpdatePlatformShardingTagJSONRequestBody = UpdateTag

// OrganizationCreatePlatformUserJSONRequestBody defines body for OrganizationCreatePlatformUser for application/json ContentType.
type OrganizationCreatePlatformUserJSONRequestBody = NewUser

// OrganizationUpdatePlatformUserJSONRequestBody defines body for OrganizationUpdatePlatformUser for application/json ContentType.
type OrganizationUpdatePlatformUserJSONRequestBody = UpdateUser

// OrganizationUpdatePlatformUserStatusJSONRequestBody defines body for OrganizationUpdatePlatformUserStatus for application/json ContentType.
type OrganizationUpdatePlatformUserStatusJSONRequestBody = StatusEntity

// OrganizationUpdatePlatformUserNameJSONRequestBody defines body for OrganizationUpdatePlatformUserName for application/json ContentType.
type OrganizationUpdatePlatformUserNameJSONRequestBody = UsernameEntity

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AuthTokenExchange request
	AuthTokenExchange(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationListPlatformAudits request
	OrganizationListPlatformAudits(ctx context.Context, organizationId string, params *OrganizationListPlatformAuditsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationGetPlatformAudit request
	OrganizationGetPlatformAudit(ctx context.Context, organizationId string, audit string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationListEntrypoints request
	OrganizationListEntrypoints(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Create14WithBody request with any body
	Create14WithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Create14(ctx context.Context, organizationId string, body Create14JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationDeleteEntrypoint request
	OrganizationDeleteEntrypoint(ctx context.Context, organizationId string, entrypointId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationGetEntrypoint request
	OrganizationGetEntrypoint(ctx context.Context, organizationId string, entrypointId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationUpdateEntrypointWithBody request with any body
	OrganizationUpdateEntrypointWithBody(ctx context.Context, organizationId string, entrypointId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OrganizationUpdateEntrypoint(ctx context.Context, organizationId string, entrypointId string, body OrganizationUpdateEntrypointJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationListPlatfomEnvironments request
	OrganizationListPlatfomEnvironments(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentListDomains request
	EnvironmentListDomains(ctx context.Context, organizationId string, environmentId string, params *EnvironmentListDomainsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentCreateDomainWithBody request with any body
	EnvironmentCreateDomainWithBody(ctx context.Context, organizationId string, environmentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EnvironmentCreateDomain(ctx context.Context, organizationId string, environmentId string, body EnvironmentCreateDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainGetByHrid request
	DomainGetByHrid(ctx context.Context, organizationId string, environmentId string, hrid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainDelete request
	DomainDelete(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainGet request
	DomainGet(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentPatchDomainWithBody request with any body
	EnvironmentPatchDomainWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EnvironmentPatchDomain(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentPatchDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainUpdateWithBody request with any body
	DomainUpdateWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainUpdate(ctx context.Context, organizationId string, environmentId string, domain string, body DomainUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentListDomainAlertNotifiers request
	EnvironmentListDomainAlertNotifiers(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentCreateDomainAlertNotifierWithBody request with any body
	EnvironmentCreateDomainAlertNotifierWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EnvironmentCreateDomainAlertNotifier(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainAlertNotifierJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainDeleteAlertNotifier request
	DomainDeleteAlertNotifier(ctx context.Context, organizationId string, environmentId string, domain string, notifierId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainGetAlertNotifier request
	DomainGetAlertNotifier(ctx context.Context, organizationId string, environmentId string, domain string, notifierId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentPatchDomainAlertNotifierWithBody request with any body
	EnvironmentPatchDomainAlertNotifierWithBody(ctx context.Context, organizationId string, environmentId string, domain string, notifierId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EnvironmentPatchDomainAlertNotifier(ctx context.Context, organizationId string, environmentId string, domain string, notifierId string, body EnvironmentPatchDomainAlertNotifierJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentListDomainAlertTriggers request
	EnvironmentListDomainAlertTriggers(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentPatchDomainAlertTriggersWithBody request with any body
	EnvironmentPatchDomainAlertTriggersWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EnvironmentPatchDomainAlertTriggers(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentPatchDomainAlertTriggersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainGetAnalytics request
	DomainGetAnalytics(ctx context.Context, organizationId string, environmentId string, domain string, params *DomainGetAnalyticsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentListDomainApplications request
	EnvironmentListDomainApplications(ctx context.Context, organizationId string, environmentId string, domain string, params *EnvironmentListDomainApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentCreateDomainApplicationWithBody request with any body
	EnvironmentCreateDomainApplicationWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EnvironmentCreateDomainApplication(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainDeleteApplication request
	DomainDeleteApplication(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplicationGetDomainApplication request
	ApplicationGetDomainApplication(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentPatchDomainApplicationWithBody request with any body
	EnvironmentPatchDomainApplicationWithBody(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EnvironmentPatchDomainApplication(ctx context.Context, organizationId string, environmentId string, domain string, application string, body EnvironmentPatchDomainApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainUpdateApplicationWithBody request with any body
	DomainUpdateApplicationWithBody(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainUpdateApplication(ctx context.Context, organizationId string, environmentId string, domain string, application string, body DomainUpdateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplicationGetAnalytics request
	ApplicationGetAnalytics(ctx context.Context, organizationId string, environmentId string, domain string, application string, params *ApplicationGetAnalyticsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplicationListEmails request
	ApplicationListEmails(ctx context.Context, organizationId string, environmentId string, domain string, application string, params *ApplicationListEmailsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplicationCreateEmailWithBody request with any body
	ApplicationCreateEmailWithBody(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApplicationCreateEmail(ctx context.Context, organizationId string, environmentId string, domain string, application string, body ApplicationCreateEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplicationDeleteEmail request
	ApplicationDeleteEmail(ctx context.Context, organizationId string, environmentId string, domain string, application string, email string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplicationUpdateEmailWithBody request with any body
	ApplicationUpdateEmailWithBody(ctx context.Context, organizationId string, environmentId string, domain string, application string, email string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApplicationUpdateEmail(ctx context.Context, organizationId string, environmentId string, domain string, application string, email string, body ApplicationUpdateEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplicationListFlows request
	ApplicationListFlows(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplicationCreateFlowWithBody request with any body
	ApplicationCreateFlowWithBody(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApplicationCreateFlow(ctx context.Context, organizationId string, environmentId string, domain string, application string, body ApplicationCreateFlowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplicationGetFlow request
	ApplicationGetFlow(ctx context.Context, organizationId string, environmentId string, domain string, application string, flow string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplicationUpdateFlowWithBody request with any body
	ApplicationUpdateFlowWithBody(ctx context.Context, organizationId string, environmentId string, domain string, application string, flow string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApplicationUpdateFlow(ctx context.Context, organizationId string, environmentId string, domain string, application string, flow string, body ApplicationUpdateFlowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplicationListForms request
	ApplicationListForms(ctx context.Context, organizationId string, environmentId string, domain string, application string, params *ApplicationListFormsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplicationCreateFormWithBody request with any body
	ApplicationCreateFormWithBody(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApplicationCreateForm(ctx context.Context, organizationId string, environmentId string, domain string, application string, body ApplicationCreateFormJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplicationDeleteForm request
	ApplicationDeleteForm(ctx context.Context, organizationId string, environmentId string, domain string, application string, form string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplicationUpdateFormWithBody request with any body
	ApplicationUpdateFormWithBody(ctx context.Context, organizationId string, environmentId string, domain string, application string, form string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApplicationUpdateForm(ctx context.Context, organizationId string, environmentId string, domain string, application string, form string, body ApplicationUpdateFormJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplicationListMembers request
	ApplicationListMembers(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplicationAddOrUpdateMemberWithBody request with any body
	ApplicationAddOrUpdateMemberWithBody(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApplicationAddOrUpdateMember(ctx context.Context, organizationId string, environmentId string, domain string, application string, body ApplicationAddOrUpdateMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplicationListMemberPermissions request
	ApplicationListMemberPermissions(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplicationDeleteMember request
	ApplicationDeleteMember(ctx context.Context, organizationId string, environmentId string, domain string, application string, member string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplicationListResources request
	ApplicationListResources(ctx context.Context, organizationId string, environmentId string, domain string, application string, params *ApplicationListResourcesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplicationGetResource request
	ApplicationGetResource(ctx context.Context, organizationId string, environmentId string, domain string, application string, resource string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplicationGetResourceAccessPolicies request
	ApplicationGetResourceAccessPolicies(ctx context.Context, organizationId string, environmentId string, domain string, application string, resource string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplicationGetResourceAccessPolicy request
	ApplicationGetResourceAccessPolicy(ctx context.Context, organizationId string, environmentId string, domain string, application string, resource string, policy string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplicationRenewSecret request
	ApplicationRenewSecret(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplicationUpdateTypeWithBody request with any body
	ApplicationUpdateTypeWithBody(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApplicationUpdateType(ctx context.Context, organizationId string, environmentId string, domain string, application string, body ApplicationUpdateTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentListDomainAudits request
	EnvironmentListDomainAudits(ctx context.Context, organizationId string, environmentId string, domain string, params *EnvironmentListDomainAuditsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainGetAudit request
	DomainGetAudit(ctx context.Context, organizationId string, environmentId string, domain string, audit string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentListDomainAuthDeviceNotifier request
	EnvironmentListDomainAuthDeviceNotifier(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentCreateDomainAuthDeviceNotifiersWithBody request with any body
	EnvironmentCreateDomainAuthDeviceNotifiersWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EnvironmentCreateDomainAuthDeviceNotifiers(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainAuthDeviceNotifiersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainDeleteAuthDeviceNotifier request
	DomainDeleteAuthDeviceNotifier(ctx context.Context, organizationId string, environmentId string, domain string, authDeviceNotifier string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainGetAuthDeviceNotifier request
	DomainGetAuthDeviceNotifier(ctx context.Context, organizationId string, environmentId string, domain string, authDeviceNotifier string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainUpdateAuthDeviceNotifierWithBody request with any body
	DomainUpdateAuthDeviceNotifierWithBody(ctx context.Context, organizationId string, environmentId string, domain string, authDeviceNotifier string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainUpdateAuthDeviceNotifier(ctx context.Context, organizationId string, environmentId string, domain string, authDeviceNotifier string, body DomainUpdateAuthDeviceNotifierJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentListDomainBotDetections request
	EnvironmentListDomainBotDetections(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentCreateDomainBotDetectionWithBody request with any body
	EnvironmentCreateDomainBotDetectionWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EnvironmentCreateDomainBotDetection(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainBotDetectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainDeleteBotDetection request
	DomainDeleteBotDetection(ctx context.Context, organizationId string, environmentId string, domain string, botDetection string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainGetBotDetection request
	DomainGetBotDetection(ctx context.Context, organizationId string, environmentId string, domain string, botDetection string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainUpdateBotDetectionWithBody request with any body
	DomainUpdateBotDetectionWithBody(ctx context.Context, organizationId string, environmentId string, domain string, botDetection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainUpdateBotDetection(ctx context.Context, organizationId string, environmentId string, domain string, botDetection string, body DomainUpdateBotDetectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentListDomainCertificates request
	EnvironmentListDomainCertificates(ctx context.Context, organizationId string, environmentId string, domain string, params *EnvironmentListDomainCertificatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentCreateDomainCertificateWithBody request with any body
	EnvironmentCreateDomainCertificateWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EnvironmentCreateDomainCertificate(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainCertificateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentRotateDomainCertificate request
	EnvironmentRotateDomainCertificate(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainDeleteCertificate request
	DomainDeleteCertificate(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainGetCertificate request
	DomainGetCertificate(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainUpdateCertificateWithBody request with any body
	DomainUpdateCertificateWithBody(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainUpdateCertificate(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, body DomainUpdateCertificateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainGetCertificatePublicKey request
	DomainGetCertificatePublicKey(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentListDomainCertificatePublicKeys request
	EnvironmentListDomainCertificatePublicKeys(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentListDomainDeviceIdentifiers request
	EnvironmentListDomainDeviceIdentifiers(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentCreateDomainDeviceIdentifierWithBody request with any body
	EnvironmentCreateDomainDeviceIdentifierWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EnvironmentCreateDomainDeviceIdentifier(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainDeviceIdentifierJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainDeleteDeviceIdentifier request
	DomainDeleteDeviceIdentifier(ctx context.Context, organizationId string, environmentId string, domain string, deviceIdentifier string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainGetDeviceIdentifier request
	DomainGetDeviceIdentifier(ctx context.Context, organizationId string, environmentId string, domain string, deviceIdentifier string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainUpdateDeviceIdentifierWithBody request with any body
	DomainUpdateDeviceIdentifierWithBody(ctx context.Context, organizationId string, environmentId string, domain string, deviceIdentifier string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainUpdateDeviceIdentifier(ctx context.Context, organizationId string, environmentId string, domain string, deviceIdentifier string, body DomainUpdateDeviceIdentifierJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentListDomainEmails request
	EnvironmentListDomainEmails(ctx context.Context, organizationId string, environmentId string, domain string, params *EnvironmentListDomainEmailsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentCreateDomainEmailWithBody request with any body
	EnvironmentCreateDomainEmailWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EnvironmentCreateDomainEmail(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainDeleteEmail request
	DomainDeleteEmail(ctx context.Context, organizationId string, environmentId string, domain string, email string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainUpdateEmailWithBody request with any body
	DomainUpdateEmailWithBody(ctx context.Context, organizationId string, environmentId string, domain string, email string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainUpdateEmail(ctx context.Context, organizationId string, environmentId string, domain string, email string, body DomainUpdateEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainGetEntrypoints request
	DomainGetEntrypoints(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentListDomainExtensionGrants request
	EnvironmentListDomainExtensionGrants(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentCreateDomainExtensionGrantWithBody request with any body
	EnvironmentCreateDomainExtensionGrantWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EnvironmentCreateDomainExtensionGrant(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainExtensionGrantJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainDeleteExtensionGrant request
	DomainDeleteExtensionGrant(ctx context.Context, organizationId string, environmentId string, domain string, extensionGrant string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainGetExtensionGrant request
	DomainGetExtensionGrant(ctx context.Context, organizationId string, environmentId string, domain string, extensionGrant string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainUpdateExtensionGrantWithBody request with any body
	DomainUpdateExtensionGrantWithBody(ctx context.Context, organizationId string, environmentId string, domain string, extensionGrant string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainUpdateExtensionGrant(ctx context.Context, organizationId string, environmentId string, domain string, extensionGrant string, body DomainUpdateExtensionGrantJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentListDomainFactors request
	EnvironmentListDomainFactors(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentCreateDomainFactorWithBody request with any body
	EnvironmentCreateDomainFactorWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EnvironmentCreateDomainFactor(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainFactorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainDeleteFactor request
	DomainDeleteFactor(ctx context.Context, organizationId string, environmentId string, domain string, factor string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainGetFactor request
	DomainGetFactor(ctx context.Context, organizationId string, environmentId string, domain string, factor string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainUpdateFactorWithBody request with any body
	DomainUpdateFactorWithBody(ctx context.Context, organizationId string, environmentId string, domain string, factor string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainUpdateFactor(ctx context.Context, organizationId string, environmentId string, domain string, factor string, body DomainUpdateFactorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentListDomainFlows request
	EnvironmentListDomainFlows(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentCreateOrUpdateDomainFlowsWithBody request with any body
	EnvironmentCreateOrUpdateDomainFlowsWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EnvironmentCreateOrUpdateDomainFlows(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateOrUpdateDomainFlowsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainGetFlow request
	DomainGetFlow(ctx context.Context, organizationId string, environmentId string, domain string, flow string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainUpdateFlowWithBody request with any body
	DomainUpdateFlowWithBody(ctx context.Context, organizationId string, environmentId string, domain string, flow string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainUpdateFlow(ctx context.Context, organizationId string, environmentId string, domain string, flow string, body DomainUpdateFlowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentListDomainForms request
	EnvironmentListDomainForms(ctx context.Context, organizationId string, environmentId string, domain string, params *EnvironmentListDomainFormsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentCreateDomainFormWithBody request with any body
	EnvironmentCreateDomainFormWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EnvironmentCreateDomainForm(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainFormJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentPreviewDomainFormWithBody request with any body
	EnvironmentPreviewDomainFormWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EnvironmentPreviewDomainForm(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentPreviewDomainFormJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainDeleteForm request
	DomainDeleteForm(ctx context.Context, organizationId string, environmentId string, domain string, form string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainUpdateFormWithBody request with any body
	DomainUpdateFormWithBody(ctx context.Context, organizationId string, environmentId string, domain string, form string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainUpdateForm(ctx context.Context, organizationId string, environmentId string, domain string, form string, body DomainUpdateFormJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentListDomainGroups request
	EnvironmentListDomainGroups(ctx context.Context, organizationId string, environmentId string, domain string, params *EnvironmentListDomainGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentCreateDomainGroupWithBody request with any body
	EnvironmentCreateDomainGroupWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EnvironmentCreateDomainGroup(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainDeleteGroup request
	DomainDeleteGroup(ctx context.Context, organizationId string, environmentId string, domain string, group string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainGetGroup request
	DomainGetGroup(ctx context.Context, organizationId string, environmentId string, domain string, group string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainUpdateGroupWithBody request with any body
	DomainUpdateGroupWithBody(ctx context.Context, organizationId string, environmentId string, domain string, group string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainUpdateGroup(ctx context.Context, organizationId string, environmentId string, domain string, group string, body DomainUpdateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainGetGroupMemebers request
	DomainGetGroupMemebers(ctx context.Context, organizationId string, environmentId string, domain string, group string, params *DomainGetGroupMemebersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentRemoveDomainGroupMemeber request
	EnvironmentRemoveDomainGroupMemeber(ctx context.Context, organizationId string, environmentId string, domain string, group string, member string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainAddOrUpdateGroupMemeber request
	DomainAddOrUpdateGroupMemeber(ctx context.Context, organizationId string, environmentId string, domain string, group string, member string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentListDomainGroupRoles request
	EnvironmentListDomainGroupRoles(ctx context.Context, organizationId string, environmentId string, domain string, group string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentAddDomainGroupRoleWithBody request with any body
	EnvironmentAddDomainGroupRoleWithBody(ctx context.Context, organizationId string, environmentId string, domain string, group string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EnvironmentAddDomainGroupRole(ctx context.Context, organizationId string, environmentId string, domain string, group string, body EnvironmentAddDomainGroupRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentRemoveDomainGroupRole request
	EnvironmentRemoveDomainGroupRole(ctx context.Context, organizationId string, environmentId string, domain string, group string, role string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentListDomainDictionaries request
	EnvironmentListDomainDictionaries(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentCreateDomainDictionaryWithBody request with any body
	EnvironmentCreateDomainDictionaryWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainDeleteDictionary request
	DomainDeleteDictionary(ctx context.Context, organizationId string, environmentId string, domain string, dictionary string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainGetDictionary request
	DomainGetDictionary(ctx context.Context, organizationId string, environmentId string, domain string, dictionary string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainUpdateDictionaryWithBody request with any body
	DomainUpdateDictionaryWithBody(ctx context.Context, organizationId string, environmentId string, domain string, dictionary string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainUpdateDictionaryEntriesWithBody request with any body
	DomainUpdateDictionaryEntriesWithBody(ctx context.Context, organizationId string, environmentId string, domain string, dictionary string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentListDomainIdentityProviders request
	EnvironmentListDomainIdentityProviders(ctx context.Context, organizationId string, environmentId string, domain string, params *EnvironmentListDomainIdentityProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentCreateDomainIdentityProviderWithBody request with any body
	EnvironmentCreateDomainIdentityProviderWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EnvironmentCreateDomainIdentityProvider(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainIdentityProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainDeleteIdentityProvider request
	DomainDeleteIdentityProvider(ctx context.Context, organizationId string, environmentId string, domain string, identity string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainGetIdentityProvider request
	DomainGetIdentityProvider(ctx context.Context, organizationId string, environmentId string, domain string, identity string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainUpdateIdentityProviderWithBody request with any body
	DomainUpdateIdentityProviderWithBody(ctx context.Context, organizationId string, environmentId string, domain string, identity string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainUpdateIdentityProvider(ctx context.Context, organizationId string, environmentId string, domain string, identity string, body DomainUpdateIdentityProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentListDomainMembers request
	EnvironmentListDomainMembers(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainAddOrUpdateMemberWithBody request with any body
	DomainAddOrUpdateMemberWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainAddOrUpdateMember(ctx context.Context, organizationId string, environmentId string, domain string, body DomainAddOrUpdateMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentListDomainMemberPermissions request
	EnvironmentListDomainMemberPermissions(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentRemoveDomainMember request
	EnvironmentRemoveDomainMember(ctx context.Context, organizationId string, environmentId string, domain string, member string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentListDomainReporters request
	EnvironmentListDomainReporters(ctx context.Context, organizationId string, environmentId string, domain string, params *EnvironmentListDomainReportersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentCreateDomainReporterWithBody request with any body
	EnvironmentCreateDomainReporterWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EnvironmentCreateDomainReporter(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainReporterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainDeleteReporter request
	DomainDeleteReporter(ctx context.Context, organizationId string, environmentId string, domain string, reporter string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainGetReporter request
	DomainGetReporter(ctx context.Context, organizationId string, environmentId string, domain string, reporter string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainUpdateReporterWithBody request with any body
	DomainUpdateReporterWithBody(ctx context.Context, organizationId string, environmentId string, domain string, reporter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainUpdateReporter(ctx context.Context, organizationId string, environmentId string, domain string, reporter string, body DomainUpdateReporterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentListDomainResources request
	EnvironmentListDomainResources(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentCreateDomainResourceWithBody request with any body
	EnvironmentCreateDomainResourceWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EnvironmentCreateDomainResource(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainDeleteResource request
	DomainDeleteResource(ctx context.Context, organizationId string, environmentId string, domain string, resource string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainGetResource request
	DomainGetResource(ctx context.Context, organizationId string, environmentId string, domain string, resource string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainUpdateResourceWithBody request with any body
	DomainUpdateResourceWithBody(ctx context.Context, organizationId string, environmentId string, domain string, resource string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainUpdateResource(ctx context.Context, organizationId string, environmentId string, domain string, resource string, body DomainUpdateResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentListDomainRoles request
	EnvironmentListDomainRoles(ctx context.Context, organizationId string, environmentId string, domain string, params *EnvironmentListDomainRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentCreateDomainMemberRoleWithBody request with any body
	EnvironmentCreateDomainMemberRoleWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EnvironmentCreateDomainMemberRole(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainMemberRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainDeleteRole request
	DomainDeleteRole(ctx context.Context, organizationId string, environmentId string, domain string, role string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainGetRole request
	DomainGetRole(ctx context.Context, organizationId string, environmentId string, domain string, role string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainUpdateRoleWithBody request with any body
	DomainUpdateRoleWithBody(ctx context.Context, organizationId string, environmentId string, domain string, role string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainUpdateRole(ctx context.Context, organizationId string, environmentId string, domain string, role string, body DomainUpdateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentListDomainScopes request
	EnvironmentListDomainScopes(ctx context.Context, organizationId string, environmentId string, domain string, params *EnvironmentListDomainScopesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentCreateDomainScopeWithBody request with any body
	EnvironmentCreateDomainScopeWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EnvironmentCreateDomainScope(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteScope request
	DeleteScope(ctx context.Context, organizationId string, environmentId string, domain string, scope string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainGetScope request
	DomainGetScope(ctx context.Context, organizationId string, environmentId string, domain string, scope string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchScopeWithBody request with any body
	PatchScopeWithBody(ctx context.Context, organizationId string, environmentId string, domain string, scope string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchScope(ctx context.Context, organizationId string, environmentId string, domain string, scope string, body PatchScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateScopeWithBody request with any body
	UpdateScopeWithBody(ctx context.Context, organizationId string, environmentId string, domain string, scope string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateScope(ctx context.Context, organizationId string, environmentId string, domain string, scope string, body UpdateScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentListDomainThemes request
	EnvironmentListDomainThemes(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentCreateDomainThemeWithBody request with any body
	EnvironmentCreateDomainThemeWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EnvironmentCreateDomainTheme(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainThemeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainDeleteTheme request
	DomainDeleteTheme(ctx context.Context, organizationId string, environmentId string, domain string, themeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainGetTheme request
	DomainGetTheme(ctx context.Context, organizationId string, environmentId string, domain string, themeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainUpdateThemeWithBody request with any body
	DomainUpdateThemeWithBody(ctx context.Context, organizationId string, environmentId string, domain string, themeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainUpdateTheme(ctx context.Context, organizationId string, environmentId string, domain string, themeId string, body DomainUpdateThemeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentListDomainUsers request
	EnvironmentListDomainUsers(ctx context.Context, organizationId string, environmentId string, domain string, params *EnvironmentListDomainUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentCreateDomainUserWithBody request with any body
	EnvironmentCreateDomainUserWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EnvironmentCreateDomainUser(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainDeleteUser request
	DomainDeleteUser(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainGetUser request
	DomainGetUser(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainUpdateUserWithBody request with any body
	DomainUpdateUserWithBody(ctx context.Context, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainUpdateUser(ctx context.Context, organizationId string, environmentId string, domain string, user string, body DomainUpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentListDomainUserAudits request
	EnvironmentListDomainUserAudits(ctx context.Context, organizationId string, environmentId string, domain string, user string, params *EnvironmentListDomainUserAuditsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainGetUserAudit request
	DomainGetUserAudit(ctx context.Context, organizationId string, environmentId string, domain string, user string, audit string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainDeleteUserConsents request
	DomainDeleteUserConsents(ctx context.Context, organizationId string, environmentId string, domain string, user string, params *DomainDeleteUserConsentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentListDomainUserConsents request
	EnvironmentListDomainUserConsents(ctx context.Context, organizationId string, environmentId string, domain string, user string, params *EnvironmentListDomainUserConsentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainDeleteUserConsent request
	DomainDeleteUserConsent(ctx context.Context, organizationId string, environmentId string, domain string, user string, consent string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainGetUserConsent request
	DomainGetUserConsent(ctx context.Context, organizationId string, environmentId string, domain string, user string, consent string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentListDomainUserCredentials request
	EnvironmentListDomainUserCredentials(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainDeleteUserCredential request
	DomainDeleteUserCredential(ctx context.Context, organizationId string, environmentId string, domain string, user string, credential string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainGetUserCredential request
	DomainGetUserCredential(ctx context.Context, organizationId string, environmentId string, domain string, user string, credential string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentListDomainUserDevices request
	EnvironmentListDomainUserDevices(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainGetUserDevice request
	DomainGetUserDevice(ctx context.Context, organizationId string, environmentId string, domain string, user string, device string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentListDomainUserFactors request
	EnvironmentListDomainUserFactors(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainDeleteUserFactor request
	DomainDeleteUserFactor(ctx context.Context, organizationId string, environmentId string, domain string, user string, factor string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentLockDomainUser request
	EnvironmentLockDomainUser(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentResetDomainUserPasswordWithBody request with any body
	EnvironmentResetDomainUserPasswordWithBody(ctx context.Context, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentListDomainUserRoles request
	EnvironmentListDomainUserRoles(ctx context.Context, organizationId string, environmentId string, domain string, user string, params *EnvironmentListDomainUserRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainAddOrUpdateUserRoleWithBody request with any body
	DomainAddOrUpdateUserRoleWithBody(ctx context.Context, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainAddOrUpdateUserRole(ctx context.Context, organizationId string, environmentId string, domain string, user string, body DomainAddOrUpdateUserRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainDeleteUserRole request
	DomainDeleteUserRole(ctx context.Context, organizationId string, environmentId string, domain string, user string, role string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentSendDomainUserRegistrationConfirmation request
	EnvironmentSendDomainUserRegistrationConfirmation(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DomainUpdateUserStatusWithBody request with any body
	DomainUpdateUserStatusWithBody(ctx context.Context, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DomainUpdateUserStatus(ctx context.Context, organizationId string, environmentId string, domain string, user string, body DomainUpdateUserStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentUnlockDomainUser request
	EnvironmentUnlockDomainUser(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentResetDomainUserNameWithBody request with any body
	EnvironmentResetDomainUserNameWithBody(ctx context.Context, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EnvironmentResetDomainUserName(ctx context.Context, organizationId string, environmentId string, domain string, user string, body EnvironmentResetDomainUserNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnvironmentListMemberPermissions request
	EnvironmentListMemberPermissions(ctx context.Context, organizationId string, environmentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationListPlatfomFormTemplates request
	OrganizationListPlatfomFormTemplates(ctx context.Context, organizationId string, params *OrganizationListPlatfomFormTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationCreatePlatfomFormTemplateWithBody request with any body
	OrganizationCreatePlatfomFormTemplateWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OrganizationCreatePlatfomFormTemplate(ctx context.Context, organizationId string, body OrganizationCreatePlatfomFormTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationDeletePlatfomFormTemplate request
	OrganizationDeletePlatfomFormTemplate(ctx context.Context, organizationId string, form string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationUpdatePlatfomFormTemplateWithBody request with any body
	OrganizationUpdatePlatfomFormTemplateWithBody(ctx context.Context, organizationId string, form string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OrganizationUpdatePlatfomFormTemplate(ctx context.Context, organizationId string, form string, body OrganizationUpdatePlatfomFormTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationListPlatformGroups request
	OrganizationListPlatformGroups(ctx context.Context, organizationId string, params *OrganizationListPlatformGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationCreatePlatformGroupWithBody request with any body
	OrganizationCreatePlatformGroupWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OrganizationCreatePlatformGroup(ctx context.Context, organizationId string, body OrganizationCreatePlatformGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationDeletePlatformGroup request
	OrganizationDeletePlatformGroup(ctx context.Context, organizationId string, group string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationGetPlatformGroup request
	OrganizationGetPlatformGroup(ctx context.Context, organizationId string, group string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationUpdatePlatformGroupWithBody request with any body
	OrganizationUpdatePlatformGroupWithBody(ctx context.Context, organizationId string, group string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OrganizationUpdatePlatformGroup(ctx context.Context, organizationId string, group string, body OrganizationUpdatePlatformGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationListPlatformGroupMembers request
	OrganizationListPlatformGroupMembers(ctx context.Context, organizationId string, group string, params *OrganizationListPlatformGroupMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationRemovePlatformGroupMember request
	OrganizationRemovePlatformGroupMember(ctx context.Context, organizationId string, group string, member string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationAddPlatformGroupMember request
	OrganizationAddPlatformGroupMember(ctx context.Context, organizationId string, group string, member string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationListPlatformIdentityProviders request
	OrganizationListPlatformIdentityProviders(ctx context.Context, organizationId string, params *OrganizationListPlatformIdentityProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationCreatePlatformIdentityProviderWithBody request with any body
	OrganizationCreatePlatformIdentityProviderWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OrganizationCreatePlatformIdentityProvider(ctx context.Context, organizationId string, body OrganizationCreatePlatformIdentityProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationDeletePlatformIdentityProvider request
	OrganizationDeletePlatformIdentityProvider(ctx context.Context, organizationId string, identity string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationGetPlatformIdentityProvider request
	OrganizationGetPlatformIdentityProvider(ctx context.Context, organizationId string, identity string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationUpdatePlatformIdentityProviderWithBody request with any body
	OrganizationUpdatePlatformIdentityProviderWithBody(ctx context.Context, organizationId string, identity string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OrganizationUpdatePlatformIdentityProvider(ctx context.Context, organizationId string, identity string, body OrganizationUpdatePlatformIdentityProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationListPlatformMembers request
	OrganizationListPlatformMembers(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationAddOrUpdatePlatformMemberWithBody request with any body
	OrganizationAddOrUpdatePlatformMemberWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OrganizationAddOrUpdatePlatformMember(ctx context.Context, organizationId string, body OrganizationAddOrUpdatePlatformMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationRemovePlatformMember request
	OrganizationRemovePlatformMember(ctx context.Context, organizationId string, member string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationListPlatformRoles request
	OrganizationListPlatformRoles(ctx context.Context, organizationId string, params *OrganizationListPlatformRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationCreatePlatformRoleWithBody request with any body
	OrganizationCreatePlatformRoleWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OrganizationCreatePlatformRole(ctx context.Context, organizationId string, body OrganizationCreatePlatformRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationDeletePlatformRole request
	OrganizationDeletePlatformRole(ctx context.Context, organizationId string, role string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationGetPlatformRole request
	OrganizationGetPlatformRole(ctx context.Context, organizationId string, role string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationUpdatePlatformRoleWithBody request with any body
	OrganizationUpdatePlatformRoleWithBody(ctx context.Context, organizationId string, role string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OrganizationUpdatePlatformRole(ctx context.Context, organizationId string, role string, body OrganizationUpdatePlatformRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationGetPlatformSettings request
	OrganizationGetPlatformSettings(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationUpdatePlatformSettingsWithBody request with any body
	OrganizationUpdatePlatformSettingsWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OrganizationUpdatePlatformSettings(ctx context.Context, organizationId string, body OrganizationUpdatePlatformSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationListPlatformShardingTags request
	OrganizationListPlatformShardingTags(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationCreatePlatformShardingTagWithBody request with any body
	OrganizationCreatePlatformShardingTagWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OrganizationCreatePlatformShardingTag(ctx context.Context, organizationId string, body OrganizationCreatePlatformShardingTagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationDeletePlatformShardingTag request
	OrganizationDeletePlatformShardingTag(ctx context.Context, organizationId string, tag string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationGetPlatformShardingTag request
	OrganizationGetPlatformShardingTag(ctx context.Context, organizationId string, tag string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationUpdatePlatformShardingTagWithBody request with any body
	OrganizationUpdatePlatformShardingTagWithBody(ctx context.Context, organizationId string, tag string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OrganizationUpdatePlatformShardingTag(ctx context.Context, organizationId string, tag string, body OrganizationUpdatePlatformShardingTagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationListPlatformUsers request
	OrganizationListPlatformUsers(ctx context.Context, organizationId string, params *OrganizationListPlatformUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationCreatePlatformUserWithBody request with any body
	OrganizationCreatePlatformUserWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OrganizationCreatePlatformUser(ctx context.Context, organizationId string, body OrganizationCreatePlatformUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationDeletePlatformUser request
	OrganizationDeletePlatformUser(ctx context.Context, organizationId string, user string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationGetPlatformUser request
	OrganizationGetPlatformUser(ctx context.Context, organizationId string, user string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationUpdatePlatformUserWithBody request with any body
	OrganizationUpdatePlatformUserWithBody(ctx context.Context, organizationId string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OrganizationUpdatePlatformUser(ctx context.Context, organizationId string, user string, body OrganizationUpdatePlatformUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationResetPlatformUserPasswordWithBody request with any body
	OrganizationResetPlatformUserPasswordWithBody(ctx context.Context, organizationId string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationUpdatePlatformUserStatusWithBody request with any body
	OrganizationUpdatePlatformUserStatusWithBody(ctx context.Context, organizationId string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OrganizationUpdatePlatformUserStatus(ctx context.Context, organizationId string, user string, body OrganizationUpdatePlatformUserStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrganizationUpdatePlatformUserNameWithBody request with any body
	OrganizationUpdatePlatformUserNameWithBody(ctx context.Context, organizationId string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OrganizationUpdatePlatformUserName(ctx context.Context, organizationId string, user string, body OrganizationUpdatePlatformUserNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlatformListAuditEventTypes request
	PlatformListAuditEventTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlatformAlertStatus request
	PlatformAlertStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlatformGetFlowSchema request
	PlatformGetFlowSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlatformGetSpelGrammar request
	PlatformGetSpelGrammar(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlatformGetInstallation request
	PlatformGetInstallation(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlatformListPluginAuthDeviceNotifiers request
	PlatformListPluginAuthDeviceNotifiers(ctx context.Context, params *PlatformListPluginAuthDeviceNotifiersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlatformGetPluginAuthDeviceNotifier request
	PlatformGetPluginAuthDeviceNotifier(ctx context.Context, authDeviceNotifierId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlatformGetPluginAuthDeviceNotifierSchema request
	PlatformGetPluginAuthDeviceNotifierSchema(ctx context.Context, authDeviceNotifierId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlatformListPluginBotDetections request
	PlatformListPluginBotDetections(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlatformGetPluginBotDetection request
	PlatformGetPluginBotDetection(ctx context.Context, botDetection string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlatformGetPluginBotDetectionSchema request
	PlatformGetPluginBotDetectionSchema(ctx context.Context, botDetection string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlatformListPluginCertificates request
	PlatformListPluginCertificates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlatformGetPluginCertificate request
	PlatformGetPluginCertificate(ctx context.Context, certificate string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlatformGetPluginCertificateSchema request
	PlatformGetPluginCertificateSchema(ctx context.Context, certificate string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlatformListDeviceIdentifierPlugins request
	PlatformListDeviceIdentifierPlugins(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlatformGetDeviceIdentifierPlugin request
	PlatformGetDeviceIdentifierPlugin(ctx context.Context, deviceIdentifier string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlatformGetDeviceIdentifierPluginSchema request
	PlatformGetDeviceIdentifierPluginSchema(ctx context.Context, deviceIdentifier string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlatformListPluginExtensionGrants request
	PlatformListPluginExtensionGrants(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlatformGetPluginExtensionGrant request
	PlatformGetPluginExtensionGrant(ctx context.Context, extensionGrant string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlatformGetPluginExtensionGrantSchema request
	PlatformGetPluginExtensionGrantSchema(ctx context.Context, extensionGrant string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlatformListPluginFactors request
	PlatformListPluginFactors(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlatformGetPluginFactor request
	PlatformGetPluginFactor(ctx context.Context, factor string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlatformGetPluginFactorSchema request
	PlatformGetPluginFactorSchema(ctx context.Context, factor string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlatformListProviderPlugins request
	PlatformListProviderPlugins(ctx context.Context, params *PlatformListProviderPluginsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlatformGetIdentityProviderPlugin request
	PlatformGetIdentityProviderPlugin(ctx context.Context, identity string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlatformGetIdentityProviderPluginSchema request
	PlatformGetIdentityProviderPluginSchema(ctx context.Context, identity string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlatformListPluginNotifiers request
	PlatformListPluginNotifiers(ctx context.Context, params *PlatformListPluginNotifiersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlatformGetPluginNotifier request
	PlatformGetPluginNotifier(ctx context.Context, notifierId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlatformGetPluginNotifierSchema request
	PlatformGetPluginNotifierSchema(ctx context.Context, notifierId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlatformListPluginPolicies request
	PlatformListPluginPolicies(ctx context.Context, params *PlatformListPluginPoliciesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlatformGetPluginPolicy request
	PlatformGetPluginPolicy(ctx context.Context, policy string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlatformGetPluginPolicyDocumentation request
	PlatformGetPluginPolicyDocumentation(ctx context.Context, policy string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlatformGetPluginPolicySchema request
	PlatformGetPluginPolicySchema(ctx context.Context, policy string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlatformListPluginReporters request
	PlatformListPluginReporters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlatformGetPluginReporter request
	PlatformGetPluginReporter(ctx context.Context, reporter string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlatformGetPluginReporterSchema request
	PlatformGetPluginReporterSchema(ctx context.Context, reporter string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlatformListPluginResources request
	PlatformListPluginResources(ctx context.Context, params *PlatformListPluginResourcesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlatformGetPluginResource request
	PlatformGetPluginResource(ctx context.Context, resource string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlatformGetPluginResourceSchema request
	PlatformGetPluginResourceSchema(ctx context.Context, resource string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlatformRole request
	PlatformRole(ctx context.Context, role string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CurrentUserGet request
	CurrentUserGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CurrentUserSubscribeNewsletterWithBody request with any body
	CurrentUserSubscribeNewsletterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CurrentUserGetNewsletterTaglines request
	CurrentUserGetNewsletterTaglines(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CurrentUserListNotifications request
	CurrentUserListNotifications(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CurrentUserMarkNotificationAsRead request
	CurrentUserMarkNotificationAsRead(ctx context.Context, notificationId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AuthTokenExchange(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthTokenExchangeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationListPlatformAudits(ctx context.Context, organizationId string, params *OrganizationListPlatformAuditsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationListPlatformAuditsRequest(c.Server, organizationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationGetPlatformAudit(ctx context.Context, organizationId string, audit string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationGetPlatformAuditRequest(c.Server, organizationId, audit)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationListEntrypoints(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationListEntrypointsRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create14WithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreate14RequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create14(ctx context.Context, organizationId string, body Create14JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreate14Request(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationDeleteEntrypoint(ctx context.Context, organizationId string, entrypointId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationDeleteEntrypointRequest(c.Server, organizationId, entrypointId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationGetEntrypoint(ctx context.Context, organizationId string, entrypointId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationGetEntrypointRequest(c.Server, organizationId, entrypointId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationUpdateEntrypointWithBody(ctx context.Context, organizationId string, entrypointId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationUpdateEntrypointRequestWithBody(c.Server, organizationId, entrypointId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationUpdateEntrypoint(ctx context.Context, organizationId string, entrypointId string, body OrganizationUpdateEntrypointJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationUpdateEntrypointRequest(c.Server, organizationId, entrypointId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationListPlatfomEnvironments(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationListPlatfomEnvironmentsRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentListDomains(ctx context.Context, organizationId string, environmentId string, params *EnvironmentListDomainsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentListDomainsRequest(c.Server, organizationId, environmentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentCreateDomainWithBody(ctx context.Context, organizationId string, environmentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentCreateDomainRequestWithBody(c.Server, organizationId, environmentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentCreateDomain(ctx context.Context, organizationId string, environmentId string, body EnvironmentCreateDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentCreateDomainRequest(c.Server, organizationId, environmentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainGetByHrid(ctx context.Context, organizationId string, environmentId string, hrid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainGetByHridRequest(c.Server, organizationId, environmentId, hrid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainDelete(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainDeleteRequest(c.Server, organizationId, environmentId, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainGet(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainGetRequest(c.Server, organizationId, environmentId, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentPatchDomainWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentPatchDomainRequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentPatchDomain(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentPatchDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentPatchDomainRequest(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainUpdateWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainUpdateRequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainUpdate(ctx context.Context, organizationId string, environmentId string, domain string, body DomainUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainUpdateRequest(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentListDomainAlertNotifiers(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentListDomainAlertNotifiersRequest(c.Server, organizationId, environmentId, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentCreateDomainAlertNotifierWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentCreateDomainAlertNotifierRequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentCreateDomainAlertNotifier(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainAlertNotifierJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentCreateDomainAlertNotifierRequest(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainDeleteAlertNotifier(ctx context.Context, organizationId string, environmentId string, domain string, notifierId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainDeleteAlertNotifierRequest(c.Server, organizationId, environmentId, domain, notifierId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainGetAlertNotifier(ctx context.Context, organizationId string, environmentId string, domain string, notifierId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainGetAlertNotifierRequest(c.Server, organizationId, environmentId, domain, notifierId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentPatchDomainAlertNotifierWithBody(ctx context.Context, organizationId string, environmentId string, domain string, notifierId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentPatchDomainAlertNotifierRequestWithBody(c.Server, organizationId, environmentId, domain, notifierId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentPatchDomainAlertNotifier(ctx context.Context, organizationId string, environmentId string, domain string, notifierId string, body EnvironmentPatchDomainAlertNotifierJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentPatchDomainAlertNotifierRequest(c.Server, organizationId, environmentId, domain, notifierId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentListDomainAlertTriggers(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentListDomainAlertTriggersRequest(c.Server, organizationId, environmentId, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentPatchDomainAlertTriggersWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentPatchDomainAlertTriggersRequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentPatchDomainAlertTriggers(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentPatchDomainAlertTriggersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentPatchDomainAlertTriggersRequest(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainGetAnalytics(ctx context.Context, organizationId string, environmentId string, domain string, params *DomainGetAnalyticsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainGetAnalyticsRequest(c.Server, organizationId, environmentId, domain, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentListDomainApplications(ctx context.Context, organizationId string, environmentId string, domain string, params *EnvironmentListDomainApplicationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentListDomainApplicationsRequest(c.Server, organizationId, environmentId, domain, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentCreateDomainApplicationWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentCreateDomainApplicationRequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentCreateDomainApplication(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentCreateDomainApplicationRequest(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainDeleteApplication(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainDeleteApplicationRequest(c.Server, organizationId, environmentId, domain, application)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationGetDomainApplication(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationGetDomainApplicationRequest(c.Server, organizationId, environmentId, domain, application)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentPatchDomainApplicationWithBody(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentPatchDomainApplicationRequestWithBody(c.Server, organizationId, environmentId, domain, application, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentPatchDomainApplication(ctx context.Context, organizationId string, environmentId string, domain string, application string, body EnvironmentPatchDomainApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentPatchDomainApplicationRequest(c.Server, organizationId, environmentId, domain, application, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainUpdateApplicationWithBody(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainUpdateApplicationRequestWithBody(c.Server, organizationId, environmentId, domain, application, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainUpdateApplication(ctx context.Context, organizationId string, environmentId string, domain string, application string, body DomainUpdateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainUpdateApplicationRequest(c.Server, organizationId, environmentId, domain, application, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationGetAnalytics(ctx context.Context, organizationId string, environmentId string, domain string, application string, params *ApplicationGetAnalyticsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationGetAnalyticsRequest(c.Server, organizationId, environmentId, domain, application, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationListEmails(ctx context.Context, organizationId string, environmentId string, domain string, application string, params *ApplicationListEmailsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationListEmailsRequest(c.Server, organizationId, environmentId, domain, application, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationCreateEmailWithBody(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationCreateEmailRequestWithBody(c.Server, organizationId, environmentId, domain, application, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationCreateEmail(ctx context.Context, organizationId string, environmentId string, domain string, application string, body ApplicationCreateEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationCreateEmailRequest(c.Server, organizationId, environmentId, domain, application, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationDeleteEmail(ctx context.Context, organizationId string, environmentId string, domain string, application string, email string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationDeleteEmailRequest(c.Server, organizationId, environmentId, domain, application, email)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationUpdateEmailWithBody(ctx context.Context, organizationId string, environmentId string, domain string, application string, email string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationUpdateEmailRequestWithBody(c.Server, organizationId, environmentId, domain, application, email, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationUpdateEmail(ctx context.Context, organizationId string, environmentId string, domain string, application string, email string, body ApplicationUpdateEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationUpdateEmailRequest(c.Server, organizationId, environmentId, domain, application, email, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationListFlows(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationListFlowsRequest(c.Server, organizationId, environmentId, domain, application)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationCreateFlowWithBody(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationCreateFlowRequestWithBody(c.Server, organizationId, environmentId, domain, application, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationCreateFlow(ctx context.Context, organizationId string, environmentId string, domain string, application string, body ApplicationCreateFlowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationCreateFlowRequest(c.Server, organizationId, environmentId, domain, application, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationGetFlow(ctx context.Context, organizationId string, environmentId string, domain string, application string, flow string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationGetFlowRequest(c.Server, organizationId, environmentId, domain, application, flow)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationUpdateFlowWithBody(ctx context.Context, organizationId string, environmentId string, domain string, application string, flow string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationUpdateFlowRequestWithBody(c.Server, organizationId, environmentId, domain, application, flow, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationUpdateFlow(ctx context.Context, organizationId string, environmentId string, domain string, application string, flow string, body ApplicationUpdateFlowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationUpdateFlowRequest(c.Server, organizationId, environmentId, domain, application, flow, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationListForms(ctx context.Context, organizationId string, environmentId string, domain string, application string, params *ApplicationListFormsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationListFormsRequest(c.Server, organizationId, environmentId, domain, application, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationCreateFormWithBody(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationCreateFormRequestWithBody(c.Server, organizationId, environmentId, domain, application, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationCreateForm(ctx context.Context, organizationId string, environmentId string, domain string, application string, body ApplicationCreateFormJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationCreateFormRequest(c.Server, organizationId, environmentId, domain, application, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationDeleteForm(ctx context.Context, organizationId string, environmentId string, domain string, application string, form string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationDeleteFormRequest(c.Server, organizationId, environmentId, domain, application, form)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationUpdateFormWithBody(ctx context.Context, organizationId string, environmentId string, domain string, application string, form string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationUpdateFormRequestWithBody(c.Server, organizationId, environmentId, domain, application, form, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationUpdateForm(ctx context.Context, organizationId string, environmentId string, domain string, application string, form string, body ApplicationUpdateFormJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationUpdateFormRequest(c.Server, organizationId, environmentId, domain, application, form, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationListMembers(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationListMembersRequest(c.Server, organizationId, environmentId, domain, application)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationAddOrUpdateMemberWithBody(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationAddOrUpdateMemberRequestWithBody(c.Server, organizationId, environmentId, domain, application, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationAddOrUpdateMember(ctx context.Context, organizationId string, environmentId string, domain string, application string, body ApplicationAddOrUpdateMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationAddOrUpdateMemberRequest(c.Server, organizationId, environmentId, domain, application, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationListMemberPermissions(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationListMemberPermissionsRequest(c.Server, organizationId, environmentId, domain, application)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationDeleteMember(ctx context.Context, organizationId string, environmentId string, domain string, application string, member string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationDeleteMemberRequest(c.Server, organizationId, environmentId, domain, application, member)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationListResources(ctx context.Context, organizationId string, environmentId string, domain string, application string, params *ApplicationListResourcesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationListResourcesRequest(c.Server, organizationId, environmentId, domain, application, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationGetResource(ctx context.Context, organizationId string, environmentId string, domain string, application string, resource string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationGetResourceRequest(c.Server, organizationId, environmentId, domain, application, resource)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationGetResourceAccessPolicies(ctx context.Context, organizationId string, environmentId string, domain string, application string, resource string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationGetResourceAccessPoliciesRequest(c.Server, organizationId, environmentId, domain, application, resource)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationGetResourceAccessPolicy(ctx context.Context, organizationId string, environmentId string, domain string, application string, resource string, policy string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationGetResourceAccessPolicyRequest(c.Server, organizationId, environmentId, domain, application, resource, policy)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationRenewSecret(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationRenewSecretRequest(c.Server, organizationId, environmentId, domain, application)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationUpdateTypeWithBody(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationUpdateTypeRequestWithBody(c.Server, organizationId, environmentId, domain, application, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplicationUpdateType(ctx context.Context, organizationId string, environmentId string, domain string, application string, body ApplicationUpdateTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplicationUpdateTypeRequest(c.Server, organizationId, environmentId, domain, application, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentListDomainAudits(ctx context.Context, organizationId string, environmentId string, domain string, params *EnvironmentListDomainAuditsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentListDomainAuditsRequest(c.Server, organizationId, environmentId, domain, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainGetAudit(ctx context.Context, organizationId string, environmentId string, domain string, audit string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainGetAuditRequest(c.Server, organizationId, environmentId, domain, audit)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentListDomainAuthDeviceNotifier(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentListDomainAuthDeviceNotifierRequest(c.Server, organizationId, environmentId, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentCreateDomainAuthDeviceNotifiersWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentCreateDomainAuthDeviceNotifiersRequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentCreateDomainAuthDeviceNotifiers(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainAuthDeviceNotifiersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentCreateDomainAuthDeviceNotifiersRequest(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainDeleteAuthDeviceNotifier(ctx context.Context, organizationId string, environmentId string, domain string, authDeviceNotifier string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainDeleteAuthDeviceNotifierRequest(c.Server, organizationId, environmentId, domain, authDeviceNotifier)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainGetAuthDeviceNotifier(ctx context.Context, organizationId string, environmentId string, domain string, authDeviceNotifier string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainGetAuthDeviceNotifierRequest(c.Server, organizationId, environmentId, domain, authDeviceNotifier)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainUpdateAuthDeviceNotifierWithBody(ctx context.Context, organizationId string, environmentId string, domain string, authDeviceNotifier string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainUpdateAuthDeviceNotifierRequestWithBody(c.Server, organizationId, environmentId, domain, authDeviceNotifier, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainUpdateAuthDeviceNotifier(ctx context.Context, organizationId string, environmentId string, domain string, authDeviceNotifier string, body DomainUpdateAuthDeviceNotifierJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainUpdateAuthDeviceNotifierRequest(c.Server, organizationId, environmentId, domain, authDeviceNotifier, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentListDomainBotDetections(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentListDomainBotDetectionsRequest(c.Server, organizationId, environmentId, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentCreateDomainBotDetectionWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentCreateDomainBotDetectionRequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentCreateDomainBotDetection(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainBotDetectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentCreateDomainBotDetectionRequest(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainDeleteBotDetection(ctx context.Context, organizationId string, environmentId string, domain string, botDetection string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainDeleteBotDetectionRequest(c.Server, organizationId, environmentId, domain, botDetection)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainGetBotDetection(ctx context.Context, organizationId string, environmentId string, domain string, botDetection string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainGetBotDetectionRequest(c.Server, organizationId, environmentId, domain, botDetection)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainUpdateBotDetectionWithBody(ctx context.Context, organizationId string, environmentId string, domain string, botDetection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainUpdateBotDetectionRequestWithBody(c.Server, organizationId, environmentId, domain, botDetection, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainUpdateBotDetection(ctx context.Context, organizationId string, environmentId string, domain string, botDetection string, body DomainUpdateBotDetectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainUpdateBotDetectionRequest(c.Server, organizationId, environmentId, domain, botDetection, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentListDomainCertificates(ctx context.Context, organizationId string, environmentId string, domain string, params *EnvironmentListDomainCertificatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentListDomainCertificatesRequest(c.Server, organizationId, environmentId, domain, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentCreateDomainCertificateWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentCreateDomainCertificateRequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentCreateDomainCertificate(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainCertificateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentCreateDomainCertificateRequest(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentRotateDomainCertificate(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentRotateDomainCertificateRequest(c.Server, organizationId, environmentId, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainDeleteCertificate(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainDeleteCertificateRequest(c.Server, organizationId, environmentId, domain, certificate)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainGetCertificate(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainGetCertificateRequest(c.Server, organizationId, environmentId, domain, certificate)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainUpdateCertificateWithBody(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainUpdateCertificateRequestWithBody(c.Server, organizationId, environmentId, domain, certificate, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainUpdateCertificate(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, body DomainUpdateCertificateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainUpdateCertificateRequest(c.Server, organizationId, environmentId, domain, certificate, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainGetCertificatePublicKey(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainGetCertificatePublicKeyRequest(c.Server, organizationId, environmentId, domain, certificate)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentListDomainCertificatePublicKeys(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentListDomainCertificatePublicKeysRequest(c.Server, organizationId, environmentId, domain, certificate)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentListDomainDeviceIdentifiers(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentListDomainDeviceIdentifiersRequest(c.Server, organizationId, environmentId, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentCreateDomainDeviceIdentifierWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentCreateDomainDeviceIdentifierRequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentCreateDomainDeviceIdentifier(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainDeviceIdentifierJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentCreateDomainDeviceIdentifierRequest(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainDeleteDeviceIdentifier(ctx context.Context, organizationId string, environmentId string, domain string, deviceIdentifier string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainDeleteDeviceIdentifierRequest(c.Server, organizationId, environmentId, domain, deviceIdentifier)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainGetDeviceIdentifier(ctx context.Context, organizationId string, environmentId string, domain string, deviceIdentifier string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainGetDeviceIdentifierRequest(c.Server, organizationId, environmentId, domain, deviceIdentifier)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainUpdateDeviceIdentifierWithBody(ctx context.Context, organizationId string, environmentId string, domain string, deviceIdentifier string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainUpdateDeviceIdentifierRequestWithBody(c.Server, organizationId, environmentId, domain, deviceIdentifier, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainUpdateDeviceIdentifier(ctx context.Context, organizationId string, environmentId string, domain string, deviceIdentifier string, body DomainUpdateDeviceIdentifierJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainUpdateDeviceIdentifierRequest(c.Server, organizationId, environmentId, domain, deviceIdentifier, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentListDomainEmails(ctx context.Context, organizationId string, environmentId string, domain string, params *EnvironmentListDomainEmailsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentListDomainEmailsRequest(c.Server, organizationId, environmentId, domain, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentCreateDomainEmailWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentCreateDomainEmailRequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentCreateDomainEmail(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentCreateDomainEmailRequest(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainDeleteEmail(ctx context.Context, organizationId string, environmentId string, domain string, email string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainDeleteEmailRequest(c.Server, organizationId, environmentId, domain, email)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainUpdateEmailWithBody(ctx context.Context, organizationId string, environmentId string, domain string, email string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainUpdateEmailRequestWithBody(c.Server, organizationId, environmentId, domain, email, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainUpdateEmail(ctx context.Context, organizationId string, environmentId string, domain string, email string, body DomainUpdateEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainUpdateEmailRequest(c.Server, organizationId, environmentId, domain, email, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainGetEntrypoints(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainGetEntrypointsRequest(c.Server, organizationId, environmentId, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentListDomainExtensionGrants(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentListDomainExtensionGrantsRequest(c.Server, organizationId, environmentId, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentCreateDomainExtensionGrantWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentCreateDomainExtensionGrantRequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentCreateDomainExtensionGrant(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainExtensionGrantJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentCreateDomainExtensionGrantRequest(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainDeleteExtensionGrant(ctx context.Context, organizationId string, environmentId string, domain string, extensionGrant string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainDeleteExtensionGrantRequest(c.Server, organizationId, environmentId, domain, extensionGrant)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainGetExtensionGrant(ctx context.Context, organizationId string, environmentId string, domain string, extensionGrant string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainGetExtensionGrantRequest(c.Server, organizationId, environmentId, domain, extensionGrant)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainUpdateExtensionGrantWithBody(ctx context.Context, organizationId string, environmentId string, domain string, extensionGrant string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainUpdateExtensionGrantRequestWithBody(c.Server, organizationId, environmentId, domain, extensionGrant, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainUpdateExtensionGrant(ctx context.Context, organizationId string, environmentId string, domain string, extensionGrant string, body DomainUpdateExtensionGrantJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainUpdateExtensionGrantRequest(c.Server, organizationId, environmentId, domain, extensionGrant, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentListDomainFactors(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentListDomainFactorsRequest(c.Server, organizationId, environmentId, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentCreateDomainFactorWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentCreateDomainFactorRequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentCreateDomainFactor(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainFactorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentCreateDomainFactorRequest(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainDeleteFactor(ctx context.Context, organizationId string, environmentId string, domain string, factor string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainDeleteFactorRequest(c.Server, organizationId, environmentId, domain, factor)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainGetFactor(ctx context.Context, organizationId string, environmentId string, domain string, factor string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainGetFactorRequest(c.Server, organizationId, environmentId, domain, factor)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainUpdateFactorWithBody(ctx context.Context, organizationId string, environmentId string, domain string, factor string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainUpdateFactorRequestWithBody(c.Server, organizationId, environmentId, domain, factor, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainUpdateFactor(ctx context.Context, organizationId string, environmentId string, domain string, factor string, body DomainUpdateFactorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainUpdateFactorRequest(c.Server, organizationId, environmentId, domain, factor, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentListDomainFlows(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentListDomainFlowsRequest(c.Server, organizationId, environmentId, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentCreateOrUpdateDomainFlowsWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentCreateOrUpdateDomainFlowsRequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentCreateOrUpdateDomainFlows(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateOrUpdateDomainFlowsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentCreateOrUpdateDomainFlowsRequest(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainGetFlow(ctx context.Context, organizationId string, environmentId string, domain string, flow string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainGetFlowRequest(c.Server, organizationId, environmentId, domain, flow)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainUpdateFlowWithBody(ctx context.Context, organizationId string, environmentId string, domain string, flow string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainUpdateFlowRequestWithBody(c.Server, organizationId, environmentId, domain, flow, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainUpdateFlow(ctx context.Context, organizationId string, environmentId string, domain string, flow string, body DomainUpdateFlowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainUpdateFlowRequest(c.Server, organizationId, environmentId, domain, flow, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentListDomainForms(ctx context.Context, organizationId string, environmentId string, domain string, params *EnvironmentListDomainFormsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentListDomainFormsRequest(c.Server, organizationId, environmentId, domain, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentCreateDomainFormWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentCreateDomainFormRequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentCreateDomainForm(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainFormJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentCreateDomainFormRequest(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentPreviewDomainFormWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentPreviewDomainFormRequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentPreviewDomainForm(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentPreviewDomainFormJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentPreviewDomainFormRequest(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainDeleteForm(ctx context.Context, organizationId string, environmentId string, domain string, form string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainDeleteFormRequest(c.Server, organizationId, environmentId, domain, form)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainUpdateFormWithBody(ctx context.Context, organizationId string, environmentId string, domain string, form string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainUpdateFormRequestWithBody(c.Server, organizationId, environmentId, domain, form, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainUpdateForm(ctx context.Context, organizationId string, environmentId string, domain string, form string, body DomainUpdateFormJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainUpdateFormRequest(c.Server, organizationId, environmentId, domain, form, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentListDomainGroups(ctx context.Context, organizationId string, environmentId string, domain string, params *EnvironmentListDomainGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentListDomainGroupsRequest(c.Server, organizationId, environmentId, domain, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentCreateDomainGroupWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentCreateDomainGroupRequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentCreateDomainGroup(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentCreateDomainGroupRequest(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainDeleteGroup(ctx context.Context, organizationId string, environmentId string, domain string, group string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainDeleteGroupRequest(c.Server, organizationId, environmentId, domain, group)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainGetGroup(ctx context.Context, organizationId string, environmentId string, domain string, group string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainGetGroupRequest(c.Server, organizationId, environmentId, domain, group)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainUpdateGroupWithBody(ctx context.Context, organizationId string, environmentId string, domain string, group string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainUpdateGroupRequestWithBody(c.Server, organizationId, environmentId, domain, group, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainUpdateGroup(ctx context.Context, organizationId string, environmentId string, domain string, group string, body DomainUpdateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainUpdateGroupRequest(c.Server, organizationId, environmentId, domain, group, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainGetGroupMemebers(ctx context.Context, organizationId string, environmentId string, domain string, group string, params *DomainGetGroupMemebersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainGetGroupMemebersRequest(c.Server, organizationId, environmentId, domain, group, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentRemoveDomainGroupMemeber(ctx context.Context, organizationId string, environmentId string, domain string, group string, member string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentRemoveDomainGroupMemeberRequest(c.Server, organizationId, environmentId, domain, group, member)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainAddOrUpdateGroupMemeber(ctx context.Context, organizationId string, environmentId string, domain string, group string, member string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainAddOrUpdateGroupMemeberRequest(c.Server, organizationId, environmentId, domain, group, member)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentListDomainGroupRoles(ctx context.Context, organizationId string, environmentId string, domain string, group string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentListDomainGroupRolesRequest(c.Server, organizationId, environmentId, domain, group)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentAddDomainGroupRoleWithBody(ctx context.Context, organizationId string, environmentId string, domain string, group string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentAddDomainGroupRoleRequestWithBody(c.Server, organizationId, environmentId, domain, group, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentAddDomainGroupRole(ctx context.Context, organizationId string, environmentId string, domain string, group string, body EnvironmentAddDomainGroupRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentAddDomainGroupRoleRequest(c.Server, organizationId, environmentId, domain, group, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentRemoveDomainGroupRole(ctx context.Context, organizationId string, environmentId string, domain string, group string, role string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentRemoveDomainGroupRoleRequest(c.Server, organizationId, environmentId, domain, group, role)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentListDomainDictionaries(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentListDomainDictionariesRequest(c.Server, organizationId, environmentId, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentCreateDomainDictionaryWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentCreateDomainDictionaryRequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainDeleteDictionary(ctx context.Context, organizationId string, environmentId string, domain string, dictionary string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainDeleteDictionaryRequest(c.Server, organizationId, environmentId, domain, dictionary)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainGetDictionary(ctx context.Context, organizationId string, environmentId string, domain string, dictionary string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainGetDictionaryRequest(c.Server, organizationId, environmentId, domain, dictionary)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainUpdateDictionaryWithBody(ctx context.Context, organizationId string, environmentId string, domain string, dictionary string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainUpdateDictionaryRequestWithBody(c.Server, organizationId, environmentId, domain, dictionary, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainUpdateDictionaryEntriesWithBody(ctx context.Context, organizationId string, environmentId string, domain string, dictionary string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainUpdateDictionaryEntriesRequestWithBody(c.Server, organizationId, environmentId, domain, dictionary, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentListDomainIdentityProviders(ctx context.Context, organizationId string, environmentId string, domain string, params *EnvironmentListDomainIdentityProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentListDomainIdentityProvidersRequest(c.Server, organizationId, environmentId, domain, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentCreateDomainIdentityProviderWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentCreateDomainIdentityProviderRequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentCreateDomainIdentityProvider(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainIdentityProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentCreateDomainIdentityProviderRequest(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainDeleteIdentityProvider(ctx context.Context, organizationId string, environmentId string, domain string, identity string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainDeleteIdentityProviderRequest(c.Server, organizationId, environmentId, domain, identity)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainGetIdentityProvider(ctx context.Context, organizationId string, environmentId string, domain string, identity string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainGetIdentityProviderRequest(c.Server, organizationId, environmentId, domain, identity)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainUpdateIdentityProviderWithBody(ctx context.Context, organizationId string, environmentId string, domain string, identity string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainUpdateIdentityProviderRequestWithBody(c.Server, organizationId, environmentId, domain, identity, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainUpdateIdentityProvider(ctx context.Context, organizationId string, environmentId string, domain string, identity string, body DomainUpdateIdentityProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainUpdateIdentityProviderRequest(c.Server, organizationId, environmentId, domain, identity, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentListDomainMembers(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentListDomainMembersRequest(c.Server, organizationId, environmentId, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainAddOrUpdateMemberWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainAddOrUpdateMemberRequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainAddOrUpdateMember(ctx context.Context, organizationId string, environmentId string, domain string, body DomainAddOrUpdateMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainAddOrUpdateMemberRequest(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentListDomainMemberPermissions(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentListDomainMemberPermissionsRequest(c.Server, organizationId, environmentId, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentRemoveDomainMember(ctx context.Context, organizationId string, environmentId string, domain string, member string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentRemoveDomainMemberRequest(c.Server, organizationId, environmentId, domain, member)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentListDomainReporters(ctx context.Context, organizationId string, environmentId string, domain string, params *EnvironmentListDomainReportersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentListDomainReportersRequest(c.Server, organizationId, environmentId, domain, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentCreateDomainReporterWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentCreateDomainReporterRequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentCreateDomainReporter(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainReporterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentCreateDomainReporterRequest(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainDeleteReporter(ctx context.Context, organizationId string, environmentId string, domain string, reporter string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainDeleteReporterRequest(c.Server, organizationId, environmentId, domain, reporter)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainGetReporter(ctx context.Context, organizationId string, environmentId string, domain string, reporter string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainGetReporterRequest(c.Server, organizationId, environmentId, domain, reporter)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainUpdateReporterWithBody(ctx context.Context, organizationId string, environmentId string, domain string, reporter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainUpdateReporterRequestWithBody(c.Server, organizationId, environmentId, domain, reporter, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainUpdateReporter(ctx context.Context, organizationId string, environmentId string, domain string, reporter string, body DomainUpdateReporterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainUpdateReporterRequest(c.Server, organizationId, environmentId, domain, reporter, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentListDomainResources(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentListDomainResourcesRequest(c.Server, organizationId, environmentId, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentCreateDomainResourceWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentCreateDomainResourceRequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentCreateDomainResource(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentCreateDomainResourceRequest(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainDeleteResource(ctx context.Context, organizationId string, environmentId string, domain string, resource string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainDeleteResourceRequest(c.Server, organizationId, environmentId, domain, resource)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainGetResource(ctx context.Context, organizationId string, environmentId string, domain string, resource string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainGetResourceRequest(c.Server, organizationId, environmentId, domain, resource)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainUpdateResourceWithBody(ctx context.Context, organizationId string, environmentId string, domain string, resource string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainUpdateResourceRequestWithBody(c.Server, organizationId, environmentId, domain, resource, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainUpdateResource(ctx context.Context, organizationId string, environmentId string, domain string, resource string, body DomainUpdateResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainUpdateResourceRequest(c.Server, organizationId, environmentId, domain, resource, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentListDomainRoles(ctx context.Context, organizationId string, environmentId string, domain string, params *EnvironmentListDomainRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentListDomainRolesRequest(c.Server, organizationId, environmentId, domain, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentCreateDomainMemberRoleWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentCreateDomainMemberRoleRequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentCreateDomainMemberRole(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainMemberRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentCreateDomainMemberRoleRequest(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainDeleteRole(ctx context.Context, organizationId string, environmentId string, domain string, role string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainDeleteRoleRequest(c.Server, organizationId, environmentId, domain, role)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainGetRole(ctx context.Context, organizationId string, environmentId string, domain string, role string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainGetRoleRequest(c.Server, organizationId, environmentId, domain, role)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainUpdateRoleWithBody(ctx context.Context, organizationId string, environmentId string, domain string, role string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainUpdateRoleRequestWithBody(c.Server, organizationId, environmentId, domain, role, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainUpdateRole(ctx context.Context, organizationId string, environmentId string, domain string, role string, body DomainUpdateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainUpdateRoleRequest(c.Server, organizationId, environmentId, domain, role, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentListDomainScopes(ctx context.Context, organizationId string, environmentId string, domain string, params *EnvironmentListDomainScopesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentListDomainScopesRequest(c.Server, organizationId, environmentId, domain, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentCreateDomainScopeWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentCreateDomainScopeRequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentCreateDomainScope(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentCreateDomainScopeRequest(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteScope(ctx context.Context, organizationId string, environmentId string, domain string, scope string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteScopeRequest(c.Server, organizationId, environmentId, domain, scope)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainGetScope(ctx context.Context, organizationId string, environmentId string, domain string, scope string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainGetScopeRequest(c.Server, organizationId, environmentId, domain, scope)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchScopeWithBody(ctx context.Context, organizationId string, environmentId string, domain string, scope string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchScopeRequestWithBody(c.Server, organizationId, environmentId, domain, scope, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchScope(ctx context.Context, organizationId string, environmentId string, domain string, scope string, body PatchScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchScopeRequest(c.Server, organizationId, environmentId, domain, scope, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateScopeWithBody(ctx context.Context, organizationId string, environmentId string, domain string, scope string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateScopeRequestWithBody(c.Server, organizationId, environmentId, domain, scope, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateScope(ctx context.Context, organizationId string, environmentId string, domain string, scope string, body UpdateScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateScopeRequest(c.Server, organizationId, environmentId, domain, scope, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentListDomainThemes(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentListDomainThemesRequest(c.Server, organizationId, environmentId, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentCreateDomainThemeWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentCreateDomainThemeRequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentCreateDomainTheme(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainThemeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentCreateDomainThemeRequest(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainDeleteTheme(ctx context.Context, organizationId string, environmentId string, domain string, themeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainDeleteThemeRequest(c.Server, organizationId, environmentId, domain, themeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainGetTheme(ctx context.Context, organizationId string, environmentId string, domain string, themeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainGetThemeRequest(c.Server, organizationId, environmentId, domain, themeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainUpdateThemeWithBody(ctx context.Context, organizationId string, environmentId string, domain string, themeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainUpdateThemeRequestWithBody(c.Server, organizationId, environmentId, domain, themeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainUpdateTheme(ctx context.Context, organizationId string, environmentId string, domain string, themeId string, body DomainUpdateThemeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainUpdateThemeRequest(c.Server, organizationId, environmentId, domain, themeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentListDomainUsers(ctx context.Context, organizationId string, environmentId string, domain string, params *EnvironmentListDomainUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentListDomainUsersRequest(c.Server, organizationId, environmentId, domain, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentCreateDomainUserWithBody(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentCreateDomainUserRequestWithBody(c.Server, organizationId, environmentId, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentCreateDomainUser(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentCreateDomainUserRequest(c.Server, organizationId, environmentId, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainDeleteUser(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainDeleteUserRequest(c.Server, organizationId, environmentId, domain, user)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainGetUser(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainGetUserRequest(c.Server, organizationId, environmentId, domain, user)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainUpdateUserWithBody(ctx context.Context, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainUpdateUserRequestWithBody(c.Server, organizationId, environmentId, domain, user, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainUpdateUser(ctx context.Context, organizationId string, environmentId string, domain string, user string, body DomainUpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainUpdateUserRequest(c.Server, organizationId, environmentId, domain, user, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentListDomainUserAudits(ctx context.Context, organizationId string, environmentId string, domain string, user string, params *EnvironmentListDomainUserAuditsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentListDomainUserAuditsRequest(c.Server, organizationId, environmentId, domain, user, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainGetUserAudit(ctx context.Context, organizationId string, environmentId string, domain string, user string, audit string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainGetUserAuditRequest(c.Server, organizationId, environmentId, domain, user, audit)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainDeleteUserConsents(ctx context.Context, organizationId string, environmentId string, domain string, user string, params *DomainDeleteUserConsentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainDeleteUserConsentsRequest(c.Server, organizationId, environmentId, domain, user, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentListDomainUserConsents(ctx context.Context, organizationId string, environmentId string, domain string, user string, params *EnvironmentListDomainUserConsentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentListDomainUserConsentsRequest(c.Server, organizationId, environmentId, domain, user, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainDeleteUserConsent(ctx context.Context, organizationId string, environmentId string, domain string, user string, consent string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainDeleteUserConsentRequest(c.Server, organizationId, environmentId, domain, user, consent)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainGetUserConsent(ctx context.Context, organizationId string, environmentId string, domain string, user string, consent string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainGetUserConsentRequest(c.Server, organizationId, environmentId, domain, user, consent)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentListDomainUserCredentials(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentListDomainUserCredentialsRequest(c.Server, organizationId, environmentId, domain, user)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainDeleteUserCredential(ctx context.Context, organizationId string, environmentId string, domain string, user string, credential string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainDeleteUserCredentialRequest(c.Server, organizationId, environmentId, domain, user, credential)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainGetUserCredential(ctx context.Context, organizationId string, environmentId string, domain string, user string, credential string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainGetUserCredentialRequest(c.Server, organizationId, environmentId, domain, user, credential)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentListDomainUserDevices(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentListDomainUserDevicesRequest(c.Server, organizationId, environmentId, domain, user)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainGetUserDevice(ctx context.Context, organizationId string, environmentId string, domain string, user string, device string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainGetUserDeviceRequest(c.Server, organizationId, environmentId, domain, user, device)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentListDomainUserFactors(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentListDomainUserFactorsRequest(c.Server, organizationId, environmentId, domain, user)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainDeleteUserFactor(ctx context.Context, organizationId string, environmentId string, domain string, user string, factor string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainDeleteUserFactorRequest(c.Server, organizationId, environmentId, domain, user, factor)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentLockDomainUser(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentLockDomainUserRequest(c.Server, organizationId, environmentId, domain, user)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentResetDomainUserPasswordWithBody(ctx context.Context, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentResetDomainUserPasswordRequestWithBody(c.Server, organizationId, environmentId, domain, user, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentListDomainUserRoles(ctx context.Context, organizationId string, environmentId string, domain string, user string, params *EnvironmentListDomainUserRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentListDomainUserRolesRequest(c.Server, organizationId, environmentId, domain, user, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainAddOrUpdateUserRoleWithBody(ctx context.Context, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainAddOrUpdateUserRoleRequestWithBody(c.Server, organizationId, environmentId, domain, user, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainAddOrUpdateUserRole(ctx context.Context, organizationId string, environmentId string, domain string, user string, body DomainAddOrUpdateUserRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainAddOrUpdateUserRoleRequest(c.Server, organizationId, environmentId, domain, user, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainDeleteUserRole(ctx context.Context, organizationId string, environmentId string, domain string, user string, role string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainDeleteUserRoleRequest(c.Server, organizationId, environmentId, domain, user, role)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentSendDomainUserRegistrationConfirmation(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentSendDomainUserRegistrationConfirmationRequest(c.Server, organizationId, environmentId, domain, user)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainUpdateUserStatusWithBody(ctx context.Context, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainUpdateUserStatusRequestWithBody(c.Server, organizationId, environmentId, domain, user, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DomainUpdateUserStatus(ctx context.Context, organizationId string, environmentId string, domain string, user string, body DomainUpdateUserStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDomainUpdateUserStatusRequest(c.Server, organizationId, environmentId, domain, user, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentUnlockDomainUser(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentUnlockDomainUserRequest(c.Server, organizationId, environmentId, domain, user)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentResetDomainUserNameWithBody(ctx context.Context, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentResetDomainUserNameRequestWithBody(c.Server, organizationId, environmentId, domain, user, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentResetDomainUserName(ctx context.Context, organizationId string, environmentId string, domain string, user string, body EnvironmentResetDomainUserNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentResetDomainUserNameRequest(c.Server, organizationId, environmentId, domain, user, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnvironmentListMemberPermissions(ctx context.Context, organizationId string, environmentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnvironmentListMemberPermissionsRequest(c.Server, organizationId, environmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationListPlatfomFormTemplates(ctx context.Context, organizationId string, params *OrganizationListPlatfomFormTemplatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationListPlatfomFormTemplatesRequest(c.Server, organizationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationCreatePlatfomFormTemplateWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationCreatePlatfomFormTemplateRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationCreatePlatfomFormTemplate(ctx context.Context, organizationId string, body OrganizationCreatePlatfomFormTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationCreatePlatfomFormTemplateRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationDeletePlatfomFormTemplate(ctx context.Context, organizationId string, form string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationDeletePlatfomFormTemplateRequest(c.Server, organizationId, form)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationUpdatePlatfomFormTemplateWithBody(ctx context.Context, organizationId string, form string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationUpdatePlatfomFormTemplateRequestWithBody(c.Server, organizationId, form, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationUpdatePlatfomFormTemplate(ctx context.Context, organizationId string, form string, body OrganizationUpdatePlatfomFormTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationUpdatePlatfomFormTemplateRequest(c.Server, organizationId, form, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationListPlatformGroups(ctx context.Context, organizationId string, params *OrganizationListPlatformGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationListPlatformGroupsRequest(c.Server, organizationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationCreatePlatformGroupWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationCreatePlatformGroupRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationCreatePlatformGroup(ctx context.Context, organizationId string, body OrganizationCreatePlatformGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationCreatePlatformGroupRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationDeletePlatformGroup(ctx context.Context, organizationId string, group string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationDeletePlatformGroupRequest(c.Server, organizationId, group)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationGetPlatformGroup(ctx context.Context, organizationId string, group string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationGetPlatformGroupRequest(c.Server, organizationId, group)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationUpdatePlatformGroupWithBody(ctx context.Context, organizationId string, group string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationUpdatePlatformGroupRequestWithBody(c.Server, organizationId, group, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationUpdatePlatformGroup(ctx context.Context, organizationId string, group string, body OrganizationUpdatePlatformGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationUpdatePlatformGroupRequest(c.Server, organizationId, group, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationListPlatformGroupMembers(ctx context.Context, organizationId string, group string, params *OrganizationListPlatformGroupMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationListPlatformGroupMembersRequest(c.Server, organizationId, group, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationRemovePlatformGroupMember(ctx context.Context, organizationId string, group string, member string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationRemovePlatformGroupMemberRequest(c.Server, organizationId, group, member)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationAddPlatformGroupMember(ctx context.Context, organizationId string, group string, member string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationAddPlatformGroupMemberRequest(c.Server, organizationId, group, member)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationListPlatformIdentityProviders(ctx context.Context, organizationId string, params *OrganizationListPlatformIdentityProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationListPlatformIdentityProvidersRequest(c.Server, organizationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationCreatePlatformIdentityProviderWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationCreatePlatformIdentityProviderRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationCreatePlatformIdentityProvider(ctx context.Context, organizationId string, body OrganizationCreatePlatformIdentityProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationCreatePlatformIdentityProviderRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationDeletePlatformIdentityProvider(ctx context.Context, organizationId string, identity string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationDeletePlatformIdentityProviderRequest(c.Server, organizationId, identity)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationGetPlatformIdentityProvider(ctx context.Context, organizationId string, identity string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationGetPlatformIdentityProviderRequest(c.Server, organizationId, identity)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationUpdatePlatformIdentityProviderWithBody(ctx context.Context, organizationId string, identity string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationUpdatePlatformIdentityProviderRequestWithBody(c.Server, organizationId, identity, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationUpdatePlatformIdentityProvider(ctx context.Context, organizationId string, identity string, body OrganizationUpdatePlatformIdentityProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationUpdatePlatformIdentityProviderRequest(c.Server, organizationId, identity, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationListPlatformMembers(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationListPlatformMembersRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationAddOrUpdatePlatformMemberWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationAddOrUpdatePlatformMemberRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationAddOrUpdatePlatformMember(ctx context.Context, organizationId string, body OrganizationAddOrUpdatePlatformMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationAddOrUpdatePlatformMemberRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationRemovePlatformMember(ctx context.Context, organizationId string, member string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationRemovePlatformMemberRequest(c.Server, organizationId, member)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationListPlatformRoles(ctx context.Context, organizationId string, params *OrganizationListPlatformRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationListPlatformRolesRequest(c.Server, organizationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationCreatePlatformRoleWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationCreatePlatformRoleRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationCreatePlatformRole(ctx context.Context, organizationId string, body OrganizationCreatePlatformRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationCreatePlatformRoleRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationDeletePlatformRole(ctx context.Context, organizationId string, role string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationDeletePlatformRoleRequest(c.Server, organizationId, role)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationGetPlatformRole(ctx context.Context, organizationId string, role string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationGetPlatformRoleRequest(c.Server, organizationId, role)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationUpdatePlatformRoleWithBody(ctx context.Context, organizationId string, role string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationUpdatePlatformRoleRequestWithBody(c.Server, organizationId, role, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationUpdatePlatformRole(ctx context.Context, organizationId string, role string, body OrganizationUpdatePlatformRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationUpdatePlatformRoleRequest(c.Server, organizationId, role, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationGetPlatformSettings(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationGetPlatformSettingsRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationUpdatePlatformSettingsWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationUpdatePlatformSettingsRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationUpdatePlatformSettings(ctx context.Context, organizationId string, body OrganizationUpdatePlatformSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationUpdatePlatformSettingsRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationListPlatformShardingTags(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationListPlatformShardingTagsRequest(c.Server, organizationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationCreatePlatformShardingTagWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationCreatePlatformShardingTagRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationCreatePlatformShardingTag(ctx context.Context, organizationId string, body OrganizationCreatePlatformShardingTagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationCreatePlatformShardingTagRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationDeletePlatformShardingTag(ctx context.Context, organizationId string, tag string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationDeletePlatformShardingTagRequest(c.Server, organizationId, tag)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationGetPlatformShardingTag(ctx context.Context, organizationId string, tag string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationGetPlatformShardingTagRequest(c.Server, organizationId, tag)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationUpdatePlatformShardingTagWithBody(ctx context.Context, organizationId string, tag string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationUpdatePlatformShardingTagRequestWithBody(c.Server, organizationId, tag, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationUpdatePlatformShardingTag(ctx context.Context, organizationId string, tag string, body OrganizationUpdatePlatformShardingTagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationUpdatePlatformShardingTagRequest(c.Server, organizationId, tag, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationListPlatformUsers(ctx context.Context, organizationId string, params *OrganizationListPlatformUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationListPlatformUsersRequest(c.Server, organizationId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationCreatePlatformUserWithBody(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationCreatePlatformUserRequestWithBody(c.Server, organizationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationCreatePlatformUser(ctx context.Context, organizationId string, body OrganizationCreatePlatformUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationCreatePlatformUserRequest(c.Server, organizationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationDeletePlatformUser(ctx context.Context, organizationId string, user string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationDeletePlatformUserRequest(c.Server, organizationId, user)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationGetPlatformUser(ctx context.Context, organizationId string, user string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationGetPlatformUserRequest(c.Server, organizationId, user)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationUpdatePlatformUserWithBody(ctx context.Context, organizationId string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationUpdatePlatformUserRequestWithBody(c.Server, organizationId, user, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationUpdatePlatformUser(ctx context.Context, organizationId string, user string, body OrganizationUpdatePlatformUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationUpdatePlatformUserRequest(c.Server, organizationId, user, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationResetPlatformUserPasswordWithBody(ctx context.Context, organizationId string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationResetPlatformUserPasswordRequestWithBody(c.Server, organizationId, user, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationUpdatePlatformUserStatusWithBody(ctx context.Context, organizationId string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationUpdatePlatformUserStatusRequestWithBody(c.Server, organizationId, user, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationUpdatePlatformUserStatus(ctx context.Context, organizationId string, user string, body OrganizationUpdatePlatformUserStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationUpdatePlatformUserStatusRequest(c.Server, organizationId, user, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationUpdatePlatformUserNameWithBody(ctx context.Context, organizationId string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationUpdatePlatformUserNameRequestWithBody(c.Server, organizationId, user, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrganizationUpdatePlatformUserName(ctx context.Context, organizationId string, user string, body OrganizationUpdatePlatformUserNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrganizationUpdatePlatformUserNameRequest(c.Server, organizationId, user, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlatformListAuditEventTypes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlatformListAuditEventTypesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlatformAlertStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlatformAlertStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlatformGetFlowSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlatformGetFlowSchemaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlatformGetSpelGrammar(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlatformGetSpelGrammarRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlatformGetInstallation(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlatformGetInstallationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlatformListPluginAuthDeviceNotifiers(ctx context.Context, params *PlatformListPluginAuthDeviceNotifiersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlatformListPluginAuthDeviceNotifiersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlatformGetPluginAuthDeviceNotifier(ctx context.Context, authDeviceNotifierId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlatformGetPluginAuthDeviceNotifierRequest(c.Server, authDeviceNotifierId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlatformGetPluginAuthDeviceNotifierSchema(ctx context.Context, authDeviceNotifierId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlatformGetPluginAuthDeviceNotifierSchemaRequest(c.Server, authDeviceNotifierId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlatformListPluginBotDetections(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlatformListPluginBotDetectionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlatformGetPluginBotDetection(ctx context.Context, botDetection string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlatformGetPluginBotDetectionRequest(c.Server, botDetection)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlatformGetPluginBotDetectionSchema(ctx context.Context, botDetection string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlatformGetPluginBotDetectionSchemaRequest(c.Server, botDetection)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlatformListPluginCertificates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlatformListPluginCertificatesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlatformGetPluginCertificate(ctx context.Context, certificate string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlatformGetPluginCertificateRequest(c.Server, certificate)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlatformGetPluginCertificateSchema(ctx context.Context, certificate string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlatformGetPluginCertificateSchemaRequest(c.Server, certificate)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlatformListDeviceIdentifierPlugins(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlatformListDeviceIdentifierPluginsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlatformGetDeviceIdentifierPlugin(ctx context.Context, deviceIdentifier string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlatformGetDeviceIdentifierPluginRequest(c.Server, deviceIdentifier)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlatformGetDeviceIdentifierPluginSchema(ctx context.Context, deviceIdentifier string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlatformGetDeviceIdentifierPluginSchemaRequest(c.Server, deviceIdentifier)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlatformListPluginExtensionGrants(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlatformListPluginExtensionGrantsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlatformGetPluginExtensionGrant(ctx context.Context, extensionGrant string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlatformGetPluginExtensionGrantRequest(c.Server, extensionGrant)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlatformGetPluginExtensionGrantSchema(ctx context.Context, extensionGrant string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlatformGetPluginExtensionGrantSchemaRequest(c.Server, extensionGrant)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlatformListPluginFactors(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlatformListPluginFactorsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlatformGetPluginFactor(ctx context.Context, factor string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlatformGetPluginFactorRequest(c.Server, factor)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlatformGetPluginFactorSchema(ctx context.Context, factor string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlatformGetPluginFactorSchemaRequest(c.Server, factor)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlatformListProviderPlugins(ctx context.Context, params *PlatformListProviderPluginsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlatformListProviderPluginsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlatformGetIdentityProviderPlugin(ctx context.Context, identity string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlatformGetIdentityProviderPluginRequest(c.Server, identity)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlatformGetIdentityProviderPluginSchema(ctx context.Context, identity string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlatformGetIdentityProviderPluginSchemaRequest(c.Server, identity)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlatformListPluginNotifiers(ctx context.Context, params *PlatformListPluginNotifiersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlatformListPluginNotifiersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlatformGetPluginNotifier(ctx context.Context, notifierId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlatformGetPluginNotifierRequest(c.Server, notifierId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlatformGetPluginNotifierSchema(ctx context.Context, notifierId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlatformGetPluginNotifierSchemaRequest(c.Server, notifierId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlatformListPluginPolicies(ctx context.Context, params *PlatformListPluginPoliciesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlatformListPluginPoliciesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlatformGetPluginPolicy(ctx context.Context, policy string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlatformGetPluginPolicyRequest(c.Server, policy)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlatformGetPluginPolicyDocumentation(ctx context.Context, policy string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlatformGetPluginPolicyDocumentationRequest(c.Server, policy)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlatformGetPluginPolicySchema(ctx context.Context, policy string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlatformGetPluginPolicySchemaRequest(c.Server, policy)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlatformListPluginReporters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlatformListPluginReportersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlatformGetPluginReporter(ctx context.Context, reporter string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlatformGetPluginReporterRequest(c.Server, reporter)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlatformGetPluginReporterSchema(ctx context.Context, reporter string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlatformGetPluginReporterSchemaRequest(c.Server, reporter)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlatformListPluginResources(ctx context.Context, params *PlatformListPluginResourcesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlatformListPluginResourcesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlatformGetPluginResource(ctx context.Context, resource string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlatformGetPluginResourceRequest(c.Server, resource)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlatformGetPluginResourceSchema(ctx context.Context, resource string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlatformGetPluginResourceSchemaRequest(c.Server, resource)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlatformRole(ctx context.Context, role string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlatformRoleRequest(c.Server, role)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CurrentUserGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCurrentUserGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CurrentUserSubscribeNewsletterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCurrentUserSubscribeNewsletterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CurrentUserGetNewsletterTaglines(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCurrentUserGetNewsletterTaglinesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CurrentUserListNotifications(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCurrentUserListNotificationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CurrentUserMarkNotificationAsRead(ctx context.Context, notificationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCurrentUserMarkNotificationAsReadRequest(c.Server, notificationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAuthTokenExchangeRequest generates requests for AuthTokenExchange
func NewAuthTokenExchangeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganizationListPlatformAuditsRequest generates requests for OrganizationListPlatformAudits
func NewOrganizationListPlatformAuditsRequest(server string, organizationId string, params *OrganizationListPlatformAuditsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/audits", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.User != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user", runtime.ParamLocationQuery, *params.User); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganizationGetPlatformAuditRequest generates requests for OrganizationGetPlatformAudit
func NewOrganizationGetPlatformAuditRequest(server string, organizationId string, audit string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "audit", runtime.ParamLocationPath, audit)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/audits/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganizationListEntrypointsRequest generates requests for OrganizationListEntrypoints
func NewOrganizationListEntrypointsRequest(server string, organizationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/entrypoints", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreate14Request calls the generic Create14 builder with application/json body
func NewCreate14Request(server string, organizationId string, body Create14JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreate14RequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewCreate14RequestWithBody generates requests for Create14 with any type of body
func NewCreate14RequestWithBody(server string, organizationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/entrypoints", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOrganizationDeleteEntrypointRequest generates requests for OrganizationDeleteEntrypoint
func NewOrganizationDeleteEntrypointRequest(server string, organizationId string, entrypointId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entrypointId", runtime.ParamLocationPath, entrypointId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/entrypoints/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganizationGetEntrypointRequest generates requests for OrganizationGetEntrypoint
func NewOrganizationGetEntrypointRequest(server string, organizationId string, entrypointId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entrypointId", runtime.ParamLocationPath, entrypointId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/entrypoints/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganizationUpdateEntrypointRequest calls the generic OrganizationUpdateEntrypoint builder with application/json body
func NewOrganizationUpdateEntrypointRequest(server string, organizationId string, entrypointId string, body OrganizationUpdateEntrypointJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOrganizationUpdateEntrypointRequestWithBody(server, organizationId, entrypointId, "application/json", bodyReader)
}

// NewOrganizationUpdateEntrypointRequestWithBody generates requests for OrganizationUpdateEntrypoint with any type of body
func NewOrganizationUpdateEntrypointRequestWithBody(server string, organizationId string, entrypointId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "entrypointId", runtime.ParamLocationPath, entrypointId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/entrypoints/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOrganizationListPlatfomEnvironmentsRequest generates requests for OrganizationListPlatfomEnvironments
func NewOrganizationListPlatfomEnvironmentsRequest(server string, organizationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentListDomainsRequest generates requests for EnvironmentListDomains
func NewEnvironmentListDomainsRequest(server string, organizationId string, environmentId string, params *EnvironmentListDomainsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentCreateDomainRequest calls the generic EnvironmentCreateDomain builder with application/json body
func NewEnvironmentCreateDomainRequest(server string, organizationId string, environmentId string, body EnvironmentCreateDomainJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEnvironmentCreateDomainRequestWithBody(server, organizationId, environmentId, "application/json", bodyReader)
}

// NewEnvironmentCreateDomainRequestWithBody generates requests for EnvironmentCreateDomain with any type of body
func NewEnvironmentCreateDomainRequestWithBody(server string, organizationId string, environmentId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainGetByHridRequest generates requests for DomainGetByHrid
func NewDomainGetByHridRequest(server string, organizationId string, environmentId string, hrid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "hrid", runtime.ParamLocationPath, hrid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/_hrid/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainDeleteRequest generates requests for DomainDelete
func NewDomainDeleteRequest(server string, organizationId string, environmentId string, domain string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainGetRequest generates requests for DomainGet
func NewDomainGetRequest(server string, organizationId string, environmentId string, domain string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentPatchDomainRequest calls the generic EnvironmentPatchDomain builder with application/json body
func NewEnvironmentPatchDomainRequest(server string, organizationId string, environmentId string, domain string, body EnvironmentPatchDomainJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEnvironmentPatchDomainRequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewEnvironmentPatchDomainRequestWithBody generates requests for EnvironmentPatchDomain with any type of body
func NewEnvironmentPatchDomainRequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainUpdateRequest calls the generic DomainUpdate builder with application/json body
func NewDomainUpdateRequest(server string, organizationId string, environmentId string, domain string, body DomainUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDomainUpdateRequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewDomainUpdateRequestWithBody generates requests for DomainUpdate with any type of body
func NewDomainUpdateRequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEnvironmentListDomainAlertNotifiersRequest generates requests for EnvironmentListDomainAlertNotifiers
func NewEnvironmentListDomainAlertNotifiersRequest(server string, organizationId string, environmentId string, domain string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/alerts/notifiers", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentCreateDomainAlertNotifierRequest calls the generic EnvironmentCreateDomainAlertNotifier builder with application/json body
func NewEnvironmentCreateDomainAlertNotifierRequest(server string, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainAlertNotifierJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEnvironmentCreateDomainAlertNotifierRequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewEnvironmentCreateDomainAlertNotifierRequestWithBody generates requests for EnvironmentCreateDomainAlertNotifier with any type of body
func NewEnvironmentCreateDomainAlertNotifierRequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/alerts/notifiers", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainDeleteAlertNotifierRequest generates requests for DomainDeleteAlertNotifier
func NewDomainDeleteAlertNotifierRequest(server string, organizationId string, environmentId string, domain string, notifierId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "notifierId", runtime.ParamLocationPath, notifierId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/alerts/notifiers/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainGetAlertNotifierRequest generates requests for DomainGetAlertNotifier
func NewDomainGetAlertNotifierRequest(server string, organizationId string, environmentId string, domain string, notifierId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "notifierId", runtime.ParamLocationPath, notifierId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/alerts/notifiers/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentPatchDomainAlertNotifierRequest calls the generic EnvironmentPatchDomainAlertNotifier builder with application/json body
func NewEnvironmentPatchDomainAlertNotifierRequest(server string, organizationId string, environmentId string, domain string, notifierId string, body EnvironmentPatchDomainAlertNotifierJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEnvironmentPatchDomainAlertNotifierRequestWithBody(server, organizationId, environmentId, domain, notifierId, "application/json", bodyReader)
}

// NewEnvironmentPatchDomainAlertNotifierRequestWithBody generates requests for EnvironmentPatchDomainAlertNotifier with any type of body
func NewEnvironmentPatchDomainAlertNotifierRequestWithBody(server string, organizationId string, environmentId string, domain string, notifierId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "notifierId", runtime.ParamLocationPath, notifierId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/alerts/notifiers/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEnvironmentListDomainAlertTriggersRequest generates requests for EnvironmentListDomainAlertTriggers
func NewEnvironmentListDomainAlertTriggersRequest(server string, organizationId string, environmentId string, domain string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/alerts/triggers", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentPatchDomainAlertTriggersRequest calls the generic EnvironmentPatchDomainAlertTriggers builder with application/json body
func NewEnvironmentPatchDomainAlertTriggersRequest(server string, organizationId string, environmentId string, domain string, body EnvironmentPatchDomainAlertTriggersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEnvironmentPatchDomainAlertTriggersRequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewEnvironmentPatchDomainAlertTriggersRequestWithBody generates requests for EnvironmentPatchDomainAlertTriggers with any type of body
func NewEnvironmentPatchDomainAlertTriggersRequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/alerts/triggers", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainGetAnalyticsRequest generates requests for DomainGetAnalytics
func NewDomainGetAnalyticsRequest(server string, organizationId string, environmentId string, domain string, params *DomainGetAnalyticsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/analytics", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Interval != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "interval", runtime.ParamLocationQuery, *params.Interval); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Field != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "field", runtime.ParamLocationQuery, *params.Field); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentListDomainApplicationsRequest generates requests for EnvironmentListDomainApplications
func NewEnvironmentListDomainApplicationsRequest(server string, organizationId string, environmentId string, domain string, params *EnvironmentListDomainApplicationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentCreateDomainApplicationRequest calls the generic EnvironmentCreateDomainApplication builder with application/json body
func NewEnvironmentCreateDomainApplicationRequest(server string, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainApplicationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEnvironmentCreateDomainApplicationRequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewEnvironmentCreateDomainApplicationRequestWithBody generates requests for EnvironmentCreateDomainApplication with any type of body
func NewEnvironmentCreateDomainApplicationRequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainDeleteApplicationRequest generates requests for DomainDeleteApplication
func NewDomainDeleteApplicationRequest(server string, organizationId string, environmentId string, domain string, application string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApplicationGetDomainApplicationRequest generates requests for ApplicationGetDomainApplication
func NewApplicationGetDomainApplicationRequest(server string, organizationId string, environmentId string, domain string, application string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentPatchDomainApplicationRequest calls the generic EnvironmentPatchDomainApplication builder with application/json body
func NewEnvironmentPatchDomainApplicationRequest(server string, organizationId string, environmentId string, domain string, application string, body EnvironmentPatchDomainApplicationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEnvironmentPatchDomainApplicationRequestWithBody(server, organizationId, environmentId, domain, application, "application/json", bodyReader)
}

// NewEnvironmentPatchDomainApplicationRequestWithBody generates requests for EnvironmentPatchDomainApplication with any type of body
func NewEnvironmentPatchDomainApplicationRequestWithBody(server string, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainUpdateApplicationRequest calls the generic DomainUpdateApplication builder with application/json body
func NewDomainUpdateApplicationRequest(server string, organizationId string, environmentId string, domain string, application string, body DomainUpdateApplicationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDomainUpdateApplicationRequestWithBody(server, organizationId, environmentId, domain, application, "application/json", bodyReader)
}

// NewDomainUpdateApplicationRequestWithBody generates requests for DomainUpdateApplication with any type of body
func NewDomainUpdateApplicationRequestWithBody(server string, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApplicationGetAnalyticsRequest generates requests for ApplicationGetAnalytics
func NewApplicationGetAnalyticsRequest(server string, organizationId string, environmentId string, domain string, application string, params *ApplicationGetAnalyticsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/analytics", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Interval != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "interval", runtime.ParamLocationQuery, *params.Interval); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Field != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "field", runtime.ParamLocationQuery, *params.Field); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApplicationListEmailsRequest generates requests for ApplicationListEmails
func NewApplicationListEmailsRequest(server string, organizationId string, environmentId string, domain string, application string, params *ApplicationListEmailsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/emails", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "template", runtime.ParamLocationQuery, params.Template); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApplicationCreateEmailRequest calls the generic ApplicationCreateEmail builder with application/json body
func NewApplicationCreateEmailRequest(server string, organizationId string, environmentId string, domain string, application string, body ApplicationCreateEmailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApplicationCreateEmailRequestWithBody(server, organizationId, environmentId, domain, application, "application/json", bodyReader)
}

// NewApplicationCreateEmailRequestWithBody generates requests for ApplicationCreateEmail with any type of body
func NewApplicationCreateEmailRequestWithBody(server string, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/emails", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApplicationDeleteEmailRequest generates requests for ApplicationDeleteEmail
func NewApplicationDeleteEmailRequest(server string, organizationId string, environmentId string, domain string, application string, email string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "email", runtime.ParamLocationPath, email)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/emails/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApplicationUpdateEmailRequest calls the generic ApplicationUpdateEmail builder with application/json body
func NewApplicationUpdateEmailRequest(server string, organizationId string, environmentId string, domain string, application string, email string, body ApplicationUpdateEmailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApplicationUpdateEmailRequestWithBody(server, organizationId, environmentId, domain, application, email, "application/json", bodyReader)
}

// NewApplicationUpdateEmailRequestWithBody generates requests for ApplicationUpdateEmail with any type of body
func NewApplicationUpdateEmailRequestWithBody(server string, organizationId string, environmentId string, domain string, application string, email string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "email", runtime.ParamLocationPath, email)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/emails/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApplicationListFlowsRequest generates requests for ApplicationListFlows
func NewApplicationListFlowsRequest(server string, organizationId string, environmentId string, domain string, application string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/flows", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApplicationCreateFlowRequest calls the generic ApplicationCreateFlow builder with application/json body
func NewApplicationCreateFlowRequest(server string, organizationId string, environmentId string, domain string, application string, body ApplicationCreateFlowJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApplicationCreateFlowRequestWithBody(server, organizationId, environmentId, domain, application, "application/json", bodyReader)
}

// NewApplicationCreateFlowRequestWithBody generates requests for ApplicationCreateFlow with any type of body
func NewApplicationCreateFlowRequestWithBody(server string, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/flows", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApplicationGetFlowRequest generates requests for ApplicationGetFlow
func NewApplicationGetFlowRequest(server string, organizationId string, environmentId string, domain string, application string, flow string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "flow", runtime.ParamLocationPath, flow)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/flows/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApplicationUpdateFlowRequest calls the generic ApplicationUpdateFlow builder with application/json body
func NewApplicationUpdateFlowRequest(server string, organizationId string, environmentId string, domain string, application string, flow string, body ApplicationUpdateFlowJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApplicationUpdateFlowRequestWithBody(server, organizationId, environmentId, domain, application, flow, "application/json", bodyReader)
}

// NewApplicationUpdateFlowRequestWithBody generates requests for ApplicationUpdateFlow with any type of body
func NewApplicationUpdateFlowRequestWithBody(server string, organizationId string, environmentId string, domain string, application string, flow string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "flow", runtime.ParamLocationPath, flow)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/flows/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApplicationListFormsRequest generates requests for ApplicationListForms
func NewApplicationListFormsRequest(server string, organizationId string, environmentId string, domain string, application string, params *ApplicationListFormsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/forms", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "template", runtime.ParamLocationQuery, params.Template); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApplicationCreateFormRequest calls the generic ApplicationCreateForm builder with application/json body
func NewApplicationCreateFormRequest(server string, organizationId string, environmentId string, domain string, application string, body ApplicationCreateFormJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApplicationCreateFormRequestWithBody(server, organizationId, environmentId, domain, application, "application/json", bodyReader)
}

// NewApplicationCreateFormRequestWithBody generates requests for ApplicationCreateForm with any type of body
func NewApplicationCreateFormRequestWithBody(server string, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/forms", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApplicationDeleteFormRequest generates requests for ApplicationDeleteForm
func NewApplicationDeleteFormRequest(server string, organizationId string, environmentId string, domain string, application string, form string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "form", runtime.ParamLocationPath, form)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/forms/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApplicationUpdateFormRequest calls the generic ApplicationUpdateForm builder with application/json body
func NewApplicationUpdateFormRequest(server string, organizationId string, environmentId string, domain string, application string, form string, body ApplicationUpdateFormJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApplicationUpdateFormRequestWithBody(server, organizationId, environmentId, domain, application, form, "application/json", bodyReader)
}

// NewApplicationUpdateFormRequestWithBody generates requests for ApplicationUpdateForm with any type of body
func NewApplicationUpdateFormRequestWithBody(server string, organizationId string, environmentId string, domain string, application string, form string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "form", runtime.ParamLocationPath, form)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/forms/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApplicationListMembersRequest generates requests for ApplicationListMembers
func NewApplicationListMembersRequest(server string, organizationId string, environmentId string, domain string, application string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/members", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApplicationAddOrUpdateMemberRequest calls the generic ApplicationAddOrUpdateMember builder with application/json body
func NewApplicationAddOrUpdateMemberRequest(server string, organizationId string, environmentId string, domain string, application string, body ApplicationAddOrUpdateMemberJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApplicationAddOrUpdateMemberRequestWithBody(server, organizationId, environmentId, domain, application, "application/json", bodyReader)
}

// NewApplicationAddOrUpdateMemberRequestWithBody generates requests for ApplicationAddOrUpdateMember with any type of body
func NewApplicationAddOrUpdateMemberRequestWithBody(server string, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/members", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApplicationListMemberPermissionsRequest generates requests for ApplicationListMemberPermissions
func NewApplicationListMemberPermissionsRequest(server string, organizationId string, environmentId string, domain string, application string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/members/permissions", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApplicationDeleteMemberRequest generates requests for ApplicationDeleteMember
func NewApplicationDeleteMemberRequest(server string, organizationId string, environmentId string, domain string, application string, member string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "member", runtime.ParamLocationPath, member)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/members/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApplicationListResourcesRequest generates requests for ApplicationListResources
func NewApplicationListResourcesRequest(server string, organizationId string, environmentId string, domain string, application string, params *ApplicationListResourcesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/resources", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApplicationGetResourceRequest generates requests for ApplicationGetResource
func NewApplicationGetResourceRequest(server string, organizationId string, environmentId string, domain string, application string, resource string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "resource", runtime.ParamLocationPath, resource)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/resources/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApplicationGetResourceAccessPoliciesRequest generates requests for ApplicationGetResourceAccessPolicies
func NewApplicationGetResourceAccessPoliciesRequest(server string, organizationId string, environmentId string, domain string, application string, resource string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "resource", runtime.ParamLocationPath, resource)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/resources/%s/policies", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApplicationGetResourceAccessPolicyRequest generates requests for ApplicationGetResourceAccessPolicy
func NewApplicationGetResourceAccessPolicyRequest(server string, organizationId string, environmentId string, domain string, application string, resource string, policy string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "resource", runtime.ParamLocationPath, resource)
	if err != nil {
		return nil, err
	}

	var pathParam5 string

	pathParam5, err = runtime.StyleParamWithLocation("simple", false, "policy", runtime.ParamLocationPath, policy)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/resources/%s/policies/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4, pathParam5)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApplicationRenewSecretRequest generates requests for ApplicationRenewSecret
func NewApplicationRenewSecretRequest(server string, organizationId string, environmentId string, domain string, application string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/secret/_renew", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApplicationUpdateTypeRequest calls the generic ApplicationUpdateType builder with application/json body
func NewApplicationUpdateTypeRequest(server string, organizationId string, environmentId string, domain string, application string, body ApplicationUpdateTypeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApplicationUpdateTypeRequestWithBody(server, organizationId, environmentId, domain, application, "application/json", bodyReader)
}

// NewApplicationUpdateTypeRequestWithBody generates requests for ApplicationUpdateType with any type of body
func NewApplicationUpdateTypeRequestWithBody(server string, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "application", runtime.ParamLocationPath, application)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/applications/%s/type", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEnvironmentListDomainAuditsRequest generates requests for EnvironmentListDomainAudits
func NewEnvironmentListDomainAuditsRequest(server string, organizationId string, environmentId string, domain string, params *EnvironmentListDomainAuditsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/audits", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.User != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user", runtime.ParamLocationQuery, *params.User); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainGetAuditRequest generates requests for DomainGetAudit
func NewDomainGetAuditRequest(server string, organizationId string, environmentId string, domain string, audit string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "audit", runtime.ParamLocationPath, audit)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/audits/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentListDomainAuthDeviceNotifierRequest generates requests for EnvironmentListDomainAuthDeviceNotifier
func NewEnvironmentListDomainAuthDeviceNotifierRequest(server string, organizationId string, environmentId string, domain string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/auth-device-notifiers", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentCreateDomainAuthDeviceNotifiersRequest calls the generic EnvironmentCreateDomainAuthDeviceNotifiers builder with application/json body
func NewEnvironmentCreateDomainAuthDeviceNotifiersRequest(server string, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainAuthDeviceNotifiersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEnvironmentCreateDomainAuthDeviceNotifiersRequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewEnvironmentCreateDomainAuthDeviceNotifiersRequestWithBody generates requests for EnvironmentCreateDomainAuthDeviceNotifiers with any type of body
func NewEnvironmentCreateDomainAuthDeviceNotifiersRequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/auth-device-notifiers", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainDeleteAuthDeviceNotifierRequest generates requests for DomainDeleteAuthDeviceNotifier
func NewDomainDeleteAuthDeviceNotifierRequest(server string, organizationId string, environmentId string, domain string, authDeviceNotifier string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "authDeviceNotifier", runtime.ParamLocationPath, authDeviceNotifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/auth-device-notifiers/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainGetAuthDeviceNotifierRequest generates requests for DomainGetAuthDeviceNotifier
func NewDomainGetAuthDeviceNotifierRequest(server string, organizationId string, environmentId string, domain string, authDeviceNotifier string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "authDeviceNotifier", runtime.ParamLocationPath, authDeviceNotifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/auth-device-notifiers/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainUpdateAuthDeviceNotifierRequest calls the generic DomainUpdateAuthDeviceNotifier builder with application/json body
func NewDomainUpdateAuthDeviceNotifierRequest(server string, organizationId string, environmentId string, domain string, authDeviceNotifier string, body DomainUpdateAuthDeviceNotifierJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDomainUpdateAuthDeviceNotifierRequestWithBody(server, organizationId, environmentId, domain, authDeviceNotifier, "application/json", bodyReader)
}

// NewDomainUpdateAuthDeviceNotifierRequestWithBody generates requests for DomainUpdateAuthDeviceNotifier with any type of body
func NewDomainUpdateAuthDeviceNotifierRequestWithBody(server string, organizationId string, environmentId string, domain string, authDeviceNotifier string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "authDeviceNotifier", runtime.ParamLocationPath, authDeviceNotifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/auth-device-notifiers/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEnvironmentListDomainBotDetectionsRequest generates requests for EnvironmentListDomainBotDetections
func NewEnvironmentListDomainBotDetectionsRequest(server string, organizationId string, environmentId string, domain string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/bot-detections", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentCreateDomainBotDetectionRequest calls the generic EnvironmentCreateDomainBotDetection builder with application/json body
func NewEnvironmentCreateDomainBotDetectionRequest(server string, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainBotDetectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEnvironmentCreateDomainBotDetectionRequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewEnvironmentCreateDomainBotDetectionRequestWithBody generates requests for EnvironmentCreateDomainBotDetection with any type of body
func NewEnvironmentCreateDomainBotDetectionRequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/bot-detections", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainDeleteBotDetectionRequest generates requests for DomainDeleteBotDetection
func NewDomainDeleteBotDetectionRequest(server string, organizationId string, environmentId string, domain string, botDetection string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "botDetection", runtime.ParamLocationPath, botDetection)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/bot-detections/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainGetBotDetectionRequest generates requests for DomainGetBotDetection
func NewDomainGetBotDetectionRequest(server string, organizationId string, environmentId string, domain string, botDetection string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "botDetection", runtime.ParamLocationPath, botDetection)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/bot-detections/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainUpdateBotDetectionRequest calls the generic DomainUpdateBotDetection builder with application/json body
func NewDomainUpdateBotDetectionRequest(server string, organizationId string, environmentId string, domain string, botDetection string, body DomainUpdateBotDetectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDomainUpdateBotDetectionRequestWithBody(server, organizationId, environmentId, domain, botDetection, "application/json", bodyReader)
}

// NewDomainUpdateBotDetectionRequestWithBody generates requests for DomainUpdateBotDetection with any type of body
func NewDomainUpdateBotDetectionRequestWithBody(server string, organizationId string, environmentId string, domain string, botDetection string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "botDetection", runtime.ParamLocationPath, botDetection)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/bot-detections/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEnvironmentListDomainCertificatesRequest generates requests for EnvironmentListDomainCertificates
func NewEnvironmentListDomainCertificatesRequest(server string, organizationId string, environmentId string, domain string, params *EnvironmentListDomainCertificatesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/certificates", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Use != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "use", runtime.ParamLocationQuery, *params.Use); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentCreateDomainCertificateRequest calls the generic EnvironmentCreateDomainCertificate builder with application/json body
func NewEnvironmentCreateDomainCertificateRequest(server string, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainCertificateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEnvironmentCreateDomainCertificateRequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewEnvironmentCreateDomainCertificateRequestWithBody generates requests for EnvironmentCreateDomainCertificate with any type of body
func NewEnvironmentCreateDomainCertificateRequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/certificates", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEnvironmentRotateDomainCertificateRequest generates requests for EnvironmentRotateDomainCertificate
func NewEnvironmentRotateDomainCertificateRequest(server string, organizationId string, environmentId string, domain string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/certificates/rotate", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainDeleteCertificateRequest generates requests for DomainDeleteCertificate
func NewDomainDeleteCertificateRequest(server string, organizationId string, environmentId string, domain string, certificate string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "certificate", runtime.ParamLocationPath, certificate)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/certificates/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainGetCertificateRequest generates requests for DomainGetCertificate
func NewDomainGetCertificateRequest(server string, organizationId string, environmentId string, domain string, certificate string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "certificate", runtime.ParamLocationPath, certificate)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/certificates/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainUpdateCertificateRequest calls the generic DomainUpdateCertificate builder with application/json body
func NewDomainUpdateCertificateRequest(server string, organizationId string, environmentId string, domain string, certificate string, body DomainUpdateCertificateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDomainUpdateCertificateRequestWithBody(server, organizationId, environmentId, domain, certificate, "application/json", bodyReader)
}

// NewDomainUpdateCertificateRequestWithBody generates requests for DomainUpdateCertificate with any type of body
func NewDomainUpdateCertificateRequestWithBody(server string, organizationId string, environmentId string, domain string, certificate string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "certificate", runtime.ParamLocationPath, certificate)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/certificates/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainGetCertificatePublicKeyRequest generates requests for DomainGetCertificatePublicKey
func NewDomainGetCertificatePublicKeyRequest(server string, organizationId string, environmentId string, domain string, certificate string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "certificate", runtime.ParamLocationPath, certificate)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/certificates/%s/key", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentListDomainCertificatePublicKeysRequest generates requests for EnvironmentListDomainCertificatePublicKeys
func NewEnvironmentListDomainCertificatePublicKeysRequest(server string, organizationId string, environmentId string, domain string, certificate string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "certificate", runtime.ParamLocationPath, certificate)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/certificates/%s/keys", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentListDomainDeviceIdentifiersRequest generates requests for EnvironmentListDomainDeviceIdentifiers
func NewEnvironmentListDomainDeviceIdentifiersRequest(server string, organizationId string, environmentId string, domain string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/device-identifiers", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentCreateDomainDeviceIdentifierRequest calls the generic EnvironmentCreateDomainDeviceIdentifier builder with application/json body
func NewEnvironmentCreateDomainDeviceIdentifierRequest(server string, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainDeviceIdentifierJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEnvironmentCreateDomainDeviceIdentifierRequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewEnvironmentCreateDomainDeviceIdentifierRequestWithBody generates requests for EnvironmentCreateDomainDeviceIdentifier with any type of body
func NewEnvironmentCreateDomainDeviceIdentifierRequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/device-identifiers", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainDeleteDeviceIdentifierRequest generates requests for DomainDeleteDeviceIdentifier
func NewDomainDeleteDeviceIdentifierRequest(server string, organizationId string, environmentId string, domain string, deviceIdentifier string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "deviceIdentifier", runtime.ParamLocationPath, deviceIdentifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/device-identifiers/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainGetDeviceIdentifierRequest generates requests for DomainGetDeviceIdentifier
func NewDomainGetDeviceIdentifierRequest(server string, organizationId string, environmentId string, domain string, deviceIdentifier string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "deviceIdentifier", runtime.ParamLocationPath, deviceIdentifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/device-identifiers/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainUpdateDeviceIdentifierRequest calls the generic DomainUpdateDeviceIdentifier builder with application/json body
func NewDomainUpdateDeviceIdentifierRequest(server string, organizationId string, environmentId string, domain string, deviceIdentifier string, body DomainUpdateDeviceIdentifierJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDomainUpdateDeviceIdentifierRequestWithBody(server, organizationId, environmentId, domain, deviceIdentifier, "application/json", bodyReader)
}

// NewDomainUpdateDeviceIdentifierRequestWithBody generates requests for DomainUpdateDeviceIdentifier with any type of body
func NewDomainUpdateDeviceIdentifierRequestWithBody(server string, organizationId string, environmentId string, domain string, deviceIdentifier string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "deviceIdentifier", runtime.ParamLocationPath, deviceIdentifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/device-identifiers/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEnvironmentListDomainEmailsRequest generates requests for EnvironmentListDomainEmails
func NewEnvironmentListDomainEmailsRequest(server string, organizationId string, environmentId string, domain string, params *EnvironmentListDomainEmailsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/emails", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "template", runtime.ParamLocationQuery, params.Template); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentCreateDomainEmailRequest calls the generic EnvironmentCreateDomainEmail builder with application/json body
func NewEnvironmentCreateDomainEmailRequest(server string, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainEmailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEnvironmentCreateDomainEmailRequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewEnvironmentCreateDomainEmailRequestWithBody generates requests for EnvironmentCreateDomainEmail with any type of body
func NewEnvironmentCreateDomainEmailRequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/emails", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainDeleteEmailRequest generates requests for DomainDeleteEmail
func NewDomainDeleteEmailRequest(server string, organizationId string, environmentId string, domain string, email string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "email", runtime.ParamLocationPath, email)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/emails/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainUpdateEmailRequest calls the generic DomainUpdateEmail builder with application/json body
func NewDomainUpdateEmailRequest(server string, organizationId string, environmentId string, domain string, email string, body DomainUpdateEmailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDomainUpdateEmailRequestWithBody(server, organizationId, environmentId, domain, email, "application/json", bodyReader)
}

// NewDomainUpdateEmailRequestWithBody generates requests for DomainUpdateEmail with any type of body
func NewDomainUpdateEmailRequestWithBody(server string, organizationId string, environmentId string, domain string, email string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "email", runtime.ParamLocationPath, email)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/emails/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainGetEntrypointsRequest generates requests for DomainGetEntrypoints
func NewDomainGetEntrypointsRequest(server string, organizationId string, environmentId string, domain string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/entrypoints", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentListDomainExtensionGrantsRequest generates requests for EnvironmentListDomainExtensionGrants
func NewEnvironmentListDomainExtensionGrantsRequest(server string, organizationId string, environmentId string, domain string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/extensionGrants", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentCreateDomainExtensionGrantRequest calls the generic EnvironmentCreateDomainExtensionGrant builder with application/json body
func NewEnvironmentCreateDomainExtensionGrantRequest(server string, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainExtensionGrantJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEnvironmentCreateDomainExtensionGrantRequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewEnvironmentCreateDomainExtensionGrantRequestWithBody generates requests for EnvironmentCreateDomainExtensionGrant with any type of body
func NewEnvironmentCreateDomainExtensionGrantRequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/extensionGrants", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainDeleteExtensionGrantRequest generates requests for DomainDeleteExtensionGrant
func NewDomainDeleteExtensionGrantRequest(server string, organizationId string, environmentId string, domain string, extensionGrant string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "extensionGrant", runtime.ParamLocationPath, extensionGrant)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/extensionGrants/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainGetExtensionGrantRequest generates requests for DomainGetExtensionGrant
func NewDomainGetExtensionGrantRequest(server string, organizationId string, environmentId string, domain string, extensionGrant string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "extensionGrant", runtime.ParamLocationPath, extensionGrant)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/extensionGrants/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainUpdateExtensionGrantRequest calls the generic DomainUpdateExtensionGrant builder with application/json body
func NewDomainUpdateExtensionGrantRequest(server string, organizationId string, environmentId string, domain string, extensionGrant string, body DomainUpdateExtensionGrantJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDomainUpdateExtensionGrantRequestWithBody(server, organizationId, environmentId, domain, extensionGrant, "application/json", bodyReader)
}

// NewDomainUpdateExtensionGrantRequestWithBody generates requests for DomainUpdateExtensionGrant with any type of body
func NewDomainUpdateExtensionGrantRequestWithBody(server string, organizationId string, environmentId string, domain string, extensionGrant string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "extensionGrant", runtime.ParamLocationPath, extensionGrant)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/extensionGrants/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEnvironmentListDomainFactorsRequest generates requests for EnvironmentListDomainFactors
func NewEnvironmentListDomainFactorsRequest(server string, organizationId string, environmentId string, domain string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/factors", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentCreateDomainFactorRequest calls the generic EnvironmentCreateDomainFactor builder with application/json body
func NewEnvironmentCreateDomainFactorRequest(server string, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainFactorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEnvironmentCreateDomainFactorRequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewEnvironmentCreateDomainFactorRequestWithBody generates requests for EnvironmentCreateDomainFactor with any type of body
func NewEnvironmentCreateDomainFactorRequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/factors", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainDeleteFactorRequest generates requests for DomainDeleteFactor
func NewDomainDeleteFactorRequest(server string, organizationId string, environmentId string, domain string, factor string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "factor", runtime.ParamLocationPath, factor)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/factors/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainGetFactorRequest generates requests for DomainGetFactor
func NewDomainGetFactorRequest(server string, organizationId string, environmentId string, domain string, factor string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "factor", runtime.ParamLocationPath, factor)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/factors/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainUpdateFactorRequest calls the generic DomainUpdateFactor builder with application/json body
func NewDomainUpdateFactorRequest(server string, organizationId string, environmentId string, domain string, factor string, body DomainUpdateFactorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDomainUpdateFactorRequestWithBody(server, organizationId, environmentId, domain, factor, "application/json", bodyReader)
}

// NewDomainUpdateFactorRequestWithBody generates requests for DomainUpdateFactor with any type of body
func NewDomainUpdateFactorRequestWithBody(server string, organizationId string, environmentId string, domain string, factor string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "factor", runtime.ParamLocationPath, factor)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/factors/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEnvironmentListDomainFlowsRequest generates requests for EnvironmentListDomainFlows
func NewEnvironmentListDomainFlowsRequest(server string, organizationId string, environmentId string, domain string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/flows", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentCreateOrUpdateDomainFlowsRequest calls the generic EnvironmentCreateOrUpdateDomainFlows builder with application/json body
func NewEnvironmentCreateOrUpdateDomainFlowsRequest(server string, organizationId string, environmentId string, domain string, body EnvironmentCreateOrUpdateDomainFlowsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEnvironmentCreateOrUpdateDomainFlowsRequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewEnvironmentCreateOrUpdateDomainFlowsRequestWithBody generates requests for EnvironmentCreateOrUpdateDomainFlows with any type of body
func NewEnvironmentCreateOrUpdateDomainFlowsRequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/flows", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainGetFlowRequest generates requests for DomainGetFlow
func NewDomainGetFlowRequest(server string, organizationId string, environmentId string, domain string, flow string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "flow", runtime.ParamLocationPath, flow)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/flows/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainUpdateFlowRequest calls the generic DomainUpdateFlow builder with application/json body
func NewDomainUpdateFlowRequest(server string, organizationId string, environmentId string, domain string, flow string, body DomainUpdateFlowJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDomainUpdateFlowRequestWithBody(server, organizationId, environmentId, domain, flow, "application/json", bodyReader)
}

// NewDomainUpdateFlowRequestWithBody generates requests for DomainUpdateFlow with any type of body
func NewDomainUpdateFlowRequestWithBody(server string, organizationId string, environmentId string, domain string, flow string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "flow", runtime.ParamLocationPath, flow)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/flows/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEnvironmentListDomainFormsRequest generates requests for EnvironmentListDomainForms
func NewEnvironmentListDomainFormsRequest(server string, organizationId string, environmentId string, domain string, params *EnvironmentListDomainFormsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/forms", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "template", runtime.ParamLocationQuery, params.Template); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentCreateDomainFormRequest calls the generic EnvironmentCreateDomainForm builder with application/json body
func NewEnvironmentCreateDomainFormRequest(server string, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainFormJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEnvironmentCreateDomainFormRequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewEnvironmentCreateDomainFormRequestWithBody generates requests for EnvironmentCreateDomainForm with any type of body
func NewEnvironmentCreateDomainFormRequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/forms", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEnvironmentPreviewDomainFormRequest calls the generic EnvironmentPreviewDomainForm builder with application/json body
func NewEnvironmentPreviewDomainFormRequest(server string, organizationId string, environmentId string, domain string, body EnvironmentPreviewDomainFormJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEnvironmentPreviewDomainFormRequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewEnvironmentPreviewDomainFormRequestWithBody generates requests for EnvironmentPreviewDomainForm with any type of body
func NewEnvironmentPreviewDomainFormRequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/forms/preview", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainDeleteFormRequest generates requests for DomainDeleteForm
func NewDomainDeleteFormRequest(server string, organizationId string, environmentId string, domain string, form string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "form", runtime.ParamLocationPath, form)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/forms/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainUpdateFormRequest calls the generic DomainUpdateForm builder with application/json body
func NewDomainUpdateFormRequest(server string, organizationId string, environmentId string, domain string, form string, body DomainUpdateFormJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDomainUpdateFormRequestWithBody(server, organizationId, environmentId, domain, form, "application/json", bodyReader)
}

// NewDomainUpdateFormRequestWithBody generates requests for DomainUpdateForm with any type of body
func NewDomainUpdateFormRequestWithBody(server string, organizationId string, environmentId string, domain string, form string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "form", runtime.ParamLocationPath, form)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/forms/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEnvironmentListDomainGroupsRequest generates requests for EnvironmentListDomainGroups
func NewEnvironmentListDomainGroupsRequest(server string, organizationId string, environmentId string, domain string, params *EnvironmentListDomainGroupsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/groups", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentCreateDomainGroupRequest calls the generic EnvironmentCreateDomainGroup builder with application/json body
func NewEnvironmentCreateDomainGroupRequest(server string, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEnvironmentCreateDomainGroupRequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewEnvironmentCreateDomainGroupRequestWithBody generates requests for EnvironmentCreateDomainGroup with any type of body
func NewEnvironmentCreateDomainGroupRequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/groups", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainDeleteGroupRequest generates requests for DomainDeleteGroup
func NewDomainDeleteGroupRequest(server string, organizationId string, environmentId string, domain string, group string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "group", runtime.ParamLocationPath, group)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/groups/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainGetGroupRequest generates requests for DomainGetGroup
func NewDomainGetGroupRequest(server string, organizationId string, environmentId string, domain string, group string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "group", runtime.ParamLocationPath, group)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/groups/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainUpdateGroupRequest calls the generic DomainUpdateGroup builder with application/json body
func NewDomainUpdateGroupRequest(server string, organizationId string, environmentId string, domain string, group string, body DomainUpdateGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDomainUpdateGroupRequestWithBody(server, organizationId, environmentId, domain, group, "application/json", bodyReader)
}

// NewDomainUpdateGroupRequestWithBody generates requests for DomainUpdateGroup with any type of body
func NewDomainUpdateGroupRequestWithBody(server string, organizationId string, environmentId string, domain string, group string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "group", runtime.ParamLocationPath, group)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/groups/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainGetGroupMemebersRequest generates requests for DomainGetGroupMemebers
func NewDomainGetGroupMemebersRequest(server string, organizationId string, environmentId string, domain string, group string, params *DomainGetGroupMemebersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "group", runtime.ParamLocationPath, group)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/groups/%s/members", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentRemoveDomainGroupMemeberRequest generates requests for EnvironmentRemoveDomainGroupMemeber
func NewEnvironmentRemoveDomainGroupMemeberRequest(server string, organizationId string, environmentId string, domain string, group string, member string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "group", runtime.ParamLocationPath, group)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "member", runtime.ParamLocationPath, member)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/groups/%s/members/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainAddOrUpdateGroupMemeberRequest generates requests for DomainAddOrUpdateGroupMemeber
func NewDomainAddOrUpdateGroupMemeberRequest(server string, organizationId string, environmentId string, domain string, group string, member string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "group", runtime.ParamLocationPath, group)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "member", runtime.ParamLocationPath, member)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/groups/%s/members/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentListDomainGroupRolesRequest generates requests for EnvironmentListDomainGroupRoles
func NewEnvironmentListDomainGroupRolesRequest(server string, organizationId string, environmentId string, domain string, group string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "group", runtime.ParamLocationPath, group)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/groups/%s/roles", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentAddDomainGroupRoleRequest calls the generic EnvironmentAddDomainGroupRole builder with application/json body
func NewEnvironmentAddDomainGroupRoleRequest(server string, organizationId string, environmentId string, domain string, group string, body EnvironmentAddDomainGroupRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEnvironmentAddDomainGroupRoleRequestWithBody(server, organizationId, environmentId, domain, group, "application/json", bodyReader)
}

// NewEnvironmentAddDomainGroupRoleRequestWithBody generates requests for EnvironmentAddDomainGroupRole with any type of body
func NewEnvironmentAddDomainGroupRoleRequestWithBody(server string, organizationId string, environmentId string, domain string, group string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "group", runtime.ParamLocationPath, group)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/groups/%s/roles", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEnvironmentRemoveDomainGroupRoleRequest generates requests for EnvironmentRemoveDomainGroupRole
func NewEnvironmentRemoveDomainGroupRoleRequest(server string, organizationId string, environmentId string, domain string, group string, role string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "group", runtime.ParamLocationPath, group)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "role", runtime.ParamLocationPath, role)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/groups/%s/roles/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentListDomainDictionariesRequest generates requests for EnvironmentListDomainDictionaries
func NewEnvironmentListDomainDictionariesRequest(server string, organizationId string, environmentId string, domain string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/i18n/dictionaries", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentCreateDomainDictionaryRequestWithBody generates requests for EnvironmentCreateDomainDictionary with any type of body
func NewEnvironmentCreateDomainDictionaryRequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/i18n/dictionaries", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainDeleteDictionaryRequest generates requests for DomainDeleteDictionary
func NewDomainDeleteDictionaryRequest(server string, organizationId string, environmentId string, domain string, dictionary string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "dictionary", runtime.ParamLocationPath, dictionary)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/i18n/dictionaries/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainGetDictionaryRequest generates requests for DomainGetDictionary
func NewDomainGetDictionaryRequest(server string, organizationId string, environmentId string, domain string, dictionary string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "dictionary", runtime.ParamLocationPath, dictionary)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/i18n/dictionaries/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainUpdateDictionaryRequestWithBody generates requests for DomainUpdateDictionary with any type of body
func NewDomainUpdateDictionaryRequestWithBody(server string, organizationId string, environmentId string, domain string, dictionary string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "dictionary", runtime.ParamLocationPath, dictionary)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/i18n/dictionaries/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainUpdateDictionaryEntriesRequestWithBody generates requests for DomainUpdateDictionaryEntries with any type of body
func NewDomainUpdateDictionaryEntriesRequestWithBody(server string, organizationId string, environmentId string, domain string, dictionary string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "dictionary", runtime.ParamLocationPath, dictionary)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/i18n/dictionaries/%s/entries", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEnvironmentListDomainIdentityProvidersRequest generates requests for EnvironmentListDomainIdentityProviders
func NewEnvironmentListDomainIdentityProvidersRequest(server string, organizationId string, environmentId string, domain string, params *EnvironmentListDomainIdentityProvidersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/identities", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UserProvider != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userProvider", runtime.ParamLocationQuery, *params.UserProvider); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentCreateDomainIdentityProviderRequest calls the generic EnvironmentCreateDomainIdentityProvider builder with application/json body
func NewEnvironmentCreateDomainIdentityProviderRequest(server string, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainIdentityProviderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEnvironmentCreateDomainIdentityProviderRequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewEnvironmentCreateDomainIdentityProviderRequestWithBody generates requests for EnvironmentCreateDomainIdentityProvider with any type of body
func NewEnvironmentCreateDomainIdentityProviderRequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/identities", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainDeleteIdentityProviderRequest generates requests for DomainDeleteIdentityProvider
func NewDomainDeleteIdentityProviderRequest(server string, organizationId string, environmentId string, domain string, identity string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "identity", runtime.ParamLocationPath, identity)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/identities/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainGetIdentityProviderRequest generates requests for DomainGetIdentityProvider
func NewDomainGetIdentityProviderRequest(server string, organizationId string, environmentId string, domain string, identity string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "identity", runtime.ParamLocationPath, identity)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/identities/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainUpdateIdentityProviderRequest calls the generic DomainUpdateIdentityProvider builder with application/json body
func NewDomainUpdateIdentityProviderRequest(server string, organizationId string, environmentId string, domain string, identity string, body DomainUpdateIdentityProviderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDomainUpdateIdentityProviderRequestWithBody(server, organizationId, environmentId, domain, identity, "application/json", bodyReader)
}

// NewDomainUpdateIdentityProviderRequestWithBody generates requests for DomainUpdateIdentityProvider with any type of body
func NewDomainUpdateIdentityProviderRequestWithBody(server string, organizationId string, environmentId string, domain string, identity string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "identity", runtime.ParamLocationPath, identity)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/identities/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEnvironmentListDomainMembersRequest generates requests for EnvironmentListDomainMembers
func NewEnvironmentListDomainMembersRequest(server string, organizationId string, environmentId string, domain string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/members", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainAddOrUpdateMemberRequest calls the generic DomainAddOrUpdateMember builder with application/json body
func NewDomainAddOrUpdateMemberRequest(server string, organizationId string, environmentId string, domain string, body DomainAddOrUpdateMemberJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDomainAddOrUpdateMemberRequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewDomainAddOrUpdateMemberRequestWithBody generates requests for DomainAddOrUpdateMember with any type of body
func NewDomainAddOrUpdateMemberRequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/members", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEnvironmentListDomainMemberPermissionsRequest generates requests for EnvironmentListDomainMemberPermissions
func NewEnvironmentListDomainMemberPermissionsRequest(server string, organizationId string, environmentId string, domain string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/members/permissions", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentRemoveDomainMemberRequest generates requests for EnvironmentRemoveDomainMember
func NewEnvironmentRemoveDomainMemberRequest(server string, organizationId string, environmentId string, domain string, member string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "member", runtime.ParamLocationPath, member)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/members/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentListDomainReportersRequest generates requests for EnvironmentListDomainReporters
func NewEnvironmentListDomainReportersRequest(server string, organizationId string, environmentId string, domain string, params *EnvironmentListDomainReportersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/reporters", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UserProvider != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userProvider", runtime.ParamLocationQuery, *params.UserProvider); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentCreateDomainReporterRequest calls the generic EnvironmentCreateDomainReporter builder with application/json body
func NewEnvironmentCreateDomainReporterRequest(server string, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainReporterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEnvironmentCreateDomainReporterRequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewEnvironmentCreateDomainReporterRequestWithBody generates requests for EnvironmentCreateDomainReporter with any type of body
func NewEnvironmentCreateDomainReporterRequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/reporters", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainDeleteReporterRequest generates requests for DomainDeleteReporter
func NewDomainDeleteReporterRequest(server string, organizationId string, environmentId string, domain string, reporter string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "reporter", runtime.ParamLocationPath, reporter)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/reporters/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainGetReporterRequest generates requests for DomainGetReporter
func NewDomainGetReporterRequest(server string, organizationId string, environmentId string, domain string, reporter string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "reporter", runtime.ParamLocationPath, reporter)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/reporters/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainUpdateReporterRequest calls the generic DomainUpdateReporter builder with application/json body
func NewDomainUpdateReporterRequest(server string, organizationId string, environmentId string, domain string, reporter string, body DomainUpdateReporterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDomainUpdateReporterRequestWithBody(server, organizationId, environmentId, domain, reporter, "application/json", bodyReader)
}

// NewDomainUpdateReporterRequestWithBody generates requests for DomainUpdateReporter with any type of body
func NewDomainUpdateReporterRequestWithBody(server string, organizationId string, environmentId string, domain string, reporter string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "reporter", runtime.ParamLocationPath, reporter)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/reporters/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEnvironmentListDomainResourcesRequest generates requests for EnvironmentListDomainResources
func NewEnvironmentListDomainResourcesRequest(server string, organizationId string, environmentId string, domain string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/resources", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentCreateDomainResourceRequest calls the generic EnvironmentCreateDomainResource builder with application/json body
func NewEnvironmentCreateDomainResourceRequest(server string, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEnvironmentCreateDomainResourceRequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewEnvironmentCreateDomainResourceRequestWithBody generates requests for EnvironmentCreateDomainResource with any type of body
func NewEnvironmentCreateDomainResourceRequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/resources", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainDeleteResourceRequest generates requests for DomainDeleteResource
func NewDomainDeleteResourceRequest(server string, organizationId string, environmentId string, domain string, resource string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "resource", runtime.ParamLocationPath, resource)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/resources/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainGetResourceRequest generates requests for DomainGetResource
func NewDomainGetResourceRequest(server string, organizationId string, environmentId string, domain string, resource string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "resource", runtime.ParamLocationPath, resource)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/resources/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainUpdateResourceRequest calls the generic DomainUpdateResource builder with application/json body
func NewDomainUpdateResourceRequest(server string, organizationId string, environmentId string, domain string, resource string, body DomainUpdateResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDomainUpdateResourceRequestWithBody(server, organizationId, environmentId, domain, resource, "application/json", bodyReader)
}

// NewDomainUpdateResourceRequestWithBody generates requests for DomainUpdateResource with any type of body
func NewDomainUpdateResourceRequestWithBody(server string, organizationId string, environmentId string, domain string, resource string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "resource", runtime.ParamLocationPath, resource)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/resources/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEnvironmentListDomainRolesRequest generates requests for EnvironmentListDomainRoles
func NewEnvironmentListDomainRolesRequest(server string, organizationId string, environmentId string, domain string, params *EnvironmentListDomainRolesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/roles", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentCreateDomainMemberRoleRequest calls the generic EnvironmentCreateDomainMemberRole builder with application/json body
func NewEnvironmentCreateDomainMemberRoleRequest(server string, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainMemberRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEnvironmentCreateDomainMemberRoleRequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewEnvironmentCreateDomainMemberRoleRequestWithBody generates requests for EnvironmentCreateDomainMemberRole with any type of body
func NewEnvironmentCreateDomainMemberRoleRequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/roles", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainDeleteRoleRequest generates requests for DomainDeleteRole
func NewDomainDeleteRoleRequest(server string, organizationId string, environmentId string, domain string, role string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "role", runtime.ParamLocationPath, role)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/roles/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainGetRoleRequest generates requests for DomainGetRole
func NewDomainGetRoleRequest(server string, organizationId string, environmentId string, domain string, role string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "role", runtime.ParamLocationPath, role)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/roles/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainUpdateRoleRequest calls the generic DomainUpdateRole builder with application/json body
func NewDomainUpdateRoleRequest(server string, organizationId string, environmentId string, domain string, role string, body DomainUpdateRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDomainUpdateRoleRequestWithBody(server, organizationId, environmentId, domain, role, "application/json", bodyReader)
}

// NewDomainUpdateRoleRequestWithBody generates requests for DomainUpdateRole with any type of body
func NewDomainUpdateRoleRequestWithBody(server string, organizationId string, environmentId string, domain string, role string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "role", runtime.ParamLocationPath, role)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/roles/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEnvironmentListDomainScopesRequest generates requests for EnvironmentListDomainScopes
func NewEnvironmentListDomainScopesRequest(server string, organizationId string, environmentId string, domain string, params *EnvironmentListDomainScopesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/scopes", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentCreateDomainScopeRequest calls the generic EnvironmentCreateDomainScope builder with application/json body
func NewEnvironmentCreateDomainScopeRequest(server string, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainScopeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEnvironmentCreateDomainScopeRequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewEnvironmentCreateDomainScopeRequestWithBody generates requests for EnvironmentCreateDomainScope with any type of body
func NewEnvironmentCreateDomainScopeRequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/scopes", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteScopeRequest generates requests for DeleteScope
func NewDeleteScopeRequest(server string, organizationId string, environmentId string, domain string, scope string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "scope", runtime.ParamLocationPath, scope)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/scopes/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainGetScopeRequest generates requests for DomainGetScope
func NewDomainGetScopeRequest(server string, organizationId string, environmentId string, domain string, scope string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "scope", runtime.ParamLocationPath, scope)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/scopes/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchScopeRequest calls the generic PatchScope builder with application/json body
func NewPatchScopeRequest(server string, organizationId string, environmentId string, domain string, scope string, body PatchScopeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchScopeRequestWithBody(server, organizationId, environmentId, domain, scope, "application/json", bodyReader)
}

// NewPatchScopeRequestWithBody generates requests for PatchScope with any type of body
func NewPatchScopeRequestWithBody(server string, organizationId string, environmentId string, domain string, scope string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "scope", runtime.ParamLocationPath, scope)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/scopes/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateScopeRequest calls the generic UpdateScope builder with application/json body
func NewUpdateScopeRequest(server string, organizationId string, environmentId string, domain string, scope string, body UpdateScopeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateScopeRequestWithBody(server, organizationId, environmentId, domain, scope, "application/json", bodyReader)
}

// NewUpdateScopeRequestWithBody generates requests for UpdateScope with any type of body
func NewUpdateScopeRequestWithBody(server string, organizationId string, environmentId string, domain string, scope string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "scope", runtime.ParamLocationPath, scope)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/scopes/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEnvironmentListDomainThemesRequest generates requests for EnvironmentListDomainThemes
func NewEnvironmentListDomainThemesRequest(server string, organizationId string, environmentId string, domain string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/themes", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentCreateDomainThemeRequest calls the generic EnvironmentCreateDomainTheme builder with application/json body
func NewEnvironmentCreateDomainThemeRequest(server string, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainThemeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEnvironmentCreateDomainThemeRequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewEnvironmentCreateDomainThemeRequestWithBody generates requests for EnvironmentCreateDomainTheme with any type of body
func NewEnvironmentCreateDomainThemeRequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/themes", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainDeleteThemeRequest generates requests for DomainDeleteTheme
func NewDomainDeleteThemeRequest(server string, organizationId string, environmentId string, domain string, themeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "themeId", runtime.ParamLocationPath, themeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/themes/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainGetThemeRequest generates requests for DomainGetTheme
func NewDomainGetThemeRequest(server string, organizationId string, environmentId string, domain string, themeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "themeId", runtime.ParamLocationPath, themeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/themes/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainUpdateThemeRequest calls the generic DomainUpdateTheme builder with application/json body
func NewDomainUpdateThemeRequest(server string, organizationId string, environmentId string, domain string, themeId string, body DomainUpdateThemeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDomainUpdateThemeRequestWithBody(server, organizationId, environmentId, domain, themeId, "application/json", bodyReader)
}

// NewDomainUpdateThemeRequestWithBody generates requests for DomainUpdateTheme with any type of body
func NewDomainUpdateThemeRequestWithBody(server string, organizationId string, environmentId string, domain string, themeId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "themeId", runtime.ParamLocationPath, themeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/themes/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEnvironmentListDomainUsersRequest generates requests for EnvironmentListDomainUsers
func NewEnvironmentListDomainUsersRequest(server string, organizationId string, environmentId string, domain string, params *EnvironmentListDomainUsersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentCreateDomainUserRequest calls the generic EnvironmentCreateDomainUser builder with application/json body
func NewEnvironmentCreateDomainUserRequest(server string, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEnvironmentCreateDomainUserRequestWithBody(server, organizationId, environmentId, domain, "application/json", bodyReader)
}

// NewEnvironmentCreateDomainUserRequestWithBody generates requests for EnvironmentCreateDomainUser with any type of body
func NewEnvironmentCreateDomainUserRequestWithBody(server string, organizationId string, environmentId string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainDeleteUserRequest generates requests for DomainDeleteUser
func NewDomainDeleteUserRequest(server string, organizationId string, environmentId string, domain string, user string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainGetUserRequest generates requests for DomainGetUser
func NewDomainGetUserRequest(server string, organizationId string, environmentId string, domain string, user string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainUpdateUserRequest calls the generic DomainUpdateUser builder with application/json body
func NewDomainUpdateUserRequest(server string, organizationId string, environmentId string, domain string, user string, body DomainUpdateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDomainUpdateUserRequestWithBody(server, organizationId, environmentId, domain, user, "application/json", bodyReader)
}

// NewDomainUpdateUserRequestWithBody generates requests for DomainUpdateUser with any type of body
func NewDomainUpdateUserRequestWithBody(server string, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEnvironmentListDomainUserAuditsRequest generates requests for EnvironmentListDomainUserAudits
func NewEnvironmentListDomainUserAuditsRequest(server string, organizationId string, environmentId string, domain string, user string, params *EnvironmentListDomainUserAuditsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s/audits", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainGetUserAuditRequest generates requests for DomainGetUserAudit
func NewDomainGetUserAuditRequest(server string, organizationId string, environmentId string, domain string, user string, audit string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "audit", runtime.ParamLocationPath, audit)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s/audits/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainDeleteUserConsentsRequest generates requests for DomainDeleteUserConsents
func NewDomainDeleteUserConsentsRequest(server string, organizationId string, environmentId string, domain string, user string, params *DomainDeleteUserConsentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s/consents", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ClientId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clientId", runtime.ParamLocationQuery, *params.ClientId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentListDomainUserConsentsRequest generates requests for EnvironmentListDomainUserConsents
func NewEnvironmentListDomainUserConsentsRequest(server string, organizationId string, environmentId string, domain string, user string, params *EnvironmentListDomainUserConsentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s/consents", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ClientId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clientId", runtime.ParamLocationQuery, *params.ClientId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainDeleteUserConsentRequest generates requests for DomainDeleteUserConsent
func NewDomainDeleteUserConsentRequest(server string, organizationId string, environmentId string, domain string, user string, consent string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "consent", runtime.ParamLocationPath, consent)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s/consents/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainGetUserConsentRequest generates requests for DomainGetUserConsent
func NewDomainGetUserConsentRequest(server string, organizationId string, environmentId string, domain string, user string, consent string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "consent", runtime.ParamLocationPath, consent)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s/consents/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentListDomainUserCredentialsRequest generates requests for EnvironmentListDomainUserCredentials
func NewEnvironmentListDomainUserCredentialsRequest(server string, organizationId string, environmentId string, domain string, user string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s/credentials", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainDeleteUserCredentialRequest generates requests for DomainDeleteUserCredential
func NewDomainDeleteUserCredentialRequest(server string, organizationId string, environmentId string, domain string, user string, credential string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "credential", runtime.ParamLocationPath, credential)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s/credentials/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainGetUserCredentialRequest generates requests for DomainGetUserCredential
func NewDomainGetUserCredentialRequest(server string, organizationId string, environmentId string, domain string, user string, credential string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "credential", runtime.ParamLocationPath, credential)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s/credentials/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentListDomainUserDevicesRequest generates requests for EnvironmentListDomainUserDevices
func NewEnvironmentListDomainUserDevicesRequest(server string, organizationId string, environmentId string, domain string, user string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s/devices", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainGetUserDeviceRequest generates requests for DomainGetUserDevice
func NewDomainGetUserDeviceRequest(server string, organizationId string, environmentId string, domain string, user string, device string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "device", runtime.ParamLocationPath, device)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s/devices/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentListDomainUserFactorsRequest generates requests for EnvironmentListDomainUserFactors
func NewEnvironmentListDomainUserFactorsRequest(server string, organizationId string, environmentId string, domain string, user string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s/factors", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainDeleteUserFactorRequest generates requests for DomainDeleteUserFactor
func NewDomainDeleteUserFactorRequest(server string, organizationId string, environmentId string, domain string, user string, factor string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "factor", runtime.ParamLocationPath, factor)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s/factors/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentLockDomainUserRequest generates requests for EnvironmentLockDomainUser
func NewEnvironmentLockDomainUserRequest(server string, organizationId string, environmentId string, domain string, user string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s/lock", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentResetDomainUserPasswordRequestWithBody generates requests for EnvironmentResetDomainUserPassword with any type of body
func NewEnvironmentResetDomainUserPasswordRequestWithBody(server string, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s/resetPassword", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEnvironmentListDomainUserRolesRequest generates requests for EnvironmentListDomainUserRoles
func NewEnvironmentListDomainUserRolesRequest(server string, organizationId string, environmentId string, domain string, user string, params *EnvironmentListDomainUserRolesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s/roles", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Dynamic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dynamic", runtime.ParamLocationQuery, *params.Dynamic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainAddOrUpdateUserRoleRequest calls the generic DomainAddOrUpdateUserRole builder with application/json body
func NewDomainAddOrUpdateUserRoleRequest(server string, organizationId string, environmentId string, domain string, user string, body DomainAddOrUpdateUserRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDomainAddOrUpdateUserRoleRequestWithBody(server, organizationId, environmentId, domain, user, "application/json", bodyReader)
}

// NewDomainAddOrUpdateUserRoleRequestWithBody generates requests for DomainAddOrUpdateUserRole with any type of body
func NewDomainAddOrUpdateUserRoleRequestWithBody(server string, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s/roles", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDomainDeleteUserRoleRequest generates requests for DomainDeleteUserRole
func NewDomainDeleteUserRoleRequest(server string, organizationId string, environmentId string, domain string, user string, role string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "role", runtime.ParamLocationPath, role)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s/roles/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentSendDomainUserRegistrationConfirmationRequest generates requests for EnvironmentSendDomainUserRegistrationConfirmation
func NewEnvironmentSendDomainUserRegistrationConfirmationRequest(server string, organizationId string, environmentId string, domain string, user string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s/sendRegistrationConfirmation", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDomainUpdateUserStatusRequest calls the generic DomainUpdateUserStatus builder with application/json body
func NewDomainUpdateUserStatusRequest(server string, organizationId string, environmentId string, domain string, user string, body DomainUpdateUserStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDomainUpdateUserStatusRequestWithBody(server, organizationId, environmentId, domain, user, "application/json", bodyReader)
}

// NewDomainUpdateUserStatusRequestWithBody generates requests for DomainUpdateUserStatus with any type of body
func NewDomainUpdateUserStatusRequestWithBody(server string, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s/status", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEnvironmentUnlockDomainUserRequest generates requests for EnvironmentUnlockDomainUser
func NewEnvironmentUnlockDomainUserRequest(server string, organizationId string, environmentId string, domain string, user string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s/unlock", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnvironmentResetDomainUserNameRequest calls the generic EnvironmentResetDomainUserName builder with application/json body
func NewEnvironmentResetDomainUserNameRequest(server string, organizationId string, environmentId string, domain string, user string, body EnvironmentResetDomainUserNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEnvironmentResetDomainUserNameRequestWithBody(server, organizationId, environmentId, domain, user, "application/json", bodyReader)
}

// NewEnvironmentResetDomainUserNameRequestWithBody generates requests for EnvironmentResetDomainUserName with any type of body
func NewEnvironmentResetDomainUserNameRequestWithBody(server string, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/domains/%s/users/%s/username", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEnvironmentListMemberPermissionsRequest generates requests for EnvironmentListMemberPermissions
func NewEnvironmentListMemberPermissionsRequest(server string, organizationId string, environmentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "environmentId", runtime.ParamLocationPath, environmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/environments/%s/members/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganizationListPlatfomFormTemplatesRequest generates requests for OrganizationListPlatfomFormTemplates
func NewOrganizationListPlatfomFormTemplatesRequest(server string, organizationId string, params *OrganizationListPlatfomFormTemplatesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/forms", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "template", runtime.ParamLocationQuery, params.Template); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganizationCreatePlatfomFormTemplateRequest calls the generic OrganizationCreatePlatfomFormTemplate builder with application/json body
func NewOrganizationCreatePlatfomFormTemplateRequest(server string, organizationId string, body OrganizationCreatePlatfomFormTemplateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOrganizationCreatePlatfomFormTemplateRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewOrganizationCreatePlatfomFormTemplateRequestWithBody generates requests for OrganizationCreatePlatfomFormTemplate with any type of body
func NewOrganizationCreatePlatfomFormTemplateRequestWithBody(server string, organizationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/forms", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOrganizationDeletePlatfomFormTemplateRequest generates requests for OrganizationDeletePlatfomFormTemplate
func NewOrganizationDeletePlatfomFormTemplateRequest(server string, organizationId string, form string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "form", runtime.ParamLocationPath, form)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/forms/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganizationUpdatePlatfomFormTemplateRequest calls the generic OrganizationUpdatePlatfomFormTemplate builder with application/json body
func NewOrganizationUpdatePlatfomFormTemplateRequest(server string, organizationId string, form string, body OrganizationUpdatePlatfomFormTemplateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOrganizationUpdatePlatfomFormTemplateRequestWithBody(server, organizationId, form, "application/json", bodyReader)
}

// NewOrganizationUpdatePlatfomFormTemplateRequestWithBody generates requests for OrganizationUpdatePlatfomFormTemplate with any type of body
func NewOrganizationUpdatePlatfomFormTemplateRequestWithBody(server string, organizationId string, form string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "form", runtime.ParamLocationPath, form)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/forms/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOrganizationListPlatformGroupsRequest generates requests for OrganizationListPlatformGroups
func NewOrganizationListPlatformGroupsRequest(server string, organizationId string, params *OrganizationListPlatformGroupsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganizationCreatePlatformGroupRequest calls the generic OrganizationCreatePlatformGroup builder with application/json body
func NewOrganizationCreatePlatformGroupRequest(server string, organizationId string, body OrganizationCreatePlatformGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOrganizationCreatePlatformGroupRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewOrganizationCreatePlatformGroupRequestWithBody generates requests for OrganizationCreatePlatformGroup with any type of body
func NewOrganizationCreatePlatformGroupRequestWithBody(server string, organizationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOrganizationDeletePlatformGroupRequest generates requests for OrganizationDeletePlatformGroup
func NewOrganizationDeletePlatformGroupRequest(server string, organizationId string, group string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "group", runtime.ParamLocationPath, group)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/groups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganizationGetPlatformGroupRequest generates requests for OrganizationGetPlatformGroup
func NewOrganizationGetPlatformGroupRequest(server string, organizationId string, group string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "group", runtime.ParamLocationPath, group)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/groups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganizationUpdatePlatformGroupRequest calls the generic OrganizationUpdatePlatformGroup builder with application/json body
func NewOrganizationUpdatePlatformGroupRequest(server string, organizationId string, group string, body OrganizationUpdatePlatformGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOrganizationUpdatePlatformGroupRequestWithBody(server, organizationId, group, "application/json", bodyReader)
}

// NewOrganizationUpdatePlatformGroupRequestWithBody generates requests for OrganizationUpdatePlatformGroup with any type of body
func NewOrganizationUpdatePlatformGroupRequestWithBody(server string, organizationId string, group string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "group", runtime.ParamLocationPath, group)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/groups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOrganizationListPlatformGroupMembersRequest generates requests for OrganizationListPlatformGroupMembers
func NewOrganizationListPlatformGroupMembersRequest(server string, organizationId string, group string, params *OrganizationListPlatformGroupMembersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "group", runtime.ParamLocationPath, group)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/groups/%s/members", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganizationRemovePlatformGroupMemberRequest generates requests for OrganizationRemovePlatformGroupMember
func NewOrganizationRemovePlatformGroupMemberRequest(server string, organizationId string, group string, member string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "group", runtime.ParamLocationPath, group)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "member", runtime.ParamLocationPath, member)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/groups/%s/members/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganizationAddPlatformGroupMemberRequest generates requests for OrganizationAddPlatformGroupMember
func NewOrganizationAddPlatformGroupMemberRequest(server string, organizationId string, group string, member string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "group", runtime.ParamLocationPath, group)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "member", runtime.ParamLocationPath, member)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/groups/%s/members/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganizationListPlatformIdentityProvidersRequest generates requests for OrganizationListPlatformIdentityProviders
func NewOrganizationListPlatformIdentityProvidersRequest(server string, organizationId string, params *OrganizationListPlatformIdentityProvidersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/identities", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UserProvider != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userProvider", runtime.ParamLocationQuery, *params.UserProvider); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganizationCreatePlatformIdentityProviderRequest calls the generic OrganizationCreatePlatformIdentityProvider builder with application/json body
func NewOrganizationCreatePlatformIdentityProviderRequest(server string, organizationId string, body OrganizationCreatePlatformIdentityProviderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOrganizationCreatePlatformIdentityProviderRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewOrganizationCreatePlatformIdentityProviderRequestWithBody generates requests for OrganizationCreatePlatformIdentityProvider with any type of body
func NewOrganizationCreatePlatformIdentityProviderRequestWithBody(server string, organizationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/identities", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOrganizationDeletePlatformIdentityProviderRequest generates requests for OrganizationDeletePlatformIdentityProvider
func NewOrganizationDeletePlatformIdentityProviderRequest(server string, organizationId string, identity string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "identity", runtime.ParamLocationPath, identity)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/identities/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganizationGetPlatformIdentityProviderRequest generates requests for OrganizationGetPlatformIdentityProvider
func NewOrganizationGetPlatformIdentityProviderRequest(server string, organizationId string, identity string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "identity", runtime.ParamLocationPath, identity)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/identities/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganizationUpdatePlatformIdentityProviderRequest calls the generic OrganizationUpdatePlatformIdentityProvider builder with application/json body
func NewOrganizationUpdatePlatformIdentityProviderRequest(server string, organizationId string, identity string, body OrganizationUpdatePlatformIdentityProviderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOrganizationUpdatePlatformIdentityProviderRequestWithBody(server, organizationId, identity, "application/json", bodyReader)
}

// NewOrganizationUpdatePlatformIdentityProviderRequestWithBody generates requests for OrganizationUpdatePlatformIdentityProvider with any type of body
func NewOrganizationUpdatePlatformIdentityProviderRequestWithBody(server string, organizationId string, identity string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "identity", runtime.ParamLocationPath, identity)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/identities/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOrganizationListPlatformMembersRequest generates requests for OrganizationListPlatformMembers
func NewOrganizationListPlatformMembersRequest(server string, organizationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/members", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganizationAddOrUpdatePlatformMemberRequest calls the generic OrganizationAddOrUpdatePlatformMember builder with application/json body
func NewOrganizationAddOrUpdatePlatformMemberRequest(server string, organizationId string, body OrganizationAddOrUpdatePlatformMemberJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOrganizationAddOrUpdatePlatformMemberRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewOrganizationAddOrUpdatePlatformMemberRequestWithBody generates requests for OrganizationAddOrUpdatePlatformMember with any type of body
func NewOrganizationAddOrUpdatePlatformMemberRequestWithBody(server string, organizationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/members", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOrganizationRemovePlatformMemberRequest generates requests for OrganizationRemovePlatformMember
func NewOrganizationRemovePlatformMemberRequest(server string, organizationId string, member string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "member", runtime.ParamLocationPath, member)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/members/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganizationListPlatformRolesRequest generates requests for OrganizationListPlatformRoles
func NewOrganizationListPlatformRolesRequest(server string, organizationId string, params *OrganizationListPlatformRolesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/roles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganizationCreatePlatformRoleRequest calls the generic OrganizationCreatePlatformRole builder with application/json body
func NewOrganizationCreatePlatformRoleRequest(server string, organizationId string, body OrganizationCreatePlatformRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOrganizationCreatePlatformRoleRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewOrganizationCreatePlatformRoleRequestWithBody generates requests for OrganizationCreatePlatformRole with any type of body
func NewOrganizationCreatePlatformRoleRequestWithBody(server string, organizationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/roles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOrganizationDeletePlatformRoleRequest generates requests for OrganizationDeletePlatformRole
func NewOrganizationDeletePlatformRoleRequest(server string, organizationId string, role string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role", runtime.ParamLocationPath, role)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/roles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganizationGetPlatformRoleRequest generates requests for OrganizationGetPlatformRole
func NewOrganizationGetPlatformRoleRequest(server string, organizationId string, role string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role", runtime.ParamLocationPath, role)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/roles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganizationUpdatePlatformRoleRequest calls the generic OrganizationUpdatePlatformRole builder with application/json body
func NewOrganizationUpdatePlatformRoleRequest(server string, organizationId string, role string, body OrganizationUpdatePlatformRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOrganizationUpdatePlatformRoleRequestWithBody(server, organizationId, role, "application/json", bodyReader)
}

// NewOrganizationUpdatePlatformRoleRequestWithBody generates requests for OrganizationUpdatePlatformRole with any type of body
func NewOrganizationUpdatePlatformRoleRequestWithBody(server string, organizationId string, role string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role", runtime.ParamLocationPath, role)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/roles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOrganizationGetPlatformSettingsRequest generates requests for OrganizationGetPlatformSettings
func NewOrganizationGetPlatformSettingsRequest(server string, organizationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/settings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganizationUpdatePlatformSettingsRequest calls the generic OrganizationUpdatePlatformSettings builder with application/json body
func NewOrganizationUpdatePlatformSettingsRequest(server string, organizationId string, body OrganizationUpdatePlatformSettingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOrganizationUpdatePlatformSettingsRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewOrganizationUpdatePlatformSettingsRequestWithBody generates requests for OrganizationUpdatePlatformSettings with any type of body
func NewOrganizationUpdatePlatformSettingsRequestWithBody(server string, organizationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/settings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOrganizationListPlatformShardingTagsRequest generates requests for OrganizationListPlatformShardingTags
func NewOrganizationListPlatformShardingTagsRequest(server string, organizationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/tags", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganizationCreatePlatformShardingTagRequest calls the generic OrganizationCreatePlatformShardingTag builder with application/json body
func NewOrganizationCreatePlatformShardingTagRequest(server string, organizationId string, body OrganizationCreatePlatformShardingTagJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOrganizationCreatePlatformShardingTagRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewOrganizationCreatePlatformShardingTagRequestWithBody generates requests for OrganizationCreatePlatformShardingTag with any type of body
func NewOrganizationCreatePlatformShardingTagRequestWithBody(server string, organizationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/tags", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOrganizationDeletePlatformShardingTagRequest generates requests for OrganizationDeletePlatformShardingTag
func NewOrganizationDeletePlatformShardingTagRequest(server string, organizationId string, tag string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tag", runtime.ParamLocationPath, tag)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/tags/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganizationGetPlatformShardingTagRequest generates requests for OrganizationGetPlatformShardingTag
func NewOrganizationGetPlatformShardingTagRequest(server string, organizationId string, tag string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tag", runtime.ParamLocationPath, tag)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/tags/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganizationUpdatePlatformShardingTagRequest calls the generic OrganizationUpdatePlatformShardingTag builder with application/json body
func NewOrganizationUpdatePlatformShardingTagRequest(server string, organizationId string, tag string, body OrganizationUpdatePlatformShardingTagJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOrganizationUpdatePlatformShardingTagRequestWithBody(server, organizationId, tag, "application/json", bodyReader)
}

// NewOrganizationUpdatePlatformShardingTagRequestWithBody generates requests for OrganizationUpdatePlatformShardingTag with any type of body
func NewOrganizationUpdatePlatformShardingTagRequestWithBody(server string, organizationId string, tag string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tag", runtime.ParamLocationPath, tag)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/tags/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOrganizationListPlatformUsersRequest generates requests for OrganizationListPlatformUsers
func NewOrganizationListPlatformUsersRequest(server string, organizationId string, params *OrganizationListPlatformUsersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganizationCreatePlatformUserRequest calls the generic OrganizationCreatePlatformUser builder with application/json body
func NewOrganizationCreatePlatformUserRequest(server string, organizationId string, body OrganizationCreatePlatformUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOrganizationCreatePlatformUserRequestWithBody(server, organizationId, "application/json", bodyReader)
}

// NewOrganizationCreatePlatformUserRequestWithBody generates requests for OrganizationCreatePlatformUser with any type of body
func NewOrganizationCreatePlatformUserRequestWithBody(server string, organizationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOrganizationDeletePlatformUserRequest generates requests for OrganizationDeletePlatformUser
func NewOrganizationDeletePlatformUserRequest(server string, organizationId string, user string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganizationGetPlatformUserRequest generates requests for OrganizationGetPlatformUser
func NewOrganizationGetPlatformUserRequest(server string, organizationId string, user string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrganizationUpdatePlatformUserRequest calls the generic OrganizationUpdatePlatformUser builder with application/json body
func NewOrganizationUpdatePlatformUserRequest(server string, organizationId string, user string, body OrganizationUpdatePlatformUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOrganizationUpdatePlatformUserRequestWithBody(server, organizationId, user, "application/json", bodyReader)
}

// NewOrganizationUpdatePlatformUserRequestWithBody generates requests for OrganizationUpdatePlatformUser with any type of body
func NewOrganizationUpdatePlatformUserRequestWithBody(server string, organizationId string, user string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOrganizationResetPlatformUserPasswordRequestWithBody generates requests for OrganizationResetPlatformUserPassword with any type of body
func NewOrganizationResetPlatformUserPasswordRequestWithBody(server string, organizationId string, user string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users/%s/resetPassword", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOrganizationUpdatePlatformUserStatusRequest calls the generic OrganizationUpdatePlatformUserStatus builder with application/json body
func NewOrganizationUpdatePlatformUserStatusRequest(server string, organizationId string, user string, body OrganizationUpdatePlatformUserStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOrganizationUpdatePlatformUserStatusRequestWithBody(server, organizationId, user, "application/json", bodyReader)
}

// NewOrganizationUpdatePlatformUserStatusRequestWithBody generates requests for OrganizationUpdatePlatformUserStatus with any type of body
func NewOrganizationUpdatePlatformUserStatusRequestWithBody(server string, organizationId string, user string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users/%s/status", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOrganizationUpdatePlatformUserNameRequest calls the generic OrganizationUpdatePlatformUserName builder with application/json body
func NewOrganizationUpdatePlatformUserNameRequest(server string, organizationId string, user string, body OrganizationUpdatePlatformUserNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOrganizationUpdatePlatformUserNameRequestWithBody(server, organizationId, user, "application/json", bodyReader)
}

// NewOrganizationUpdatePlatformUserNameRequestWithBody generates requests for OrganizationUpdatePlatformUserName with any type of body
func NewOrganizationUpdatePlatformUserNameRequestWithBody(server string, organizationId string, user string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationId", runtime.ParamLocationPath, organizationId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user", runtime.ParamLocationPath, user)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/users/%s/username", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPlatformListAuditEventTypesRequest generates requests for PlatformListAuditEventTypes
func NewPlatformListAuditEventTypesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/audits/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlatformAlertStatusRequest generates requests for PlatformAlertStatus
func NewPlatformAlertStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/configuration/alerts/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlatformGetFlowSchemaRequest generates requests for PlatformGetFlowSchema
func NewPlatformGetFlowSchemaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/configuration/flow/schema")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlatformGetSpelGrammarRequest generates requests for PlatformGetSpelGrammar
func NewPlatformGetSpelGrammarRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/configuration/spel/grammar")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlatformGetInstallationRequest generates requests for PlatformGetInstallation
func NewPlatformGetInstallationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/installation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlatformListPluginAuthDeviceNotifiersRequest generates requests for PlatformListPluginAuthDeviceNotifiers
func NewPlatformListPluginAuthDeviceNotifiersRequest(server string, params *PlatformListPluginAuthDeviceNotifiersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/auth-device-notifiers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlatformGetPluginAuthDeviceNotifierRequest generates requests for PlatformGetPluginAuthDeviceNotifier
func NewPlatformGetPluginAuthDeviceNotifierRequest(server string, authDeviceNotifierId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "authDeviceNotifierId", runtime.ParamLocationPath, authDeviceNotifierId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/auth-device-notifiers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlatformGetPluginAuthDeviceNotifierSchemaRequest generates requests for PlatformGetPluginAuthDeviceNotifierSchema
func NewPlatformGetPluginAuthDeviceNotifierSchemaRequest(server string, authDeviceNotifierId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "authDeviceNotifierId", runtime.ParamLocationPath, authDeviceNotifierId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/auth-device-notifiers/%s/schema", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlatformListPluginBotDetectionsRequest generates requests for PlatformListPluginBotDetections
func NewPlatformListPluginBotDetectionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/bot-detections")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlatformGetPluginBotDetectionRequest generates requests for PlatformGetPluginBotDetection
func NewPlatformGetPluginBotDetectionRequest(server string, botDetection string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "botDetection", runtime.ParamLocationPath, botDetection)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/bot-detections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlatformGetPluginBotDetectionSchemaRequest generates requests for PlatformGetPluginBotDetectionSchema
func NewPlatformGetPluginBotDetectionSchemaRequest(server string, botDetection string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "botDetection", runtime.ParamLocationPath, botDetection)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/bot-detections/%s/schema", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlatformListPluginCertificatesRequest generates requests for PlatformListPluginCertificates
func NewPlatformListPluginCertificatesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/certificates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlatformGetPluginCertificateRequest generates requests for PlatformGetPluginCertificate
func NewPlatformGetPluginCertificateRequest(server string, certificate string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "certificate", runtime.ParamLocationPath, certificate)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/certificates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlatformGetPluginCertificateSchemaRequest generates requests for PlatformGetPluginCertificateSchema
func NewPlatformGetPluginCertificateSchemaRequest(server string, certificate string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "certificate", runtime.ParamLocationPath, certificate)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/certificates/%s/schema", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlatformListDeviceIdentifierPluginsRequest generates requests for PlatformListDeviceIdentifierPlugins
func NewPlatformListDeviceIdentifierPluginsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/device-identifiers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlatformGetDeviceIdentifierPluginRequest generates requests for PlatformGetDeviceIdentifierPlugin
func NewPlatformGetDeviceIdentifierPluginRequest(server string, deviceIdentifier string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceIdentifier", runtime.ParamLocationPath, deviceIdentifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/device-identifiers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlatformGetDeviceIdentifierPluginSchemaRequest generates requests for PlatformGetDeviceIdentifierPluginSchema
func NewPlatformGetDeviceIdentifierPluginSchemaRequest(server string, deviceIdentifier string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deviceIdentifier", runtime.ParamLocationPath, deviceIdentifier)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/device-identifiers/%s/schema", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlatformListPluginExtensionGrantsRequest generates requests for PlatformListPluginExtensionGrants
func NewPlatformListPluginExtensionGrantsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/extensionGrants")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlatformGetPluginExtensionGrantRequest generates requests for PlatformGetPluginExtensionGrant
func NewPlatformGetPluginExtensionGrantRequest(server string, extensionGrant string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "extensionGrant", runtime.ParamLocationPath, extensionGrant)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/extensionGrants/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlatformGetPluginExtensionGrantSchemaRequest generates requests for PlatformGetPluginExtensionGrantSchema
func NewPlatformGetPluginExtensionGrantSchemaRequest(server string, extensionGrant string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "extensionGrant", runtime.ParamLocationPath, extensionGrant)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/extensionGrants/%s/schema", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlatformListPluginFactorsRequest generates requests for PlatformListPluginFactors
func NewPlatformListPluginFactorsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/factors")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlatformGetPluginFactorRequest generates requests for PlatformGetPluginFactor
func NewPlatformGetPluginFactorRequest(server string, factor string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "factor", runtime.ParamLocationPath, factor)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/factors/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlatformGetPluginFactorSchemaRequest generates requests for PlatformGetPluginFactorSchema
func NewPlatformGetPluginFactorSchemaRequest(server string, factor string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "factor", runtime.ParamLocationPath, factor)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/factors/%s/schema", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlatformListProviderPluginsRequest generates requests for PlatformListProviderPlugins
func NewPlatformListProviderPluginsRequest(server string, params *PlatformListProviderPluginsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/identities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.External != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external", runtime.ParamLocationQuery, *params.External); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlatformGetIdentityProviderPluginRequest generates requests for PlatformGetIdentityProviderPlugin
func NewPlatformGetIdentityProviderPluginRequest(server string, identity string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identity", runtime.ParamLocationPath, identity)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/identities/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlatformGetIdentityProviderPluginSchemaRequest generates requests for PlatformGetIdentityProviderPluginSchema
func NewPlatformGetIdentityProviderPluginSchemaRequest(server string, identity string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "identity", runtime.ParamLocationPath, identity)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/identities/%s/schema", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlatformListPluginNotifiersRequest generates requests for PlatformListPluginNotifiers
func NewPlatformListPluginNotifiersRequest(server string, params *PlatformListPluginNotifiersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/notifiers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlatformGetPluginNotifierRequest generates requests for PlatformGetPluginNotifier
func NewPlatformGetPluginNotifierRequest(server string, notifierId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "notifierId", runtime.ParamLocationPath, notifierId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/notifiers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlatformGetPluginNotifierSchemaRequest generates requests for PlatformGetPluginNotifierSchema
func NewPlatformGetPluginNotifierSchemaRequest(server string, notifierId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "notifierId", runtime.ParamLocationPath, notifierId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/notifiers/%s/schema", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlatformListPluginPoliciesRequest generates requests for PlatformListPluginPolicies
func NewPlatformListPluginPoliciesRequest(server string, params *PlatformListPluginPoliciesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlatformGetPluginPolicyRequest generates requests for PlatformGetPluginPolicy
func NewPlatformGetPluginPolicyRequest(server string, policy string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policy", runtime.ParamLocationPath, policy)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlatformGetPluginPolicyDocumentationRequest generates requests for PlatformGetPluginPolicyDocumentation
func NewPlatformGetPluginPolicyDocumentationRequest(server string, policy string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policy", runtime.ParamLocationPath, policy)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/policies/%s/documentation", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlatformGetPluginPolicySchemaRequest generates requests for PlatformGetPluginPolicySchema
func NewPlatformGetPluginPolicySchemaRequest(server string, policy string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policy", runtime.ParamLocationPath, policy)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/policies/%s/schema", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlatformListPluginReportersRequest generates requests for PlatformListPluginReporters
func NewPlatformListPluginReportersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/reporters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlatformGetPluginReporterRequest generates requests for PlatformGetPluginReporter
func NewPlatformGetPluginReporterRequest(server string, reporter string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "reporter", runtime.ParamLocationPath, reporter)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/reporters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlatformGetPluginReporterSchemaRequest generates requests for PlatformGetPluginReporterSchema
func NewPlatformGetPluginReporterSchemaRequest(server string, reporter string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "reporter", runtime.ParamLocationPath, reporter)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/reporters/%s/schema", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlatformListPluginResourcesRequest generates requests for PlatformListPluginResources
func NewPlatformListPluginResourcesRequest(server string, params *PlatformListPluginResourcesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/resources")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlatformGetPluginResourceRequest generates requests for PlatformGetPluginResource
func NewPlatformGetPluginResourceRequest(server string, resource string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resource", runtime.ParamLocationPath, resource)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/resources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlatformGetPluginResourceSchemaRequest generates requests for PlatformGetPluginResourceSchema
func NewPlatformGetPluginResourceSchemaRequest(server string, resource string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resource", runtime.ParamLocationPath, resource)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/plugins/resources/%s/schema", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlatformRoleRequest generates requests for PlatformRole
func NewPlatformRoleRequest(server string, role string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "role", runtime.ParamLocationPath, role)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/platform/roles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCurrentUserGetRequest generates requests for CurrentUserGet
func NewCurrentUserGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCurrentUserSubscribeNewsletterRequestWithBody generates requests for CurrentUserSubscribeNewsletter with any type of body
func NewCurrentUserSubscribeNewsletterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/newsletter/_subscribe")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCurrentUserGetNewsletterTaglinesRequest generates requests for CurrentUserGetNewsletterTaglines
func NewCurrentUserGetNewsletterTaglinesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/newsletter/taglines")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCurrentUserListNotificationsRequest generates requests for CurrentUserListNotifications
func NewCurrentUserListNotificationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/notifications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCurrentUserMarkNotificationAsReadRequest generates requests for CurrentUserMarkNotificationAsRead
func NewCurrentUserMarkNotificationAsReadRequest(server string, notificationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "notificationId", runtime.ParamLocationPath, notificationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/notifications/%s/acknowledge", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AuthTokenExchangeWithResponse request
	AuthTokenExchangeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AuthTokenExchangeResponse, error)

	// OrganizationListPlatformAuditsWithResponse request
	OrganizationListPlatformAuditsWithResponse(ctx context.Context, organizationId string, params *OrganizationListPlatformAuditsParams, reqEditors ...RequestEditorFn) (*OrganizationListPlatformAuditsResponse, error)

	// OrganizationGetPlatformAuditWithResponse request
	OrganizationGetPlatformAuditWithResponse(ctx context.Context, organizationId string, audit string, reqEditors ...RequestEditorFn) (*OrganizationGetPlatformAuditResponse, error)

	// OrganizationListEntrypointsWithResponse request
	OrganizationListEntrypointsWithResponse(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*OrganizationListEntrypointsResponse, error)

	// Create14WithBodyWithResponse request with any body
	Create14WithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Create14Response, error)

	Create14WithResponse(ctx context.Context, organizationId string, body Create14JSONRequestBody, reqEditors ...RequestEditorFn) (*Create14Response, error)

	// OrganizationDeleteEntrypointWithResponse request
	OrganizationDeleteEntrypointWithResponse(ctx context.Context, organizationId string, entrypointId string, reqEditors ...RequestEditorFn) (*OrganizationDeleteEntrypointResponse, error)

	// OrganizationGetEntrypointWithResponse request
	OrganizationGetEntrypointWithResponse(ctx context.Context, organizationId string, entrypointId string, reqEditors ...RequestEditorFn) (*OrganizationGetEntrypointResponse, error)

	// OrganizationUpdateEntrypointWithBodyWithResponse request with any body
	OrganizationUpdateEntrypointWithBodyWithResponse(ctx context.Context, organizationId string, entrypointId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganizationUpdateEntrypointResponse, error)

	OrganizationUpdateEntrypointWithResponse(ctx context.Context, organizationId string, entrypointId string, body OrganizationUpdateEntrypointJSONRequestBody, reqEditors ...RequestEditorFn) (*OrganizationUpdateEntrypointResponse, error)

	// OrganizationListPlatfomEnvironmentsWithResponse request
	OrganizationListPlatfomEnvironmentsWithResponse(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*OrganizationListPlatfomEnvironmentsResponse, error)

	// EnvironmentListDomainsWithResponse request
	EnvironmentListDomainsWithResponse(ctx context.Context, organizationId string, environmentId string, params *EnvironmentListDomainsParams, reqEditors ...RequestEditorFn) (*EnvironmentListDomainsResponse, error)

	// EnvironmentCreateDomainWithBodyWithResponse request with any body
	EnvironmentCreateDomainWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainResponse, error)

	EnvironmentCreateDomainWithResponse(ctx context.Context, organizationId string, environmentId string, body EnvironmentCreateDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainResponse, error)

	// DomainGetByHridWithResponse request
	DomainGetByHridWithResponse(ctx context.Context, organizationId string, environmentId string, hrid string, reqEditors ...RequestEditorFn) (*DomainGetByHridResponse, error)

	// DomainDeleteWithResponse request
	DomainDeleteWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*DomainDeleteResponse, error)

	// DomainGetWithResponse request
	DomainGetWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*DomainGetResponse, error)

	// EnvironmentPatchDomainWithBodyWithResponse request with any body
	EnvironmentPatchDomainWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentPatchDomainResponse, error)

	EnvironmentPatchDomainWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentPatchDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentPatchDomainResponse, error)

	// DomainUpdateWithBodyWithResponse request with any body
	DomainUpdateWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainUpdateResponse, error)

	DomainUpdateWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body DomainUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainUpdateResponse, error)

	// EnvironmentListDomainAlertNotifiersWithResponse request
	EnvironmentListDomainAlertNotifiersWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*EnvironmentListDomainAlertNotifiersResponse, error)

	// EnvironmentCreateDomainAlertNotifierWithBodyWithResponse request with any body
	EnvironmentCreateDomainAlertNotifierWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainAlertNotifierResponse, error)

	EnvironmentCreateDomainAlertNotifierWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainAlertNotifierJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainAlertNotifierResponse, error)

	// DomainDeleteAlertNotifierWithResponse request
	DomainDeleteAlertNotifierWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, notifierId string, reqEditors ...RequestEditorFn) (*DomainDeleteAlertNotifierResponse, error)

	// DomainGetAlertNotifierWithResponse request
	DomainGetAlertNotifierWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, notifierId string, reqEditors ...RequestEditorFn) (*DomainGetAlertNotifierResponse, error)

	// EnvironmentPatchDomainAlertNotifierWithBodyWithResponse request with any body
	EnvironmentPatchDomainAlertNotifierWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, notifierId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentPatchDomainAlertNotifierResponse, error)

	EnvironmentPatchDomainAlertNotifierWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, notifierId string, body EnvironmentPatchDomainAlertNotifierJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentPatchDomainAlertNotifierResponse, error)

	// EnvironmentListDomainAlertTriggersWithResponse request
	EnvironmentListDomainAlertTriggersWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*EnvironmentListDomainAlertTriggersResponse, error)

	// EnvironmentPatchDomainAlertTriggersWithBodyWithResponse request with any body
	EnvironmentPatchDomainAlertTriggersWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentPatchDomainAlertTriggersResponse, error)

	EnvironmentPatchDomainAlertTriggersWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentPatchDomainAlertTriggersJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentPatchDomainAlertTriggersResponse, error)

	// DomainGetAnalyticsWithResponse request
	DomainGetAnalyticsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *DomainGetAnalyticsParams, reqEditors ...RequestEditorFn) (*DomainGetAnalyticsResponse, error)

	// EnvironmentListDomainApplicationsWithResponse request
	EnvironmentListDomainApplicationsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *EnvironmentListDomainApplicationsParams, reqEditors ...RequestEditorFn) (*EnvironmentListDomainApplicationsResponse, error)

	// EnvironmentCreateDomainApplicationWithBodyWithResponse request with any body
	EnvironmentCreateDomainApplicationWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainApplicationResponse, error)

	EnvironmentCreateDomainApplicationWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainApplicationResponse, error)

	// DomainDeleteApplicationWithResponse request
	DomainDeleteApplicationWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*DomainDeleteApplicationResponse, error)

	// ApplicationGetDomainApplicationWithResponse request
	ApplicationGetDomainApplicationWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*ApplicationGetDomainApplicationResponse, error)

	// EnvironmentPatchDomainApplicationWithBodyWithResponse request with any body
	EnvironmentPatchDomainApplicationWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentPatchDomainApplicationResponse, error)

	EnvironmentPatchDomainApplicationWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, body EnvironmentPatchDomainApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentPatchDomainApplicationResponse, error)

	// DomainUpdateApplicationWithBodyWithResponse request with any body
	DomainUpdateApplicationWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainUpdateApplicationResponse, error)

	DomainUpdateApplicationWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, body DomainUpdateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainUpdateApplicationResponse, error)

	// ApplicationGetAnalyticsWithResponse request
	ApplicationGetAnalyticsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, params *ApplicationGetAnalyticsParams, reqEditors ...RequestEditorFn) (*ApplicationGetAnalyticsResponse, error)

	// ApplicationListEmailsWithResponse request
	ApplicationListEmailsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, params *ApplicationListEmailsParams, reqEditors ...RequestEditorFn) (*ApplicationListEmailsResponse, error)

	// ApplicationCreateEmailWithBodyWithResponse request with any body
	ApplicationCreateEmailWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApplicationCreateEmailResponse, error)

	ApplicationCreateEmailWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, body ApplicationCreateEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*ApplicationCreateEmailResponse, error)

	// ApplicationDeleteEmailWithResponse request
	ApplicationDeleteEmailWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, email string, reqEditors ...RequestEditorFn) (*ApplicationDeleteEmailResponse, error)

	// ApplicationUpdateEmailWithBodyWithResponse request with any body
	ApplicationUpdateEmailWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, email string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApplicationUpdateEmailResponse, error)

	ApplicationUpdateEmailWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, email string, body ApplicationUpdateEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*ApplicationUpdateEmailResponse, error)

	// ApplicationListFlowsWithResponse request
	ApplicationListFlowsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*ApplicationListFlowsResponse, error)

	// ApplicationCreateFlowWithBodyWithResponse request with any body
	ApplicationCreateFlowWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApplicationCreateFlowResponse, error)

	ApplicationCreateFlowWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, body ApplicationCreateFlowJSONRequestBody, reqEditors ...RequestEditorFn) (*ApplicationCreateFlowResponse, error)

	// ApplicationGetFlowWithResponse request
	ApplicationGetFlowWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, flow string, reqEditors ...RequestEditorFn) (*ApplicationGetFlowResponse, error)

	// ApplicationUpdateFlowWithBodyWithResponse request with any body
	ApplicationUpdateFlowWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, flow string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApplicationUpdateFlowResponse, error)

	ApplicationUpdateFlowWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, flow string, body ApplicationUpdateFlowJSONRequestBody, reqEditors ...RequestEditorFn) (*ApplicationUpdateFlowResponse, error)

	// ApplicationListFormsWithResponse request
	ApplicationListFormsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, params *ApplicationListFormsParams, reqEditors ...RequestEditorFn) (*ApplicationListFormsResponse, error)

	// ApplicationCreateFormWithBodyWithResponse request with any body
	ApplicationCreateFormWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApplicationCreateFormResponse, error)

	ApplicationCreateFormWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, body ApplicationCreateFormJSONRequestBody, reqEditors ...RequestEditorFn) (*ApplicationCreateFormResponse, error)

	// ApplicationDeleteFormWithResponse request
	ApplicationDeleteFormWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, form string, reqEditors ...RequestEditorFn) (*ApplicationDeleteFormResponse, error)

	// ApplicationUpdateFormWithBodyWithResponse request with any body
	ApplicationUpdateFormWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, form string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApplicationUpdateFormResponse, error)

	ApplicationUpdateFormWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, form string, body ApplicationUpdateFormJSONRequestBody, reqEditors ...RequestEditorFn) (*ApplicationUpdateFormResponse, error)

	// ApplicationListMembersWithResponse request
	ApplicationListMembersWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*ApplicationListMembersResponse, error)

	// ApplicationAddOrUpdateMemberWithBodyWithResponse request with any body
	ApplicationAddOrUpdateMemberWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApplicationAddOrUpdateMemberResponse, error)

	ApplicationAddOrUpdateMemberWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, body ApplicationAddOrUpdateMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*ApplicationAddOrUpdateMemberResponse, error)

	// ApplicationListMemberPermissionsWithResponse request
	ApplicationListMemberPermissionsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*ApplicationListMemberPermissionsResponse, error)

	// ApplicationDeleteMemberWithResponse request
	ApplicationDeleteMemberWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, member string, reqEditors ...RequestEditorFn) (*ApplicationDeleteMemberResponse, error)

	// ApplicationListResourcesWithResponse request
	ApplicationListResourcesWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, params *ApplicationListResourcesParams, reqEditors ...RequestEditorFn) (*ApplicationListResourcesResponse, error)

	// ApplicationGetResourceWithResponse request
	ApplicationGetResourceWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, resource string, reqEditors ...RequestEditorFn) (*ApplicationGetResourceResponse, error)

	// ApplicationGetResourceAccessPoliciesWithResponse request
	ApplicationGetResourceAccessPoliciesWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, resource string, reqEditors ...RequestEditorFn) (*ApplicationGetResourceAccessPoliciesResponse, error)

	// ApplicationGetResourceAccessPolicyWithResponse request
	ApplicationGetResourceAccessPolicyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, resource string, policy string, reqEditors ...RequestEditorFn) (*ApplicationGetResourceAccessPolicyResponse, error)

	// ApplicationRenewSecretWithResponse request
	ApplicationRenewSecretWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*ApplicationRenewSecretResponse, error)

	// ApplicationUpdateTypeWithBodyWithResponse request with any body
	ApplicationUpdateTypeWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApplicationUpdateTypeResponse, error)

	ApplicationUpdateTypeWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, body ApplicationUpdateTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*ApplicationUpdateTypeResponse, error)

	// EnvironmentListDomainAuditsWithResponse request
	EnvironmentListDomainAuditsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *EnvironmentListDomainAuditsParams, reqEditors ...RequestEditorFn) (*EnvironmentListDomainAuditsResponse, error)

	// DomainGetAuditWithResponse request
	DomainGetAuditWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, audit string, reqEditors ...RequestEditorFn) (*DomainGetAuditResponse, error)

	// EnvironmentListDomainAuthDeviceNotifierWithResponse request
	EnvironmentListDomainAuthDeviceNotifierWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*EnvironmentListDomainAuthDeviceNotifierResponse, error)

	// EnvironmentCreateDomainAuthDeviceNotifiersWithBodyWithResponse request with any body
	EnvironmentCreateDomainAuthDeviceNotifiersWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainAuthDeviceNotifiersResponse, error)

	EnvironmentCreateDomainAuthDeviceNotifiersWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainAuthDeviceNotifiersJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainAuthDeviceNotifiersResponse, error)

	// DomainDeleteAuthDeviceNotifierWithResponse request
	DomainDeleteAuthDeviceNotifierWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, authDeviceNotifier string, reqEditors ...RequestEditorFn) (*DomainDeleteAuthDeviceNotifierResponse, error)

	// DomainGetAuthDeviceNotifierWithResponse request
	DomainGetAuthDeviceNotifierWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, authDeviceNotifier string, reqEditors ...RequestEditorFn) (*DomainGetAuthDeviceNotifierResponse, error)

	// DomainUpdateAuthDeviceNotifierWithBodyWithResponse request with any body
	DomainUpdateAuthDeviceNotifierWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, authDeviceNotifier string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainUpdateAuthDeviceNotifierResponse, error)

	DomainUpdateAuthDeviceNotifierWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, authDeviceNotifier string, body DomainUpdateAuthDeviceNotifierJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainUpdateAuthDeviceNotifierResponse, error)

	// EnvironmentListDomainBotDetectionsWithResponse request
	EnvironmentListDomainBotDetectionsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*EnvironmentListDomainBotDetectionsResponse, error)

	// EnvironmentCreateDomainBotDetectionWithBodyWithResponse request with any body
	EnvironmentCreateDomainBotDetectionWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainBotDetectionResponse, error)

	EnvironmentCreateDomainBotDetectionWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainBotDetectionJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainBotDetectionResponse, error)

	// DomainDeleteBotDetectionWithResponse request
	DomainDeleteBotDetectionWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, botDetection string, reqEditors ...RequestEditorFn) (*DomainDeleteBotDetectionResponse, error)

	// DomainGetBotDetectionWithResponse request
	DomainGetBotDetectionWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, botDetection string, reqEditors ...RequestEditorFn) (*DomainGetBotDetectionResponse, error)

	// DomainUpdateBotDetectionWithBodyWithResponse request with any body
	DomainUpdateBotDetectionWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, botDetection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainUpdateBotDetectionResponse, error)

	DomainUpdateBotDetectionWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, botDetection string, body DomainUpdateBotDetectionJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainUpdateBotDetectionResponse, error)

	// EnvironmentListDomainCertificatesWithResponse request
	EnvironmentListDomainCertificatesWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *EnvironmentListDomainCertificatesParams, reqEditors ...RequestEditorFn) (*EnvironmentListDomainCertificatesResponse, error)

	// EnvironmentCreateDomainCertificateWithBodyWithResponse request with any body
	EnvironmentCreateDomainCertificateWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainCertificateResponse, error)

	EnvironmentCreateDomainCertificateWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainCertificateJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainCertificateResponse, error)

	// EnvironmentRotateDomainCertificateWithResponse request
	EnvironmentRotateDomainCertificateWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*EnvironmentRotateDomainCertificateResponse, error)

	// DomainDeleteCertificateWithResponse request
	DomainDeleteCertificateWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, reqEditors ...RequestEditorFn) (*DomainDeleteCertificateResponse, error)

	// DomainGetCertificateWithResponse request
	DomainGetCertificateWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, reqEditors ...RequestEditorFn) (*DomainGetCertificateResponse, error)

	// DomainUpdateCertificateWithBodyWithResponse request with any body
	DomainUpdateCertificateWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainUpdateCertificateResponse, error)

	DomainUpdateCertificateWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, body DomainUpdateCertificateJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainUpdateCertificateResponse, error)

	// DomainGetCertificatePublicKeyWithResponse request
	DomainGetCertificatePublicKeyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, reqEditors ...RequestEditorFn) (*DomainGetCertificatePublicKeyResponse, error)

	// EnvironmentListDomainCertificatePublicKeysWithResponse request
	EnvironmentListDomainCertificatePublicKeysWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, reqEditors ...RequestEditorFn) (*EnvironmentListDomainCertificatePublicKeysResponse, error)

	// EnvironmentListDomainDeviceIdentifiersWithResponse request
	EnvironmentListDomainDeviceIdentifiersWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*EnvironmentListDomainDeviceIdentifiersResponse, error)

	// EnvironmentCreateDomainDeviceIdentifierWithBodyWithResponse request with any body
	EnvironmentCreateDomainDeviceIdentifierWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainDeviceIdentifierResponse, error)

	EnvironmentCreateDomainDeviceIdentifierWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainDeviceIdentifierJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainDeviceIdentifierResponse, error)

	// DomainDeleteDeviceIdentifierWithResponse request
	DomainDeleteDeviceIdentifierWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, deviceIdentifier string, reqEditors ...RequestEditorFn) (*DomainDeleteDeviceIdentifierResponse, error)

	// DomainGetDeviceIdentifierWithResponse request
	DomainGetDeviceIdentifierWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, deviceIdentifier string, reqEditors ...RequestEditorFn) (*DomainGetDeviceIdentifierResponse, error)

	// DomainUpdateDeviceIdentifierWithBodyWithResponse request with any body
	DomainUpdateDeviceIdentifierWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, deviceIdentifier string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainUpdateDeviceIdentifierResponse, error)

	DomainUpdateDeviceIdentifierWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, deviceIdentifier string, body DomainUpdateDeviceIdentifierJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainUpdateDeviceIdentifierResponse, error)

	// EnvironmentListDomainEmailsWithResponse request
	EnvironmentListDomainEmailsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *EnvironmentListDomainEmailsParams, reqEditors ...RequestEditorFn) (*EnvironmentListDomainEmailsResponse, error)

	// EnvironmentCreateDomainEmailWithBodyWithResponse request with any body
	EnvironmentCreateDomainEmailWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainEmailResponse, error)

	EnvironmentCreateDomainEmailWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainEmailResponse, error)

	// DomainDeleteEmailWithResponse request
	DomainDeleteEmailWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, email string, reqEditors ...RequestEditorFn) (*DomainDeleteEmailResponse, error)

	// DomainUpdateEmailWithBodyWithResponse request with any body
	DomainUpdateEmailWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, email string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainUpdateEmailResponse, error)

	DomainUpdateEmailWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, email string, body DomainUpdateEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainUpdateEmailResponse, error)

	// DomainGetEntrypointsWithResponse request
	DomainGetEntrypointsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*DomainGetEntrypointsResponse, error)

	// EnvironmentListDomainExtensionGrantsWithResponse request
	EnvironmentListDomainExtensionGrantsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*EnvironmentListDomainExtensionGrantsResponse, error)

	// EnvironmentCreateDomainExtensionGrantWithBodyWithResponse request with any body
	EnvironmentCreateDomainExtensionGrantWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainExtensionGrantResponse, error)

	EnvironmentCreateDomainExtensionGrantWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainExtensionGrantJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainExtensionGrantResponse, error)

	// DomainDeleteExtensionGrantWithResponse request
	DomainDeleteExtensionGrantWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, extensionGrant string, reqEditors ...RequestEditorFn) (*DomainDeleteExtensionGrantResponse, error)

	// DomainGetExtensionGrantWithResponse request
	DomainGetExtensionGrantWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, extensionGrant string, reqEditors ...RequestEditorFn) (*DomainGetExtensionGrantResponse, error)

	// DomainUpdateExtensionGrantWithBodyWithResponse request with any body
	DomainUpdateExtensionGrantWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, extensionGrant string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainUpdateExtensionGrantResponse, error)

	DomainUpdateExtensionGrantWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, extensionGrant string, body DomainUpdateExtensionGrantJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainUpdateExtensionGrantResponse, error)

	// EnvironmentListDomainFactorsWithResponse request
	EnvironmentListDomainFactorsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*EnvironmentListDomainFactorsResponse, error)

	// EnvironmentCreateDomainFactorWithBodyWithResponse request with any body
	EnvironmentCreateDomainFactorWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainFactorResponse, error)

	EnvironmentCreateDomainFactorWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainFactorJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainFactorResponse, error)

	// DomainDeleteFactorWithResponse request
	DomainDeleteFactorWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, factor string, reqEditors ...RequestEditorFn) (*DomainDeleteFactorResponse, error)

	// DomainGetFactorWithResponse request
	DomainGetFactorWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, factor string, reqEditors ...RequestEditorFn) (*DomainGetFactorResponse, error)

	// DomainUpdateFactorWithBodyWithResponse request with any body
	DomainUpdateFactorWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, factor string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainUpdateFactorResponse, error)

	DomainUpdateFactorWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, factor string, body DomainUpdateFactorJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainUpdateFactorResponse, error)

	// EnvironmentListDomainFlowsWithResponse request
	EnvironmentListDomainFlowsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*EnvironmentListDomainFlowsResponse, error)

	// EnvironmentCreateOrUpdateDomainFlowsWithBodyWithResponse request with any body
	EnvironmentCreateOrUpdateDomainFlowsWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentCreateOrUpdateDomainFlowsResponse, error)

	EnvironmentCreateOrUpdateDomainFlowsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateOrUpdateDomainFlowsJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentCreateOrUpdateDomainFlowsResponse, error)

	// DomainGetFlowWithResponse request
	DomainGetFlowWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, flow string, reqEditors ...RequestEditorFn) (*DomainGetFlowResponse, error)

	// DomainUpdateFlowWithBodyWithResponse request with any body
	DomainUpdateFlowWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, flow string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainUpdateFlowResponse, error)

	DomainUpdateFlowWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, flow string, body DomainUpdateFlowJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainUpdateFlowResponse, error)

	// EnvironmentListDomainFormsWithResponse request
	EnvironmentListDomainFormsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *EnvironmentListDomainFormsParams, reqEditors ...RequestEditorFn) (*EnvironmentListDomainFormsResponse, error)

	// EnvironmentCreateDomainFormWithBodyWithResponse request with any body
	EnvironmentCreateDomainFormWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainFormResponse, error)

	EnvironmentCreateDomainFormWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainFormJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainFormResponse, error)

	// EnvironmentPreviewDomainFormWithBodyWithResponse request with any body
	EnvironmentPreviewDomainFormWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentPreviewDomainFormResponse, error)

	EnvironmentPreviewDomainFormWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentPreviewDomainFormJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentPreviewDomainFormResponse, error)

	// DomainDeleteFormWithResponse request
	DomainDeleteFormWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, form string, reqEditors ...RequestEditorFn) (*DomainDeleteFormResponse, error)

	// DomainUpdateFormWithBodyWithResponse request with any body
	DomainUpdateFormWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, form string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainUpdateFormResponse, error)

	DomainUpdateFormWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, form string, body DomainUpdateFormJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainUpdateFormResponse, error)

	// EnvironmentListDomainGroupsWithResponse request
	EnvironmentListDomainGroupsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *EnvironmentListDomainGroupsParams, reqEditors ...RequestEditorFn) (*EnvironmentListDomainGroupsResponse, error)

	// EnvironmentCreateDomainGroupWithBodyWithResponse request with any body
	EnvironmentCreateDomainGroupWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainGroupResponse, error)

	EnvironmentCreateDomainGroupWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainGroupResponse, error)

	// DomainDeleteGroupWithResponse request
	DomainDeleteGroupWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, group string, reqEditors ...RequestEditorFn) (*DomainDeleteGroupResponse, error)

	// DomainGetGroupWithResponse request
	DomainGetGroupWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, group string, reqEditors ...RequestEditorFn) (*DomainGetGroupResponse, error)

	// DomainUpdateGroupWithBodyWithResponse request with any body
	DomainUpdateGroupWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, group string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainUpdateGroupResponse, error)

	DomainUpdateGroupWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, group string, body DomainUpdateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainUpdateGroupResponse, error)

	// DomainGetGroupMemebersWithResponse request
	DomainGetGroupMemebersWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, group string, params *DomainGetGroupMemebersParams, reqEditors ...RequestEditorFn) (*DomainGetGroupMemebersResponse, error)

	// EnvironmentRemoveDomainGroupMemeberWithResponse request
	EnvironmentRemoveDomainGroupMemeberWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, group string, member string, reqEditors ...RequestEditorFn) (*EnvironmentRemoveDomainGroupMemeberResponse, error)

	// DomainAddOrUpdateGroupMemeberWithResponse request
	DomainAddOrUpdateGroupMemeberWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, group string, member string, reqEditors ...RequestEditorFn) (*DomainAddOrUpdateGroupMemeberResponse, error)

	// EnvironmentListDomainGroupRolesWithResponse request
	EnvironmentListDomainGroupRolesWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, group string, reqEditors ...RequestEditorFn) (*EnvironmentListDomainGroupRolesResponse, error)

	// EnvironmentAddDomainGroupRoleWithBodyWithResponse request with any body
	EnvironmentAddDomainGroupRoleWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, group string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentAddDomainGroupRoleResponse, error)

	EnvironmentAddDomainGroupRoleWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, group string, body EnvironmentAddDomainGroupRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentAddDomainGroupRoleResponse, error)

	// EnvironmentRemoveDomainGroupRoleWithResponse request
	EnvironmentRemoveDomainGroupRoleWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, group string, role string, reqEditors ...RequestEditorFn) (*EnvironmentRemoveDomainGroupRoleResponse, error)

	// EnvironmentListDomainDictionariesWithResponse request
	EnvironmentListDomainDictionariesWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*EnvironmentListDomainDictionariesResponse, error)

	// EnvironmentCreateDomainDictionaryWithBodyWithResponse request with any body
	EnvironmentCreateDomainDictionaryWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainDictionaryResponse, error)

	// DomainDeleteDictionaryWithResponse request
	DomainDeleteDictionaryWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, dictionary string, reqEditors ...RequestEditorFn) (*DomainDeleteDictionaryResponse, error)

	// DomainGetDictionaryWithResponse request
	DomainGetDictionaryWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, dictionary string, reqEditors ...RequestEditorFn) (*DomainGetDictionaryResponse, error)

	// DomainUpdateDictionaryWithBodyWithResponse request with any body
	DomainUpdateDictionaryWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, dictionary string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainUpdateDictionaryResponse, error)

	// DomainUpdateDictionaryEntriesWithBodyWithResponse request with any body
	DomainUpdateDictionaryEntriesWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, dictionary string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainUpdateDictionaryEntriesResponse, error)

	// EnvironmentListDomainIdentityProvidersWithResponse request
	EnvironmentListDomainIdentityProvidersWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *EnvironmentListDomainIdentityProvidersParams, reqEditors ...RequestEditorFn) (*EnvironmentListDomainIdentityProvidersResponse, error)

	// EnvironmentCreateDomainIdentityProviderWithBodyWithResponse request with any body
	EnvironmentCreateDomainIdentityProviderWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainIdentityProviderResponse, error)

	EnvironmentCreateDomainIdentityProviderWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainIdentityProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainIdentityProviderResponse, error)

	// DomainDeleteIdentityProviderWithResponse request
	DomainDeleteIdentityProviderWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, identity string, reqEditors ...RequestEditorFn) (*DomainDeleteIdentityProviderResponse, error)

	// DomainGetIdentityProviderWithResponse request
	DomainGetIdentityProviderWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, identity string, reqEditors ...RequestEditorFn) (*DomainGetIdentityProviderResponse, error)

	// DomainUpdateIdentityProviderWithBodyWithResponse request with any body
	DomainUpdateIdentityProviderWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, identity string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainUpdateIdentityProviderResponse, error)

	DomainUpdateIdentityProviderWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, identity string, body DomainUpdateIdentityProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainUpdateIdentityProviderResponse, error)

	// EnvironmentListDomainMembersWithResponse request
	EnvironmentListDomainMembersWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*EnvironmentListDomainMembersResponse, error)

	// DomainAddOrUpdateMemberWithBodyWithResponse request with any body
	DomainAddOrUpdateMemberWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainAddOrUpdateMemberResponse, error)

	DomainAddOrUpdateMemberWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body DomainAddOrUpdateMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainAddOrUpdateMemberResponse, error)

	// EnvironmentListDomainMemberPermissionsWithResponse request
	EnvironmentListDomainMemberPermissionsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*EnvironmentListDomainMemberPermissionsResponse, error)

	// EnvironmentRemoveDomainMemberWithResponse request
	EnvironmentRemoveDomainMemberWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, member string, reqEditors ...RequestEditorFn) (*EnvironmentRemoveDomainMemberResponse, error)

	// EnvironmentListDomainReportersWithResponse request
	EnvironmentListDomainReportersWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *EnvironmentListDomainReportersParams, reqEditors ...RequestEditorFn) (*EnvironmentListDomainReportersResponse, error)

	// EnvironmentCreateDomainReporterWithBodyWithResponse request with any body
	EnvironmentCreateDomainReporterWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainReporterResponse, error)

	EnvironmentCreateDomainReporterWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainReporterJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainReporterResponse, error)

	// DomainDeleteReporterWithResponse request
	DomainDeleteReporterWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reporter string, reqEditors ...RequestEditorFn) (*DomainDeleteReporterResponse, error)

	// DomainGetReporterWithResponse request
	DomainGetReporterWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reporter string, reqEditors ...RequestEditorFn) (*DomainGetReporterResponse, error)

	// DomainUpdateReporterWithBodyWithResponse request with any body
	DomainUpdateReporterWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reporter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainUpdateReporterResponse, error)

	DomainUpdateReporterWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reporter string, body DomainUpdateReporterJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainUpdateReporterResponse, error)

	// EnvironmentListDomainResourcesWithResponse request
	EnvironmentListDomainResourcesWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*EnvironmentListDomainResourcesResponse, error)

	// EnvironmentCreateDomainResourceWithBodyWithResponse request with any body
	EnvironmentCreateDomainResourceWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainResourceResponse, error)

	EnvironmentCreateDomainResourceWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainResourceResponse, error)

	// DomainDeleteResourceWithResponse request
	DomainDeleteResourceWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, resource string, reqEditors ...RequestEditorFn) (*DomainDeleteResourceResponse, error)

	// DomainGetResourceWithResponse request
	DomainGetResourceWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, resource string, reqEditors ...RequestEditorFn) (*DomainGetResourceResponse, error)

	// DomainUpdateResourceWithBodyWithResponse request with any body
	DomainUpdateResourceWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, resource string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainUpdateResourceResponse, error)

	DomainUpdateResourceWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, resource string, body DomainUpdateResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainUpdateResourceResponse, error)

	// EnvironmentListDomainRolesWithResponse request
	EnvironmentListDomainRolesWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *EnvironmentListDomainRolesParams, reqEditors ...RequestEditorFn) (*EnvironmentListDomainRolesResponse, error)

	// EnvironmentCreateDomainMemberRoleWithBodyWithResponse request with any body
	EnvironmentCreateDomainMemberRoleWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainMemberRoleResponse, error)

	EnvironmentCreateDomainMemberRoleWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainMemberRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainMemberRoleResponse, error)

	// DomainDeleteRoleWithResponse request
	DomainDeleteRoleWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, role string, reqEditors ...RequestEditorFn) (*DomainDeleteRoleResponse, error)

	// DomainGetRoleWithResponse request
	DomainGetRoleWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, role string, reqEditors ...RequestEditorFn) (*DomainGetRoleResponse, error)

	// DomainUpdateRoleWithBodyWithResponse request with any body
	DomainUpdateRoleWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, role string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainUpdateRoleResponse, error)

	DomainUpdateRoleWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, role string, body DomainUpdateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainUpdateRoleResponse, error)

	// EnvironmentListDomainScopesWithResponse request
	EnvironmentListDomainScopesWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *EnvironmentListDomainScopesParams, reqEditors ...RequestEditorFn) (*EnvironmentListDomainScopesResponse, error)

	// EnvironmentCreateDomainScopeWithBodyWithResponse request with any body
	EnvironmentCreateDomainScopeWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainScopeResponse, error)

	EnvironmentCreateDomainScopeWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainScopeResponse, error)

	// DeleteScopeWithResponse request
	DeleteScopeWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, scope string, reqEditors ...RequestEditorFn) (*DeleteScopeResponse, error)

	// DomainGetScopeWithResponse request
	DomainGetScopeWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, scope string, reqEditors ...RequestEditorFn) (*DomainGetScopeResponse, error)

	// PatchScopeWithBodyWithResponse request with any body
	PatchScopeWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, scope string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchScopeResponse, error)

	PatchScopeWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, scope string, body PatchScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchScopeResponse, error)

	// UpdateScopeWithBodyWithResponse request with any body
	UpdateScopeWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, scope string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateScopeResponse, error)

	UpdateScopeWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, scope string, body UpdateScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateScopeResponse, error)

	// EnvironmentListDomainThemesWithResponse request
	EnvironmentListDomainThemesWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*EnvironmentListDomainThemesResponse, error)

	// EnvironmentCreateDomainThemeWithBodyWithResponse request with any body
	EnvironmentCreateDomainThemeWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainThemeResponse, error)

	EnvironmentCreateDomainThemeWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainThemeJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainThemeResponse, error)

	// DomainDeleteThemeWithResponse request
	DomainDeleteThemeWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, themeId string, reqEditors ...RequestEditorFn) (*DomainDeleteThemeResponse, error)

	// DomainGetThemeWithResponse request
	DomainGetThemeWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, themeId string, reqEditors ...RequestEditorFn) (*DomainGetThemeResponse, error)

	// DomainUpdateThemeWithBodyWithResponse request with any body
	DomainUpdateThemeWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, themeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainUpdateThemeResponse, error)

	DomainUpdateThemeWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, themeId string, body DomainUpdateThemeJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainUpdateThemeResponse, error)

	// EnvironmentListDomainUsersWithResponse request
	EnvironmentListDomainUsersWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *EnvironmentListDomainUsersParams, reqEditors ...RequestEditorFn) (*EnvironmentListDomainUsersResponse, error)

	// EnvironmentCreateDomainUserWithBodyWithResponse request with any body
	EnvironmentCreateDomainUserWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainUserResponse, error)

	EnvironmentCreateDomainUserWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainUserJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainUserResponse, error)

	// DomainDeleteUserWithResponse request
	DomainDeleteUserWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*DomainDeleteUserResponse, error)

	// DomainGetUserWithResponse request
	DomainGetUserWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*DomainGetUserResponse, error)

	// DomainUpdateUserWithBodyWithResponse request with any body
	DomainUpdateUserWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainUpdateUserResponse, error)

	DomainUpdateUserWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, body DomainUpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainUpdateUserResponse, error)

	// EnvironmentListDomainUserAuditsWithResponse request
	EnvironmentListDomainUserAuditsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, params *EnvironmentListDomainUserAuditsParams, reqEditors ...RequestEditorFn) (*EnvironmentListDomainUserAuditsResponse, error)

	// DomainGetUserAuditWithResponse request
	DomainGetUserAuditWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, audit string, reqEditors ...RequestEditorFn) (*DomainGetUserAuditResponse, error)

	// DomainDeleteUserConsentsWithResponse request
	DomainDeleteUserConsentsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, params *DomainDeleteUserConsentsParams, reqEditors ...RequestEditorFn) (*DomainDeleteUserConsentsResponse, error)

	// EnvironmentListDomainUserConsentsWithResponse request
	EnvironmentListDomainUserConsentsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, params *EnvironmentListDomainUserConsentsParams, reqEditors ...RequestEditorFn) (*EnvironmentListDomainUserConsentsResponse, error)

	// DomainDeleteUserConsentWithResponse request
	DomainDeleteUserConsentWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, consent string, reqEditors ...RequestEditorFn) (*DomainDeleteUserConsentResponse, error)

	// DomainGetUserConsentWithResponse request
	DomainGetUserConsentWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, consent string, reqEditors ...RequestEditorFn) (*DomainGetUserConsentResponse, error)

	// EnvironmentListDomainUserCredentialsWithResponse request
	EnvironmentListDomainUserCredentialsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*EnvironmentListDomainUserCredentialsResponse, error)

	// DomainDeleteUserCredentialWithResponse request
	DomainDeleteUserCredentialWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, credential string, reqEditors ...RequestEditorFn) (*DomainDeleteUserCredentialResponse, error)

	// DomainGetUserCredentialWithResponse request
	DomainGetUserCredentialWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, credential string, reqEditors ...RequestEditorFn) (*DomainGetUserCredentialResponse, error)

	// EnvironmentListDomainUserDevicesWithResponse request
	EnvironmentListDomainUserDevicesWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*EnvironmentListDomainUserDevicesResponse, error)

	// DomainGetUserDeviceWithResponse request
	DomainGetUserDeviceWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, device string, reqEditors ...RequestEditorFn) (*DomainGetUserDeviceResponse, error)

	// EnvironmentListDomainUserFactorsWithResponse request
	EnvironmentListDomainUserFactorsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*EnvironmentListDomainUserFactorsResponse, error)

	// DomainDeleteUserFactorWithResponse request
	DomainDeleteUserFactorWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, factor string, reqEditors ...RequestEditorFn) (*DomainDeleteUserFactorResponse, error)

	// EnvironmentLockDomainUserWithResponse request
	EnvironmentLockDomainUserWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*EnvironmentLockDomainUserResponse, error)

	// EnvironmentResetDomainUserPasswordWithBodyWithResponse request with any body
	EnvironmentResetDomainUserPasswordWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentResetDomainUserPasswordResponse, error)

	// EnvironmentListDomainUserRolesWithResponse request
	EnvironmentListDomainUserRolesWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, params *EnvironmentListDomainUserRolesParams, reqEditors ...RequestEditorFn) (*EnvironmentListDomainUserRolesResponse, error)

	// DomainAddOrUpdateUserRoleWithBodyWithResponse request with any body
	DomainAddOrUpdateUserRoleWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainAddOrUpdateUserRoleResponse, error)

	DomainAddOrUpdateUserRoleWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, body DomainAddOrUpdateUserRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainAddOrUpdateUserRoleResponse, error)

	// DomainDeleteUserRoleWithResponse request
	DomainDeleteUserRoleWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, role string, reqEditors ...RequestEditorFn) (*DomainDeleteUserRoleResponse, error)

	// EnvironmentSendDomainUserRegistrationConfirmationWithResponse request
	EnvironmentSendDomainUserRegistrationConfirmationWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*EnvironmentSendDomainUserRegistrationConfirmationResponse, error)

	// DomainUpdateUserStatusWithBodyWithResponse request with any body
	DomainUpdateUserStatusWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainUpdateUserStatusResponse, error)

	DomainUpdateUserStatusWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, body DomainUpdateUserStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainUpdateUserStatusResponse, error)

	// EnvironmentUnlockDomainUserWithResponse request
	EnvironmentUnlockDomainUserWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*EnvironmentUnlockDomainUserResponse, error)

	// EnvironmentResetDomainUserNameWithBodyWithResponse request with any body
	EnvironmentResetDomainUserNameWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentResetDomainUserNameResponse, error)

	EnvironmentResetDomainUserNameWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, body EnvironmentResetDomainUserNameJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentResetDomainUserNameResponse, error)

	// EnvironmentListMemberPermissionsWithResponse request
	EnvironmentListMemberPermissionsWithResponse(ctx context.Context, organizationId string, environmentId string, reqEditors ...RequestEditorFn) (*EnvironmentListMemberPermissionsResponse, error)

	// OrganizationListPlatfomFormTemplatesWithResponse request
	OrganizationListPlatfomFormTemplatesWithResponse(ctx context.Context, organizationId string, params *OrganizationListPlatfomFormTemplatesParams, reqEditors ...RequestEditorFn) (*OrganizationListPlatfomFormTemplatesResponse, error)

	// OrganizationCreatePlatfomFormTemplateWithBodyWithResponse request with any body
	OrganizationCreatePlatfomFormTemplateWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganizationCreatePlatfomFormTemplateResponse, error)

	OrganizationCreatePlatfomFormTemplateWithResponse(ctx context.Context, organizationId string, body OrganizationCreatePlatfomFormTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*OrganizationCreatePlatfomFormTemplateResponse, error)

	// OrganizationDeletePlatfomFormTemplateWithResponse request
	OrganizationDeletePlatfomFormTemplateWithResponse(ctx context.Context, organizationId string, form string, reqEditors ...RequestEditorFn) (*OrganizationDeletePlatfomFormTemplateResponse, error)

	// OrganizationUpdatePlatfomFormTemplateWithBodyWithResponse request with any body
	OrganizationUpdatePlatfomFormTemplateWithBodyWithResponse(ctx context.Context, organizationId string, form string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganizationUpdatePlatfomFormTemplateResponse, error)

	OrganizationUpdatePlatfomFormTemplateWithResponse(ctx context.Context, organizationId string, form string, body OrganizationUpdatePlatfomFormTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*OrganizationUpdatePlatfomFormTemplateResponse, error)

	// OrganizationListPlatformGroupsWithResponse request
	OrganizationListPlatformGroupsWithResponse(ctx context.Context, organizationId string, params *OrganizationListPlatformGroupsParams, reqEditors ...RequestEditorFn) (*OrganizationListPlatformGroupsResponse, error)

	// OrganizationCreatePlatformGroupWithBodyWithResponse request with any body
	OrganizationCreatePlatformGroupWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganizationCreatePlatformGroupResponse, error)

	OrganizationCreatePlatformGroupWithResponse(ctx context.Context, organizationId string, body OrganizationCreatePlatformGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*OrganizationCreatePlatformGroupResponse, error)

	// OrganizationDeletePlatformGroupWithResponse request
	OrganizationDeletePlatformGroupWithResponse(ctx context.Context, organizationId string, group string, reqEditors ...RequestEditorFn) (*OrganizationDeletePlatformGroupResponse, error)

	// OrganizationGetPlatformGroupWithResponse request
	OrganizationGetPlatformGroupWithResponse(ctx context.Context, organizationId string, group string, reqEditors ...RequestEditorFn) (*OrganizationGetPlatformGroupResponse, error)

	// OrganizationUpdatePlatformGroupWithBodyWithResponse request with any body
	OrganizationUpdatePlatformGroupWithBodyWithResponse(ctx context.Context, organizationId string, group string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganizationUpdatePlatformGroupResponse, error)

	OrganizationUpdatePlatformGroupWithResponse(ctx context.Context, organizationId string, group string, body OrganizationUpdatePlatformGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*OrganizationUpdatePlatformGroupResponse, error)

	// OrganizationListPlatformGroupMembersWithResponse request
	OrganizationListPlatformGroupMembersWithResponse(ctx context.Context, organizationId string, group string, params *OrganizationListPlatformGroupMembersParams, reqEditors ...RequestEditorFn) (*OrganizationListPlatformGroupMembersResponse, error)

	// OrganizationRemovePlatformGroupMemberWithResponse request
	OrganizationRemovePlatformGroupMemberWithResponse(ctx context.Context, organizationId string, group string, member string, reqEditors ...RequestEditorFn) (*OrganizationRemovePlatformGroupMemberResponse, error)

	// OrganizationAddPlatformGroupMemberWithResponse request
	OrganizationAddPlatformGroupMemberWithResponse(ctx context.Context, organizationId string, group string, member string, reqEditors ...RequestEditorFn) (*OrganizationAddPlatformGroupMemberResponse, error)

	// OrganizationListPlatformIdentityProvidersWithResponse request
	OrganizationListPlatformIdentityProvidersWithResponse(ctx context.Context, organizationId string, params *OrganizationListPlatformIdentityProvidersParams, reqEditors ...RequestEditorFn) (*OrganizationListPlatformIdentityProvidersResponse, error)

	// OrganizationCreatePlatformIdentityProviderWithBodyWithResponse request with any body
	OrganizationCreatePlatformIdentityProviderWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganizationCreatePlatformIdentityProviderResponse, error)

	OrganizationCreatePlatformIdentityProviderWithResponse(ctx context.Context, organizationId string, body OrganizationCreatePlatformIdentityProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*OrganizationCreatePlatformIdentityProviderResponse, error)

	// OrganizationDeletePlatformIdentityProviderWithResponse request
	OrganizationDeletePlatformIdentityProviderWithResponse(ctx context.Context, organizationId string, identity string, reqEditors ...RequestEditorFn) (*OrganizationDeletePlatformIdentityProviderResponse, error)

	// OrganizationGetPlatformIdentityProviderWithResponse request
	OrganizationGetPlatformIdentityProviderWithResponse(ctx context.Context, organizationId string, identity string, reqEditors ...RequestEditorFn) (*OrganizationGetPlatformIdentityProviderResponse, error)

	// OrganizationUpdatePlatformIdentityProviderWithBodyWithResponse request with any body
	OrganizationUpdatePlatformIdentityProviderWithBodyWithResponse(ctx context.Context, organizationId string, identity string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganizationUpdatePlatformIdentityProviderResponse, error)

	OrganizationUpdatePlatformIdentityProviderWithResponse(ctx context.Context, organizationId string, identity string, body OrganizationUpdatePlatformIdentityProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*OrganizationUpdatePlatformIdentityProviderResponse, error)

	// OrganizationListPlatformMembersWithResponse request
	OrganizationListPlatformMembersWithResponse(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*OrganizationListPlatformMembersResponse, error)

	// OrganizationAddOrUpdatePlatformMemberWithBodyWithResponse request with any body
	OrganizationAddOrUpdatePlatformMemberWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganizationAddOrUpdatePlatformMemberResponse, error)

	OrganizationAddOrUpdatePlatformMemberWithResponse(ctx context.Context, organizationId string, body OrganizationAddOrUpdatePlatformMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*OrganizationAddOrUpdatePlatformMemberResponse, error)

	// OrganizationRemovePlatformMemberWithResponse request
	OrganizationRemovePlatformMemberWithResponse(ctx context.Context, organizationId string, member string, reqEditors ...RequestEditorFn) (*OrganizationRemovePlatformMemberResponse, error)

	// OrganizationListPlatformRolesWithResponse request
	OrganizationListPlatformRolesWithResponse(ctx context.Context, organizationId string, params *OrganizationListPlatformRolesParams, reqEditors ...RequestEditorFn) (*OrganizationListPlatformRolesResponse, error)

	// OrganizationCreatePlatformRoleWithBodyWithResponse request with any body
	OrganizationCreatePlatformRoleWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganizationCreatePlatformRoleResponse, error)

	OrganizationCreatePlatformRoleWithResponse(ctx context.Context, organizationId string, body OrganizationCreatePlatformRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*OrganizationCreatePlatformRoleResponse, error)

	// OrganizationDeletePlatformRoleWithResponse request
	OrganizationDeletePlatformRoleWithResponse(ctx context.Context, organizationId string, role string, reqEditors ...RequestEditorFn) (*OrganizationDeletePlatformRoleResponse, error)

	// OrganizationGetPlatformRoleWithResponse request
	OrganizationGetPlatformRoleWithResponse(ctx context.Context, organizationId string, role string, reqEditors ...RequestEditorFn) (*OrganizationGetPlatformRoleResponse, error)

	// OrganizationUpdatePlatformRoleWithBodyWithResponse request with any body
	OrganizationUpdatePlatformRoleWithBodyWithResponse(ctx context.Context, organizationId string, role string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganizationUpdatePlatformRoleResponse, error)

	OrganizationUpdatePlatformRoleWithResponse(ctx context.Context, organizationId string, role string, body OrganizationUpdatePlatformRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*OrganizationUpdatePlatformRoleResponse, error)

	// OrganizationGetPlatformSettingsWithResponse request
	OrganizationGetPlatformSettingsWithResponse(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*OrganizationGetPlatformSettingsResponse, error)

	// OrganizationUpdatePlatformSettingsWithBodyWithResponse request with any body
	OrganizationUpdatePlatformSettingsWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganizationUpdatePlatformSettingsResponse, error)

	OrganizationUpdatePlatformSettingsWithResponse(ctx context.Context, organizationId string, body OrganizationUpdatePlatformSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*OrganizationUpdatePlatformSettingsResponse, error)

	// OrganizationListPlatformShardingTagsWithResponse request
	OrganizationListPlatformShardingTagsWithResponse(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*OrganizationListPlatformShardingTagsResponse, error)

	// OrganizationCreatePlatformShardingTagWithBodyWithResponse request with any body
	OrganizationCreatePlatformShardingTagWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganizationCreatePlatformShardingTagResponse, error)

	OrganizationCreatePlatformShardingTagWithResponse(ctx context.Context, organizationId string, body OrganizationCreatePlatformShardingTagJSONRequestBody, reqEditors ...RequestEditorFn) (*OrganizationCreatePlatformShardingTagResponse, error)

	// OrganizationDeletePlatformShardingTagWithResponse request
	OrganizationDeletePlatformShardingTagWithResponse(ctx context.Context, organizationId string, tag string, reqEditors ...RequestEditorFn) (*OrganizationDeletePlatformShardingTagResponse, error)

	// OrganizationGetPlatformShardingTagWithResponse request
	OrganizationGetPlatformShardingTagWithResponse(ctx context.Context, organizationId string, tag string, reqEditors ...RequestEditorFn) (*OrganizationGetPlatformShardingTagResponse, error)

	// OrganizationUpdatePlatformShardingTagWithBodyWithResponse request with any body
	OrganizationUpdatePlatformShardingTagWithBodyWithResponse(ctx context.Context, organizationId string, tag string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganizationUpdatePlatformShardingTagResponse, error)

	OrganizationUpdatePlatformShardingTagWithResponse(ctx context.Context, organizationId string, tag string, body OrganizationUpdatePlatformShardingTagJSONRequestBody, reqEditors ...RequestEditorFn) (*OrganizationUpdatePlatformShardingTagResponse, error)

	// OrganizationListPlatformUsersWithResponse request
	OrganizationListPlatformUsersWithResponse(ctx context.Context, organizationId string, params *OrganizationListPlatformUsersParams, reqEditors ...RequestEditorFn) (*OrganizationListPlatformUsersResponse, error)

	// OrganizationCreatePlatformUserWithBodyWithResponse request with any body
	OrganizationCreatePlatformUserWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganizationCreatePlatformUserResponse, error)

	OrganizationCreatePlatformUserWithResponse(ctx context.Context, organizationId string, body OrganizationCreatePlatformUserJSONRequestBody, reqEditors ...RequestEditorFn) (*OrganizationCreatePlatformUserResponse, error)

	// OrganizationDeletePlatformUserWithResponse request
	OrganizationDeletePlatformUserWithResponse(ctx context.Context, organizationId string, user string, reqEditors ...RequestEditorFn) (*OrganizationDeletePlatformUserResponse, error)

	// OrganizationGetPlatformUserWithResponse request
	OrganizationGetPlatformUserWithResponse(ctx context.Context, organizationId string, user string, reqEditors ...RequestEditorFn) (*OrganizationGetPlatformUserResponse, error)

	// OrganizationUpdatePlatformUserWithBodyWithResponse request with any body
	OrganizationUpdatePlatformUserWithBodyWithResponse(ctx context.Context, organizationId string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganizationUpdatePlatformUserResponse, error)

	OrganizationUpdatePlatformUserWithResponse(ctx context.Context, organizationId string, user string, body OrganizationUpdatePlatformUserJSONRequestBody, reqEditors ...RequestEditorFn) (*OrganizationUpdatePlatformUserResponse, error)

	// OrganizationResetPlatformUserPasswordWithBodyWithResponse request with any body
	OrganizationResetPlatformUserPasswordWithBodyWithResponse(ctx context.Context, organizationId string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganizationResetPlatformUserPasswordResponse, error)

	// OrganizationUpdatePlatformUserStatusWithBodyWithResponse request with any body
	OrganizationUpdatePlatformUserStatusWithBodyWithResponse(ctx context.Context, organizationId string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganizationUpdatePlatformUserStatusResponse, error)

	OrganizationUpdatePlatformUserStatusWithResponse(ctx context.Context, organizationId string, user string, body OrganizationUpdatePlatformUserStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*OrganizationUpdatePlatformUserStatusResponse, error)

	// OrganizationUpdatePlatformUserNameWithBodyWithResponse request with any body
	OrganizationUpdatePlatformUserNameWithBodyWithResponse(ctx context.Context, organizationId string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganizationUpdatePlatformUserNameResponse, error)

	OrganizationUpdatePlatformUserNameWithResponse(ctx context.Context, organizationId string, user string, body OrganizationUpdatePlatformUserNameJSONRequestBody, reqEditors ...RequestEditorFn) (*OrganizationUpdatePlatformUserNameResponse, error)

	// PlatformListAuditEventTypesWithResponse request
	PlatformListAuditEventTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PlatformListAuditEventTypesResponse, error)

	// PlatformAlertStatusWithResponse request
	PlatformAlertStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PlatformAlertStatusResponse, error)

	// PlatformGetFlowSchemaWithResponse request
	PlatformGetFlowSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PlatformGetFlowSchemaResponse, error)

	// PlatformGetSpelGrammarWithResponse request
	PlatformGetSpelGrammarWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PlatformGetSpelGrammarResponse, error)

	// PlatformGetInstallationWithResponse request
	PlatformGetInstallationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PlatformGetInstallationResponse, error)

	// PlatformListPluginAuthDeviceNotifiersWithResponse request
	PlatformListPluginAuthDeviceNotifiersWithResponse(ctx context.Context, params *PlatformListPluginAuthDeviceNotifiersParams, reqEditors ...RequestEditorFn) (*PlatformListPluginAuthDeviceNotifiersResponse, error)

	// PlatformGetPluginAuthDeviceNotifierWithResponse request
	PlatformGetPluginAuthDeviceNotifierWithResponse(ctx context.Context, authDeviceNotifierId string, reqEditors ...RequestEditorFn) (*PlatformGetPluginAuthDeviceNotifierResponse, error)

	// PlatformGetPluginAuthDeviceNotifierSchemaWithResponse request
	PlatformGetPluginAuthDeviceNotifierSchemaWithResponse(ctx context.Context, authDeviceNotifierId string, reqEditors ...RequestEditorFn) (*PlatformGetPluginAuthDeviceNotifierSchemaResponse, error)

	// PlatformListPluginBotDetectionsWithResponse request
	PlatformListPluginBotDetectionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PlatformListPluginBotDetectionsResponse, error)

	// PlatformGetPluginBotDetectionWithResponse request
	PlatformGetPluginBotDetectionWithResponse(ctx context.Context, botDetection string, reqEditors ...RequestEditorFn) (*PlatformGetPluginBotDetectionResponse, error)

	// PlatformGetPluginBotDetectionSchemaWithResponse request
	PlatformGetPluginBotDetectionSchemaWithResponse(ctx context.Context, botDetection string, reqEditors ...RequestEditorFn) (*PlatformGetPluginBotDetectionSchemaResponse, error)

	// PlatformListPluginCertificatesWithResponse request
	PlatformListPluginCertificatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PlatformListPluginCertificatesResponse, error)

	// PlatformGetPluginCertificateWithResponse request
	PlatformGetPluginCertificateWithResponse(ctx context.Context, certificate string, reqEditors ...RequestEditorFn) (*PlatformGetPluginCertificateResponse, error)

	// PlatformGetPluginCertificateSchemaWithResponse request
	PlatformGetPluginCertificateSchemaWithResponse(ctx context.Context, certificate string, reqEditors ...RequestEditorFn) (*PlatformGetPluginCertificateSchemaResponse, error)

	// PlatformListDeviceIdentifierPluginsWithResponse request
	PlatformListDeviceIdentifierPluginsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PlatformListDeviceIdentifierPluginsResponse, error)

	// PlatformGetDeviceIdentifierPluginWithResponse request
	PlatformGetDeviceIdentifierPluginWithResponse(ctx context.Context, deviceIdentifier string, reqEditors ...RequestEditorFn) (*PlatformGetDeviceIdentifierPluginResponse, error)

	// PlatformGetDeviceIdentifierPluginSchemaWithResponse request
	PlatformGetDeviceIdentifierPluginSchemaWithResponse(ctx context.Context, deviceIdentifier string, reqEditors ...RequestEditorFn) (*PlatformGetDeviceIdentifierPluginSchemaResponse, error)

	// PlatformListPluginExtensionGrantsWithResponse request
	PlatformListPluginExtensionGrantsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PlatformListPluginExtensionGrantsResponse, error)

	// PlatformGetPluginExtensionGrantWithResponse request
	PlatformGetPluginExtensionGrantWithResponse(ctx context.Context, extensionGrant string, reqEditors ...RequestEditorFn) (*PlatformGetPluginExtensionGrantResponse, error)

	// PlatformGetPluginExtensionGrantSchemaWithResponse request
	PlatformGetPluginExtensionGrantSchemaWithResponse(ctx context.Context, extensionGrant string, reqEditors ...RequestEditorFn) (*PlatformGetPluginExtensionGrantSchemaResponse, error)

	// PlatformListPluginFactorsWithResponse request
	PlatformListPluginFactorsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PlatformListPluginFactorsResponse, error)

	// PlatformGetPluginFactorWithResponse request
	PlatformGetPluginFactorWithResponse(ctx context.Context, factor string, reqEditors ...RequestEditorFn) (*PlatformGetPluginFactorResponse, error)

	// PlatformGetPluginFactorSchemaWithResponse request
	PlatformGetPluginFactorSchemaWithResponse(ctx context.Context, factor string, reqEditors ...RequestEditorFn) (*PlatformGetPluginFactorSchemaResponse, error)

	// PlatformListProviderPluginsWithResponse request
	PlatformListProviderPluginsWithResponse(ctx context.Context, params *PlatformListProviderPluginsParams, reqEditors ...RequestEditorFn) (*PlatformListProviderPluginsResponse, error)

	// PlatformGetIdentityProviderPluginWithResponse request
	PlatformGetIdentityProviderPluginWithResponse(ctx context.Context, identity string, reqEditors ...RequestEditorFn) (*PlatformGetIdentityProviderPluginResponse, error)

	// PlatformGetIdentityProviderPluginSchemaWithResponse request
	PlatformGetIdentityProviderPluginSchemaWithResponse(ctx context.Context, identity string, reqEditors ...RequestEditorFn) (*PlatformGetIdentityProviderPluginSchemaResponse, error)

	// PlatformListPluginNotifiersWithResponse request
	PlatformListPluginNotifiersWithResponse(ctx context.Context, params *PlatformListPluginNotifiersParams, reqEditors ...RequestEditorFn) (*PlatformListPluginNotifiersResponse, error)

	// PlatformGetPluginNotifierWithResponse request
	PlatformGetPluginNotifierWithResponse(ctx context.Context, notifierId string, reqEditors ...RequestEditorFn) (*PlatformGetPluginNotifierResponse, error)

	// PlatformGetPluginNotifierSchemaWithResponse request
	PlatformGetPluginNotifierSchemaWithResponse(ctx context.Context, notifierId string, reqEditors ...RequestEditorFn) (*PlatformGetPluginNotifierSchemaResponse, error)

	// PlatformListPluginPoliciesWithResponse request
	PlatformListPluginPoliciesWithResponse(ctx context.Context, params *PlatformListPluginPoliciesParams, reqEditors ...RequestEditorFn) (*PlatformListPluginPoliciesResponse, error)

	// PlatformGetPluginPolicyWithResponse request
	PlatformGetPluginPolicyWithResponse(ctx context.Context, policy string, reqEditors ...RequestEditorFn) (*PlatformGetPluginPolicyResponse, error)

	// PlatformGetPluginPolicyDocumentationWithResponse request
	PlatformGetPluginPolicyDocumentationWithResponse(ctx context.Context, policy string, reqEditors ...RequestEditorFn) (*PlatformGetPluginPolicyDocumentationResponse, error)

	// PlatformGetPluginPolicySchemaWithResponse request
	PlatformGetPluginPolicySchemaWithResponse(ctx context.Context, policy string, reqEditors ...RequestEditorFn) (*PlatformGetPluginPolicySchemaResponse, error)

	// PlatformListPluginReportersWithResponse request
	PlatformListPluginReportersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PlatformListPluginReportersResponse, error)

	// PlatformGetPluginReporterWithResponse request
	PlatformGetPluginReporterWithResponse(ctx context.Context, reporter string, reqEditors ...RequestEditorFn) (*PlatformGetPluginReporterResponse, error)

	// PlatformGetPluginReporterSchemaWithResponse request
	PlatformGetPluginReporterSchemaWithResponse(ctx context.Context, reporter string, reqEditors ...RequestEditorFn) (*PlatformGetPluginReporterSchemaResponse, error)

	// PlatformListPluginResourcesWithResponse request
	PlatformListPluginResourcesWithResponse(ctx context.Context, params *PlatformListPluginResourcesParams, reqEditors ...RequestEditorFn) (*PlatformListPluginResourcesResponse, error)

	// PlatformGetPluginResourceWithResponse request
	PlatformGetPluginResourceWithResponse(ctx context.Context, resource string, reqEditors ...RequestEditorFn) (*PlatformGetPluginResourceResponse, error)

	// PlatformGetPluginResourceSchemaWithResponse request
	PlatformGetPluginResourceSchemaWithResponse(ctx context.Context, resource string, reqEditors ...RequestEditorFn) (*PlatformGetPluginResourceSchemaResponse, error)

	// PlatformRoleWithResponse request
	PlatformRoleWithResponse(ctx context.Context, role string, reqEditors ...RequestEditorFn) (*PlatformRoleResponse, error)

	// CurrentUserGetWithResponse request
	CurrentUserGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CurrentUserGetResponse, error)

	// CurrentUserSubscribeNewsletterWithBodyWithResponse request with any body
	CurrentUserSubscribeNewsletterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CurrentUserSubscribeNewsletterResponse, error)

	// CurrentUserGetNewsletterTaglinesWithResponse request
	CurrentUserGetNewsletterTaglinesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CurrentUserGetNewsletterTaglinesResponse, error)

	// CurrentUserListNotificationsWithResponse request
	CurrentUserListNotificationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CurrentUserListNotificationsResponse, error)

	// CurrentUserMarkNotificationAsReadWithResponse request
	CurrentUserMarkNotificationAsReadWithResponse(ctx context.Context, notificationId string, reqEditors ...RequestEditorFn) (*CurrentUserMarkNotificationAsReadResponse, error)
}

type AuthTokenExchangeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AuthToken
}

// Status returns HTTPResponse.Status
func (r AuthTokenExchangeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthTokenExchangeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationListPlatformAuditsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Audit
}

// Status returns HTTPResponse.Status
func (r OrganizationListPlatformAuditsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationListPlatformAuditsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationGetPlatformAuditResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Audit
}

// Status returns HTTPResponse.Status
func (r OrganizationGetPlatformAuditResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationGetPlatformAuditResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationListEntrypointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Entrypoint
}

// Status returns HTTPResponse.Status
func (r OrganizationListEntrypointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationListEntrypointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type Create14Response struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r Create14Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r Create14Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationDeleteEntrypointResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OrganizationDeleteEntrypointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationDeleteEntrypointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationGetEntrypointResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Entrypoint
}

// Status returns HTTPResponse.Status
func (r OrganizationGetEntrypointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationGetEntrypointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationUpdateEntrypointResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Entrypoint
}

// Status returns HTTPResponse.Status
func (r OrganizationUpdateEntrypointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationUpdateEntrypointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationListPlatfomEnvironmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Environment
}

// Status returns HTTPResponse.Status
func (r OrganizationListPlatfomEnvironmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationListPlatfomEnvironmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentListDomainsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Domain
}

// Status returns HTTPResponse.Status
func (r EnvironmentListDomainsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentListDomainsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentCreateDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Domain
}

// Status returns HTTPResponse.Status
func (r EnvironmentCreateDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentCreateDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainGetByHridResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Domain
}

// Status returns HTTPResponse.Status
func (r DomainGetByHridResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainGetByHridResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DomainDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Domain
}

// Status returns HTTPResponse.Status
func (r DomainGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentPatchDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Domain
}

// Status returns HTTPResponse.Status
func (r EnvironmentPatchDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentPatchDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Domain
}

// Status returns HTTPResponse.Status
func (r DomainUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentListDomainAlertNotifiersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AlertNotifier
}

// Status returns HTTPResponse.Status
func (r EnvironmentListDomainAlertNotifiersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentListDomainAlertNotifiersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentCreateDomainAlertNotifierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AlertNotifier
}

// Status returns HTTPResponse.Status
func (r EnvironmentCreateDomainAlertNotifierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentCreateDomainAlertNotifierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainDeleteAlertNotifierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DomainDeleteAlertNotifierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainDeleteAlertNotifierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainGetAlertNotifierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AlertNotifier
}

// Status returns HTTPResponse.Status
func (r DomainGetAlertNotifierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainGetAlertNotifierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentPatchDomainAlertNotifierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AlertNotifier
}

// Status returns HTTPResponse.Status
func (r EnvironmentPatchDomainAlertNotifierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentPatchDomainAlertNotifierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentListDomainAlertTriggersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AlertTrigger
}

// Status returns HTTPResponse.Status
func (r EnvironmentListDomainAlertTriggersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentListDomainAlertTriggersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentPatchDomainAlertTriggersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AlertTrigger
}

// Status returns HTTPResponse.Status
func (r EnvironmentPatchDomainAlertTriggersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentPatchDomainAlertTriggersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainGetAnalyticsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DomainGetAnalyticsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainGetAnalyticsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentListDomainApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplicationPage
}

// Status returns HTTPResponse.Status
func (r EnvironmentListDomainApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentListDomainApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentCreateDomainApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Application
}

// Status returns HTTPResponse.Status
func (r EnvironmentCreateDomainApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentCreateDomainApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainDeleteApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DomainDeleteApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainDeleteApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplicationGetDomainApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Application
}

// Status returns HTTPResponse.Status
func (r ApplicationGetDomainApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplicationGetDomainApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentPatchDomainApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Application
}

// Status returns HTTPResponse.Status
func (r EnvironmentPatchDomainApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentPatchDomainApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainUpdateApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Application
}

// Status returns HTTPResponse.Status
func (r DomainUpdateApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainUpdateApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplicationGetAnalyticsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApplicationGetAnalyticsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplicationGetAnalyticsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplicationListEmailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApplicationListEmailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplicationListEmailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplicationCreateEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApplicationCreateEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplicationCreateEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplicationDeleteEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApplicationDeleteEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplicationDeleteEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplicationUpdateEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Email
}

// Status returns HTTPResponse.Status
func (r ApplicationUpdateEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplicationUpdateEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplicationListFlowsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FlowEntity
}

// Status returns HTTPResponse.Status
func (r ApplicationListFlowsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplicationListFlowsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplicationCreateFlowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FlowEntity
}

// Status returns HTTPResponse.Status
func (r ApplicationCreateFlowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplicationCreateFlowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplicationGetFlowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FlowEntity
}

// Status returns HTTPResponse.Status
func (r ApplicationGetFlowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplicationGetFlowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplicationUpdateFlowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *FlowEntity
}

// Status returns HTTPResponse.Status
func (r ApplicationUpdateFlowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplicationUpdateFlowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplicationListFormsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApplicationListFormsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplicationListFormsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplicationCreateFormResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApplicationCreateFormResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplicationCreateFormResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplicationDeleteFormResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApplicationDeleteFormResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplicationDeleteFormResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplicationUpdateFormResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Form
}

// Status returns HTTPResponse.Status
func (r ApplicationUpdateFormResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplicationUpdateFormResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplicationListMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MembershipListItem
}

// Status returns HTTPResponse.Status
func (r ApplicationListMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplicationListMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplicationAddOrUpdateMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApplicationAddOrUpdateMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplicationAddOrUpdateMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplicationListMemberPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r ApplicationListMemberPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplicationListMemberPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplicationDeleteMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ApplicationDeleteMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplicationDeleteMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplicationListResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceListItem
}

// Status returns HTTPResponse.Status
func (r ApplicationListResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplicationListResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplicationGetResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Resource
}

// Status returns HTTPResponse.Status
func (r ApplicationGetResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplicationGetResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplicationGetResourceAccessPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AccessPolicyListItem
}

// Status returns HTTPResponse.Status
func (r ApplicationGetResourceAccessPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplicationGetResourceAccessPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplicationGetResourceAccessPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccessPolicy
}

// Status returns HTTPResponse.Status
func (r ApplicationGetResourceAccessPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplicationGetResourceAccessPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplicationRenewSecretResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Application
}

// Status returns HTTPResponse.Status
func (r ApplicationRenewSecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplicationRenewSecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplicationUpdateTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Application
}

// Status returns HTTPResponse.Status
func (r ApplicationUpdateTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplicationUpdateTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentListDomainAuditsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Audit
}

// Status returns HTTPResponse.Status
func (r EnvironmentListDomainAuditsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentListDomainAuditsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainGetAuditResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Audit
}

// Status returns HTTPResponse.Status
func (r DomainGetAuditResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainGetAuditResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentListDomainAuthDeviceNotifierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AuthenticationDeviceNotifier
}

// Status returns HTTPResponse.Status
func (r EnvironmentListDomainAuthDeviceNotifierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentListDomainAuthDeviceNotifierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentCreateDomainAuthDeviceNotifiersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EnvironmentCreateDomainAuthDeviceNotifiersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentCreateDomainAuthDeviceNotifiersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainDeleteAuthDeviceNotifierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DomainDeleteAuthDeviceNotifierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainDeleteAuthDeviceNotifierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainGetAuthDeviceNotifierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthenticationDeviceNotifier
}

// Status returns HTTPResponse.Status
func (r DomainGetAuthDeviceNotifierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainGetAuthDeviceNotifierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainUpdateAuthDeviceNotifierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AuthenticationDeviceNotifier
}

// Status returns HTTPResponse.Status
func (r DomainUpdateAuthDeviceNotifierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainUpdateAuthDeviceNotifierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentListDomainBotDetectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BotDetection
}

// Status returns HTTPResponse.Status
func (r EnvironmentListDomainBotDetectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentListDomainBotDetectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentCreateDomainBotDetectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EnvironmentCreateDomainBotDetectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentCreateDomainBotDetectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainDeleteBotDetectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DomainDeleteBotDetectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainDeleteBotDetectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainGetBotDetectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BotDetection
}

// Status returns HTTPResponse.Status
func (r DomainGetBotDetectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainGetBotDetectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainUpdateBotDetectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BotDetection
}

// Status returns HTTPResponse.Status
func (r DomainUpdateBotDetectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainUpdateBotDetectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentListDomainCertificatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CertificateEntity
}

// Status returns HTTPResponse.Status
func (r EnvironmentListDomainCertificatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentListDomainCertificatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentCreateDomainCertificateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CertificateEntity
}

// Status returns HTTPResponse.Status
func (r EnvironmentCreateDomainCertificateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentCreateDomainCertificateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentRotateDomainCertificateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CertificateEntity
}

// Status returns HTTPResponse.Status
func (r EnvironmentRotateDomainCertificateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentRotateDomainCertificateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainDeleteCertificateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DomainDeleteCertificateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainDeleteCertificateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainGetCertificateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CertificateEntity
}

// Status returns HTTPResponse.Status
func (r DomainGetCertificateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainGetCertificateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainUpdateCertificateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CertificateEntity
}

// Status returns HTTPResponse.Status
func (r DomainUpdateCertificateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainUpdateCertificateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainGetCertificatePublicKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DomainGetCertificatePublicKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainGetCertificatePublicKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentListDomainCertificatePublicKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CertificateKey
}

// Status returns HTTPResponse.Status
func (r EnvironmentListDomainCertificatePublicKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentListDomainCertificatePublicKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentListDomainDeviceIdentifiersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BotDetection
}

// Status returns HTTPResponse.Status
func (r EnvironmentListDomainDeviceIdentifiersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentListDomainDeviceIdentifiersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentCreateDomainDeviceIdentifierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EnvironmentCreateDomainDeviceIdentifierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentCreateDomainDeviceIdentifierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainDeleteDeviceIdentifierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DomainDeleteDeviceIdentifierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainDeleteDeviceIdentifierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainGetDeviceIdentifierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeviceIdentifierResource
}

// Status returns HTTPResponse.Status
func (r DomainGetDeviceIdentifierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainGetDeviceIdentifierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainUpdateDeviceIdentifierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BotDetection
}

// Status returns HTTPResponse.Status
func (r DomainUpdateDeviceIdentifierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainUpdateDeviceIdentifierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentListDomainEmailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EnvironmentListDomainEmailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentListDomainEmailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentCreateDomainEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EnvironmentCreateDomainEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentCreateDomainEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainDeleteEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DomainDeleteEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainDeleteEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainUpdateEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Email
}

// Status returns HTTPResponse.Status
func (r DomainUpdateEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainUpdateEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainGetEntrypointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Entrypoint
}

// Status returns HTTPResponse.Status
func (r DomainGetEntrypointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainGetEntrypointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentListDomainExtensionGrantsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ExtensionGrant
}

// Status returns HTTPResponse.Status
func (r EnvironmentListDomainExtensionGrantsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentListDomainExtensionGrantsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentCreateDomainExtensionGrantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EnvironmentCreateDomainExtensionGrantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentCreateDomainExtensionGrantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainDeleteExtensionGrantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DomainDeleteExtensionGrantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainDeleteExtensionGrantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainGetExtensionGrantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ExtensionGrant
}

// Status returns HTTPResponse.Status
func (r DomainGetExtensionGrantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainGetExtensionGrantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainUpdateExtensionGrantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ExtensionGrant
}

// Status returns HTTPResponse.Status
func (r DomainUpdateExtensionGrantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainUpdateExtensionGrantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentListDomainFactorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Factor
}

// Status returns HTTPResponse.Status
func (r EnvironmentListDomainFactorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentListDomainFactorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentCreateDomainFactorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Factor
}

// Status returns HTTPResponse.Status
func (r EnvironmentCreateDomainFactorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentCreateDomainFactorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainDeleteFactorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DomainDeleteFactorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainDeleteFactorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainGetFactorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Factor
}

// Status returns HTTPResponse.Status
func (r DomainGetFactorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainGetFactorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainUpdateFactorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Factor
}

// Status returns HTTPResponse.Status
func (r DomainUpdateFactorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainUpdateFactorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentListDomainFlowsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FlowEntity
}

// Status returns HTTPResponse.Status
func (r EnvironmentListDomainFlowsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentListDomainFlowsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentCreateOrUpdateDomainFlowsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FlowEntity
}

// Status returns HTTPResponse.Status
func (r EnvironmentCreateOrUpdateDomainFlowsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentCreateOrUpdateDomainFlowsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainGetFlowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FlowEntity
}

// Status returns HTTPResponse.Status
func (r DomainGetFlowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainGetFlowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainUpdateFlowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *FlowEntity
}

// Status returns HTTPResponse.Status
func (r DomainUpdateFlowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainUpdateFlowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentListDomainFormsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EnvironmentListDomainFormsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentListDomainFormsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentCreateDomainFormResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EnvironmentCreateDomainFormResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentCreateDomainFormResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentPreviewDomainFormResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PreviewResponse
}

// Status returns HTTPResponse.Status
func (r EnvironmentPreviewDomainFormResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentPreviewDomainFormResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainDeleteFormResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DomainDeleteFormResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainDeleteFormResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainUpdateFormResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Form
}

// Status returns HTTPResponse.Status
func (r DomainUpdateFormResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainUpdateFormResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentListDomainGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GroupPage
}

// Status returns HTTPResponse.Status
func (r EnvironmentListDomainGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentListDomainGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentCreateDomainGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Group
}

// Status returns HTTPResponse.Status
func (r EnvironmentCreateDomainGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentCreateDomainGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainDeleteGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DomainDeleteGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainDeleteGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainGetGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Group
}

// Status returns HTTPResponse.Status
func (r DomainGetGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainGetGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainUpdateGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Group
}

// Status returns HTTPResponse.Status
func (r DomainUpdateGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainUpdateGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainGetGroupMemebersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r DomainGetGroupMemebersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainGetGroupMemebersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentRemoveDomainGroupMemeberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EnvironmentRemoveDomainGroupMemeberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentRemoveDomainGroupMemeberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainAddOrUpdateGroupMemeberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DomainAddOrUpdateGroupMemeberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainAddOrUpdateGroupMemeberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentListDomainGroupRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Role
}

// Status returns HTTPResponse.Status
func (r EnvironmentListDomainGroupRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentListDomainGroupRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentAddDomainGroupRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Group
}

// Status returns HTTPResponse.Status
func (r EnvironmentAddDomainGroupRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentAddDomainGroupRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentRemoveDomainGroupRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Group
}

// Status returns HTTPResponse.Status
func (r EnvironmentRemoveDomainGroupRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentRemoveDomainGroupRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentListDomainDictionariesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]I18nDictionary
}

// Status returns HTTPResponse.Status
func (r EnvironmentListDomainDictionariesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentListDomainDictionariesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentCreateDomainDictionaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *I18nDictionary
}

// Status returns HTTPResponse.Status
func (r EnvironmentCreateDomainDictionaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentCreateDomainDictionaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainDeleteDictionaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DomainDeleteDictionaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainDeleteDictionaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainGetDictionaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *I18nDictionary
}

// Status returns HTTPResponse.Status
func (r DomainGetDictionaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainGetDictionaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainUpdateDictionaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *I18nDictionary
}

// Status returns HTTPResponse.Status
func (r DomainUpdateDictionaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainUpdateDictionaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainUpdateDictionaryEntriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *I18nDictionary
}

// Status returns HTTPResponse.Status
func (r DomainUpdateDictionaryEntriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainUpdateDictionaryEntriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentListDomainIdentityProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FilteredIdentityProviderInfo
}

// Status returns HTTPResponse.Status
func (r EnvironmentListDomainIdentityProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentListDomainIdentityProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentCreateDomainIdentityProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *IdentityProvider
}

// Status returns HTTPResponse.Status
func (r EnvironmentCreateDomainIdentityProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentCreateDomainIdentityProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainDeleteIdentityProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DomainDeleteIdentityProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainDeleteIdentityProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainGetIdentityProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IdentityProvider
}

// Status returns HTTPResponse.Status
func (r DomainGetIdentityProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainGetIdentityProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainUpdateIdentityProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *IdentityProvider
}

// Status returns HTTPResponse.Status
func (r DomainUpdateIdentityProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainUpdateIdentityProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentListDomainMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MembershipListItem
}

// Status returns HTTPResponse.Status
func (r EnvironmentListDomainMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentListDomainMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainAddOrUpdateMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DomainAddOrUpdateMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainAddOrUpdateMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentListDomainMemberPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r EnvironmentListDomainMemberPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentListDomainMemberPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentRemoveDomainMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EnvironmentRemoveDomainMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentRemoveDomainMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentListDomainReportersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Reporter
}

// Status returns HTTPResponse.Status
func (r EnvironmentListDomainReportersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentListDomainReportersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentCreateDomainReporterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Reporter
}

// Status returns HTTPResponse.Status
func (r EnvironmentCreateDomainReporterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentCreateDomainReporterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainDeleteReporterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DomainDeleteReporterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainDeleteReporterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainGetReporterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Reporter
}

// Status returns HTTPResponse.Status
func (r DomainGetReporterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainGetReporterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainUpdateReporterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Reporter
}

// Status returns HTTPResponse.Status
func (r DomainUpdateReporterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainUpdateReporterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentListDomainResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ServiceResource
}

// Status returns HTTPResponse.Status
func (r EnvironmentListDomainResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentListDomainResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentCreateDomainResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ServiceResource
}

// Status returns HTTPResponse.Status
func (r EnvironmentCreateDomainResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentCreateDomainResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainDeleteResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DomainDeleteResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainDeleteResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainGetResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServiceResource
}

// Status returns HTTPResponse.Status
func (r DomainGetResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainGetResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainUpdateResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ServiceResource
}

// Status returns HTTPResponse.Status
func (r DomainUpdateResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainUpdateResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentListDomainRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RolePage
}

// Status returns HTTPResponse.Status
func (r EnvironmentListDomainRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentListDomainRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentCreateDomainMemberRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Role
}

// Status returns HTTPResponse.Status
func (r EnvironmentCreateDomainMemberRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentCreateDomainMemberRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainDeleteRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DomainDeleteRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainDeleteRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainGetRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoleEntity
}

// Status returns HTTPResponse.Status
func (r DomainGetRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainGetRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainUpdateRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RoleEntity
}

// Status returns HTTPResponse.Status
func (r DomainUpdateRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainUpdateRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentListDomainScopesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScopePage
}

// Status returns HTTPResponse.Status
func (r EnvironmentListDomainScopesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentListDomainScopesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentCreateDomainScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Scope
}

// Status returns HTTPResponse.Status
func (r EnvironmentCreateDomainScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentCreateDomainScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainGetScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Scope
}

// Status returns HTTPResponse.Status
func (r DomainGetScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainGetScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Scope
}

// Status returns HTTPResponse.Status
func (r PatchScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Scope
}

// Status returns HTTPResponse.Status
func (r UpdateScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentListDomainThemesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ThemeEntity
}

// Status returns HTTPResponse.Status
func (r EnvironmentListDomainThemesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentListDomainThemesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentCreateDomainThemeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ThemeEntity
}

// Status returns HTTPResponse.Status
func (r EnvironmentCreateDomainThemeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentCreateDomainThemeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainDeleteThemeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DomainDeleteThemeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainDeleteThemeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainGetThemeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ThemeEntity
	JSON404      *ThemeEntity
}

// Status returns HTTPResponse.Status
func (r DomainGetThemeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainGetThemeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainUpdateThemeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ThemeEntity
	JSON404      *ThemeEntity
}

// Status returns HTTPResponse.Status
func (r DomainUpdateThemeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainUpdateThemeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentListDomainUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserPage
}

// Status returns HTTPResponse.Status
func (r EnvironmentListDomainUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentListDomainUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentCreateDomainUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *User
}

// Status returns HTTPResponse.Status
func (r EnvironmentCreateDomainUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentCreateDomainUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainDeleteUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DomainDeleteUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainDeleteUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainGetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserEntity
}

// Status returns HTTPResponse.Status
func (r DomainGetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainGetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainUpdateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *User
}

// Status returns HTTPResponse.Status
func (r DomainUpdateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainUpdateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentListDomainUserAuditsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Audit
}

// Status returns HTTPResponse.Status
func (r EnvironmentListDomainUserAuditsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentListDomainUserAuditsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainGetUserAuditResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Audit
}

// Status returns HTTPResponse.Status
func (r DomainGetUserAuditResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainGetUserAuditResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainDeleteUserConsentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DomainDeleteUserConsentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainDeleteUserConsentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentListDomainUserConsentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScopeApprovalEntity
}

// Status returns HTTPResponse.Status
func (r EnvironmentListDomainUserConsentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentListDomainUserConsentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainDeleteUserConsentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DomainDeleteUserConsentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainDeleteUserConsentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainGetUserConsentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScopeApprovalEntity
}

// Status returns HTTPResponse.Status
func (r DomainGetUserConsentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainGetUserConsentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentListDomainUserCredentialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Credential
}

// Status returns HTTPResponse.Status
func (r EnvironmentListDomainUserCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentListDomainUserCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainDeleteUserCredentialResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DomainDeleteUserCredentialResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainDeleteUserCredentialResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainGetUserCredentialResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Credential
}

// Status returns HTTPResponse.Status
func (r DomainGetUserCredentialResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainGetUserCredentialResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentListDomainUserDevicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]User
}

// Status returns HTTPResponse.Status
func (r EnvironmentListDomainUserDevicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentListDomainUserDevicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainGetUserDeviceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DomainGetUserDeviceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainGetUserDeviceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentListDomainUserFactorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EnrolledFactorEntity
}

// Status returns HTTPResponse.Status
func (r EnvironmentListDomainUserFactorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentListDomainUserFactorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainDeleteUserFactorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DomainDeleteUserFactorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainDeleteUserFactorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentLockDomainUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EnvironmentLockDomainUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentLockDomainUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentResetDomainUserPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EnvironmentResetDomainUserPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentResetDomainUserPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentListDomainUserRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Role
}

// Status returns HTTPResponse.Status
func (r EnvironmentListDomainUserRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentListDomainUserRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainAddOrUpdateUserRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r DomainAddOrUpdateUserRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainAddOrUpdateUserRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainDeleteUserRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r DomainDeleteUserRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainDeleteUserRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentSendDomainUserRegistrationConfirmationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EnvironmentSendDomainUserRegistrationConfirmationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentSendDomainUserRegistrationConfirmationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DomainUpdateUserStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *User
}

// Status returns HTTPResponse.Status
func (r DomainUpdateUserStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DomainUpdateUserStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentUnlockDomainUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EnvironmentUnlockDomainUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentUnlockDomainUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentResetDomainUserNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *User
}

// Status returns HTTPResponse.Status
func (r EnvironmentResetDomainUserNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentResetDomainUserNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnvironmentListMemberPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r EnvironmentListMemberPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnvironmentListMemberPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationListPlatfomFormTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OrganizationListPlatfomFormTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationListPlatfomFormTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationCreatePlatfomFormTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OrganizationCreatePlatfomFormTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationCreatePlatfomFormTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationDeletePlatfomFormTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OrganizationDeletePlatfomFormTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationDeletePlatfomFormTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationUpdatePlatfomFormTemplateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Form
}

// Status returns HTTPResponse.Status
func (r OrganizationUpdatePlatfomFormTemplateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationUpdatePlatfomFormTemplateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationListPlatformGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Group
}

// Status returns HTTPResponse.Status
func (r OrganizationListPlatformGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationListPlatformGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationCreatePlatformGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OrganizationCreatePlatformGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationCreatePlatformGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationDeletePlatformGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OrganizationDeletePlatformGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationDeletePlatformGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationGetPlatformGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Group
}

// Status returns HTTPResponse.Status
func (r OrganizationGetPlatformGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationGetPlatformGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationUpdatePlatformGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *User
}

// Status returns HTTPResponse.Status
func (r OrganizationUpdatePlatformGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationUpdatePlatformGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationListPlatformGroupMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r OrganizationListPlatformGroupMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationListPlatformGroupMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationRemovePlatformGroupMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OrganizationRemovePlatformGroupMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationRemovePlatformGroupMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationAddPlatformGroupMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OrganizationAddPlatformGroupMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationAddPlatformGroupMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationListPlatformIdentityProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FilteredIdentityProviderInfo
}

// Status returns HTTPResponse.Status
func (r OrganizationListPlatformIdentityProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationListPlatformIdentityProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationCreatePlatformIdentityProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OrganizationCreatePlatformIdentityProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationCreatePlatformIdentityProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationDeletePlatformIdentityProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OrganizationDeletePlatformIdentityProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationDeletePlatformIdentityProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationGetPlatformIdentityProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IdentityProvider
}

// Status returns HTTPResponse.Status
func (r OrganizationGetPlatformIdentityProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationGetPlatformIdentityProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationUpdatePlatformIdentityProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *IdentityProvider
}

// Status returns HTTPResponse.Status
func (r OrganizationUpdatePlatformIdentityProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationUpdatePlatformIdentityProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationListPlatformMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MembershipListItem
}

// Status returns HTTPResponse.Status
func (r OrganizationListPlatformMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationListPlatformMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationAddOrUpdatePlatformMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OrganizationAddOrUpdatePlatformMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationAddOrUpdatePlatformMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationRemovePlatformMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OrganizationRemovePlatformMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationRemovePlatformMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationListPlatformRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleEntity
}

// Status returns HTTPResponse.Status
func (r OrganizationListPlatformRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationListPlatformRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationCreatePlatformRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OrganizationCreatePlatformRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationCreatePlatformRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationDeletePlatformRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OrganizationDeletePlatformRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationDeletePlatformRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationGetPlatformRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoleEntity
}

// Status returns HTTPResponse.Status
func (r OrganizationGetPlatformRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationGetPlatformRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationUpdatePlatformRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RoleEntity
}

// Status returns HTTPResponse.Status
func (r OrganizationUpdatePlatformRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationUpdatePlatformRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationGetPlatformSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Organization
}

// Status returns HTTPResponse.Status
func (r OrganizationGetPlatformSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationGetPlatformSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationUpdatePlatformSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Domain
}

// Status returns HTTPResponse.Status
func (r OrganizationUpdatePlatformSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationUpdatePlatformSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationListPlatformShardingTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Domain
}

// Status returns HTTPResponse.Status
func (r OrganizationListPlatformShardingTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationListPlatformShardingTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationCreatePlatformShardingTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OrganizationCreatePlatformShardingTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationCreatePlatformShardingTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationDeletePlatformShardingTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OrganizationDeletePlatformShardingTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationDeletePlatformShardingTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationGetPlatformShardingTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tag
}

// Status returns HTTPResponse.Status
func (r OrganizationGetPlatformShardingTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationGetPlatformShardingTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationUpdatePlatformShardingTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tag
}

// Status returns HTTPResponse.Status
func (r OrganizationUpdatePlatformShardingTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationUpdatePlatformShardingTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationListPlatformUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Page
}

// Status returns HTTPResponse.Status
func (r OrganizationListPlatformUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationListPlatformUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationCreatePlatformUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *User
}

// Status returns HTTPResponse.Status
func (r OrganizationCreatePlatformUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationCreatePlatformUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationDeletePlatformUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OrganizationDeletePlatformUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationDeletePlatformUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationGetPlatformUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserEntity
}

// Status returns HTTPResponse.Status
func (r OrganizationGetPlatformUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationGetPlatformUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationUpdatePlatformUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *User
}

// Status returns HTTPResponse.Status
func (r OrganizationUpdatePlatformUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationUpdatePlatformUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationResetPlatformUserPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OrganizationResetPlatformUserPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationResetPlatformUserPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationUpdatePlatformUserStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *User
}

// Status returns HTTPResponse.Status
func (r OrganizationUpdatePlatformUserStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationUpdatePlatformUserStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrganizationUpdatePlatformUserNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *User
}

// Status returns HTTPResponse.Status
func (r OrganizationUpdatePlatformUserNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrganizationUpdatePlatformUserNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlatformListAuditEventTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PlatformListAuditEventTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlatformListAuditEventTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlatformAlertStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AlertServiceStatusEntity
}

// Status returns HTTPResponse.Status
func (r PlatformAlertStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlatformAlertStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlatformGetFlowSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PlatformGetFlowSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlatformGetFlowSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlatformGetSpelGrammarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PlatformGetSpelGrammarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlatformGetSpelGrammarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlatformGetInstallationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InstallationEntity
	JSON404      *ErrorEntity
}

// Status returns HTTPResponse.Status
func (r PlatformGetInstallationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlatformGetInstallationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlatformListPluginAuthDeviceNotifiersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PlatformListPluginAuthDeviceNotifiersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlatformListPluginAuthDeviceNotifiersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlatformGetPluginAuthDeviceNotifierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PlatformGetPluginAuthDeviceNotifierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlatformGetPluginAuthDeviceNotifierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlatformGetPluginAuthDeviceNotifierSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PlatformGetPluginAuthDeviceNotifierSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlatformGetPluginAuthDeviceNotifierSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlatformListPluginBotDetectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PlatformListPluginBotDetectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlatformListPluginBotDetectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlatformGetPluginBotDetectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PlatformGetPluginBotDetectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlatformGetPluginBotDetectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlatformGetPluginBotDetectionSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PlatformGetPluginBotDetectionSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlatformGetPluginBotDetectionSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlatformListPluginCertificatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PlatformListPluginCertificatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlatformListPluginCertificatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlatformGetPluginCertificateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PlatformGetPluginCertificateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlatformGetPluginCertificateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlatformGetPluginCertificateSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PlatformGetPluginCertificateSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlatformGetPluginCertificateSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlatformListDeviceIdentifierPluginsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PlatformListDeviceIdentifierPluginsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlatformListDeviceIdentifierPluginsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlatformGetDeviceIdentifierPluginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PlatformGetDeviceIdentifierPluginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlatformGetDeviceIdentifierPluginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlatformGetDeviceIdentifierPluginSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PlatformGetDeviceIdentifierPluginSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlatformGetDeviceIdentifierPluginSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlatformListPluginExtensionGrantsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PlatformListPluginExtensionGrantsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlatformListPluginExtensionGrantsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlatformGetPluginExtensionGrantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PlatformGetPluginExtensionGrantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlatformGetPluginExtensionGrantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlatformGetPluginExtensionGrantSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PlatformGetPluginExtensionGrantSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlatformGetPluginExtensionGrantSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlatformListPluginFactorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PlatformListPluginFactorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlatformListPluginFactorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlatformGetPluginFactorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PlatformGetPluginFactorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlatformGetPluginFactorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlatformGetPluginFactorSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PlatformGetPluginFactorSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlatformGetPluginFactorSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlatformListProviderPluginsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PlatformListProviderPluginsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlatformListProviderPluginsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlatformGetIdentityProviderPluginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PlatformGetIdentityProviderPluginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlatformGetIdentityProviderPluginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlatformGetIdentityProviderPluginSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PlatformGetIdentityProviderPluginSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlatformGetIdentityProviderPluginSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlatformListPluginNotifiersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]NotifierPlugin
}

// Status returns HTTPResponse.Status
func (r PlatformListPluginNotifiersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlatformListPluginNotifiersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlatformGetPluginNotifierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NotifierPlugin
	JSON404      *ErrorEntity
}

// Status returns HTTPResponse.Status
func (r PlatformGetPluginNotifierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlatformGetPluginNotifierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlatformGetPluginNotifierSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON404      *ErrorEntity
}

// Status returns HTTPResponse.Status
func (r PlatformGetPluginNotifierSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlatformGetPluginNotifierSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlatformListPluginPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PlatformListPluginPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlatformListPluginPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlatformGetPluginPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PlatformGetPluginPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlatformGetPluginPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlatformGetPluginPolicyDocumentationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PlatformGetPluginPolicyDocumentationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlatformGetPluginPolicyDocumentationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlatformGetPluginPolicySchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PlatformGetPluginPolicySchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlatformGetPluginPolicySchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlatformListPluginReportersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PlatformListPluginReportersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlatformListPluginReportersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlatformGetPluginReporterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PlatformGetPluginReporterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlatformGetPluginReporterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlatformGetPluginReporterSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PlatformGetPluginReporterSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlatformGetPluginReporterSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlatformListPluginResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PlatformListPluginResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlatformListPluginResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlatformGetPluginResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PlatformGetPluginResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlatformGetPluginResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlatformGetPluginResourceSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PlatformGetPluginResourceSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlatformGetPluginResourceSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlatformRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Role
}

// Status returns HTTPResponse.Status
func (r PlatformRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlatformRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CurrentUserGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r CurrentUserGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CurrentUserGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CurrentUserSubscribeNewsletterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CurrentUserSubscribeNewsletterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CurrentUserSubscribeNewsletterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CurrentUserGetNewsletterTaglinesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CurrentUserGetNewsletterTaglinesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CurrentUserGetNewsletterTaglinesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CurrentUserListNotificationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserNotificationContent
}

// Status returns HTTPResponse.Status
func (r CurrentUserListNotificationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CurrentUserListNotificationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CurrentUserMarkNotificationAsReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CurrentUserMarkNotificationAsReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CurrentUserMarkNotificationAsReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AuthTokenExchangeWithResponse request returning *AuthTokenExchangeResponse
func (c *ClientWithResponses) AuthTokenExchangeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AuthTokenExchangeResponse, error) {
	rsp, err := c.AuthTokenExchange(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthTokenExchangeResponse(rsp)
}

// OrganizationListPlatformAuditsWithResponse request returning *OrganizationListPlatformAuditsResponse
func (c *ClientWithResponses) OrganizationListPlatformAuditsWithResponse(ctx context.Context, organizationId string, params *OrganizationListPlatformAuditsParams, reqEditors ...RequestEditorFn) (*OrganizationListPlatformAuditsResponse, error) {
	rsp, err := c.OrganizationListPlatformAudits(ctx, organizationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationListPlatformAuditsResponse(rsp)
}

// OrganizationGetPlatformAuditWithResponse request returning *OrganizationGetPlatformAuditResponse
func (c *ClientWithResponses) OrganizationGetPlatformAuditWithResponse(ctx context.Context, organizationId string, audit string, reqEditors ...RequestEditorFn) (*OrganizationGetPlatformAuditResponse, error) {
	rsp, err := c.OrganizationGetPlatformAudit(ctx, organizationId, audit, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationGetPlatformAuditResponse(rsp)
}

// OrganizationListEntrypointsWithResponse request returning *OrganizationListEntrypointsResponse
func (c *ClientWithResponses) OrganizationListEntrypointsWithResponse(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*OrganizationListEntrypointsResponse, error) {
	rsp, err := c.OrganizationListEntrypoints(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationListEntrypointsResponse(rsp)
}

// Create14WithBodyWithResponse request with arbitrary body returning *Create14Response
func (c *ClientWithResponses) Create14WithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*Create14Response, error) {
	rsp, err := c.Create14WithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreate14Response(rsp)
}

func (c *ClientWithResponses) Create14WithResponse(ctx context.Context, organizationId string, body Create14JSONRequestBody, reqEditors ...RequestEditorFn) (*Create14Response, error) {
	rsp, err := c.Create14(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreate14Response(rsp)
}

// OrganizationDeleteEntrypointWithResponse request returning *OrganizationDeleteEntrypointResponse
func (c *ClientWithResponses) OrganizationDeleteEntrypointWithResponse(ctx context.Context, organizationId string, entrypointId string, reqEditors ...RequestEditorFn) (*OrganizationDeleteEntrypointResponse, error) {
	rsp, err := c.OrganizationDeleteEntrypoint(ctx, organizationId, entrypointId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationDeleteEntrypointResponse(rsp)
}

// OrganizationGetEntrypointWithResponse request returning *OrganizationGetEntrypointResponse
func (c *ClientWithResponses) OrganizationGetEntrypointWithResponse(ctx context.Context, organizationId string, entrypointId string, reqEditors ...RequestEditorFn) (*OrganizationGetEntrypointResponse, error) {
	rsp, err := c.OrganizationGetEntrypoint(ctx, organizationId, entrypointId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationGetEntrypointResponse(rsp)
}

// OrganizationUpdateEntrypointWithBodyWithResponse request with arbitrary body returning *OrganizationUpdateEntrypointResponse
func (c *ClientWithResponses) OrganizationUpdateEntrypointWithBodyWithResponse(ctx context.Context, organizationId string, entrypointId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganizationUpdateEntrypointResponse, error) {
	rsp, err := c.OrganizationUpdateEntrypointWithBody(ctx, organizationId, entrypointId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationUpdateEntrypointResponse(rsp)
}

func (c *ClientWithResponses) OrganizationUpdateEntrypointWithResponse(ctx context.Context, organizationId string, entrypointId string, body OrganizationUpdateEntrypointJSONRequestBody, reqEditors ...RequestEditorFn) (*OrganizationUpdateEntrypointResponse, error) {
	rsp, err := c.OrganizationUpdateEntrypoint(ctx, organizationId, entrypointId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationUpdateEntrypointResponse(rsp)
}

// OrganizationListPlatfomEnvironmentsWithResponse request returning *OrganizationListPlatfomEnvironmentsResponse
func (c *ClientWithResponses) OrganizationListPlatfomEnvironmentsWithResponse(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*OrganizationListPlatfomEnvironmentsResponse, error) {
	rsp, err := c.OrganizationListPlatfomEnvironments(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationListPlatfomEnvironmentsResponse(rsp)
}

// EnvironmentListDomainsWithResponse request returning *EnvironmentListDomainsResponse
func (c *ClientWithResponses) EnvironmentListDomainsWithResponse(ctx context.Context, organizationId string, environmentId string, params *EnvironmentListDomainsParams, reqEditors ...RequestEditorFn) (*EnvironmentListDomainsResponse, error) {
	rsp, err := c.EnvironmentListDomains(ctx, organizationId, environmentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentListDomainsResponse(rsp)
}

// EnvironmentCreateDomainWithBodyWithResponse request with arbitrary body returning *EnvironmentCreateDomainResponse
func (c *ClientWithResponses) EnvironmentCreateDomainWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainResponse, error) {
	rsp, err := c.EnvironmentCreateDomainWithBody(ctx, organizationId, environmentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentCreateDomainResponse(rsp)
}

func (c *ClientWithResponses) EnvironmentCreateDomainWithResponse(ctx context.Context, organizationId string, environmentId string, body EnvironmentCreateDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainResponse, error) {
	rsp, err := c.EnvironmentCreateDomain(ctx, organizationId, environmentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentCreateDomainResponse(rsp)
}

// DomainGetByHridWithResponse request returning *DomainGetByHridResponse
func (c *ClientWithResponses) DomainGetByHridWithResponse(ctx context.Context, organizationId string, environmentId string, hrid string, reqEditors ...RequestEditorFn) (*DomainGetByHridResponse, error) {
	rsp, err := c.DomainGetByHrid(ctx, organizationId, environmentId, hrid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainGetByHridResponse(rsp)
}

// DomainDeleteWithResponse request returning *DomainDeleteResponse
func (c *ClientWithResponses) DomainDeleteWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*DomainDeleteResponse, error) {
	rsp, err := c.DomainDelete(ctx, organizationId, environmentId, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainDeleteResponse(rsp)
}

// DomainGetWithResponse request returning *DomainGetResponse
func (c *ClientWithResponses) DomainGetWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*DomainGetResponse, error) {
	rsp, err := c.DomainGet(ctx, organizationId, environmentId, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainGetResponse(rsp)
}

// EnvironmentPatchDomainWithBodyWithResponse request with arbitrary body returning *EnvironmentPatchDomainResponse
func (c *ClientWithResponses) EnvironmentPatchDomainWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentPatchDomainResponse, error) {
	rsp, err := c.EnvironmentPatchDomainWithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentPatchDomainResponse(rsp)
}

func (c *ClientWithResponses) EnvironmentPatchDomainWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentPatchDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentPatchDomainResponse, error) {
	rsp, err := c.EnvironmentPatchDomain(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentPatchDomainResponse(rsp)
}

// DomainUpdateWithBodyWithResponse request with arbitrary body returning *DomainUpdateResponse
func (c *ClientWithResponses) DomainUpdateWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainUpdateResponse, error) {
	rsp, err := c.DomainUpdateWithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainUpdateResponse(rsp)
}

func (c *ClientWithResponses) DomainUpdateWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body DomainUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainUpdateResponse, error) {
	rsp, err := c.DomainUpdate(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainUpdateResponse(rsp)
}

// EnvironmentListDomainAlertNotifiersWithResponse request returning *EnvironmentListDomainAlertNotifiersResponse
func (c *ClientWithResponses) EnvironmentListDomainAlertNotifiersWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*EnvironmentListDomainAlertNotifiersResponse, error) {
	rsp, err := c.EnvironmentListDomainAlertNotifiers(ctx, organizationId, environmentId, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentListDomainAlertNotifiersResponse(rsp)
}

// EnvironmentCreateDomainAlertNotifierWithBodyWithResponse request with arbitrary body returning *EnvironmentCreateDomainAlertNotifierResponse
func (c *ClientWithResponses) EnvironmentCreateDomainAlertNotifierWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainAlertNotifierResponse, error) {
	rsp, err := c.EnvironmentCreateDomainAlertNotifierWithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentCreateDomainAlertNotifierResponse(rsp)
}

func (c *ClientWithResponses) EnvironmentCreateDomainAlertNotifierWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainAlertNotifierJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainAlertNotifierResponse, error) {
	rsp, err := c.EnvironmentCreateDomainAlertNotifier(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentCreateDomainAlertNotifierResponse(rsp)
}

// DomainDeleteAlertNotifierWithResponse request returning *DomainDeleteAlertNotifierResponse
func (c *ClientWithResponses) DomainDeleteAlertNotifierWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, notifierId string, reqEditors ...RequestEditorFn) (*DomainDeleteAlertNotifierResponse, error) {
	rsp, err := c.DomainDeleteAlertNotifier(ctx, organizationId, environmentId, domain, notifierId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainDeleteAlertNotifierResponse(rsp)
}

// DomainGetAlertNotifierWithResponse request returning *DomainGetAlertNotifierResponse
func (c *ClientWithResponses) DomainGetAlertNotifierWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, notifierId string, reqEditors ...RequestEditorFn) (*DomainGetAlertNotifierResponse, error) {
	rsp, err := c.DomainGetAlertNotifier(ctx, organizationId, environmentId, domain, notifierId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainGetAlertNotifierResponse(rsp)
}

// EnvironmentPatchDomainAlertNotifierWithBodyWithResponse request with arbitrary body returning *EnvironmentPatchDomainAlertNotifierResponse
func (c *ClientWithResponses) EnvironmentPatchDomainAlertNotifierWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, notifierId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentPatchDomainAlertNotifierResponse, error) {
	rsp, err := c.EnvironmentPatchDomainAlertNotifierWithBody(ctx, organizationId, environmentId, domain, notifierId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentPatchDomainAlertNotifierResponse(rsp)
}

func (c *ClientWithResponses) EnvironmentPatchDomainAlertNotifierWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, notifierId string, body EnvironmentPatchDomainAlertNotifierJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentPatchDomainAlertNotifierResponse, error) {
	rsp, err := c.EnvironmentPatchDomainAlertNotifier(ctx, organizationId, environmentId, domain, notifierId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentPatchDomainAlertNotifierResponse(rsp)
}

// EnvironmentListDomainAlertTriggersWithResponse request returning *EnvironmentListDomainAlertTriggersResponse
func (c *ClientWithResponses) EnvironmentListDomainAlertTriggersWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*EnvironmentListDomainAlertTriggersResponse, error) {
	rsp, err := c.EnvironmentListDomainAlertTriggers(ctx, organizationId, environmentId, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentListDomainAlertTriggersResponse(rsp)
}

// EnvironmentPatchDomainAlertTriggersWithBodyWithResponse request with arbitrary body returning *EnvironmentPatchDomainAlertTriggersResponse
func (c *ClientWithResponses) EnvironmentPatchDomainAlertTriggersWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentPatchDomainAlertTriggersResponse, error) {
	rsp, err := c.EnvironmentPatchDomainAlertTriggersWithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentPatchDomainAlertTriggersResponse(rsp)
}

func (c *ClientWithResponses) EnvironmentPatchDomainAlertTriggersWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentPatchDomainAlertTriggersJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentPatchDomainAlertTriggersResponse, error) {
	rsp, err := c.EnvironmentPatchDomainAlertTriggers(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentPatchDomainAlertTriggersResponse(rsp)
}

// DomainGetAnalyticsWithResponse request returning *DomainGetAnalyticsResponse
func (c *ClientWithResponses) DomainGetAnalyticsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *DomainGetAnalyticsParams, reqEditors ...RequestEditorFn) (*DomainGetAnalyticsResponse, error) {
	rsp, err := c.DomainGetAnalytics(ctx, organizationId, environmentId, domain, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainGetAnalyticsResponse(rsp)
}

// EnvironmentListDomainApplicationsWithResponse request returning *EnvironmentListDomainApplicationsResponse
func (c *ClientWithResponses) EnvironmentListDomainApplicationsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *EnvironmentListDomainApplicationsParams, reqEditors ...RequestEditorFn) (*EnvironmentListDomainApplicationsResponse, error) {
	rsp, err := c.EnvironmentListDomainApplications(ctx, organizationId, environmentId, domain, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentListDomainApplicationsResponse(rsp)
}

// EnvironmentCreateDomainApplicationWithBodyWithResponse request with arbitrary body returning *EnvironmentCreateDomainApplicationResponse
func (c *ClientWithResponses) EnvironmentCreateDomainApplicationWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainApplicationResponse, error) {
	rsp, err := c.EnvironmentCreateDomainApplicationWithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentCreateDomainApplicationResponse(rsp)
}

func (c *ClientWithResponses) EnvironmentCreateDomainApplicationWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainApplicationResponse, error) {
	rsp, err := c.EnvironmentCreateDomainApplication(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentCreateDomainApplicationResponse(rsp)
}

// DomainDeleteApplicationWithResponse request returning *DomainDeleteApplicationResponse
func (c *ClientWithResponses) DomainDeleteApplicationWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*DomainDeleteApplicationResponse, error) {
	rsp, err := c.DomainDeleteApplication(ctx, organizationId, environmentId, domain, application, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainDeleteApplicationResponse(rsp)
}

// ApplicationGetDomainApplicationWithResponse request returning *ApplicationGetDomainApplicationResponse
func (c *ClientWithResponses) ApplicationGetDomainApplicationWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*ApplicationGetDomainApplicationResponse, error) {
	rsp, err := c.ApplicationGetDomainApplication(ctx, organizationId, environmentId, domain, application, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationGetDomainApplicationResponse(rsp)
}

// EnvironmentPatchDomainApplicationWithBodyWithResponse request with arbitrary body returning *EnvironmentPatchDomainApplicationResponse
func (c *ClientWithResponses) EnvironmentPatchDomainApplicationWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentPatchDomainApplicationResponse, error) {
	rsp, err := c.EnvironmentPatchDomainApplicationWithBody(ctx, organizationId, environmentId, domain, application, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentPatchDomainApplicationResponse(rsp)
}

func (c *ClientWithResponses) EnvironmentPatchDomainApplicationWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, body EnvironmentPatchDomainApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentPatchDomainApplicationResponse, error) {
	rsp, err := c.EnvironmentPatchDomainApplication(ctx, organizationId, environmentId, domain, application, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentPatchDomainApplicationResponse(rsp)
}

// DomainUpdateApplicationWithBodyWithResponse request with arbitrary body returning *DomainUpdateApplicationResponse
func (c *ClientWithResponses) DomainUpdateApplicationWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainUpdateApplicationResponse, error) {
	rsp, err := c.DomainUpdateApplicationWithBody(ctx, organizationId, environmentId, domain, application, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainUpdateApplicationResponse(rsp)
}

func (c *ClientWithResponses) DomainUpdateApplicationWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, body DomainUpdateApplicationJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainUpdateApplicationResponse, error) {
	rsp, err := c.DomainUpdateApplication(ctx, organizationId, environmentId, domain, application, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainUpdateApplicationResponse(rsp)
}

// ApplicationGetAnalyticsWithResponse request returning *ApplicationGetAnalyticsResponse
func (c *ClientWithResponses) ApplicationGetAnalyticsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, params *ApplicationGetAnalyticsParams, reqEditors ...RequestEditorFn) (*ApplicationGetAnalyticsResponse, error) {
	rsp, err := c.ApplicationGetAnalytics(ctx, organizationId, environmentId, domain, application, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationGetAnalyticsResponse(rsp)
}

// ApplicationListEmailsWithResponse request returning *ApplicationListEmailsResponse
func (c *ClientWithResponses) ApplicationListEmailsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, params *ApplicationListEmailsParams, reqEditors ...RequestEditorFn) (*ApplicationListEmailsResponse, error) {
	rsp, err := c.ApplicationListEmails(ctx, organizationId, environmentId, domain, application, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationListEmailsResponse(rsp)
}

// ApplicationCreateEmailWithBodyWithResponse request with arbitrary body returning *ApplicationCreateEmailResponse
func (c *ClientWithResponses) ApplicationCreateEmailWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApplicationCreateEmailResponse, error) {
	rsp, err := c.ApplicationCreateEmailWithBody(ctx, organizationId, environmentId, domain, application, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationCreateEmailResponse(rsp)
}

func (c *ClientWithResponses) ApplicationCreateEmailWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, body ApplicationCreateEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*ApplicationCreateEmailResponse, error) {
	rsp, err := c.ApplicationCreateEmail(ctx, organizationId, environmentId, domain, application, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationCreateEmailResponse(rsp)
}

// ApplicationDeleteEmailWithResponse request returning *ApplicationDeleteEmailResponse
func (c *ClientWithResponses) ApplicationDeleteEmailWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, email string, reqEditors ...RequestEditorFn) (*ApplicationDeleteEmailResponse, error) {
	rsp, err := c.ApplicationDeleteEmail(ctx, organizationId, environmentId, domain, application, email, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationDeleteEmailResponse(rsp)
}

// ApplicationUpdateEmailWithBodyWithResponse request with arbitrary body returning *ApplicationUpdateEmailResponse
func (c *ClientWithResponses) ApplicationUpdateEmailWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, email string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApplicationUpdateEmailResponse, error) {
	rsp, err := c.ApplicationUpdateEmailWithBody(ctx, organizationId, environmentId, domain, application, email, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationUpdateEmailResponse(rsp)
}

func (c *ClientWithResponses) ApplicationUpdateEmailWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, email string, body ApplicationUpdateEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*ApplicationUpdateEmailResponse, error) {
	rsp, err := c.ApplicationUpdateEmail(ctx, organizationId, environmentId, domain, application, email, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationUpdateEmailResponse(rsp)
}

// ApplicationListFlowsWithResponse request returning *ApplicationListFlowsResponse
func (c *ClientWithResponses) ApplicationListFlowsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*ApplicationListFlowsResponse, error) {
	rsp, err := c.ApplicationListFlows(ctx, organizationId, environmentId, domain, application, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationListFlowsResponse(rsp)
}

// ApplicationCreateFlowWithBodyWithResponse request with arbitrary body returning *ApplicationCreateFlowResponse
func (c *ClientWithResponses) ApplicationCreateFlowWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApplicationCreateFlowResponse, error) {
	rsp, err := c.ApplicationCreateFlowWithBody(ctx, organizationId, environmentId, domain, application, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationCreateFlowResponse(rsp)
}

func (c *ClientWithResponses) ApplicationCreateFlowWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, body ApplicationCreateFlowJSONRequestBody, reqEditors ...RequestEditorFn) (*ApplicationCreateFlowResponse, error) {
	rsp, err := c.ApplicationCreateFlow(ctx, organizationId, environmentId, domain, application, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationCreateFlowResponse(rsp)
}

// ApplicationGetFlowWithResponse request returning *ApplicationGetFlowResponse
func (c *ClientWithResponses) ApplicationGetFlowWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, flow string, reqEditors ...RequestEditorFn) (*ApplicationGetFlowResponse, error) {
	rsp, err := c.ApplicationGetFlow(ctx, organizationId, environmentId, domain, application, flow, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationGetFlowResponse(rsp)
}

// ApplicationUpdateFlowWithBodyWithResponse request with arbitrary body returning *ApplicationUpdateFlowResponse
func (c *ClientWithResponses) ApplicationUpdateFlowWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, flow string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApplicationUpdateFlowResponse, error) {
	rsp, err := c.ApplicationUpdateFlowWithBody(ctx, organizationId, environmentId, domain, application, flow, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationUpdateFlowResponse(rsp)
}

func (c *ClientWithResponses) ApplicationUpdateFlowWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, flow string, body ApplicationUpdateFlowJSONRequestBody, reqEditors ...RequestEditorFn) (*ApplicationUpdateFlowResponse, error) {
	rsp, err := c.ApplicationUpdateFlow(ctx, organizationId, environmentId, domain, application, flow, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationUpdateFlowResponse(rsp)
}

// ApplicationListFormsWithResponse request returning *ApplicationListFormsResponse
func (c *ClientWithResponses) ApplicationListFormsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, params *ApplicationListFormsParams, reqEditors ...RequestEditorFn) (*ApplicationListFormsResponse, error) {
	rsp, err := c.ApplicationListForms(ctx, organizationId, environmentId, domain, application, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationListFormsResponse(rsp)
}

// ApplicationCreateFormWithBodyWithResponse request with arbitrary body returning *ApplicationCreateFormResponse
func (c *ClientWithResponses) ApplicationCreateFormWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApplicationCreateFormResponse, error) {
	rsp, err := c.ApplicationCreateFormWithBody(ctx, organizationId, environmentId, domain, application, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationCreateFormResponse(rsp)
}

func (c *ClientWithResponses) ApplicationCreateFormWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, body ApplicationCreateFormJSONRequestBody, reqEditors ...RequestEditorFn) (*ApplicationCreateFormResponse, error) {
	rsp, err := c.ApplicationCreateForm(ctx, organizationId, environmentId, domain, application, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationCreateFormResponse(rsp)
}

// ApplicationDeleteFormWithResponse request returning *ApplicationDeleteFormResponse
func (c *ClientWithResponses) ApplicationDeleteFormWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, form string, reqEditors ...RequestEditorFn) (*ApplicationDeleteFormResponse, error) {
	rsp, err := c.ApplicationDeleteForm(ctx, organizationId, environmentId, domain, application, form, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationDeleteFormResponse(rsp)
}

// ApplicationUpdateFormWithBodyWithResponse request with arbitrary body returning *ApplicationUpdateFormResponse
func (c *ClientWithResponses) ApplicationUpdateFormWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, form string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApplicationUpdateFormResponse, error) {
	rsp, err := c.ApplicationUpdateFormWithBody(ctx, organizationId, environmentId, domain, application, form, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationUpdateFormResponse(rsp)
}

func (c *ClientWithResponses) ApplicationUpdateFormWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, form string, body ApplicationUpdateFormJSONRequestBody, reqEditors ...RequestEditorFn) (*ApplicationUpdateFormResponse, error) {
	rsp, err := c.ApplicationUpdateForm(ctx, organizationId, environmentId, domain, application, form, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationUpdateFormResponse(rsp)
}

// ApplicationListMembersWithResponse request returning *ApplicationListMembersResponse
func (c *ClientWithResponses) ApplicationListMembersWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*ApplicationListMembersResponse, error) {
	rsp, err := c.ApplicationListMembers(ctx, organizationId, environmentId, domain, application, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationListMembersResponse(rsp)
}

// ApplicationAddOrUpdateMemberWithBodyWithResponse request with arbitrary body returning *ApplicationAddOrUpdateMemberResponse
func (c *ClientWithResponses) ApplicationAddOrUpdateMemberWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApplicationAddOrUpdateMemberResponse, error) {
	rsp, err := c.ApplicationAddOrUpdateMemberWithBody(ctx, organizationId, environmentId, domain, application, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationAddOrUpdateMemberResponse(rsp)
}

func (c *ClientWithResponses) ApplicationAddOrUpdateMemberWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, body ApplicationAddOrUpdateMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*ApplicationAddOrUpdateMemberResponse, error) {
	rsp, err := c.ApplicationAddOrUpdateMember(ctx, organizationId, environmentId, domain, application, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationAddOrUpdateMemberResponse(rsp)
}

// ApplicationListMemberPermissionsWithResponse request returning *ApplicationListMemberPermissionsResponse
func (c *ClientWithResponses) ApplicationListMemberPermissionsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*ApplicationListMemberPermissionsResponse, error) {
	rsp, err := c.ApplicationListMemberPermissions(ctx, organizationId, environmentId, domain, application, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationListMemberPermissionsResponse(rsp)
}

// ApplicationDeleteMemberWithResponse request returning *ApplicationDeleteMemberResponse
func (c *ClientWithResponses) ApplicationDeleteMemberWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, member string, reqEditors ...RequestEditorFn) (*ApplicationDeleteMemberResponse, error) {
	rsp, err := c.ApplicationDeleteMember(ctx, organizationId, environmentId, domain, application, member, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationDeleteMemberResponse(rsp)
}

// ApplicationListResourcesWithResponse request returning *ApplicationListResourcesResponse
func (c *ClientWithResponses) ApplicationListResourcesWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, params *ApplicationListResourcesParams, reqEditors ...RequestEditorFn) (*ApplicationListResourcesResponse, error) {
	rsp, err := c.ApplicationListResources(ctx, organizationId, environmentId, domain, application, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationListResourcesResponse(rsp)
}

// ApplicationGetResourceWithResponse request returning *ApplicationGetResourceResponse
func (c *ClientWithResponses) ApplicationGetResourceWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, resource string, reqEditors ...RequestEditorFn) (*ApplicationGetResourceResponse, error) {
	rsp, err := c.ApplicationGetResource(ctx, organizationId, environmentId, domain, application, resource, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationGetResourceResponse(rsp)
}

// ApplicationGetResourceAccessPoliciesWithResponse request returning *ApplicationGetResourceAccessPoliciesResponse
func (c *ClientWithResponses) ApplicationGetResourceAccessPoliciesWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, resource string, reqEditors ...RequestEditorFn) (*ApplicationGetResourceAccessPoliciesResponse, error) {
	rsp, err := c.ApplicationGetResourceAccessPolicies(ctx, organizationId, environmentId, domain, application, resource, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationGetResourceAccessPoliciesResponse(rsp)
}

// ApplicationGetResourceAccessPolicyWithResponse request returning *ApplicationGetResourceAccessPolicyResponse
func (c *ClientWithResponses) ApplicationGetResourceAccessPolicyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, resource string, policy string, reqEditors ...RequestEditorFn) (*ApplicationGetResourceAccessPolicyResponse, error) {
	rsp, err := c.ApplicationGetResourceAccessPolicy(ctx, organizationId, environmentId, domain, application, resource, policy, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationGetResourceAccessPolicyResponse(rsp)
}

// ApplicationRenewSecretWithResponse request returning *ApplicationRenewSecretResponse
func (c *ClientWithResponses) ApplicationRenewSecretWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, reqEditors ...RequestEditorFn) (*ApplicationRenewSecretResponse, error) {
	rsp, err := c.ApplicationRenewSecret(ctx, organizationId, environmentId, domain, application, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationRenewSecretResponse(rsp)
}

// ApplicationUpdateTypeWithBodyWithResponse request with arbitrary body returning *ApplicationUpdateTypeResponse
func (c *ClientWithResponses) ApplicationUpdateTypeWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApplicationUpdateTypeResponse, error) {
	rsp, err := c.ApplicationUpdateTypeWithBody(ctx, organizationId, environmentId, domain, application, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationUpdateTypeResponse(rsp)
}

func (c *ClientWithResponses) ApplicationUpdateTypeWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, application string, body ApplicationUpdateTypeJSONRequestBody, reqEditors ...RequestEditorFn) (*ApplicationUpdateTypeResponse, error) {
	rsp, err := c.ApplicationUpdateType(ctx, organizationId, environmentId, domain, application, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplicationUpdateTypeResponse(rsp)
}

// EnvironmentListDomainAuditsWithResponse request returning *EnvironmentListDomainAuditsResponse
func (c *ClientWithResponses) EnvironmentListDomainAuditsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *EnvironmentListDomainAuditsParams, reqEditors ...RequestEditorFn) (*EnvironmentListDomainAuditsResponse, error) {
	rsp, err := c.EnvironmentListDomainAudits(ctx, organizationId, environmentId, domain, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentListDomainAuditsResponse(rsp)
}

// DomainGetAuditWithResponse request returning *DomainGetAuditResponse
func (c *ClientWithResponses) DomainGetAuditWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, audit string, reqEditors ...RequestEditorFn) (*DomainGetAuditResponse, error) {
	rsp, err := c.DomainGetAudit(ctx, organizationId, environmentId, domain, audit, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainGetAuditResponse(rsp)
}

// EnvironmentListDomainAuthDeviceNotifierWithResponse request returning *EnvironmentListDomainAuthDeviceNotifierResponse
func (c *ClientWithResponses) EnvironmentListDomainAuthDeviceNotifierWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*EnvironmentListDomainAuthDeviceNotifierResponse, error) {
	rsp, err := c.EnvironmentListDomainAuthDeviceNotifier(ctx, organizationId, environmentId, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentListDomainAuthDeviceNotifierResponse(rsp)
}

// EnvironmentCreateDomainAuthDeviceNotifiersWithBodyWithResponse request with arbitrary body returning *EnvironmentCreateDomainAuthDeviceNotifiersResponse
func (c *ClientWithResponses) EnvironmentCreateDomainAuthDeviceNotifiersWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainAuthDeviceNotifiersResponse, error) {
	rsp, err := c.EnvironmentCreateDomainAuthDeviceNotifiersWithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentCreateDomainAuthDeviceNotifiersResponse(rsp)
}

func (c *ClientWithResponses) EnvironmentCreateDomainAuthDeviceNotifiersWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainAuthDeviceNotifiersJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainAuthDeviceNotifiersResponse, error) {
	rsp, err := c.EnvironmentCreateDomainAuthDeviceNotifiers(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentCreateDomainAuthDeviceNotifiersResponse(rsp)
}

// DomainDeleteAuthDeviceNotifierWithResponse request returning *DomainDeleteAuthDeviceNotifierResponse
func (c *ClientWithResponses) DomainDeleteAuthDeviceNotifierWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, authDeviceNotifier string, reqEditors ...RequestEditorFn) (*DomainDeleteAuthDeviceNotifierResponse, error) {
	rsp, err := c.DomainDeleteAuthDeviceNotifier(ctx, organizationId, environmentId, domain, authDeviceNotifier, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainDeleteAuthDeviceNotifierResponse(rsp)
}

// DomainGetAuthDeviceNotifierWithResponse request returning *DomainGetAuthDeviceNotifierResponse
func (c *ClientWithResponses) DomainGetAuthDeviceNotifierWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, authDeviceNotifier string, reqEditors ...RequestEditorFn) (*DomainGetAuthDeviceNotifierResponse, error) {
	rsp, err := c.DomainGetAuthDeviceNotifier(ctx, organizationId, environmentId, domain, authDeviceNotifier, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainGetAuthDeviceNotifierResponse(rsp)
}

// DomainUpdateAuthDeviceNotifierWithBodyWithResponse request with arbitrary body returning *DomainUpdateAuthDeviceNotifierResponse
func (c *ClientWithResponses) DomainUpdateAuthDeviceNotifierWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, authDeviceNotifier string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainUpdateAuthDeviceNotifierResponse, error) {
	rsp, err := c.DomainUpdateAuthDeviceNotifierWithBody(ctx, organizationId, environmentId, domain, authDeviceNotifier, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainUpdateAuthDeviceNotifierResponse(rsp)
}

func (c *ClientWithResponses) DomainUpdateAuthDeviceNotifierWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, authDeviceNotifier string, body DomainUpdateAuthDeviceNotifierJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainUpdateAuthDeviceNotifierResponse, error) {
	rsp, err := c.DomainUpdateAuthDeviceNotifier(ctx, organizationId, environmentId, domain, authDeviceNotifier, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainUpdateAuthDeviceNotifierResponse(rsp)
}

// EnvironmentListDomainBotDetectionsWithResponse request returning *EnvironmentListDomainBotDetectionsResponse
func (c *ClientWithResponses) EnvironmentListDomainBotDetectionsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*EnvironmentListDomainBotDetectionsResponse, error) {
	rsp, err := c.EnvironmentListDomainBotDetections(ctx, organizationId, environmentId, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentListDomainBotDetectionsResponse(rsp)
}

// EnvironmentCreateDomainBotDetectionWithBodyWithResponse request with arbitrary body returning *EnvironmentCreateDomainBotDetectionResponse
func (c *ClientWithResponses) EnvironmentCreateDomainBotDetectionWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainBotDetectionResponse, error) {
	rsp, err := c.EnvironmentCreateDomainBotDetectionWithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentCreateDomainBotDetectionResponse(rsp)
}

func (c *ClientWithResponses) EnvironmentCreateDomainBotDetectionWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainBotDetectionJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainBotDetectionResponse, error) {
	rsp, err := c.EnvironmentCreateDomainBotDetection(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentCreateDomainBotDetectionResponse(rsp)
}

// DomainDeleteBotDetectionWithResponse request returning *DomainDeleteBotDetectionResponse
func (c *ClientWithResponses) DomainDeleteBotDetectionWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, botDetection string, reqEditors ...RequestEditorFn) (*DomainDeleteBotDetectionResponse, error) {
	rsp, err := c.DomainDeleteBotDetection(ctx, organizationId, environmentId, domain, botDetection, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainDeleteBotDetectionResponse(rsp)
}

// DomainGetBotDetectionWithResponse request returning *DomainGetBotDetectionResponse
func (c *ClientWithResponses) DomainGetBotDetectionWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, botDetection string, reqEditors ...RequestEditorFn) (*DomainGetBotDetectionResponse, error) {
	rsp, err := c.DomainGetBotDetection(ctx, organizationId, environmentId, domain, botDetection, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainGetBotDetectionResponse(rsp)
}

// DomainUpdateBotDetectionWithBodyWithResponse request with arbitrary body returning *DomainUpdateBotDetectionResponse
func (c *ClientWithResponses) DomainUpdateBotDetectionWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, botDetection string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainUpdateBotDetectionResponse, error) {
	rsp, err := c.DomainUpdateBotDetectionWithBody(ctx, organizationId, environmentId, domain, botDetection, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainUpdateBotDetectionResponse(rsp)
}

func (c *ClientWithResponses) DomainUpdateBotDetectionWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, botDetection string, body DomainUpdateBotDetectionJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainUpdateBotDetectionResponse, error) {
	rsp, err := c.DomainUpdateBotDetection(ctx, organizationId, environmentId, domain, botDetection, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainUpdateBotDetectionResponse(rsp)
}

// EnvironmentListDomainCertificatesWithResponse request returning *EnvironmentListDomainCertificatesResponse
func (c *ClientWithResponses) EnvironmentListDomainCertificatesWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *EnvironmentListDomainCertificatesParams, reqEditors ...RequestEditorFn) (*EnvironmentListDomainCertificatesResponse, error) {
	rsp, err := c.EnvironmentListDomainCertificates(ctx, organizationId, environmentId, domain, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentListDomainCertificatesResponse(rsp)
}

// EnvironmentCreateDomainCertificateWithBodyWithResponse request with arbitrary body returning *EnvironmentCreateDomainCertificateResponse
func (c *ClientWithResponses) EnvironmentCreateDomainCertificateWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainCertificateResponse, error) {
	rsp, err := c.EnvironmentCreateDomainCertificateWithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentCreateDomainCertificateResponse(rsp)
}

func (c *ClientWithResponses) EnvironmentCreateDomainCertificateWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainCertificateJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainCertificateResponse, error) {
	rsp, err := c.EnvironmentCreateDomainCertificate(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentCreateDomainCertificateResponse(rsp)
}

// EnvironmentRotateDomainCertificateWithResponse request returning *EnvironmentRotateDomainCertificateResponse
func (c *ClientWithResponses) EnvironmentRotateDomainCertificateWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*EnvironmentRotateDomainCertificateResponse, error) {
	rsp, err := c.EnvironmentRotateDomainCertificate(ctx, organizationId, environmentId, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentRotateDomainCertificateResponse(rsp)
}

// DomainDeleteCertificateWithResponse request returning *DomainDeleteCertificateResponse
func (c *ClientWithResponses) DomainDeleteCertificateWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, reqEditors ...RequestEditorFn) (*DomainDeleteCertificateResponse, error) {
	rsp, err := c.DomainDeleteCertificate(ctx, organizationId, environmentId, domain, certificate, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainDeleteCertificateResponse(rsp)
}

// DomainGetCertificateWithResponse request returning *DomainGetCertificateResponse
func (c *ClientWithResponses) DomainGetCertificateWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, reqEditors ...RequestEditorFn) (*DomainGetCertificateResponse, error) {
	rsp, err := c.DomainGetCertificate(ctx, organizationId, environmentId, domain, certificate, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainGetCertificateResponse(rsp)
}

// DomainUpdateCertificateWithBodyWithResponse request with arbitrary body returning *DomainUpdateCertificateResponse
func (c *ClientWithResponses) DomainUpdateCertificateWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainUpdateCertificateResponse, error) {
	rsp, err := c.DomainUpdateCertificateWithBody(ctx, organizationId, environmentId, domain, certificate, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainUpdateCertificateResponse(rsp)
}

func (c *ClientWithResponses) DomainUpdateCertificateWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, body DomainUpdateCertificateJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainUpdateCertificateResponse, error) {
	rsp, err := c.DomainUpdateCertificate(ctx, organizationId, environmentId, domain, certificate, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainUpdateCertificateResponse(rsp)
}

// DomainGetCertificatePublicKeyWithResponse request returning *DomainGetCertificatePublicKeyResponse
func (c *ClientWithResponses) DomainGetCertificatePublicKeyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, reqEditors ...RequestEditorFn) (*DomainGetCertificatePublicKeyResponse, error) {
	rsp, err := c.DomainGetCertificatePublicKey(ctx, organizationId, environmentId, domain, certificate, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainGetCertificatePublicKeyResponse(rsp)
}

// EnvironmentListDomainCertificatePublicKeysWithResponse request returning *EnvironmentListDomainCertificatePublicKeysResponse
func (c *ClientWithResponses) EnvironmentListDomainCertificatePublicKeysWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, certificate string, reqEditors ...RequestEditorFn) (*EnvironmentListDomainCertificatePublicKeysResponse, error) {
	rsp, err := c.EnvironmentListDomainCertificatePublicKeys(ctx, organizationId, environmentId, domain, certificate, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentListDomainCertificatePublicKeysResponse(rsp)
}

// EnvironmentListDomainDeviceIdentifiersWithResponse request returning *EnvironmentListDomainDeviceIdentifiersResponse
func (c *ClientWithResponses) EnvironmentListDomainDeviceIdentifiersWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*EnvironmentListDomainDeviceIdentifiersResponse, error) {
	rsp, err := c.EnvironmentListDomainDeviceIdentifiers(ctx, organizationId, environmentId, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentListDomainDeviceIdentifiersResponse(rsp)
}

// EnvironmentCreateDomainDeviceIdentifierWithBodyWithResponse request with arbitrary body returning *EnvironmentCreateDomainDeviceIdentifierResponse
func (c *ClientWithResponses) EnvironmentCreateDomainDeviceIdentifierWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainDeviceIdentifierResponse, error) {
	rsp, err := c.EnvironmentCreateDomainDeviceIdentifierWithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentCreateDomainDeviceIdentifierResponse(rsp)
}

func (c *ClientWithResponses) EnvironmentCreateDomainDeviceIdentifierWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainDeviceIdentifierJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainDeviceIdentifierResponse, error) {
	rsp, err := c.EnvironmentCreateDomainDeviceIdentifier(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentCreateDomainDeviceIdentifierResponse(rsp)
}

// DomainDeleteDeviceIdentifierWithResponse request returning *DomainDeleteDeviceIdentifierResponse
func (c *ClientWithResponses) DomainDeleteDeviceIdentifierWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, deviceIdentifier string, reqEditors ...RequestEditorFn) (*DomainDeleteDeviceIdentifierResponse, error) {
	rsp, err := c.DomainDeleteDeviceIdentifier(ctx, organizationId, environmentId, domain, deviceIdentifier, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainDeleteDeviceIdentifierResponse(rsp)
}

// DomainGetDeviceIdentifierWithResponse request returning *DomainGetDeviceIdentifierResponse
func (c *ClientWithResponses) DomainGetDeviceIdentifierWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, deviceIdentifier string, reqEditors ...RequestEditorFn) (*DomainGetDeviceIdentifierResponse, error) {
	rsp, err := c.DomainGetDeviceIdentifier(ctx, organizationId, environmentId, domain, deviceIdentifier, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainGetDeviceIdentifierResponse(rsp)
}

// DomainUpdateDeviceIdentifierWithBodyWithResponse request with arbitrary body returning *DomainUpdateDeviceIdentifierResponse
func (c *ClientWithResponses) DomainUpdateDeviceIdentifierWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, deviceIdentifier string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainUpdateDeviceIdentifierResponse, error) {
	rsp, err := c.DomainUpdateDeviceIdentifierWithBody(ctx, organizationId, environmentId, domain, deviceIdentifier, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainUpdateDeviceIdentifierResponse(rsp)
}

func (c *ClientWithResponses) DomainUpdateDeviceIdentifierWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, deviceIdentifier string, body DomainUpdateDeviceIdentifierJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainUpdateDeviceIdentifierResponse, error) {
	rsp, err := c.DomainUpdateDeviceIdentifier(ctx, organizationId, environmentId, domain, deviceIdentifier, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainUpdateDeviceIdentifierResponse(rsp)
}

// EnvironmentListDomainEmailsWithResponse request returning *EnvironmentListDomainEmailsResponse
func (c *ClientWithResponses) EnvironmentListDomainEmailsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *EnvironmentListDomainEmailsParams, reqEditors ...RequestEditorFn) (*EnvironmentListDomainEmailsResponse, error) {
	rsp, err := c.EnvironmentListDomainEmails(ctx, organizationId, environmentId, domain, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentListDomainEmailsResponse(rsp)
}

// EnvironmentCreateDomainEmailWithBodyWithResponse request with arbitrary body returning *EnvironmentCreateDomainEmailResponse
func (c *ClientWithResponses) EnvironmentCreateDomainEmailWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainEmailResponse, error) {
	rsp, err := c.EnvironmentCreateDomainEmailWithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentCreateDomainEmailResponse(rsp)
}

func (c *ClientWithResponses) EnvironmentCreateDomainEmailWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainEmailResponse, error) {
	rsp, err := c.EnvironmentCreateDomainEmail(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentCreateDomainEmailResponse(rsp)
}

// DomainDeleteEmailWithResponse request returning *DomainDeleteEmailResponse
func (c *ClientWithResponses) DomainDeleteEmailWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, email string, reqEditors ...RequestEditorFn) (*DomainDeleteEmailResponse, error) {
	rsp, err := c.DomainDeleteEmail(ctx, organizationId, environmentId, domain, email, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainDeleteEmailResponse(rsp)
}

// DomainUpdateEmailWithBodyWithResponse request with arbitrary body returning *DomainUpdateEmailResponse
func (c *ClientWithResponses) DomainUpdateEmailWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, email string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainUpdateEmailResponse, error) {
	rsp, err := c.DomainUpdateEmailWithBody(ctx, organizationId, environmentId, domain, email, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainUpdateEmailResponse(rsp)
}

func (c *ClientWithResponses) DomainUpdateEmailWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, email string, body DomainUpdateEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainUpdateEmailResponse, error) {
	rsp, err := c.DomainUpdateEmail(ctx, organizationId, environmentId, domain, email, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainUpdateEmailResponse(rsp)
}

// DomainGetEntrypointsWithResponse request returning *DomainGetEntrypointsResponse
func (c *ClientWithResponses) DomainGetEntrypointsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*DomainGetEntrypointsResponse, error) {
	rsp, err := c.DomainGetEntrypoints(ctx, organizationId, environmentId, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainGetEntrypointsResponse(rsp)
}

// EnvironmentListDomainExtensionGrantsWithResponse request returning *EnvironmentListDomainExtensionGrantsResponse
func (c *ClientWithResponses) EnvironmentListDomainExtensionGrantsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*EnvironmentListDomainExtensionGrantsResponse, error) {
	rsp, err := c.EnvironmentListDomainExtensionGrants(ctx, organizationId, environmentId, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentListDomainExtensionGrantsResponse(rsp)
}

// EnvironmentCreateDomainExtensionGrantWithBodyWithResponse request with arbitrary body returning *EnvironmentCreateDomainExtensionGrantResponse
func (c *ClientWithResponses) EnvironmentCreateDomainExtensionGrantWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainExtensionGrantResponse, error) {
	rsp, err := c.EnvironmentCreateDomainExtensionGrantWithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentCreateDomainExtensionGrantResponse(rsp)
}

func (c *ClientWithResponses) EnvironmentCreateDomainExtensionGrantWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainExtensionGrantJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainExtensionGrantResponse, error) {
	rsp, err := c.EnvironmentCreateDomainExtensionGrant(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentCreateDomainExtensionGrantResponse(rsp)
}

// DomainDeleteExtensionGrantWithResponse request returning *DomainDeleteExtensionGrantResponse
func (c *ClientWithResponses) DomainDeleteExtensionGrantWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, extensionGrant string, reqEditors ...RequestEditorFn) (*DomainDeleteExtensionGrantResponse, error) {
	rsp, err := c.DomainDeleteExtensionGrant(ctx, organizationId, environmentId, domain, extensionGrant, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainDeleteExtensionGrantResponse(rsp)
}

// DomainGetExtensionGrantWithResponse request returning *DomainGetExtensionGrantResponse
func (c *ClientWithResponses) DomainGetExtensionGrantWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, extensionGrant string, reqEditors ...RequestEditorFn) (*DomainGetExtensionGrantResponse, error) {
	rsp, err := c.DomainGetExtensionGrant(ctx, organizationId, environmentId, domain, extensionGrant, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainGetExtensionGrantResponse(rsp)
}

// DomainUpdateExtensionGrantWithBodyWithResponse request with arbitrary body returning *DomainUpdateExtensionGrantResponse
func (c *ClientWithResponses) DomainUpdateExtensionGrantWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, extensionGrant string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainUpdateExtensionGrantResponse, error) {
	rsp, err := c.DomainUpdateExtensionGrantWithBody(ctx, organizationId, environmentId, domain, extensionGrant, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainUpdateExtensionGrantResponse(rsp)
}

func (c *ClientWithResponses) DomainUpdateExtensionGrantWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, extensionGrant string, body DomainUpdateExtensionGrantJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainUpdateExtensionGrantResponse, error) {
	rsp, err := c.DomainUpdateExtensionGrant(ctx, organizationId, environmentId, domain, extensionGrant, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainUpdateExtensionGrantResponse(rsp)
}

// EnvironmentListDomainFactorsWithResponse request returning *EnvironmentListDomainFactorsResponse
func (c *ClientWithResponses) EnvironmentListDomainFactorsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*EnvironmentListDomainFactorsResponse, error) {
	rsp, err := c.EnvironmentListDomainFactors(ctx, organizationId, environmentId, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentListDomainFactorsResponse(rsp)
}

// EnvironmentCreateDomainFactorWithBodyWithResponse request with arbitrary body returning *EnvironmentCreateDomainFactorResponse
func (c *ClientWithResponses) EnvironmentCreateDomainFactorWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainFactorResponse, error) {
	rsp, err := c.EnvironmentCreateDomainFactorWithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentCreateDomainFactorResponse(rsp)
}

func (c *ClientWithResponses) EnvironmentCreateDomainFactorWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainFactorJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainFactorResponse, error) {
	rsp, err := c.EnvironmentCreateDomainFactor(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentCreateDomainFactorResponse(rsp)
}

// DomainDeleteFactorWithResponse request returning *DomainDeleteFactorResponse
func (c *ClientWithResponses) DomainDeleteFactorWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, factor string, reqEditors ...RequestEditorFn) (*DomainDeleteFactorResponse, error) {
	rsp, err := c.DomainDeleteFactor(ctx, organizationId, environmentId, domain, factor, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainDeleteFactorResponse(rsp)
}

// DomainGetFactorWithResponse request returning *DomainGetFactorResponse
func (c *ClientWithResponses) DomainGetFactorWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, factor string, reqEditors ...RequestEditorFn) (*DomainGetFactorResponse, error) {
	rsp, err := c.DomainGetFactor(ctx, organizationId, environmentId, domain, factor, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainGetFactorResponse(rsp)
}

// DomainUpdateFactorWithBodyWithResponse request with arbitrary body returning *DomainUpdateFactorResponse
func (c *ClientWithResponses) DomainUpdateFactorWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, factor string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainUpdateFactorResponse, error) {
	rsp, err := c.DomainUpdateFactorWithBody(ctx, organizationId, environmentId, domain, factor, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainUpdateFactorResponse(rsp)
}

func (c *ClientWithResponses) DomainUpdateFactorWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, factor string, body DomainUpdateFactorJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainUpdateFactorResponse, error) {
	rsp, err := c.DomainUpdateFactor(ctx, organizationId, environmentId, domain, factor, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainUpdateFactorResponse(rsp)
}

// EnvironmentListDomainFlowsWithResponse request returning *EnvironmentListDomainFlowsResponse
func (c *ClientWithResponses) EnvironmentListDomainFlowsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*EnvironmentListDomainFlowsResponse, error) {
	rsp, err := c.EnvironmentListDomainFlows(ctx, organizationId, environmentId, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentListDomainFlowsResponse(rsp)
}

// EnvironmentCreateOrUpdateDomainFlowsWithBodyWithResponse request with arbitrary body returning *EnvironmentCreateOrUpdateDomainFlowsResponse
func (c *ClientWithResponses) EnvironmentCreateOrUpdateDomainFlowsWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentCreateOrUpdateDomainFlowsResponse, error) {
	rsp, err := c.EnvironmentCreateOrUpdateDomainFlowsWithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentCreateOrUpdateDomainFlowsResponse(rsp)
}

func (c *ClientWithResponses) EnvironmentCreateOrUpdateDomainFlowsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateOrUpdateDomainFlowsJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentCreateOrUpdateDomainFlowsResponse, error) {
	rsp, err := c.EnvironmentCreateOrUpdateDomainFlows(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentCreateOrUpdateDomainFlowsResponse(rsp)
}

// DomainGetFlowWithResponse request returning *DomainGetFlowResponse
func (c *ClientWithResponses) DomainGetFlowWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, flow string, reqEditors ...RequestEditorFn) (*DomainGetFlowResponse, error) {
	rsp, err := c.DomainGetFlow(ctx, organizationId, environmentId, domain, flow, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainGetFlowResponse(rsp)
}

// DomainUpdateFlowWithBodyWithResponse request with arbitrary body returning *DomainUpdateFlowResponse
func (c *ClientWithResponses) DomainUpdateFlowWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, flow string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainUpdateFlowResponse, error) {
	rsp, err := c.DomainUpdateFlowWithBody(ctx, organizationId, environmentId, domain, flow, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainUpdateFlowResponse(rsp)
}

func (c *ClientWithResponses) DomainUpdateFlowWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, flow string, body DomainUpdateFlowJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainUpdateFlowResponse, error) {
	rsp, err := c.DomainUpdateFlow(ctx, organizationId, environmentId, domain, flow, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainUpdateFlowResponse(rsp)
}

// EnvironmentListDomainFormsWithResponse request returning *EnvironmentListDomainFormsResponse
func (c *ClientWithResponses) EnvironmentListDomainFormsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *EnvironmentListDomainFormsParams, reqEditors ...RequestEditorFn) (*EnvironmentListDomainFormsResponse, error) {
	rsp, err := c.EnvironmentListDomainForms(ctx, organizationId, environmentId, domain, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentListDomainFormsResponse(rsp)
}

// EnvironmentCreateDomainFormWithBodyWithResponse request with arbitrary body returning *EnvironmentCreateDomainFormResponse
func (c *ClientWithResponses) EnvironmentCreateDomainFormWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainFormResponse, error) {
	rsp, err := c.EnvironmentCreateDomainFormWithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentCreateDomainFormResponse(rsp)
}

func (c *ClientWithResponses) EnvironmentCreateDomainFormWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainFormJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainFormResponse, error) {
	rsp, err := c.EnvironmentCreateDomainForm(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentCreateDomainFormResponse(rsp)
}

// EnvironmentPreviewDomainFormWithBodyWithResponse request with arbitrary body returning *EnvironmentPreviewDomainFormResponse
func (c *ClientWithResponses) EnvironmentPreviewDomainFormWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentPreviewDomainFormResponse, error) {
	rsp, err := c.EnvironmentPreviewDomainFormWithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentPreviewDomainFormResponse(rsp)
}

func (c *ClientWithResponses) EnvironmentPreviewDomainFormWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentPreviewDomainFormJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentPreviewDomainFormResponse, error) {
	rsp, err := c.EnvironmentPreviewDomainForm(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentPreviewDomainFormResponse(rsp)
}

// DomainDeleteFormWithResponse request returning *DomainDeleteFormResponse
func (c *ClientWithResponses) DomainDeleteFormWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, form string, reqEditors ...RequestEditorFn) (*DomainDeleteFormResponse, error) {
	rsp, err := c.DomainDeleteForm(ctx, organizationId, environmentId, domain, form, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainDeleteFormResponse(rsp)
}

// DomainUpdateFormWithBodyWithResponse request with arbitrary body returning *DomainUpdateFormResponse
func (c *ClientWithResponses) DomainUpdateFormWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, form string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainUpdateFormResponse, error) {
	rsp, err := c.DomainUpdateFormWithBody(ctx, organizationId, environmentId, domain, form, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainUpdateFormResponse(rsp)
}

func (c *ClientWithResponses) DomainUpdateFormWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, form string, body DomainUpdateFormJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainUpdateFormResponse, error) {
	rsp, err := c.DomainUpdateForm(ctx, organizationId, environmentId, domain, form, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainUpdateFormResponse(rsp)
}

// EnvironmentListDomainGroupsWithResponse request returning *EnvironmentListDomainGroupsResponse
func (c *ClientWithResponses) EnvironmentListDomainGroupsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *EnvironmentListDomainGroupsParams, reqEditors ...RequestEditorFn) (*EnvironmentListDomainGroupsResponse, error) {
	rsp, err := c.EnvironmentListDomainGroups(ctx, organizationId, environmentId, domain, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentListDomainGroupsResponse(rsp)
}

// EnvironmentCreateDomainGroupWithBodyWithResponse request with arbitrary body returning *EnvironmentCreateDomainGroupResponse
func (c *ClientWithResponses) EnvironmentCreateDomainGroupWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainGroupResponse, error) {
	rsp, err := c.EnvironmentCreateDomainGroupWithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentCreateDomainGroupResponse(rsp)
}

func (c *ClientWithResponses) EnvironmentCreateDomainGroupWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainGroupResponse, error) {
	rsp, err := c.EnvironmentCreateDomainGroup(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentCreateDomainGroupResponse(rsp)
}

// DomainDeleteGroupWithResponse request returning *DomainDeleteGroupResponse
func (c *ClientWithResponses) DomainDeleteGroupWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, group string, reqEditors ...RequestEditorFn) (*DomainDeleteGroupResponse, error) {
	rsp, err := c.DomainDeleteGroup(ctx, organizationId, environmentId, domain, group, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainDeleteGroupResponse(rsp)
}

// DomainGetGroupWithResponse request returning *DomainGetGroupResponse
func (c *ClientWithResponses) DomainGetGroupWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, group string, reqEditors ...RequestEditorFn) (*DomainGetGroupResponse, error) {
	rsp, err := c.DomainGetGroup(ctx, organizationId, environmentId, domain, group, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainGetGroupResponse(rsp)
}

// DomainUpdateGroupWithBodyWithResponse request with arbitrary body returning *DomainUpdateGroupResponse
func (c *ClientWithResponses) DomainUpdateGroupWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, group string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainUpdateGroupResponse, error) {
	rsp, err := c.DomainUpdateGroupWithBody(ctx, organizationId, environmentId, domain, group, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainUpdateGroupResponse(rsp)
}

func (c *ClientWithResponses) DomainUpdateGroupWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, group string, body DomainUpdateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainUpdateGroupResponse, error) {
	rsp, err := c.DomainUpdateGroup(ctx, organizationId, environmentId, domain, group, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainUpdateGroupResponse(rsp)
}

// DomainGetGroupMemebersWithResponse request returning *DomainGetGroupMemebersResponse
func (c *ClientWithResponses) DomainGetGroupMemebersWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, group string, params *DomainGetGroupMemebersParams, reqEditors ...RequestEditorFn) (*DomainGetGroupMemebersResponse, error) {
	rsp, err := c.DomainGetGroupMemebers(ctx, organizationId, environmentId, domain, group, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainGetGroupMemebersResponse(rsp)
}

// EnvironmentRemoveDomainGroupMemeberWithResponse request returning *EnvironmentRemoveDomainGroupMemeberResponse
func (c *ClientWithResponses) EnvironmentRemoveDomainGroupMemeberWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, group string, member string, reqEditors ...RequestEditorFn) (*EnvironmentRemoveDomainGroupMemeberResponse, error) {
	rsp, err := c.EnvironmentRemoveDomainGroupMemeber(ctx, organizationId, environmentId, domain, group, member, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentRemoveDomainGroupMemeberResponse(rsp)
}

// DomainAddOrUpdateGroupMemeberWithResponse request returning *DomainAddOrUpdateGroupMemeberResponse
func (c *ClientWithResponses) DomainAddOrUpdateGroupMemeberWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, group string, member string, reqEditors ...RequestEditorFn) (*DomainAddOrUpdateGroupMemeberResponse, error) {
	rsp, err := c.DomainAddOrUpdateGroupMemeber(ctx, organizationId, environmentId, domain, group, member, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainAddOrUpdateGroupMemeberResponse(rsp)
}

// EnvironmentListDomainGroupRolesWithResponse request returning *EnvironmentListDomainGroupRolesResponse
func (c *ClientWithResponses) EnvironmentListDomainGroupRolesWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, group string, reqEditors ...RequestEditorFn) (*EnvironmentListDomainGroupRolesResponse, error) {
	rsp, err := c.EnvironmentListDomainGroupRoles(ctx, organizationId, environmentId, domain, group, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentListDomainGroupRolesResponse(rsp)
}

// EnvironmentAddDomainGroupRoleWithBodyWithResponse request with arbitrary body returning *EnvironmentAddDomainGroupRoleResponse
func (c *ClientWithResponses) EnvironmentAddDomainGroupRoleWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, group string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentAddDomainGroupRoleResponse, error) {
	rsp, err := c.EnvironmentAddDomainGroupRoleWithBody(ctx, organizationId, environmentId, domain, group, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentAddDomainGroupRoleResponse(rsp)
}

func (c *ClientWithResponses) EnvironmentAddDomainGroupRoleWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, group string, body EnvironmentAddDomainGroupRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentAddDomainGroupRoleResponse, error) {
	rsp, err := c.EnvironmentAddDomainGroupRole(ctx, organizationId, environmentId, domain, group, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentAddDomainGroupRoleResponse(rsp)
}

// EnvironmentRemoveDomainGroupRoleWithResponse request returning *EnvironmentRemoveDomainGroupRoleResponse
func (c *ClientWithResponses) EnvironmentRemoveDomainGroupRoleWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, group string, role string, reqEditors ...RequestEditorFn) (*EnvironmentRemoveDomainGroupRoleResponse, error) {
	rsp, err := c.EnvironmentRemoveDomainGroupRole(ctx, organizationId, environmentId, domain, group, role, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentRemoveDomainGroupRoleResponse(rsp)
}

// EnvironmentListDomainDictionariesWithResponse request returning *EnvironmentListDomainDictionariesResponse
func (c *ClientWithResponses) EnvironmentListDomainDictionariesWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*EnvironmentListDomainDictionariesResponse, error) {
	rsp, err := c.EnvironmentListDomainDictionaries(ctx, organizationId, environmentId, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentListDomainDictionariesResponse(rsp)
}

// EnvironmentCreateDomainDictionaryWithBodyWithResponse request with arbitrary body returning *EnvironmentCreateDomainDictionaryResponse
func (c *ClientWithResponses) EnvironmentCreateDomainDictionaryWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainDictionaryResponse, error) {
	rsp, err := c.EnvironmentCreateDomainDictionaryWithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentCreateDomainDictionaryResponse(rsp)
}

// DomainDeleteDictionaryWithResponse request returning *DomainDeleteDictionaryResponse
func (c *ClientWithResponses) DomainDeleteDictionaryWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, dictionary string, reqEditors ...RequestEditorFn) (*DomainDeleteDictionaryResponse, error) {
	rsp, err := c.DomainDeleteDictionary(ctx, organizationId, environmentId, domain, dictionary, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainDeleteDictionaryResponse(rsp)
}

// DomainGetDictionaryWithResponse request returning *DomainGetDictionaryResponse
func (c *ClientWithResponses) DomainGetDictionaryWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, dictionary string, reqEditors ...RequestEditorFn) (*DomainGetDictionaryResponse, error) {
	rsp, err := c.DomainGetDictionary(ctx, organizationId, environmentId, domain, dictionary, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainGetDictionaryResponse(rsp)
}

// DomainUpdateDictionaryWithBodyWithResponse request with arbitrary body returning *DomainUpdateDictionaryResponse
func (c *ClientWithResponses) DomainUpdateDictionaryWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, dictionary string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainUpdateDictionaryResponse, error) {
	rsp, err := c.DomainUpdateDictionaryWithBody(ctx, organizationId, environmentId, domain, dictionary, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainUpdateDictionaryResponse(rsp)
}

// DomainUpdateDictionaryEntriesWithBodyWithResponse request with arbitrary body returning *DomainUpdateDictionaryEntriesResponse
func (c *ClientWithResponses) DomainUpdateDictionaryEntriesWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, dictionary string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainUpdateDictionaryEntriesResponse, error) {
	rsp, err := c.DomainUpdateDictionaryEntriesWithBody(ctx, organizationId, environmentId, domain, dictionary, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainUpdateDictionaryEntriesResponse(rsp)
}

// EnvironmentListDomainIdentityProvidersWithResponse request returning *EnvironmentListDomainIdentityProvidersResponse
func (c *ClientWithResponses) EnvironmentListDomainIdentityProvidersWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *EnvironmentListDomainIdentityProvidersParams, reqEditors ...RequestEditorFn) (*EnvironmentListDomainIdentityProvidersResponse, error) {
	rsp, err := c.EnvironmentListDomainIdentityProviders(ctx, organizationId, environmentId, domain, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentListDomainIdentityProvidersResponse(rsp)
}

// EnvironmentCreateDomainIdentityProviderWithBodyWithResponse request with arbitrary body returning *EnvironmentCreateDomainIdentityProviderResponse
func (c *ClientWithResponses) EnvironmentCreateDomainIdentityProviderWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainIdentityProviderResponse, error) {
	rsp, err := c.EnvironmentCreateDomainIdentityProviderWithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentCreateDomainIdentityProviderResponse(rsp)
}

func (c *ClientWithResponses) EnvironmentCreateDomainIdentityProviderWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainIdentityProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainIdentityProviderResponse, error) {
	rsp, err := c.EnvironmentCreateDomainIdentityProvider(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentCreateDomainIdentityProviderResponse(rsp)
}

// DomainDeleteIdentityProviderWithResponse request returning *DomainDeleteIdentityProviderResponse
func (c *ClientWithResponses) DomainDeleteIdentityProviderWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, identity string, reqEditors ...RequestEditorFn) (*DomainDeleteIdentityProviderResponse, error) {
	rsp, err := c.DomainDeleteIdentityProvider(ctx, organizationId, environmentId, domain, identity, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainDeleteIdentityProviderResponse(rsp)
}

// DomainGetIdentityProviderWithResponse request returning *DomainGetIdentityProviderResponse
func (c *ClientWithResponses) DomainGetIdentityProviderWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, identity string, reqEditors ...RequestEditorFn) (*DomainGetIdentityProviderResponse, error) {
	rsp, err := c.DomainGetIdentityProvider(ctx, organizationId, environmentId, domain, identity, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainGetIdentityProviderResponse(rsp)
}

// DomainUpdateIdentityProviderWithBodyWithResponse request with arbitrary body returning *DomainUpdateIdentityProviderResponse
func (c *ClientWithResponses) DomainUpdateIdentityProviderWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, identity string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainUpdateIdentityProviderResponse, error) {
	rsp, err := c.DomainUpdateIdentityProviderWithBody(ctx, organizationId, environmentId, domain, identity, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainUpdateIdentityProviderResponse(rsp)
}

func (c *ClientWithResponses) DomainUpdateIdentityProviderWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, identity string, body DomainUpdateIdentityProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainUpdateIdentityProviderResponse, error) {
	rsp, err := c.DomainUpdateIdentityProvider(ctx, organizationId, environmentId, domain, identity, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainUpdateIdentityProviderResponse(rsp)
}

// EnvironmentListDomainMembersWithResponse request returning *EnvironmentListDomainMembersResponse
func (c *ClientWithResponses) EnvironmentListDomainMembersWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*EnvironmentListDomainMembersResponse, error) {
	rsp, err := c.EnvironmentListDomainMembers(ctx, organizationId, environmentId, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentListDomainMembersResponse(rsp)
}

// DomainAddOrUpdateMemberWithBodyWithResponse request with arbitrary body returning *DomainAddOrUpdateMemberResponse
func (c *ClientWithResponses) DomainAddOrUpdateMemberWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainAddOrUpdateMemberResponse, error) {
	rsp, err := c.DomainAddOrUpdateMemberWithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainAddOrUpdateMemberResponse(rsp)
}

func (c *ClientWithResponses) DomainAddOrUpdateMemberWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body DomainAddOrUpdateMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainAddOrUpdateMemberResponse, error) {
	rsp, err := c.DomainAddOrUpdateMember(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainAddOrUpdateMemberResponse(rsp)
}

// EnvironmentListDomainMemberPermissionsWithResponse request returning *EnvironmentListDomainMemberPermissionsResponse
func (c *ClientWithResponses) EnvironmentListDomainMemberPermissionsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*EnvironmentListDomainMemberPermissionsResponse, error) {
	rsp, err := c.EnvironmentListDomainMemberPermissions(ctx, organizationId, environmentId, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentListDomainMemberPermissionsResponse(rsp)
}

// EnvironmentRemoveDomainMemberWithResponse request returning *EnvironmentRemoveDomainMemberResponse
func (c *ClientWithResponses) EnvironmentRemoveDomainMemberWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, member string, reqEditors ...RequestEditorFn) (*EnvironmentRemoveDomainMemberResponse, error) {
	rsp, err := c.EnvironmentRemoveDomainMember(ctx, organizationId, environmentId, domain, member, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentRemoveDomainMemberResponse(rsp)
}

// EnvironmentListDomainReportersWithResponse request returning *EnvironmentListDomainReportersResponse
func (c *ClientWithResponses) EnvironmentListDomainReportersWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *EnvironmentListDomainReportersParams, reqEditors ...RequestEditorFn) (*EnvironmentListDomainReportersResponse, error) {
	rsp, err := c.EnvironmentListDomainReporters(ctx, organizationId, environmentId, domain, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentListDomainReportersResponse(rsp)
}

// EnvironmentCreateDomainReporterWithBodyWithResponse request with arbitrary body returning *EnvironmentCreateDomainReporterResponse
func (c *ClientWithResponses) EnvironmentCreateDomainReporterWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainReporterResponse, error) {
	rsp, err := c.EnvironmentCreateDomainReporterWithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentCreateDomainReporterResponse(rsp)
}

func (c *ClientWithResponses) EnvironmentCreateDomainReporterWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainReporterJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainReporterResponse, error) {
	rsp, err := c.EnvironmentCreateDomainReporter(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentCreateDomainReporterResponse(rsp)
}

// DomainDeleteReporterWithResponse request returning *DomainDeleteReporterResponse
func (c *ClientWithResponses) DomainDeleteReporterWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reporter string, reqEditors ...RequestEditorFn) (*DomainDeleteReporterResponse, error) {
	rsp, err := c.DomainDeleteReporter(ctx, organizationId, environmentId, domain, reporter, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainDeleteReporterResponse(rsp)
}

// DomainGetReporterWithResponse request returning *DomainGetReporterResponse
func (c *ClientWithResponses) DomainGetReporterWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reporter string, reqEditors ...RequestEditorFn) (*DomainGetReporterResponse, error) {
	rsp, err := c.DomainGetReporter(ctx, organizationId, environmentId, domain, reporter, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainGetReporterResponse(rsp)
}

// DomainUpdateReporterWithBodyWithResponse request with arbitrary body returning *DomainUpdateReporterResponse
func (c *ClientWithResponses) DomainUpdateReporterWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reporter string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainUpdateReporterResponse, error) {
	rsp, err := c.DomainUpdateReporterWithBody(ctx, organizationId, environmentId, domain, reporter, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainUpdateReporterResponse(rsp)
}

func (c *ClientWithResponses) DomainUpdateReporterWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reporter string, body DomainUpdateReporterJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainUpdateReporterResponse, error) {
	rsp, err := c.DomainUpdateReporter(ctx, organizationId, environmentId, domain, reporter, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainUpdateReporterResponse(rsp)
}

// EnvironmentListDomainResourcesWithResponse request returning *EnvironmentListDomainResourcesResponse
func (c *ClientWithResponses) EnvironmentListDomainResourcesWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*EnvironmentListDomainResourcesResponse, error) {
	rsp, err := c.EnvironmentListDomainResources(ctx, organizationId, environmentId, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentListDomainResourcesResponse(rsp)
}

// EnvironmentCreateDomainResourceWithBodyWithResponse request with arbitrary body returning *EnvironmentCreateDomainResourceResponse
func (c *ClientWithResponses) EnvironmentCreateDomainResourceWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainResourceResponse, error) {
	rsp, err := c.EnvironmentCreateDomainResourceWithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentCreateDomainResourceResponse(rsp)
}

func (c *ClientWithResponses) EnvironmentCreateDomainResourceWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainResourceResponse, error) {
	rsp, err := c.EnvironmentCreateDomainResource(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentCreateDomainResourceResponse(rsp)
}

// DomainDeleteResourceWithResponse request returning *DomainDeleteResourceResponse
func (c *ClientWithResponses) DomainDeleteResourceWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, resource string, reqEditors ...RequestEditorFn) (*DomainDeleteResourceResponse, error) {
	rsp, err := c.DomainDeleteResource(ctx, organizationId, environmentId, domain, resource, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainDeleteResourceResponse(rsp)
}

// DomainGetResourceWithResponse request returning *DomainGetResourceResponse
func (c *ClientWithResponses) DomainGetResourceWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, resource string, reqEditors ...RequestEditorFn) (*DomainGetResourceResponse, error) {
	rsp, err := c.DomainGetResource(ctx, organizationId, environmentId, domain, resource, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainGetResourceResponse(rsp)
}

// DomainUpdateResourceWithBodyWithResponse request with arbitrary body returning *DomainUpdateResourceResponse
func (c *ClientWithResponses) DomainUpdateResourceWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, resource string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainUpdateResourceResponse, error) {
	rsp, err := c.DomainUpdateResourceWithBody(ctx, organizationId, environmentId, domain, resource, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainUpdateResourceResponse(rsp)
}

func (c *ClientWithResponses) DomainUpdateResourceWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, resource string, body DomainUpdateResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainUpdateResourceResponse, error) {
	rsp, err := c.DomainUpdateResource(ctx, organizationId, environmentId, domain, resource, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainUpdateResourceResponse(rsp)
}

// EnvironmentListDomainRolesWithResponse request returning *EnvironmentListDomainRolesResponse
func (c *ClientWithResponses) EnvironmentListDomainRolesWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *EnvironmentListDomainRolesParams, reqEditors ...RequestEditorFn) (*EnvironmentListDomainRolesResponse, error) {
	rsp, err := c.EnvironmentListDomainRoles(ctx, organizationId, environmentId, domain, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentListDomainRolesResponse(rsp)
}

// EnvironmentCreateDomainMemberRoleWithBodyWithResponse request with arbitrary body returning *EnvironmentCreateDomainMemberRoleResponse
func (c *ClientWithResponses) EnvironmentCreateDomainMemberRoleWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainMemberRoleResponse, error) {
	rsp, err := c.EnvironmentCreateDomainMemberRoleWithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentCreateDomainMemberRoleResponse(rsp)
}

func (c *ClientWithResponses) EnvironmentCreateDomainMemberRoleWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainMemberRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainMemberRoleResponse, error) {
	rsp, err := c.EnvironmentCreateDomainMemberRole(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentCreateDomainMemberRoleResponse(rsp)
}

// DomainDeleteRoleWithResponse request returning *DomainDeleteRoleResponse
func (c *ClientWithResponses) DomainDeleteRoleWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, role string, reqEditors ...RequestEditorFn) (*DomainDeleteRoleResponse, error) {
	rsp, err := c.DomainDeleteRole(ctx, organizationId, environmentId, domain, role, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainDeleteRoleResponse(rsp)
}

// DomainGetRoleWithResponse request returning *DomainGetRoleResponse
func (c *ClientWithResponses) DomainGetRoleWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, role string, reqEditors ...RequestEditorFn) (*DomainGetRoleResponse, error) {
	rsp, err := c.DomainGetRole(ctx, organizationId, environmentId, domain, role, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainGetRoleResponse(rsp)
}

// DomainUpdateRoleWithBodyWithResponse request with arbitrary body returning *DomainUpdateRoleResponse
func (c *ClientWithResponses) DomainUpdateRoleWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, role string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainUpdateRoleResponse, error) {
	rsp, err := c.DomainUpdateRoleWithBody(ctx, organizationId, environmentId, domain, role, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainUpdateRoleResponse(rsp)
}

func (c *ClientWithResponses) DomainUpdateRoleWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, role string, body DomainUpdateRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainUpdateRoleResponse, error) {
	rsp, err := c.DomainUpdateRole(ctx, organizationId, environmentId, domain, role, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainUpdateRoleResponse(rsp)
}

// EnvironmentListDomainScopesWithResponse request returning *EnvironmentListDomainScopesResponse
func (c *ClientWithResponses) EnvironmentListDomainScopesWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *EnvironmentListDomainScopesParams, reqEditors ...RequestEditorFn) (*EnvironmentListDomainScopesResponse, error) {
	rsp, err := c.EnvironmentListDomainScopes(ctx, organizationId, environmentId, domain, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentListDomainScopesResponse(rsp)
}

// EnvironmentCreateDomainScopeWithBodyWithResponse request with arbitrary body returning *EnvironmentCreateDomainScopeResponse
func (c *ClientWithResponses) EnvironmentCreateDomainScopeWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainScopeResponse, error) {
	rsp, err := c.EnvironmentCreateDomainScopeWithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentCreateDomainScopeResponse(rsp)
}

func (c *ClientWithResponses) EnvironmentCreateDomainScopeWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainScopeResponse, error) {
	rsp, err := c.EnvironmentCreateDomainScope(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentCreateDomainScopeResponse(rsp)
}

// DeleteScopeWithResponse request returning *DeleteScopeResponse
func (c *ClientWithResponses) DeleteScopeWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, scope string, reqEditors ...RequestEditorFn) (*DeleteScopeResponse, error) {
	rsp, err := c.DeleteScope(ctx, organizationId, environmentId, domain, scope, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteScopeResponse(rsp)
}

// DomainGetScopeWithResponse request returning *DomainGetScopeResponse
func (c *ClientWithResponses) DomainGetScopeWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, scope string, reqEditors ...RequestEditorFn) (*DomainGetScopeResponse, error) {
	rsp, err := c.DomainGetScope(ctx, organizationId, environmentId, domain, scope, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainGetScopeResponse(rsp)
}

// PatchScopeWithBodyWithResponse request with arbitrary body returning *PatchScopeResponse
func (c *ClientWithResponses) PatchScopeWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, scope string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchScopeResponse, error) {
	rsp, err := c.PatchScopeWithBody(ctx, organizationId, environmentId, domain, scope, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchScopeResponse(rsp)
}

func (c *ClientWithResponses) PatchScopeWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, scope string, body PatchScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchScopeResponse, error) {
	rsp, err := c.PatchScope(ctx, organizationId, environmentId, domain, scope, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchScopeResponse(rsp)
}

// UpdateScopeWithBodyWithResponse request with arbitrary body returning *UpdateScopeResponse
func (c *ClientWithResponses) UpdateScopeWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, scope string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateScopeResponse, error) {
	rsp, err := c.UpdateScopeWithBody(ctx, organizationId, environmentId, domain, scope, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateScopeResponse(rsp)
}

func (c *ClientWithResponses) UpdateScopeWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, scope string, body UpdateScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateScopeResponse, error) {
	rsp, err := c.UpdateScope(ctx, organizationId, environmentId, domain, scope, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateScopeResponse(rsp)
}

// EnvironmentListDomainThemesWithResponse request returning *EnvironmentListDomainThemesResponse
func (c *ClientWithResponses) EnvironmentListDomainThemesWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, reqEditors ...RequestEditorFn) (*EnvironmentListDomainThemesResponse, error) {
	rsp, err := c.EnvironmentListDomainThemes(ctx, organizationId, environmentId, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentListDomainThemesResponse(rsp)
}

// EnvironmentCreateDomainThemeWithBodyWithResponse request with arbitrary body returning *EnvironmentCreateDomainThemeResponse
func (c *ClientWithResponses) EnvironmentCreateDomainThemeWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainThemeResponse, error) {
	rsp, err := c.EnvironmentCreateDomainThemeWithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentCreateDomainThemeResponse(rsp)
}

func (c *ClientWithResponses) EnvironmentCreateDomainThemeWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainThemeJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainThemeResponse, error) {
	rsp, err := c.EnvironmentCreateDomainTheme(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentCreateDomainThemeResponse(rsp)
}

// DomainDeleteThemeWithResponse request returning *DomainDeleteThemeResponse
func (c *ClientWithResponses) DomainDeleteThemeWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, themeId string, reqEditors ...RequestEditorFn) (*DomainDeleteThemeResponse, error) {
	rsp, err := c.DomainDeleteTheme(ctx, organizationId, environmentId, domain, themeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainDeleteThemeResponse(rsp)
}

// DomainGetThemeWithResponse request returning *DomainGetThemeResponse
func (c *ClientWithResponses) DomainGetThemeWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, themeId string, reqEditors ...RequestEditorFn) (*DomainGetThemeResponse, error) {
	rsp, err := c.DomainGetTheme(ctx, organizationId, environmentId, domain, themeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainGetThemeResponse(rsp)
}

// DomainUpdateThemeWithBodyWithResponse request with arbitrary body returning *DomainUpdateThemeResponse
func (c *ClientWithResponses) DomainUpdateThemeWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, themeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainUpdateThemeResponse, error) {
	rsp, err := c.DomainUpdateThemeWithBody(ctx, organizationId, environmentId, domain, themeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainUpdateThemeResponse(rsp)
}

func (c *ClientWithResponses) DomainUpdateThemeWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, themeId string, body DomainUpdateThemeJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainUpdateThemeResponse, error) {
	rsp, err := c.DomainUpdateTheme(ctx, organizationId, environmentId, domain, themeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainUpdateThemeResponse(rsp)
}

// EnvironmentListDomainUsersWithResponse request returning *EnvironmentListDomainUsersResponse
func (c *ClientWithResponses) EnvironmentListDomainUsersWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, params *EnvironmentListDomainUsersParams, reqEditors ...RequestEditorFn) (*EnvironmentListDomainUsersResponse, error) {
	rsp, err := c.EnvironmentListDomainUsers(ctx, organizationId, environmentId, domain, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentListDomainUsersResponse(rsp)
}

// EnvironmentCreateDomainUserWithBodyWithResponse request with arbitrary body returning *EnvironmentCreateDomainUserResponse
func (c *ClientWithResponses) EnvironmentCreateDomainUserWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainUserResponse, error) {
	rsp, err := c.EnvironmentCreateDomainUserWithBody(ctx, organizationId, environmentId, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentCreateDomainUserResponse(rsp)
}

func (c *ClientWithResponses) EnvironmentCreateDomainUserWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, body EnvironmentCreateDomainUserJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentCreateDomainUserResponse, error) {
	rsp, err := c.EnvironmentCreateDomainUser(ctx, organizationId, environmentId, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentCreateDomainUserResponse(rsp)
}

// DomainDeleteUserWithResponse request returning *DomainDeleteUserResponse
func (c *ClientWithResponses) DomainDeleteUserWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*DomainDeleteUserResponse, error) {
	rsp, err := c.DomainDeleteUser(ctx, organizationId, environmentId, domain, user, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainDeleteUserResponse(rsp)
}

// DomainGetUserWithResponse request returning *DomainGetUserResponse
func (c *ClientWithResponses) DomainGetUserWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*DomainGetUserResponse, error) {
	rsp, err := c.DomainGetUser(ctx, organizationId, environmentId, domain, user, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainGetUserResponse(rsp)
}

// DomainUpdateUserWithBodyWithResponse request with arbitrary body returning *DomainUpdateUserResponse
func (c *ClientWithResponses) DomainUpdateUserWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainUpdateUserResponse, error) {
	rsp, err := c.DomainUpdateUserWithBody(ctx, organizationId, environmentId, domain, user, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainUpdateUserResponse(rsp)
}

func (c *ClientWithResponses) DomainUpdateUserWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, body DomainUpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainUpdateUserResponse, error) {
	rsp, err := c.DomainUpdateUser(ctx, organizationId, environmentId, domain, user, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainUpdateUserResponse(rsp)
}

// EnvironmentListDomainUserAuditsWithResponse request returning *EnvironmentListDomainUserAuditsResponse
func (c *ClientWithResponses) EnvironmentListDomainUserAuditsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, params *EnvironmentListDomainUserAuditsParams, reqEditors ...RequestEditorFn) (*EnvironmentListDomainUserAuditsResponse, error) {
	rsp, err := c.EnvironmentListDomainUserAudits(ctx, organizationId, environmentId, domain, user, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentListDomainUserAuditsResponse(rsp)
}

// DomainGetUserAuditWithResponse request returning *DomainGetUserAuditResponse
func (c *ClientWithResponses) DomainGetUserAuditWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, audit string, reqEditors ...RequestEditorFn) (*DomainGetUserAuditResponse, error) {
	rsp, err := c.DomainGetUserAudit(ctx, organizationId, environmentId, domain, user, audit, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainGetUserAuditResponse(rsp)
}

// DomainDeleteUserConsentsWithResponse request returning *DomainDeleteUserConsentsResponse
func (c *ClientWithResponses) DomainDeleteUserConsentsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, params *DomainDeleteUserConsentsParams, reqEditors ...RequestEditorFn) (*DomainDeleteUserConsentsResponse, error) {
	rsp, err := c.DomainDeleteUserConsents(ctx, organizationId, environmentId, domain, user, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainDeleteUserConsentsResponse(rsp)
}

// EnvironmentListDomainUserConsentsWithResponse request returning *EnvironmentListDomainUserConsentsResponse
func (c *ClientWithResponses) EnvironmentListDomainUserConsentsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, params *EnvironmentListDomainUserConsentsParams, reqEditors ...RequestEditorFn) (*EnvironmentListDomainUserConsentsResponse, error) {
	rsp, err := c.EnvironmentListDomainUserConsents(ctx, organizationId, environmentId, domain, user, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentListDomainUserConsentsResponse(rsp)
}

// DomainDeleteUserConsentWithResponse request returning *DomainDeleteUserConsentResponse
func (c *ClientWithResponses) DomainDeleteUserConsentWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, consent string, reqEditors ...RequestEditorFn) (*DomainDeleteUserConsentResponse, error) {
	rsp, err := c.DomainDeleteUserConsent(ctx, organizationId, environmentId, domain, user, consent, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainDeleteUserConsentResponse(rsp)
}

// DomainGetUserConsentWithResponse request returning *DomainGetUserConsentResponse
func (c *ClientWithResponses) DomainGetUserConsentWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, consent string, reqEditors ...RequestEditorFn) (*DomainGetUserConsentResponse, error) {
	rsp, err := c.DomainGetUserConsent(ctx, organizationId, environmentId, domain, user, consent, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainGetUserConsentResponse(rsp)
}

// EnvironmentListDomainUserCredentialsWithResponse request returning *EnvironmentListDomainUserCredentialsResponse
func (c *ClientWithResponses) EnvironmentListDomainUserCredentialsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*EnvironmentListDomainUserCredentialsResponse, error) {
	rsp, err := c.EnvironmentListDomainUserCredentials(ctx, organizationId, environmentId, domain, user, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentListDomainUserCredentialsResponse(rsp)
}

// DomainDeleteUserCredentialWithResponse request returning *DomainDeleteUserCredentialResponse
func (c *ClientWithResponses) DomainDeleteUserCredentialWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, credential string, reqEditors ...RequestEditorFn) (*DomainDeleteUserCredentialResponse, error) {
	rsp, err := c.DomainDeleteUserCredential(ctx, organizationId, environmentId, domain, user, credential, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainDeleteUserCredentialResponse(rsp)
}

// DomainGetUserCredentialWithResponse request returning *DomainGetUserCredentialResponse
func (c *ClientWithResponses) DomainGetUserCredentialWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, credential string, reqEditors ...RequestEditorFn) (*DomainGetUserCredentialResponse, error) {
	rsp, err := c.DomainGetUserCredential(ctx, organizationId, environmentId, domain, user, credential, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainGetUserCredentialResponse(rsp)
}

// EnvironmentListDomainUserDevicesWithResponse request returning *EnvironmentListDomainUserDevicesResponse
func (c *ClientWithResponses) EnvironmentListDomainUserDevicesWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*EnvironmentListDomainUserDevicesResponse, error) {
	rsp, err := c.EnvironmentListDomainUserDevices(ctx, organizationId, environmentId, domain, user, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentListDomainUserDevicesResponse(rsp)
}

// DomainGetUserDeviceWithResponse request returning *DomainGetUserDeviceResponse
func (c *ClientWithResponses) DomainGetUserDeviceWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, device string, reqEditors ...RequestEditorFn) (*DomainGetUserDeviceResponse, error) {
	rsp, err := c.DomainGetUserDevice(ctx, organizationId, environmentId, domain, user, device, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainGetUserDeviceResponse(rsp)
}

// EnvironmentListDomainUserFactorsWithResponse request returning *EnvironmentListDomainUserFactorsResponse
func (c *ClientWithResponses) EnvironmentListDomainUserFactorsWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*EnvironmentListDomainUserFactorsResponse, error) {
	rsp, err := c.EnvironmentListDomainUserFactors(ctx, organizationId, environmentId, domain, user, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentListDomainUserFactorsResponse(rsp)
}

// DomainDeleteUserFactorWithResponse request returning *DomainDeleteUserFactorResponse
func (c *ClientWithResponses) DomainDeleteUserFactorWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, factor string, reqEditors ...RequestEditorFn) (*DomainDeleteUserFactorResponse, error) {
	rsp, err := c.DomainDeleteUserFactor(ctx, organizationId, environmentId, domain, user, factor, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainDeleteUserFactorResponse(rsp)
}

// EnvironmentLockDomainUserWithResponse request returning *EnvironmentLockDomainUserResponse
func (c *ClientWithResponses) EnvironmentLockDomainUserWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*EnvironmentLockDomainUserResponse, error) {
	rsp, err := c.EnvironmentLockDomainUser(ctx, organizationId, environmentId, domain, user, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentLockDomainUserResponse(rsp)
}

// EnvironmentResetDomainUserPasswordWithBodyWithResponse request with arbitrary body returning *EnvironmentResetDomainUserPasswordResponse
func (c *ClientWithResponses) EnvironmentResetDomainUserPasswordWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentResetDomainUserPasswordResponse, error) {
	rsp, err := c.EnvironmentResetDomainUserPasswordWithBody(ctx, organizationId, environmentId, domain, user, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentResetDomainUserPasswordResponse(rsp)
}

// EnvironmentListDomainUserRolesWithResponse request returning *EnvironmentListDomainUserRolesResponse
func (c *ClientWithResponses) EnvironmentListDomainUserRolesWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, params *EnvironmentListDomainUserRolesParams, reqEditors ...RequestEditorFn) (*EnvironmentListDomainUserRolesResponse, error) {
	rsp, err := c.EnvironmentListDomainUserRoles(ctx, organizationId, environmentId, domain, user, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentListDomainUserRolesResponse(rsp)
}

// DomainAddOrUpdateUserRoleWithBodyWithResponse request with arbitrary body returning *DomainAddOrUpdateUserRoleResponse
func (c *ClientWithResponses) DomainAddOrUpdateUserRoleWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainAddOrUpdateUserRoleResponse, error) {
	rsp, err := c.DomainAddOrUpdateUserRoleWithBody(ctx, organizationId, environmentId, domain, user, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainAddOrUpdateUserRoleResponse(rsp)
}

func (c *ClientWithResponses) DomainAddOrUpdateUserRoleWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, body DomainAddOrUpdateUserRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainAddOrUpdateUserRoleResponse, error) {
	rsp, err := c.DomainAddOrUpdateUserRole(ctx, organizationId, environmentId, domain, user, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainAddOrUpdateUserRoleResponse(rsp)
}

// DomainDeleteUserRoleWithResponse request returning *DomainDeleteUserRoleResponse
func (c *ClientWithResponses) DomainDeleteUserRoleWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, role string, reqEditors ...RequestEditorFn) (*DomainDeleteUserRoleResponse, error) {
	rsp, err := c.DomainDeleteUserRole(ctx, organizationId, environmentId, domain, user, role, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainDeleteUserRoleResponse(rsp)
}

// EnvironmentSendDomainUserRegistrationConfirmationWithResponse request returning *EnvironmentSendDomainUserRegistrationConfirmationResponse
func (c *ClientWithResponses) EnvironmentSendDomainUserRegistrationConfirmationWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*EnvironmentSendDomainUserRegistrationConfirmationResponse, error) {
	rsp, err := c.EnvironmentSendDomainUserRegistrationConfirmation(ctx, organizationId, environmentId, domain, user, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentSendDomainUserRegistrationConfirmationResponse(rsp)
}

// DomainUpdateUserStatusWithBodyWithResponse request with arbitrary body returning *DomainUpdateUserStatusResponse
func (c *ClientWithResponses) DomainUpdateUserStatusWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DomainUpdateUserStatusResponse, error) {
	rsp, err := c.DomainUpdateUserStatusWithBody(ctx, organizationId, environmentId, domain, user, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainUpdateUserStatusResponse(rsp)
}

func (c *ClientWithResponses) DomainUpdateUserStatusWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, body DomainUpdateUserStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*DomainUpdateUserStatusResponse, error) {
	rsp, err := c.DomainUpdateUserStatus(ctx, organizationId, environmentId, domain, user, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDomainUpdateUserStatusResponse(rsp)
}

// EnvironmentUnlockDomainUserWithResponse request returning *EnvironmentUnlockDomainUserResponse
func (c *ClientWithResponses) EnvironmentUnlockDomainUserWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, reqEditors ...RequestEditorFn) (*EnvironmentUnlockDomainUserResponse, error) {
	rsp, err := c.EnvironmentUnlockDomainUser(ctx, organizationId, environmentId, domain, user, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentUnlockDomainUserResponse(rsp)
}

// EnvironmentResetDomainUserNameWithBodyWithResponse request with arbitrary body returning *EnvironmentResetDomainUserNameResponse
func (c *ClientWithResponses) EnvironmentResetDomainUserNameWithBodyWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnvironmentResetDomainUserNameResponse, error) {
	rsp, err := c.EnvironmentResetDomainUserNameWithBody(ctx, organizationId, environmentId, domain, user, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentResetDomainUserNameResponse(rsp)
}

func (c *ClientWithResponses) EnvironmentResetDomainUserNameWithResponse(ctx context.Context, organizationId string, environmentId string, domain string, user string, body EnvironmentResetDomainUserNameJSONRequestBody, reqEditors ...RequestEditorFn) (*EnvironmentResetDomainUserNameResponse, error) {
	rsp, err := c.EnvironmentResetDomainUserName(ctx, organizationId, environmentId, domain, user, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentResetDomainUserNameResponse(rsp)
}

// EnvironmentListMemberPermissionsWithResponse request returning *EnvironmentListMemberPermissionsResponse
func (c *ClientWithResponses) EnvironmentListMemberPermissionsWithResponse(ctx context.Context, organizationId string, environmentId string, reqEditors ...RequestEditorFn) (*EnvironmentListMemberPermissionsResponse, error) {
	rsp, err := c.EnvironmentListMemberPermissions(ctx, organizationId, environmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnvironmentListMemberPermissionsResponse(rsp)
}

// OrganizationListPlatfomFormTemplatesWithResponse request returning *OrganizationListPlatfomFormTemplatesResponse
func (c *ClientWithResponses) OrganizationListPlatfomFormTemplatesWithResponse(ctx context.Context, organizationId string, params *OrganizationListPlatfomFormTemplatesParams, reqEditors ...RequestEditorFn) (*OrganizationListPlatfomFormTemplatesResponse, error) {
	rsp, err := c.OrganizationListPlatfomFormTemplates(ctx, organizationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationListPlatfomFormTemplatesResponse(rsp)
}

// OrganizationCreatePlatfomFormTemplateWithBodyWithResponse request with arbitrary body returning *OrganizationCreatePlatfomFormTemplateResponse
func (c *ClientWithResponses) OrganizationCreatePlatfomFormTemplateWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganizationCreatePlatfomFormTemplateResponse, error) {
	rsp, err := c.OrganizationCreatePlatfomFormTemplateWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationCreatePlatfomFormTemplateResponse(rsp)
}

func (c *ClientWithResponses) OrganizationCreatePlatfomFormTemplateWithResponse(ctx context.Context, organizationId string, body OrganizationCreatePlatfomFormTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*OrganizationCreatePlatfomFormTemplateResponse, error) {
	rsp, err := c.OrganizationCreatePlatfomFormTemplate(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationCreatePlatfomFormTemplateResponse(rsp)
}

// OrganizationDeletePlatfomFormTemplateWithResponse request returning *OrganizationDeletePlatfomFormTemplateResponse
func (c *ClientWithResponses) OrganizationDeletePlatfomFormTemplateWithResponse(ctx context.Context, organizationId string, form string, reqEditors ...RequestEditorFn) (*OrganizationDeletePlatfomFormTemplateResponse, error) {
	rsp, err := c.OrganizationDeletePlatfomFormTemplate(ctx, organizationId, form, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationDeletePlatfomFormTemplateResponse(rsp)
}

// OrganizationUpdatePlatfomFormTemplateWithBodyWithResponse request with arbitrary body returning *OrganizationUpdatePlatfomFormTemplateResponse
func (c *ClientWithResponses) OrganizationUpdatePlatfomFormTemplateWithBodyWithResponse(ctx context.Context, organizationId string, form string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganizationUpdatePlatfomFormTemplateResponse, error) {
	rsp, err := c.OrganizationUpdatePlatfomFormTemplateWithBody(ctx, organizationId, form, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationUpdatePlatfomFormTemplateResponse(rsp)
}

func (c *ClientWithResponses) OrganizationUpdatePlatfomFormTemplateWithResponse(ctx context.Context, organizationId string, form string, body OrganizationUpdatePlatfomFormTemplateJSONRequestBody, reqEditors ...RequestEditorFn) (*OrganizationUpdatePlatfomFormTemplateResponse, error) {
	rsp, err := c.OrganizationUpdatePlatfomFormTemplate(ctx, organizationId, form, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationUpdatePlatfomFormTemplateResponse(rsp)
}

// OrganizationListPlatformGroupsWithResponse request returning *OrganizationListPlatformGroupsResponse
func (c *ClientWithResponses) OrganizationListPlatformGroupsWithResponse(ctx context.Context, organizationId string, params *OrganizationListPlatformGroupsParams, reqEditors ...RequestEditorFn) (*OrganizationListPlatformGroupsResponse, error) {
	rsp, err := c.OrganizationListPlatformGroups(ctx, organizationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationListPlatformGroupsResponse(rsp)
}

// OrganizationCreatePlatformGroupWithBodyWithResponse request with arbitrary body returning *OrganizationCreatePlatformGroupResponse
func (c *ClientWithResponses) OrganizationCreatePlatformGroupWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganizationCreatePlatformGroupResponse, error) {
	rsp, err := c.OrganizationCreatePlatformGroupWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationCreatePlatformGroupResponse(rsp)
}

func (c *ClientWithResponses) OrganizationCreatePlatformGroupWithResponse(ctx context.Context, organizationId string, body OrganizationCreatePlatformGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*OrganizationCreatePlatformGroupResponse, error) {
	rsp, err := c.OrganizationCreatePlatformGroup(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationCreatePlatformGroupResponse(rsp)
}

// OrganizationDeletePlatformGroupWithResponse request returning *OrganizationDeletePlatformGroupResponse
func (c *ClientWithResponses) OrganizationDeletePlatformGroupWithResponse(ctx context.Context, organizationId string, group string, reqEditors ...RequestEditorFn) (*OrganizationDeletePlatformGroupResponse, error) {
	rsp, err := c.OrganizationDeletePlatformGroup(ctx, organizationId, group, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationDeletePlatformGroupResponse(rsp)
}

// OrganizationGetPlatformGroupWithResponse request returning *OrganizationGetPlatformGroupResponse
func (c *ClientWithResponses) OrganizationGetPlatformGroupWithResponse(ctx context.Context, organizationId string, group string, reqEditors ...RequestEditorFn) (*OrganizationGetPlatformGroupResponse, error) {
	rsp, err := c.OrganizationGetPlatformGroup(ctx, organizationId, group, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationGetPlatformGroupResponse(rsp)
}

// OrganizationUpdatePlatformGroupWithBodyWithResponse request with arbitrary body returning *OrganizationUpdatePlatformGroupResponse
func (c *ClientWithResponses) OrganizationUpdatePlatformGroupWithBodyWithResponse(ctx context.Context, organizationId string, group string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganizationUpdatePlatformGroupResponse, error) {
	rsp, err := c.OrganizationUpdatePlatformGroupWithBody(ctx, organizationId, group, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationUpdatePlatformGroupResponse(rsp)
}

func (c *ClientWithResponses) OrganizationUpdatePlatformGroupWithResponse(ctx context.Context, organizationId string, group string, body OrganizationUpdatePlatformGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*OrganizationUpdatePlatformGroupResponse, error) {
	rsp, err := c.OrganizationUpdatePlatformGroup(ctx, organizationId, group, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationUpdatePlatformGroupResponse(rsp)
}

// OrganizationListPlatformGroupMembersWithResponse request returning *OrganizationListPlatformGroupMembersResponse
func (c *ClientWithResponses) OrganizationListPlatformGroupMembersWithResponse(ctx context.Context, organizationId string, group string, params *OrganizationListPlatformGroupMembersParams, reqEditors ...RequestEditorFn) (*OrganizationListPlatformGroupMembersResponse, error) {
	rsp, err := c.OrganizationListPlatformGroupMembers(ctx, organizationId, group, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationListPlatformGroupMembersResponse(rsp)
}

// OrganizationRemovePlatformGroupMemberWithResponse request returning *OrganizationRemovePlatformGroupMemberResponse
func (c *ClientWithResponses) OrganizationRemovePlatformGroupMemberWithResponse(ctx context.Context, organizationId string, group string, member string, reqEditors ...RequestEditorFn) (*OrganizationRemovePlatformGroupMemberResponse, error) {
	rsp, err := c.OrganizationRemovePlatformGroupMember(ctx, organizationId, group, member, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationRemovePlatformGroupMemberResponse(rsp)
}

// OrganizationAddPlatformGroupMemberWithResponse request returning *OrganizationAddPlatformGroupMemberResponse
func (c *ClientWithResponses) OrganizationAddPlatformGroupMemberWithResponse(ctx context.Context, organizationId string, group string, member string, reqEditors ...RequestEditorFn) (*OrganizationAddPlatformGroupMemberResponse, error) {
	rsp, err := c.OrganizationAddPlatformGroupMember(ctx, organizationId, group, member, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationAddPlatformGroupMemberResponse(rsp)
}

// OrganizationListPlatformIdentityProvidersWithResponse request returning *OrganizationListPlatformIdentityProvidersResponse
func (c *ClientWithResponses) OrganizationListPlatformIdentityProvidersWithResponse(ctx context.Context, organizationId string, params *OrganizationListPlatformIdentityProvidersParams, reqEditors ...RequestEditorFn) (*OrganizationListPlatformIdentityProvidersResponse, error) {
	rsp, err := c.OrganizationListPlatformIdentityProviders(ctx, organizationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationListPlatformIdentityProvidersResponse(rsp)
}

// OrganizationCreatePlatformIdentityProviderWithBodyWithResponse request with arbitrary body returning *OrganizationCreatePlatformIdentityProviderResponse
func (c *ClientWithResponses) OrganizationCreatePlatformIdentityProviderWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganizationCreatePlatformIdentityProviderResponse, error) {
	rsp, err := c.OrganizationCreatePlatformIdentityProviderWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationCreatePlatformIdentityProviderResponse(rsp)
}

func (c *ClientWithResponses) OrganizationCreatePlatformIdentityProviderWithResponse(ctx context.Context, organizationId string, body OrganizationCreatePlatformIdentityProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*OrganizationCreatePlatformIdentityProviderResponse, error) {
	rsp, err := c.OrganizationCreatePlatformIdentityProvider(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationCreatePlatformIdentityProviderResponse(rsp)
}

// OrganizationDeletePlatformIdentityProviderWithResponse request returning *OrganizationDeletePlatformIdentityProviderResponse
func (c *ClientWithResponses) OrganizationDeletePlatformIdentityProviderWithResponse(ctx context.Context, organizationId string, identity string, reqEditors ...RequestEditorFn) (*OrganizationDeletePlatformIdentityProviderResponse, error) {
	rsp, err := c.OrganizationDeletePlatformIdentityProvider(ctx, organizationId, identity, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationDeletePlatformIdentityProviderResponse(rsp)
}

// OrganizationGetPlatformIdentityProviderWithResponse request returning *OrganizationGetPlatformIdentityProviderResponse
func (c *ClientWithResponses) OrganizationGetPlatformIdentityProviderWithResponse(ctx context.Context, organizationId string, identity string, reqEditors ...RequestEditorFn) (*OrganizationGetPlatformIdentityProviderResponse, error) {
	rsp, err := c.OrganizationGetPlatformIdentityProvider(ctx, organizationId, identity, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationGetPlatformIdentityProviderResponse(rsp)
}

// OrganizationUpdatePlatformIdentityProviderWithBodyWithResponse request with arbitrary body returning *OrganizationUpdatePlatformIdentityProviderResponse
func (c *ClientWithResponses) OrganizationUpdatePlatformIdentityProviderWithBodyWithResponse(ctx context.Context, organizationId string, identity string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganizationUpdatePlatformIdentityProviderResponse, error) {
	rsp, err := c.OrganizationUpdatePlatformIdentityProviderWithBody(ctx, organizationId, identity, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationUpdatePlatformIdentityProviderResponse(rsp)
}

func (c *ClientWithResponses) OrganizationUpdatePlatformIdentityProviderWithResponse(ctx context.Context, organizationId string, identity string, body OrganizationUpdatePlatformIdentityProviderJSONRequestBody, reqEditors ...RequestEditorFn) (*OrganizationUpdatePlatformIdentityProviderResponse, error) {
	rsp, err := c.OrganizationUpdatePlatformIdentityProvider(ctx, organizationId, identity, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationUpdatePlatformIdentityProviderResponse(rsp)
}

// OrganizationListPlatformMembersWithResponse request returning *OrganizationListPlatformMembersResponse
func (c *ClientWithResponses) OrganizationListPlatformMembersWithResponse(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*OrganizationListPlatformMembersResponse, error) {
	rsp, err := c.OrganizationListPlatformMembers(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationListPlatformMembersResponse(rsp)
}

// OrganizationAddOrUpdatePlatformMemberWithBodyWithResponse request with arbitrary body returning *OrganizationAddOrUpdatePlatformMemberResponse
func (c *ClientWithResponses) OrganizationAddOrUpdatePlatformMemberWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganizationAddOrUpdatePlatformMemberResponse, error) {
	rsp, err := c.OrganizationAddOrUpdatePlatformMemberWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationAddOrUpdatePlatformMemberResponse(rsp)
}

func (c *ClientWithResponses) OrganizationAddOrUpdatePlatformMemberWithResponse(ctx context.Context, organizationId string, body OrganizationAddOrUpdatePlatformMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*OrganizationAddOrUpdatePlatformMemberResponse, error) {
	rsp, err := c.OrganizationAddOrUpdatePlatformMember(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationAddOrUpdatePlatformMemberResponse(rsp)
}

// OrganizationRemovePlatformMemberWithResponse request returning *OrganizationRemovePlatformMemberResponse
func (c *ClientWithResponses) OrganizationRemovePlatformMemberWithResponse(ctx context.Context, organizationId string, member string, reqEditors ...RequestEditorFn) (*OrganizationRemovePlatformMemberResponse, error) {
	rsp, err := c.OrganizationRemovePlatformMember(ctx, organizationId, member, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationRemovePlatformMemberResponse(rsp)
}

// OrganizationListPlatformRolesWithResponse request returning *OrganizationListPlatformRolesResponse
func (c *ClientWithResponses) OrganizationListPlatformRolesWithResponse(ctx context.Context, organizationId string, params *OrganizationListPlatformRolesParams, reqEditors ...RequestEditorFn) (*OrganizationListPlatformRolesResponse, error) {
	rsp, err := c.OrganizationListPlatformRoles(ctx, organizationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationListPlatformRolesResponse(rsp)
}

// OrganizationCreatePlatformRoleWithBodyWithResponse request with arbitrary body returning *OrganizationCreatePlatformRoleResponse
func (c *ClientWithResponses) OrganizationCreatePlatformRoleWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganizationCreatePlatformRoleResponse, error) {
	rsp, err := c.OrganizationCreatePlatformRoleWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationCreatePlatformRoleResponse(rsp)
}

func (c *ClientWithResponses) OrganizationCreatePlatformRoleWithResponse(ctx context.Context, organizationId string, body OrganizationCreatePlatformRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*OrganizationCreatePlatformRoleResponse, error) {
	rsp, err := c.OrganizationCreatePlatformRole(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationCreatePlatformRoleResponse(rsp)
}

// OrganizationDeletePlatformRoleWithResponse request returning *OrganizationDeletePlatformRoleResponse
func (c *ClientWithResponses) OrganizationDeletePlatformRoleWithResponse(ctx context.Context, organizationId string, role string, reqEditors ...RequestEditorFn) (*OrganizationDeletePlatformRoleResponse, error) {
	rsp, err := c.OrganizationDeletePlatformRole(ctx, organizationId, role, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationDeletePlatformRoleResponse(rsp)
}

// OrganizationGetPlatformRoleWithResponse request returning *OrganizationGetPlatformRoleResponse
func (c *ClientWithResponses) OrganizationGetPlatformRoleWithResponse(ctx context.Context, organizationId string, role string, reqEditors ...RequestEditorFn) (*OrganizationGetPlatformRoleResponse, error) {
	rsp, err := c.OrganizationGetPlatformRole(ctx, organizationId, role, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationGetPlatformRoleResponse(rsp)
}

// OrganizationUpdatePlatformRoleWithBodyWithResponse request with arbitrary body returning *OrganizationUpdatePlatformRoleResponse
func (c *ClientWithResponses) OrganizationUpdatePlatformRoleWithBodyWithResponse(ctx context.Context, organizationId string, role string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganizationUpdatePlatformRoleResponse, error) {
	rsp, err := c.OrganizationUpdatePlatformRoleWithBody(ctx, organizationId, role, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationUpdatePlatformRoleResponse(rsp)
}

func (c *ClientWithResponses) OrganizationUpdatePlatformRoleWithResponse(ctx context.Context, organizationId string, role string, body OrganizationUpdatePlatformRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*OrganizationUpdatePlatformRoleResponse, error) {
	rsp, err := c.OrganizationUpdatePlatformRole(ctx, organizationId, role, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationUpdatePlatformRoleResponse(rsp)
}

// OrganizationGetPlatformSettingsWithResponse request returning *OrganizationGetPlatformSettingsResponse
func (c *ClientWithResponses) OrganizationGetPlatformSettingsWithResponse(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*OrganizationGetPlatformSettingsResponse, error) {
	rsp, err := c.OrganizationGetPlatformSettings(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationGetPlatformSettingsResponse(rsp)
}

// OrganizationUpdatePlatformSettingsWithBodyWithResponse request with arbitrary body returning *OrganizationUpdatePlatformSettingsResponse
func (c *ClientWithResponses) OrganizationUpdatePlatformSettingsWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganizationUpdatePlatformSettingsResponse, error) {
	rsp, err := c.OrganizationUpdatePlatformSettingsWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationUpdatePlatformSettingsResponse(rsp)
}

func (c *ClientWithResponses) OrganizationUpdatePlatformSettingsWithResponse(ctx context.Context, organizationId string, body OrganizationUpdatePlatformSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*OrganizationUpdatePlatformSettingsResponse, error) {
	rsp, err := c.OrganizationUpdatePlatformSettings(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationUpdatePlatformSettingsResponse(rsp)
}

// OrganizationListPlatformShardingTagsWithResponse request returning *OrganizationListPlatformShardingTagsResponse
func (c *ClientWithResponses) OrganizationListPlatformShardingTagsWithResponse(ctx context.Context, organizationId string, reqEditors ...RequestEditorFn) (*OrganizationListPlatformShardingTagsResponse, error) {
	rsp, err := c.OrganizationListPlatformShardingTags(ctx, organizationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationListPlatformShardingTagsResponse(rsp)
}

// OrganizationCreatePlatformShardingTagWithBodyWithResponse request with arbitrary body returning *OrganizationCreatePlatformShardingTagResponse
func (c *ClientWithResponses) OrganizationCreatePlatformShardingTagWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganizationCreatePlatformShardingTagResponse, error) {
	rsp, err := c.OrganizationCreatePlatformShardingTagWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationCreatePlatformShardingTagResponse(rsp)
}

func (c *ClientWithResponses) OrganizationCreatePlatformShardingTagWithResponse(ctx context.Context, organizationId string, body OrganizationCreatePlatformShardingTagJSONRequestBody, reqEditors ...RequestEditorFn) (*OrganizationCreatePlatformShardingTagResponse, error) {
	rsp, err := c.OrganizationCreatePlatformShardingTag(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationCreatePlatformShardingTagResponse(rsp)
}

// OrganizationDeletePlatformShardingTagWithResponse request returning *OrganizationDeletePlatformShardingTagResponse
func (c *ClientWithResponses) OrganizationDeletePlatformShardingTagWithResponse(ctx context.Context, organizationId string, tag string, reqEditors ...RequestEditorFn) (*OrganizationDeletePlatformShardingTagResponse, error) {
	rsp, err := c.OrganizationDeletePlatformShardingTag(ctx, organizationId, tag, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationDeletePlatformShardingTagResponse(rsp)
}

// OrganizationGetPlatformShardingTagWithResponse request returning *OrganizationGetPlatformShardingTagResponse
func (c *ClientWithResponses) OrganizationGetPlatformShardingTagWithResponse(ctx context.Context, organizationId string, tag string, reqEditors ...RequestEditorFn) (*OrganizationGetPlatformShardingTagResponse, error) {
	rsp, err := c.OrganizationGetPlatformShardingTag(ctx, organizationId, tag, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationGetPlatformShardingTagResponse(rsp)
}

// OrganizationUpdatePlatformShardingTagWithBodyWithResponse request with arbitrary body returning *OrganizationUpdatePlatformShardingTagResponse
func (c *ClientWithResponses) OrganizationUpdatePlatformShardingTagWithBodyWithResponse(ctx context.Context, organizationId string, tag string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganizationUpdatePlatformShardingTagResponse, error) {
	rsp, err := c.OrganizationUpdatePlatformShardingTagWithBody(ctx, organizationId, tag, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationUpdatePlatformShardingTagResponse(rsp)
}

func (c *ClientWithResponses) OrganizationUpdatePlatformShardingTagWithResponse(ctx context.Context, organizationId string, tag string, body OrganizationUpdatePlatformShardingTagJSONRequestBody, reqEditors ...RequestEditorFn) (*OrganizationUpdatePlatformShardingTagResponse, error) {
	rsp, err := c.OrganizationUpdatePlatformShardingTag(ctx, organizationId, tag, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationUpdatePlatformShardingTagResponse(rsp)
}

// OrganizationListPlatformUsersWithResponse request returning *OrganizationListPlatformUsersResponse
func (c *ClientWithResponses) OrganizationListPlatformUsersWithResponse(ctx context.Context, organizationId string, params *OrganizationListPlatformUsersParams, reqEditors ...RequestEditorFn) (*OrganizationListPlatformUsersResponse, error) {
	rsp, err := c.OrganizationListPlatformUsers(ctx, organizationId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationListPlatformUsersResponse(rsp)
}

// OrganizationCreatePlatformUserWithBodyWithResponse request with arbitrary body returning *OrganizationCreatePlatformUserResponse
func (c *ClientWithResponses) OrganizationCreatePlatformUserWithBodyWithResponse(ctx context.Context, organizationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganizationCreatePlatformUserResponse, error) {
	rsp, err := c.OrganizationCreatePlatformUserWithBody(ctx, organizationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationCreatePlatformUserResponse(rsp)
}

func (c *ClientWithResponses) OrganizationCreatePlatformUserWithResponse(ctx context.Context, organizationId string, body OrganizationCreatePlatformUserJSONRequestBody, reqEditors ...RequestEditorFn) (*OrganizationCreatePlatformUserResponse, error) {
	rsp, err := c.OrganizationCreatePlatformUser(ctx, organizationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationCreatePlatformUserResponse(rsp)
}

// OrganizationDeletePlatformUserWithResponse request returning *OrganizationDeletePlatformUserResponse
func (c *ClientWithResponses) OrganizationDeletePlatformUserWithResponse(ctx context.Context, organizationId string, user string, reqEditors ...RequestEditorFn) (*OrganizationDeletePlatformUserResponse, error) {
	rsp, err := c.OrganizationDeletePlatformUser(ctx, organizationId, user, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationDeletePlatformUserResponse(rsp)
}

// OrganizationGetPlatformUserWithResponse request returning *OrganizationGetPlatformUserResponse
func (c *ClientWithResponses) OrganizationGetPlatformUserWithResponse(ctx context.Context, organizationId string, user string, reqEditors ...RequestEditorFn) (*OrganizationGetPlatformUserResponse, error) {
	rsp, err := c.OrganizationGetPlatformUser(ctx, organizationId, user, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationGetPlatformUserResponse(rsp)
}

// OrganizationUpdatePlatformUserWithBodyWithResponse request with arbitrary body returning *OrganizationUpdatePlatformUserResponse
func (c *ClientWithResponses) OrganizationUpdatePlatformUserWithBodyWithResponse(ctx context.Context, organizationId string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganizationUpdatePlatformUserResponse, error) {
	rsp, err := c.OrganizationUpdatePlatformUserWithBody(ctx, organizationId, user, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationUpdatePlatformUserResponse(rsp)
}

func (c *ClientWithResponses) OrganizationUpdatePlatformUserWithResponse(ctx context.Context, organizationId string, user string, body OrganizationUpdatePlatformUserJSONRequestBody, reqEditors ...RequestEditorFn) (*OrganizationUpdatePlatformUserResponse, error) {
	rsp, err := c.OrganizationUpdatePlatformUser(ctx, organizationId, user, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationUpdatePlatformUserResponse(rsp)
}

// OrganizationResetPlatformUserPasswordWithBodyWithResponse request with arbitrary body returning *OrganizationResetPlatformUserPasswordResponse
func (c *ClientWithResponses) OrganizationResetPlatformUserPasswordWithBodyWithResponse(ctx context.Context, organizationId string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganizationResetPlatformUserPasswordResponse, error) {
	rsp, err := c.OrganizationResetPlatformUserPasswordWithBody(ctx, organizationId, user, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationResetPlatformUserPasswordResponse(rsp)
}

// OrganizationUpdatePlatformUserStatusWithBodyWithResponse request with arbitrary body returning *OrganizationUpdatePlatformUserStatusResponse
func (c *ClientWithResponses) OrganizationUpdatePlatformUserStatusWithBodyWithResponse(ctx context.Context, organizationId string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganizationUpdatePlatformUserStatusResponse, error) {
	rsp, err := c.OrganizationUpdatePlatformUserStatusWithBody(ctx, organizationId, user, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationUpdatePlatformUserStatusResponse(rsp)
}

func (c *ClientWithResponses) OrganizationUpdatePlatformUserStatusWithResponse(ctx context.Context, organizationId string, user string, body OrganizationUpdatePlatformUserStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*OrganizationUpdatePlatformUserStatusResponse, error) {
	rsp, err := c.OrganizationUpdatePlatformUserStatus(ctx, organizationId, user, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationUpdatePlatformUserStatusResponse(rsp)
}

// OrganizationUpdatePlatformUserNameWithBodyWithResponse request with arbitrary body returning *OrganizationUpdatePlatformUserNameResponse
func (c *ClientWithResponses) OrganizationUpdatePlatformUserNameWithBodyWithResponse(ctx context.Context, organizationId string, user string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrganizationUpdatePlatformUserNameResponse, error) {
	rsp, err := c.OrganizationUpdatePlatformUserNameWithBody(ctx, organizationId, user, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationUpdatePlatformUserNameResponse(rsp)
}

func (c *ClientWithResponses) OrganizationUpdatePlatformUserNameWithResponse(ctx context.Context, organizationId string, user string, body OrganizationUpdatePlatformUserNameJSONRequestBody, reqEditors ...RequestEditorFn) (*OrganizationUpdatePlatformUserNameResponse, error) {
	rsp, err := c.OrganizationUpdatePlatformUserName(ctx, organizationId, user, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrganizationUpdatePlatformUserNameResponse(rsp)
}

// PlatformListAuditEventTypesWithResponse request returning *PlatformListAuditEventTypesResponse
func (c *ClientWithResponses) PlatformListAuditEventTypesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PlatformListAuditEventTypesResponse, error) {
	rsp, err := c.PlatformListAuditEventTypes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlatformListAuditEventTypesResponse(rsp)
}

// PlatformAlertStatusWithResponse request returning *PlatformAlertStatusResponse
func (c *ClientWithResponses) PlatformAlertStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PlatformAlertStatusResponse, error) {
	rsp, err := c.PlatformAlertStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlatformAlertStatusResponse(rsp)
}

// PlatformGetFlowSchemaWithResponse request returning *PlatformGetFlowSchemaResponse
func (c *ClientWithResponses) PlatformGetFlowSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PlatformGetFlowSchemaResponse, error) {
	rsp, err := c.PlatformGetFlowSchema(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlatformGetFlowSchemaResponse(rsp)
}

// PlatformGetSpelGrammarWithResponse request returning *PlatformGetSpelGrammarResponse
func (c *ClientWithResponses) PlatformGetSpelGrammarWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PlatformGetSpelGrammarResponse, error) {
	rsp, err := c.PlatformGetSpelGrammar(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlatformGetSpelGrammarResponse(rsp)
}

// PlatformGetInstallationWithResponse request returning *PlatformGetInstallationResponse
func (c *ClientWithResponses) PlatformGetInstallationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PlatformGetInstallationResponse, error) {
	rsp, err := c.PlatformGetInstallation(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlatformGetInstallationResponse(rsp)
}

// PlatformListPluginAuthDeviceNotifiersWithResponse request returning *PlatformListPluginAuthDeviceNotifiersResponse
func (c *ClientWithResponses) PlatformListPluginAuthDeviceNotifiersWithResponse(ctx context.Context, params *PlatformListPluginAuthDeviceNotifiersParams, reqEditors ...RequestEditorFn) (*PlatformListPluginAuthDeviceNotifiersResponse, error) {
	rsp, err := c.PlatformListPluginAuthDeviceNotifiers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlatformListPluginAuthDeviceNotifiersResponse(rsp)
}

// PlatformGetPluginAuthDeviceNotifierWithResponse request returning *PlatformGetPluginAuthDeviceNotifierResponse
func (c *ClientWithResponses) PlatformGetPluginAuthDeviceNotifierWithResponse(ctx context.Context, authDeviceNotifierId string, reqEditors ...RequestEditorFn) (*PlatformGetPluginAuthDeviceNotifierResponse, error) {
	rsp, err := c.PlatformGetPluginAuthDeviceNotifier(ctx, authDeviceNotifierId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlatformGetPluginAuthDeviceNotifierResponse(rsp)
}

// PlatformGetPluginAuthDeviceNotifierSchemaWithResponse request returning *PlatformGetPluginAuthDeviceNotifierSchemaResponse
func (c *ClientWithResponses) PlatformGetPluginAuthDeviceNotifierSchemaWithResponse(ctx context.Context, authDeviceNotifierId string, reqEditors ...RequestEditorFn) (*PlatformGetPluginAuthDeviceNotifierSchemaResponse, error) {
	rsp, err := c.PlatformGetPluginAuthDeviceNotifierSchema(ctx, authDeviceNotifierId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlatformGetPluginAuthDeviceNotifierSchemaResponse(rsp)
}

// PlatformListPluginBotDetectionsWithResponse request returning *PlatformListPluginBotDetectionsResponse
func (c *ClientWithResponses) PlatformListPluginBotDetectionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PlatformListPluginBotDetectionsResponse, error) {
	rsp, err := c.PlatformListPluginBotDetections(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlatformListPluginBotDetectionsResponse(rsp)
}

// PlatformGetPluginBotDetectionWithResponse request returning *PlatformGetPluginBotDetectionResponse
func (c *ClientWithResponses) PlatformGetPluginBotDetectionWithResponse(ctx context.Context, botDetection string, reqEditors ...RequestEditorFn) (*PlatformGetPluginBotDetectionResponse, error) {
	rsp, err := c.PlatformGetPluginBotDetection(ctx, botDetection, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlatformGetPluginBotDetectionResponse(rsp)
}

// PlatformGetPluginBotDetectionSchemaWithResponse request returning *PlatformGetPluginBotDetectionSchemaResponse
func (c *ClientWithResponses) PlatformGetPluginBotDetectionSchemaWithResponse(ctx context.Context, botDetection string, reqEditors ...RequestEditorFn) (*PlatformGetPluginBotDetectionSchemaResponse, error) {
	rsp, err := c.PlatformGetPluginBotDetectionSchema(ctx, botDetection, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlatformGetPluginBotDetectionSchemaResponse(rsp)
}

// PlatformListPluginCertificatesWithResponse request returning *PlatformListPluginCertificatesResponse
func (c *ClientWithResponses) PlatformListPluginCertificatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PlatformListPluginCertificatesResponse, error) {
	rsp, err := c.PlatformListPluginCertificates(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlatformListPluginCertificatesResponse(rsp)
}

// PlatformGetPluginCertificateWithResponse request returning *PlatformGetPluginCertificateResponse
func (c *ClientWithResponses) PlatformGetPluginCertificateWithResponse(ctx context.Context, certificate string, reqEditors ...RequestEditorFn) (*PlatformGetPluginCertificateResponse, error) {
	rsp, err := c.PlatformGetPluginCertificate(ctx, certificate, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlatformGetPluginCertificateResponse(rsp)
}

// PlatformGetPluginCertificateSchemaWithResponse request returning *PlatformGetPluginCertificateSchemaResponse
func (c *ClientWithResponses) PlatformGetPluginCertificateSchemaWithResponse(ctx context.Context, certificate string, reqEditors ...RequestEditorFn) (*PlatformGetPluginCertificateSchemaResponse, error) {
	rsp, err := c.PlatformGetPluginCertificateSchema(ctx, certificate, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlatformGetPluginCertificateSchemaResponse(rsp)
}

// PlatformListDeviceIdentifierPluginsWithResponse request returning *PlatformListDeviceIdentifierPluginsResponse
func (c *ClientWithResponses) PlatformListDeviceIdentifierPluginsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PlatformListDeviceIdentifierPluginsResponse, error) {
	rsp, err := c.PlatformListDeviceIdentifierPlugins(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlatformListDeviceIdentifierPluginsResponse(rsp)
}

// PlatformGetDeviceIdentifierPluginWithResponse request returning *PlatformGetDeviceIdentifierPluginResponse
func (c *ClientWithResponses) PlatformGetDeviceIdentifierPluginWithResponse(ctx context.Context, deviceIdentifier string, reqEditors ...RequestEditorFn) (*PlatformGetDeviceIdentifierPluginResponse, error) {
	rsp, err := c.PlatformGetDeviceIdentifierPlugin(ctx, deviceIdentifier, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlatformGetDeviceIdentifierPluginResponse(rsp)
}

// PlatformGetDeviceIdentifierPluginSchemaWithResponse request returning *PlatformGetDeviceIdentifierPluginSchemaResponse
func (c *ClientWithResponses) PlatformGetDeviceIdentifierPluginSchemaWithResponse(ctx context.Context, deviceIdentifier string, reqEditors ...RequestEditorFn) (*PlatformGetDeviceIdentifierPluginSchemaResponse, error) {
	rsp, err := c.PlatformGetDeviceIdentifierPluginSchema(ctx, deviceIdentifier, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlatformGetDeviceIdentifierPluginSchemaResponse(rsp)
}

// PlatformListPluginExtensionGrantsWithResponse request returning *PlatformListPluginExtensionGrantsResponse
func (c *ClientWithResponses) PlatformListPluginExtensionGrantsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PlatformListPluginExtensionGrantsResponse, error) {
	rsp, err := c.PlatformListPluginExtensionGrants(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlatformListPluginExtensionGrantsResponse(rsp)
}

// PlatformGetPluginExtensionGrantWithResponse request returning *PlatformGetPluginExtensionGrantResponse
func (c *ClientWithResponses) PlatformGetPluginExtensionGrantWithResponse(ctx context.Context, extensionGrant string, reqEditors ...RequestEditorFn) (*PlatformGetPluginExtensionGrantResponse, error) {
	rsp, err := c.PlatformGetPluginExtensionGrant(ctx, extensionGrant, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlatformGetPluginExtensionGrantResponse(rsp)
}

// PlatformGetPluginExtensionGrantSchemaWithResponse request returning *PlatformGetPluginExtensionGrantSchemaResponse
func (c *ClientWithResponses) PlatformGetPluginExtensionGrantSchemaWithResponse(ctx context.Context, extensionGrant string, reqEditors ...RequestEditorFn) (*PlatformGetPluginExtensionGrantSchemaResponse, error) {
	rsp, err := c.PlatformGetPluginExtensionGrantSchema(ctx, extensionGrant, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlatformGetPluginExtensionGrantSchemaResponse(rsp)
}

// PlatformListPluginFactorsWithResponse request returning *PlatformListPluginFactorsResponse
func (c *ClientWithResponses) PlatformListPluginFactorsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PlatformListPluginFactorsResponse, error) {
	rsp, err := c.PlatformListPluginFactors(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlatformListPluginFactorsResponse(rsp)
}

// PlatformGetPluginFactorWithResponse request returning *PlatformGetPluginFactorResponse
func (c *ClientWithResponses) PlatformGetPluginFactorWithResponse(ctx context.Context, factor string, reqEditors ...RequestEditorFn) (*PlatformGetPluginFactorResponse, error) {
	rsp, err := c.PlatformGetPluginFactor(ctx, factor, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlatformGetPluginFactorResponse(rsp)
}

// PlatformGetPluginFactorSchemaWithResponse request returning *PlatformGetPluginFactorSchemaResponse
func (c *ClientWithResponses) PlatformGetPluginFactorSchemaWithResponse(ctx context.Context, factor string, reqEditors ...RequestEditorFn) (*PlatformGetPluginFactorSchemaResponse, error) {
	rsp, err := c.PlatformGetPluginFactorSchema(ctx, factor, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlatformGetPluginFactorSchemaResponse(rsp)
}

// PlatformListProviderPluginsWithResponse request returning *PlatformListProviderPluginsResponse
func (c *ClientWithResponses) PlatformListProviderPluginsWithResponse(ctx context.Context, params *PlatformListProviderPluginsParams, reqEditors ...RequestEditorFn) (*PlatformListProviderPluginsResponse, error) {
	rsp, err := c.PlatformListProviderPlugins(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlatformListProviderPluginsResponse(rsp)
}

// PlatformGetIdentityProviderPluginWithResponse request returning *PlatformGetIdentityProviderPluginResponse
func (c *ClientWithResponses) PlatformGetIdentityProviderPluginWithResponse(ctx context.Context, identity string, reqEditors ...RequestEditorFn) (*PlatformGetIdentityProviderPluginResponse, error) {
	rsp, err := c.PlatformGetIdentityProviderPlugin(ctx, identity, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlatformGetIdentityProviderPluginResponse(rsp)
}

// PlatformGetIdentityProviderPluginSchemaWithResponse request returning *PlatformGetIdentityProviderPluginSchemaResponse
func (c *ClientWithResponses) PlatformGetIdentityProviderPluginSchemaWithResponse(ctx context.Context, identity string, reqEditors ...RequestEditorFn) (*PlatformGetIdentityProviderPluginSchemaResponse, error) {
	rsp, err := c.PlatformGetIdentityProviderPluginSchema(ctx, identity, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlatformGetIdentityProviderPluginSchemaResponse(rsp)
}

// PlatformListPluginNotifiersWithResponse request returning *PlatformListPluginNotifiersResponse
func (c *ClientWithResponses) PlatformListPluginNotifiersWithResponse(ctx context.Context, params *PlatformListPluginNotifiersParams, reqEditors ...RequestEditorFn) (*PlatformListPluginNotifiersResponse, error) {
	rsp, err := c.PlatformListPluginNotifiers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlatformListPluginNotifiersResponse(rsp)
}

// PlatformGetPluginNotifierWithResponse request returning *PlatformGetPluginNotifierResponse
func (c *ClientWithResponses) PlatformGetPluginNotifierWithResponse(ctx context.Context, notifierId string, reqEditors ...RequestEditorFn) (*PlatformGetPluginNotifierResponse, error) {
	rsp, err := c.PlatformGetPluginNotifier(ctx, notifierId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlatformGetPluginNotifierResponse(rsp)
}

// PlatformGetPluginNotifierSchemaWithResponse request returning *PlatformGetPluginNotifierSchemaResponse
func (c *ClientWithResponses) PlatformGetPluginNotifierSchemaWithResponse(ctx context.Context, notifierId string, reqEditors ...RequestEditorFn) (*PlatformGetPluginNotifierSchemaResponse, error) {
	rsp, err := c.PlatformGetPluginNotifierSchema(ctx, notifierId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlatformGetPluginNotifierSchemaResponse(rsp)
}

// PlatformListPluginPoliciesWithResponse request returning *PlatformListPluginPoliciesResponse
func (c *ClientWithResponses) PlatformListPluginPoliciesWithResponse(ctx context.Context, params *PlatformListPluginPoliciesParams, reqEditors ...RequestEditorFn) (*PlatformListPluginPoliciesResponse, error) {
	rsp, err := c.PlatformListPluginPolicies(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlatformListPluginPoliciesResponse(rsp)
}

// PlatformGetPluginPolicyWithResponse request returning *PlatformGetPluginPolicyResponse
func (c *ClientWithResponses) PlatformGetPluginPolicyWithResponse(ctx context.Context, policy string, reqEditors ...RequestEditorFn) (*PlatformGetPluginPolicyResponse, error) {
	rsp, err := c.PlatformGetPluginPolicy(ctx, policy, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlatformGetPluginPolicyResponse(rsp)
}

// PlatformGetPluginPolicyDocumentationWithResponse request returning *PlatformGetPluginPolicyDocumentationResponse
func (c *ClientWithResponses) PlatformGetPluginPolicyDocumentationWithResponse(ctx context.Context, policy string, reqEditors ...RequestEditorFn) (*PlatformGetPluginPolicyDocumentationResponse, error) {
	rsp, err := c.PlatformGetPluginPolicyDocumentation(ctx, policy, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlatformGetPluginPolicyDocumentationResponse(rsp)
}

// PlatformGetPluginPolicySchemaWithResponse request returning *PlatformGetPluginPolicySchemaResponse
func (c *ClientWithResponses) PlatformGetPluginPolicySchemaWithResponse(ctx context.Context, policy string, reqEditors ...RequestEditorFn) (*PlatformGetPluginPolicySchemaResponse, error) {
	rsp, err := c.PlatformGetPluginPolicySchema(ctx, policy, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlatformGetPluginPolicySchemaResponse(rsp)
}

// PlatformListPluginReportersWithResponse request returning *PlatformListPluginReportersResponse
func (c *ClientWithResponses) PlatformListPluginReportersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PlatformListPluginReportersResponse, error) {
	rsp, err := c.PlatformListPluginReporters(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlatformListPluginReportersResponse(rsp)
}

// PlatformGetPluginReporterWithResponse request returning *PlatformGetPluginReporterResponse
func (c *ClientWithResponses) PlatformGetPluginReporterWithResponse(ctx context.Context, reporter string, reqEditors ...RequestEditorFn) (*PlatformGetPluginReporterResponse, error) {
	rsp, err := c.PlatformGetPluginReporter(ctx, reporter, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlatformGetPluginReporterResponse(rsp)
}

// PlatformGetPluginReporterSchemaWithResponse request returning *PlatformGetPluginReporterSchemaResponse
func (c *ClientWithResponses) PlatformGetPluginReporterSchemaWithResponse(ctx context.Context, reporter string, reqEditors ...RequestEditorFn) (*PlatformGetPluginReporterSchemaResponse, error) {
	rsp, err := c.PlatformGetPluginReporterSchema(ctx, reporter, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlatformGetPluginReporterSchemaResponse(rsp)
}

// PlatformListPluginResourcesWithResponse request returning *PlatformListPluginResourcesResponse
func (c *ClientWithResponses) PlatformListPluginResourcesWithResponse(ctx context.Context, params *PlatformListPluginResourcesParams, reqEditors ...RequestEditorFn) (*PlatformListPluginResourcesResponse, error) {
	rsp, err := c.PlatformListPluginResources(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlatformListPluginResourcesResponse(rsp)
}

// PlatformGetPluginResourceWithResponse request returning *PlatformGetPluginResourceResponse
func (c *ClientWithResponses) PlatformGetPluginResourceWithResponse(ctx context.Context, resource string, reqEditors ...RequestEditorFn) (*PlatformGetPluginResourceResponse, error) {
	rsp, err := c.PlatformGetPluginResource(ctx, resource, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlatformGetPluginResourceResponse(rsp)
}

// PlatformGetPluginResourceSchemaWithResponse request returning *PlatformGetPluginResourceSchemaResponse
func (c *ClientWithResponses) PlatformGetPluginResourceSchemaWithResponse(ctx context.Context, resource string, reqEditors ...RequestEditorFn) (*PlatformGetPluginResourceSchemaResponse, error) {
	rsp, err := c.PlatformGetPluginResourceSchema(ctx, resource, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlatformGetPluginResourceSchemaResponse(rsp)
}

// PlatformRoleWithResponse request returning *PlatformRoleResponse
func (c *ClientWithResponses) PlatformRoleWithResponse(ctx context.Context, role string, reqEditors ...RequestEditorFn) (*PlatformRoleResponse, error) {
	rsp, err := c.PlatformRole(ctx, role, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlatformRoleResponse(rsp)
}

// CurrentUserGetWithResponse request returning *CurrentUserGetResponse
func (c *ClientWithResponses) CurrentUserGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CurrentUserGetResponse, error) {
	rsp, err := c.CurrentUserGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCurrentUserGetResponse(rsp)
}

// CurrentUserSubscribeNewsletterWithBodyWithResponse request with arbitrary body returning *CurrentUserSubscribeNewsletterResponse
func (c *ClientWithResponses) CurrentUserSubscribeNewsletterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CurrentUserSubscribeNewsletterResponse, error) {
	rsp, err := c.CurrentUserSubscribeNewsletterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCurrentUserSubscribeNewsletterResponse(rsp)
}

// CurrentUserGetNewsletterTaglinesWithResponse request returning *CurrentUserGetNewsletterTaglinesResponse
func (c *ClientWithResponses) CurrentUserGetNewsletterTaglinesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CurrentUserGetNewsletterTaglinesResponse, error) {
	rsp, err := c.CurrentUserGetNewsletterTaglines(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCurrentUserGetNewsletterTaglinesResponse(rsp)
}

// CurrentUserListNotificationsWithResponse request returning *CurrentUserListNotificationsResponse
func (c *ClientWithResponses) CurrentUserListNotificationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CurrentUserListNotificationsResponse, error) {
	rsp, err := c.CurrentUserListNotifications(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCurrentUserListNotificationsResponse(rsp)
}

// CurrentUserMarkNotificationAsReadWithResponse request returning *CurrentUserMarkNotificationAsReadResponse
func (c *ClientWithResponses) CurrentUserMarkNotificationAsReadWithResponse(ctx context.Context, notificationId string, reqEditors ...RequestEditorFn) (*CurrentUserMarkNotificationAsReadResponse, error) {
	rsp, err := c.CurrentUserMarkNotificationAsRead(ctx, notificationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCurrentUserMarkNotificationAsReadResponse(rsp)
}

// ParseAuthTokenExchangeResponse parses an HTTP response from a AuthTokenExchangeWithResponse call
func ParseAuthTokenExchangeResponse(rsp *http.Response) (*AuthTokenExchangeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthTokenExchangeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AuthToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrganizationListPlatformAuditsResponse parses an HTTP response from a OrganizationListPlatformAuditsWithResponse call
func ParseOrganizationListPlatformAuditsResponse(rsp *http.Response) (*OrganizationListPlatformAuditsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationListPlatformAuditsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Audit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrganizationGetPlatformAuditResponse parses an HTTP response from a OrganizationGetPlatformAuditWithResponse call
func ParseOrganizationGetPlatformAuditResponse(rsp *http.Response) (*OrganizationGetPlatformAuditResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationGetPlatformAuditResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Audit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrganizationListEntrypointsResponse parses an HTTP response from a OrganizationListEntrypointsWithResponse call
func ParseOrganizationListEntrypointsResponse(rsp *http.Response) (*OrganizationListEntrypointsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationListEntrypointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Entrypoint
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreate14Response parses an HTTP response from a Create14WithResponse call
func ParseCreate14Response(rsp *http.Response) (*Create14Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &Create14Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseOrganizationDeleteEntrypointResponse parses an HTTP response from a OrganizationDeleteEntrypointWithResponse call
func ParseOrganizationDeleteEntrypointResponse(rsp *http.Response) (*OrganizationDeleteEntrypointResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationDeleteEntrypointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseOrganizationGetEntrypointResponse parses an HTTP response from a OrganizationGetEntrypointWithResponse call
func ParseOrganizationGetEntrypointResponse(rsp *http.Response) (*OrganizationGetEntrypointResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationGetEntrypointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Entrypoint
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrganizationUpdateEntrypointResponse parses an HTTP response from a OrganizationUpdateEntrypointWithResponse call
func ParseOrganizationUpdateEntrypointResponse(rsp *http.Response) (*OrganizationUpdateEntrypointResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationUpdateEntrypointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Entrypoint
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrganizationListPlatfomEnvironmentsResponse parses an HTTP response from a OrganizationListPlatfomEnvironmentsWithResponse call
func ParseOrganizationListPlatfomEnvironmentsResponse(rsp *http.Response) (*OrganizationListPlatfomEnvironmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationListPlatfomEnvironmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Environment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnvironmentListDomainsResponse parses an HTTP response from a EnvironmentListDomainsWithResponse call
func ParseEnvironmentListDomainsResponse(rsp *http.Response) (*EnvironmentListDomainsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentListDomainsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Domain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnvironmentCreateDomainResponse parses an HTTP response from a EnvironmentCreateDomainWithResponse call
func ParseEnvironmentCreateDomainResponse(rsp *http.Response) (*EnvironmentCreateDomainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentCreateDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Domain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDomainGetByHridResponse parses an HTTP response from a DomainGetByHridWithResponse call
func ParseDomainGetByHridResponse(rsp *http.Response) (*DomainGetByHridResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainGetByHridResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Domain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainDeleteResponse parses an HTTP response from a DomainDeleteWithResponse call
func ParseDomainDeleteResponse(rsp *http.Response) (*DomainDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDomainGetResponse parses an HTTP response from a DomainGetWithResponse call
func ParseDomainGetResponse(rsp *http.Response) (*DomainGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Domain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnvironmentPatchDomainResponse parses an HTTP response from a EnvironmentPatchDomainWithResponse call
func ParseEnvironmentPatchDomainResponse(rsp *http.Response) (*EnvironmentPatchDomainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentPatchDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Domain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainUpdateResponse parses an HTTP response from a DomainUpdateWithResponse call
func ParseDomainUpdateResponse(rsp *http.Response) (*DomainUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Domain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnvironmentListDomainAlertNotifiersResponse parses an HTTP response from a EnvironmentListDomainAlertNotifiersWithResponse call
func ParseEnvironmentListDomainAlertNotifiersResponse(rsp *http.Response) (*EnvironmentListDomainAlertNotifiersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentListDomainAlertNotifiersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AlertNotifier
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnvironmentCreateDomainAlertNotifierResponse parses an HTTP response from a EnvironmentCreateDomainAlertNotifierWithResponse call
func ParseEnvironmentCreateDomainAlertNotifierResponse(rsp *http.Response) (*EnvironmentCreateDomainAlertNotifierResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentCreateDomainAlertNotifierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlertNotifier
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainDeleteAlertNotifierResponse parses an HTTP response from a DomainDeleteAlertNotifierWithResponse call
func ParseDomainDeleteAlertNotifierResponse(rsp *http.Response) (*DomainDeleteAlertNotifierResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainDeleteAlertNotifierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDomainGetAlertNotifierResponse parses an HTTP response from a DomainGetAlertNotifierWithResponse call
func ParseDomainGetAlertNotifierResponse(rsp *http.Response) (*DomainGetAlertNotifierResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainGetAlertNotifierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlertNotifier
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnvironmentPatchDomainAlertNotifierResponse parses an HTTP response from a EnvironmentPatchDomainAlertNotifierWithResponse call
func ParseEnvironmentPatchDomainAlertNotifierResponse(rsp *http.Response) (*EnvironmentPatchDomainAlertNotifierResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentPatchDomainAlertNotifierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlertNotifier
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnvironmentListDomainAlertTriggersResponse parses an HTTP response from a EnvironmentListDomainAlertTriggersWithResponse call
func ParseEnvironmentListDomainAlertTriggersResponse(rsp *http.Response) (*EnvironmentListDomainAlertTriggersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentListDomainAlertTriggersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AlertTrigger
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnvironmentPatchDomainAlertTriggersResponse parses an HTTP response from a EnvironmentPatchDomainAlertTriggersWithResponse call
func ParseEnvironmentPatchDomainAlertTriggersResponse(rsp *http.Response) (*EnvironmentPatchDomainAlertTriggersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentPatchDomainAlertTriggersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AlertTrigger
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainGetAnalyticsResponse parses an HTTP response from a DomainGetAnalyticsWithResponse call
func ParseDomainGetAnalyticsResponse(rsp *http.Response) (*DomainGetAnalyticsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainGetAnalyticsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEnvironmentListDomainApplicationsResponse parses an HTTP response from a EnvironmentListDomainApplicationsWithResponse call
func ParseEnvironmentListDomainApplicationsResponse(rsp *http.Response) (*EnvironmentListDomainApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentListDomainApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplicationPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnvironmentCreateDomainApplicationResponse parses an HTTP response from a EnvironmentCreateDomainApplicationWithResponse call
func ParseEnvironmentCreateDomainApplicationResponse(rsp *http.Response) (*EnvironmentCreateDomainApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentCreateDomainApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Application
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDomainDeleteApplicationResponse parses an HTTP response from a DomainDeleteApplicationWithResponse call
func ParseDomainDeleteApplicationResponse(rsp *http.Response) (*DomainDeleteApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainDeleteApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApplicationGetDomainApplicationResponse parses an HTTP response from a ApplicationGetDomainApplicationWithResponse call
func ParseApplicationGetDomainApplicationResponse(rsp *http.Response) (*ApplicationGetDomainApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplicationGetDomainApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Application
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnvironmentPatchDomainApplicationResponse parses an HTTP response from a EnvironmentPatchDomainApplicationWithResponse call
func ParseEnvironmentPatchDomainApplicationResponse(rsp *http.Response) (*EnvironmentPatchDomainApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentPatchDomainApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Application
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainUpdateApplicationResponse parses an HTTP response from a DomainUpdateApplicationWithResponse call
func ParseDomainUpdateApplicationResponse(rsp *http.Response) (*DomainUpdateApplicationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainUpdateApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Application
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApplicationGetAnalyticsResponse parses an HTTP response from a ApplicationGetAnalyticsWithResponse call
func ParseApplicationGetAnalyticsResponse(rsp *http.Response) (*ApplicationGetAnalyticsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplicationGetAnalyticsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApplicationListEmailsResponse parses an HTTP response from a ApplicationListEmailsWithResponse call
func ParseApplicationListEmailsResponse(rsp *http.Response) (*ApplicationListEmailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplicationListEmailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApplicationCreateEmailResponse parses an HTTP response from a ApplicationCreateEmailWithResponse call
func ParseApplicationCreateEmailResponse(rsp *http.Response) (*ApplicationCreateEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplicationCreateEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApplicationDeleteEmailResponse parses an HTTP response from a ApplicationDeleteEmailWithResponse call
func ParseApplicationDeleteEmailResponse(rsp *http.Response) (*ApplicationDeleteEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplicationDeleteEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApplicationUpdateEmailResponse parses an HTTP response from a ApplicationUpdateEmailWithResponse call
func ParseApplicationUpdateEmailResponse(rsp *http.Response) (*ApplicationUpdateEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplicationUpdateEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Email
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseApplicationListFlowsResponse parses an HTTP response from a ApplicationListFlowsWithResponse call
func ParseApplicationListFlowsResponse(rsp *http.Response) (*ApplicationListFlowsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplicationListFlowsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FlowEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApplicationCreateFlowResponse parses an HTTP response from a ApplicationCreateFlowWithResponse call
func ParseApplicationCreateFlowResponse(rsp *http.Response) (*ApplicationCreateFlowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplicationCreateFlowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FlowEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApplicationGetFlowResponse parses an HTTP response from a ApplicationGetFlowWithResponse call
func ParseApplicationGetFlowResponse(rsp *http.Response) (*ApplicationGetFlowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplicationGetFlowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FlowEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApplicationUpdateFlowResponse parses an HTTP response from a ApplicationUpdateFlowWithResponse call
func ParseApplicationUpdateFlowResponse(rsp *http.Response) (*ApplicationUpdateFlowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplicationUpdateFlowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest FlowEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseApplicationListFormsResponse parses an HTTP response from a ApplicationListFormsWithResponse call
func ParseApplicationListFormsResponse(rsp *http.Response) (*ApplicationListFormsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplicationListFormsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApplicationCreateFormResponse parses an HTTP response from a ApplicationCreateFormWithResponse call
func ParseApplicationCreateFormResponse(rsp *http.Response) (*ApplicationCreateFormResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplicationCreateFormResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApplicationDeleteFormResponse parses an HTTP response from a ApplicationDeleteFormWithResponse call
func ParseApplicationDeleteFormResponse(rsp *http.Response) (*ApplicationDeleteFormResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplicationDeleteFormResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApplicationUpdateFormResponse parses an HTTP response from a ApplicationUpdateFormWithResponse call
func ParseApplicationUpdateFormResponse(rsp *http.Response) (*ApplicationUpdateFormResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplicationUpdateFormResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Form
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseApplicationListMembersResponse parses an HTTP response from a ApplicationListMembersWithResponse call
func ParseApplicationListMembersResponse(rsp *http.Response) (*ApplicationListMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplicationListMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MembershipListItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApplicationAddOrUpdateMemberResponse parses an HTTP response from a ApplicationAddOrUpdateMemberWithResponse call
func ParseApplicationAddOrUpdateMemberResponse(rsp *http.Response) (*ApplicationAddOrUpdateMemberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplicationAddOrUpdateMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApplicationListMemberPermissionsResponse parses an HTTP response from a ApplicationListMemberPermissionsWithResponse call
func ParseApplicationListMemberPermissionsResponse(rsp *http.Response) (*ApplicationListMemberPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplicationListMemberPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApplicationDeleteMemberResponse parses an HTTP response from a ApplicationDeleteMemberWithResponse call
func ParseApplicationDeleteMemberResponse(rsp *http.Response) (*ApplicationDeleteMemberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplicationDeleteMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseApplicationListResourcesResponse parses an HTTP response from a ApplicationListResourcesWithResponse call
func ParseApplicationListResourcesResponse(rsp *http.Response) (*ApplicationListResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplicationListResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceListItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApplicationGetResourceResponse parses an HTTP response from a ApplicationGetResourceWithResponse call
func ParseApplicationGetResourceResponse(rsp *http.Response) (*ApplicationGetResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplicationGetResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Resource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApplicationGetResourceAccessPoliciesResponse parses an HTTP response from a ApplicationGetResourceAccessPoliciesWithResponse call
func ParseApplicationGetResourceAccessPoliciesResponse(rsp *http.Response) (*ApplicationGetResourceAccessPoliciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplicationGetResourceAccessPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AccessPolicyListItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApplicationGetResourceAccessPolicyResponse parses an HTTP response from a ApplicationGetResourceAccessPolicyWithResponse call
func ParseApplicationGetResourceAccessPolicyResponse(rsp *http.Response) (*ApplicationGetResourceAccessPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplicationGetResourceAccessPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccessPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApplicationRenewSecretResponse parses an HTTP response from a ApplicationRenewSecretWithResponse call
func ParseApplicationRenewSecretResponse(rsp *http.Response) (*ApplicationRenewSecretResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplicationRenewSecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Application
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApplicationUpdateTypeResponse parses an HTTP response from a ApplicationUpdateTypeWithResponse call
func ParseApplicationUpdateTypeResponse(rsp *http.Response) (*ApplicationUpdateTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplicationUpdateTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Application
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnvironmentListDomainAuditsResponse parses an HTTP response from a EnvironmentListDomainAuditsWithResponse call
func ParseEnvironmentListDomainAuditsResponse(rsp *http.Response) (*EnvironmentListDomainAuditsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentListDomainAuditsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Audit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainGetAuditResponse parses an HTTP response from a DomainGetAuditWithResponse call
func ParseDomainGetAuditResponse(rsp *http.Response) (*DomainGetAuditResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainGetAuditResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Audit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnvironmentListDomainAuthDeviceNotifierResponse parses an HTTP response from a EnvironmentListDomainAuthDeviceNotifierWithResponse call
func ParseEnvironmentListDomainAuthDeviceNotifierResponse(rsp *http.Response) (*EnvironmentListDomainAuthDeviceNotifierResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentListDomainAuthDeviceNotifierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AuthenticationDeviceNotifier
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnvironmentCreateDomainAuthDeviceNotifiersResponse parses an HTTP response from a EnvironmentCreateDomainAuthDeviceNotifiersWithResponse call
func ParseEnvironmentCreateDomainAuthDeviceNotifiersResponse(rsp *http.Response) (*EnvironmentCreateDomainAuthDeviceNotifiersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentCreateDomainAuthDeviceNotifiersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDomainDeleteAuthDeviceNotifierResponse parses an HTTP response from a DomainDeleteAuthDeviceNotifierWithResponse call
func ParseDomainDeleteAuthDeviceNotifierResponse(rsp *http.Response) (*DomainDeleteAuthDeviceNotifierResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainDeleteAuthDeviceNotifierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDomainGetAuthDeviceNotifierResponse parses an HTTP response from a DomainGetAuthDeviceNotifierWithResponse call
func ParseDomainGetAuthDeviceNotifierResponse(rsp *http.Response) (*DomainGetAuthDeviceNotifierResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainGetAuthDeviceNotifierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthenticationDeviceNotifier
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainUpdateAuthDeviceNotifierResponse parses an HTTP response from a DomainUpdateAuthDeviceNotifierWithResponse call
func ParseDomainUpdateAuthDeviceNotifierResponse(rsp *http.Response) (*DomainUpdateAuthDeviceNotifierResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainUpdateAuthDeviceNotifierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AuthenticationDeviceNotifier
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseEnvironmentListDomainBotDetectionsResponse parses an HTTP response from a EnvironmentListDomainBotDetectionsWithResponse call
func ParseEnvironmentListDomainBotDetectionsResponse(rsp *http.Response) (*EnvironmentListDomainBotDetectionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentListDomainBotDetectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BotDetection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnvironmentCreateDomainBotDetectionResponse parses an HTTP response from a EnvironmentCreateDomainBotDetectionWithResponse call
func ParseEnvironmentCreateDomainBotDetectionResponse(rsp *http.Response) (*EnvironmentCreateDomainBotDetectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentCreateDomainBotDetectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDomainDeleteBotDetectionResponse parses an HTTP response from a DomainDeleteBotDetectionWithResponse call
func ParseDomainDeleteBotDetectionResponse(rsp *http.Response) (*DomainDeleteBotDetectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainDeleteBotDetectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDomainGetBotDetectionResponse parses an HTTP response from a DomainGetBotDetectionWithResponse call
func ParseDomainGetBotDetectionResponse(rsp *http.Response) (*DomainGetBotDetectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainGetBotDetectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BotDetection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainUpdateBotDetectionResponse parses an HTTP response from a DomainUpdateBotDetectionWithResponse call
func ParseDomainUpdateBotDetectionResponse(rsp *http.Response) (*DomainUpdateBotDetectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainUpdateBotDetectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BotDetection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseEnvironmentListDomainCertificatesResponse parses an HTTP response from a EnvironmentListDomainCertificatesWithResponse call
func ParseEnvironmentListDomainCertificatesResponse(rsp *http.Response) (*EnvironmentListDomainCertificatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentListDomainCertificatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CertificateEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnvironmentCreateDomainCertificateResponse parses an HTTP response from a EnvironmentCreateDomainCertificateWithResponse call
func ParseEnvironmentCreateDomainCertificateResponse(rsp *http.Response) (*EnvironmentCreateDomainCertificateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentCreateDomainCertificateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CertificateEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseEnvironmentRotateDomainCertificateResponse parses an HTTP response from a EnvironmentRotateDomainCertificateWithResponse call
func ParseEnvironmentRotateDomainCertificateResponse(rsp *http.Response) (*EnvironmentRotateDomainCertificateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentRotateDomainCertificateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CertificateEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDomainDeleteCertificateResponse parses an HTTP response from a DomainDeleteCertificateWithResponse call
func ParseDomainDeleteCertificateResponse(rsp *http.Response) (*DomainDeleteCertificateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainDeleteCertificateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDomainGetCertificateResponse parses an HTTP response from a DomainGetCertificateWithResponse call
func ParseDomainGetCertificateResponse(rsp *http.Response) (*DomainGetCertificateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainGetCertificateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CertificateEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainUpdateCertificateResponse parses an HTTP response from a DomainUpdateCertificateWithResponse call
func ParseDomainUpdateCertificateResponse(rsp *http.Response) (*DomainUpdateCertificateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainUpdateCertificateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CertificateEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDomainGetCertificatePublicKeyResponse parses an HTTP response from a DomainGetCertificatePublicKeyWithResponse call
func ParseDomainGetCertificatePublicKeyResponse(rsp *http.Response) (*DomainGetCertificatePublicKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainGetCertificatePublicKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEnvironmentListDomainCertificatePublicKeysResponse parses an HTTP response from a EnvironmentListDomainCertificatePublicKeysWithResponse call
func ParseEnvironmentListDomainCertificatePublicKeysResponse(rsp *http.Response) (*EnvironmentListDomainCertificatePublicKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentListDomainCertificatePublicKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CertificateKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnvironmentListDomainDeviceIdentifiersResponse parses an HTTP response from a EnvironmentListDomainDeviceIdentifiersWithResponse call
func ParseEnvironmentListDomainDeviceIdentifiersResponse(rsp *http.Response) (*EnvironmentListDomainDeviceIdentifiersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentListDomainDeviceIdentifiersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BotDetection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnvironmentCreateDomainDeviceIdentifierResponse parses an HTTP response from a EnvironmentCreateDomainDeviceIdentifierWithResponse call
func ParseEnvironmentCreateDomainDeviceIdentifierResponse(rsp *http.Response) (*EnvironmentCreateDomainDeviceIdentifierResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentCreateDomainDeviceIdentifierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDomainDeleteDeviceIdentifierResponse parses an HTTP response from a DomainDeleteDeviceIdentifierWithResponse call
func ParseDomainDeleteDeviceIdentifierResponse(rsp *http.Response) (*DomainDeleteDeviceIdentifierResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainDeleteDeviceIdentifierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDomainGetDeviceIdentifierResponse parses an HTTP response from a DomainGetDeviceIdentifierWithResponse call
func ParseDomainGetDeviceIdentifierResponse(rsp *http.Response) (*DomainGetDeviceIdentifierResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainGetDeviceIdentifierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeviceIdentifierResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainUpdateDeviceIdentifierResponse parses an HTTP response from a DomainUpdateDeviceIdentifierWithResponse call
func ParseDomainUpdateDeviceIdentifierResponse(rsp *http.Response) (*DomainUpdateDeviceIdentifierResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainUpdateDeviceIdentifierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BotDetection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseEnvironmentListDomainEmailsResponse parses an HTTP response from a EnvironmentListDomainEmailsWithResponse call
func ParseEnvironmentListDomainEmailsResponse(rsp *http.Response) (*EnvironmentListDomainEmailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentListDomainEmailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEnvironmentCreateDomainEmailResponse parses an HTTP response from a EnvironmentCreateDomainEmailWithResponse call
func ParseEnvironmentCreateDomainEmailResponse(rsp *http.Response) (*EnvironmentCreateDomainEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentCreateDomainEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDomainDeleteEmailResponse parses an HTTP response from a DomainDeleteEmailWithResponse call
func ParseDomainDeleteEmailResponse(rsp *http.Response) (*DomainDeleteEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainDeleteEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDomainUpdateEmailResponse parses an HTTP response from a DomainUpdateEmailWithResponse call
func ParseDomainUpdateEmailResponse(rsp *http.Response) (*DomainUpdateEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainUpdateEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Email
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDomainGetEntrypointsResponse parses an HTTP response from a DomainGetEntrypointsWithResponse call
func ParseDomainGetEntrypointsResponse(rsp *http.Response) (*DomainGetEntrypointsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainGetEntrypointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Entrypoint
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnvironmentListDomainExtensionGrantsResponse parses an HTTP response from a EnvironmentListDomainExtensionGrantsWithResponse call
func ParseEnvironmentListDomainExtensionGrantsResponse(rsp *http.Response) (*EnvironmentListDomainExtensionGrantsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentListDomainExtensionGrantsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ExtensionGrant
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnvironmentCreateDomainExtensionGrantResponse parses an HTTP response from a EnvironmentCreateDomainExtensionGrantWithResponse call
func ParseEnvironmentCreateDomainExtensionGrantResponse(rsp *http.Response) (*EnvironmentCreateDomainExtensionGrantResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentCreateDomainExtensionGrantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDomainDeleteExtensionGrantResponse parses an HTTP response from a DomainDeleteExtensionGrantWithResponse call
func ParseDomainDeleteExtensionGrantResponse(rsp *http.Response) (*DomainDeleteExtensionGrantResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainDeleteExtensionGrantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDomainGetExtensionGrantResponse parses an HTTP response from a DomainGetExtensionGrantWithResponse call
func ParseDomainGetExtensionGrantResponse(rsp *http.Response) (*DomainGetExtensionGrantResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainGetExtensionGrantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ExtensionGrant
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainUpdateExtensionGrantResponse parses an HTTP response from a DomainUpdateExtensionGrantWithResponse call
func ParseDomainUpdateExtensionGrantResponse(rsp *http.Response) (*DomainUpdateExtensionGrantResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainUpdateExtensionGrantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ExtensionGrant
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseEnvironmentListDomainFactorsResponse parses an HTTP response from a EnvironmentListDomainFactorsWithResponse call
func ParseEnvironmentListDomainFactorsResponse(rsp *http.Response) (*EnvironmentListDomainFactorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentListDomainFactorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Factor
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnvironmentCreateDomainFactorResponse parses an HTTP response from a EnvironmentCreateDomainFactorWithResponse call
func ParseEnvironmentCreateDomainFactorResponse(rsp *http.Response) (*EnvironmentCreateDomainFactorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentCreateDomainFactorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Factor
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDomainDeleteFactorResponse parses an HTTP response from a DomainDeleteFactorWithResponse call
func ParseDomainDeleteFactorResponse(rsp *http.Response) (*DomainDeleteFactorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainDeleteFactorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDomainGetFactorResponse parses an HTTP response from a DomainGetFactorWithResponse call
func ParseDomainGetFactorResponse(rsp *http.Response) (*DomainGetFactorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainGetFactorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Factor
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainUpdateFactorResponse parses an HTTP response from a DomainUpdateFactorWithResponse call
func ParseDomainUpdateFactorResponse(rsp *http.Response) (*DomainUpdateFactorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainUpdateFactorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Factor
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseEnvironmentListDomainFlowsResponse parses an HTTP response from a EnvironmentListDomainFlowsWithResponse call
func ParseEnvironmentListDomainFlowsResponse(rsp *http.Response) (*EnvironmentListDomainFlowsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentListDomainFlowsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FlowEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnvironmentCreateOrUpdateDomainFlowsResponse parses an HTTP response from a EnvironmentCreateOrUpdateDomainFlowsWithResponse call
func ParseEnvironmentCreateOrUpdateDomainFlowsResponse(rsp *http.Response) (*EnvironmentCreateOrUpdateDomainFlowsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentCreateOrUpdateDomainFlowsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FlowEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainGetFlowResponse parses an HTTP response from a DomainGetFlowWithResponse call
func ParseDomainGetFlowResponse(rsp *http.Response) (*DomainGetFlowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainGetFlowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FlowEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainUpdateFlowResponse parses an HTTP response from a DomainUpdateFlowWithResponse call
func ParseDomainUpdateFlowResponse(rsp *http.Response) (*DomainUpdateFlowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainUpdateFlowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest FlowEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseEnvironmentListDomainFormsResponse parses an HTTP response from a EnvironmentListDomainFormsWithResponse call
func ParseEnvironmentListDomainFormsResponse(rsp *http.Response) (*EnvironmentListDomainFormsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentListDomainFormsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEnvironmentCreateDomainFormResponse parses an HTTP response from a EnvironmentCreateDomainFormWithResponse call
func ParseEnvironmentCreateDomainFormResponse(rsp *http.Response) (*EnvironmentCreateDomainFormResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentCreateDomainFormResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEnvironmentPreviewDomainFormResponse parses an HTTP response from a EnvironmentPreviewDomainFormWithResponse call
func ParseEnvironmentPreviewDomainFormResponse(rsp *http.Response) (*EnvironmentPreviewDomainFormResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentPreviewDomainFormResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PreviewResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainDeleteFormResponse parses an HTTP response from a DomainDeleteFormWithResponse call
func ParseDomainDeleteFormResponse(rsp *http.Response) (*DomainDeleteFormResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainDeleteFormResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDomainUpdateFormResponse parses an HTTP response from a DomainUpdateFormWithResponse call
func ParseDomainUpdateFormResponse(rsp *http.Response) (*DomainUpdateFormResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainUpdateFormResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Form
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseEnvironmentListDomainGroupsResponse parses an HTTP response from a EnvironmentListDomainGroupsWithResponse call
func ParseEnvironmentListDomainGroupsResponse(rsp *http.Response) (*EnvironmentListDomainGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentListDomainGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GroupPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnvironmentCreateDomainGroupResponse parses an HTTP response from a EnvironmentCreateDomainGroupWithResponse call
func ParseEnvironmentCreateDomainGroupResponse(rsp *http.Response) (*EnvironmentCreateDomainGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentCreateDomainGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDomainDeleteGroupResponse parses an HTTP response from a DomainDeleteGroupWithResponse call
func ParseDomainDeleteGroupResponse(rsp *http.Response) (*DomainDeleteGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainDeleteGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDomainGetGroupResponse parses an HTTP response from a DomainGetGroupWithResponse call
func ParseDomainGetGroupResponse(rsp *http.Response) (*DomainGetGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainGetGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainUpdateGroupResponse parses an HTTP response from a DomainUpdateGroupWithResponse call
func ParseDomainUpdateGroupResponse(rsp *http.Response) (*DomainUpdateGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainUpdateGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDomainGetGroupMemebersResponse parses an HTTP response from a DomainGetGroupMemebersWithResponse call
func ParseDomainGetGroupMemebersResponse(rsp *http.Response) (*DomainGetGroupMemebersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainGetGroupMemebersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnvironmentRemoveDomainGroupMemeberResponse parses an HTTP response from a EnvironmentRemoveDomainGroupMemeberWithResponse call
func ParseEnvironmentRemoveDomainGroupMemeberResponse(rsp *http.Response) (*EnvironmentRemoveDomainGroupMemeberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentRemoveDomainGroupMemeberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDomainAddOrUpdateGroupMemeberResponse parses an HTTP response from a DomainAddOrUpdateGroupMemeberWithResponse call
func ParseDomainAddOrUpdateGroupMemeberResponse(rsp *http.Response) (*DomainAddOrUpdateGroupMemeberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainAddOrUpdateGroupMemeberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEnvironmentListDomainGroupRolesResponse parses an HTTP response from a EnvironmentListDomainGroupRolesWithResponse call
func ParseEnvironmentListDomainGroupRolesResponse(rsp *http.Response) (*EnvironmentListDomainGroupRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentListDomainGroupRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Role
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnvironmentAddDomainGroupRoleResponse parses an HTTP response from a EnvironmentAddDomainGroupRoleWithResponse call
func ParseEnvironmentAddDomainGroupRoleResponse(rsp *http.Response) (*EnvironmentAddDomainGroupRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentAddDomainGroupRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnvironmentRemoveDomainGroupRoleResponse parses an HTTP response from a EnvironmentRemoveDomainGroupRoleWithResponse call
func ParseEnvironmentRemoveDomainGroupRoleResponse(rsp *http.Response) (*EnvironmentRemoveDomainGroupRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentRemoveDomainGroupRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnvironmentListDomainDictionariesResponse parses an HTTP response from a EnvironmentListDomainDictionariesWithResponse call
func ParseEnvironmentListDomainDictionariesResponse(rsp *http.Response) (*EnvironmentListDomainDictionariesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentListDomainDictionariesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []I18nDictionary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnvironmentCreateDomainDictionaryResponse parses an HTTP response from a EnvironmentCreateDomainDictionaryWithResponse call
func ParseEnvironmentCreateDomainDictionaryResponse(rsp *http.Response) (*EnvironmentCreateDomainDictionaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentCreateDomainDictionaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest I18nDictionary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDomainDeleteDictionaryResponse parses an HTTP response from a DomainDeleteDictionaryWithResponse call
func ParseDomainDeleteDictionaryResponse(rsp *http.Response) (*DomainDeleteDictionaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainDeleteDictionaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDomainGetDictionaryResponse parses an HTTP response from a DomainGetDictionaryWithResponse call
func ParseDomainGetDictionaryResponse(rsp *http.Response) (*DomainGetDictionaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainGetDictionaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest I18nDictionary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainUpdateDictionaryResponse parses an HTTP response from a DomainUpdateDictionaryWithResponse call
func ParseDomainUpdateDictionaryResponse(rsp *http.Response) (*DomainUpdateDictionaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainUpdateDictionaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest I18nDictionary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainUpdateDictionaryEntriesResponse parses an HTTP response from a DomainUpdateDictionaryEntriesWithResponse call
func ParseDomainUpdateDictionaryEntriesResponse(rsp *http.Response) (*DomainUpdateDictionaryEntriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainUpdateDictionaryEntriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest I18nDictionary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnvironmentListDomainIdentityProvidersResponse parses an HTTP response from a EnvironmentListDomainIdentityProvidersWithResponse call
func ParseEnvironmentListDomainIdentityProvidersResponse(rsp *http.Response) (*EnvironmentListDomainIdentityProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentListDomainIdentityProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FilteredIdentityProviderInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnvironmentCreateDomainIdentityProviderResponse parses an HTTP response from a EnvironmentCreateDomainIdentityProviderWithResponse call
func ParseEnvironmentCreateDomainIdentityProviderResponse(rsp *http.Response) (*EnvironmentCreateDomainIdentityProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentCreateDomainIdentityProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest IdentityProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDomainDeleteIdentityProviderResponse parses an HTTP response from a DomainDeleteIdentityProviderWithResponse call
func ParseDomainDeleteIdentityProviderResponse(rsp *http.Response) (*DomainDeleteIdentityProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainDeleteIdentityProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDomainGetIdentityProviderResponse parses an HTTP response from a DomainGetIdentityProviderWithResponse call
func ParseDomainGetIdentityProviderResponse(rsp *http.Response) (*DomainGetIdentityProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainGetIdentityProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IdentityProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainUpdateIdentityProviderResponse parses an HTTP response from a DomainUpdateIdentityProviderWithResponse call
func ParseDomainUpdateIdentityProviderResponse(rsp *http.Response) (*DomainUpdateIdentityProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainUpdateIdentityProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest IdentityProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseEnvironmentListDomainMembersResponse parses an HTTP response from a EnvironmentListDomainMembersWithResponse call
func ParseEnvironmentListDomainMembersResponse(rsp *http.Response) (*EnvironmentListDomainMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentListDomainMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MembershipListItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainAddOrUpdateMemberResponse parses an HTTP response from a DomainAddOrUpdateMemberWithResponse call
func ParseDomainAddOrUpdateMemberResponse(rsp *http.Response) (*DomainAddOrUpdateMemberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainAddOrUpdateMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEnvironmentListDomainMemberPermissionsResponse parses an HTTP response from a EnvironmentListDomainMemberPermissionsWithResponse call
func ParseEnvironmentListDomainMemberPermissionsResponse(rsp *http.Response) (*EnvironmentListDomainMemberPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentListDomainMemberPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnvironmentRemoveDomainMemberResponse parses an HTTP response from a EnvironmentRemoveDomainMemberWithResponse call
func ParseEnvironmentRemoveDomainMemberResponse(rsp *http.Response) (*EnvironmentRemoveDomainMemberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentRemoveDomainMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEnvironmentListDomainReportersResponse parses an HTTP response from a EnvironmentListDomainReportersWithResponse call
func ParseEnvironmentListDomainReportersResponse(rsp *http.Response) (*EnvironmentListDomainReportersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentListDomainReportersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Reporter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnvironmentCreateDomainReporterResponse parses an HTTP response from a EnvironmentCreateDomainReporterWithResponse call
func ParseEnvironmentCreateDomainReporterResponse(rsp *http.Response) (*EnvironmentCreateDomainReporterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentCreateDomainReporterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Reporter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDomainDeleteReporterResponse parses an HTTP response from a DomainDeleteReporterWithResponse call
func ParseDomainDeleteReporterResponse(rsp *http.Response) (*DomainDeleteReporterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainDeleteReporterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDomainGetReporterResponse parses an HTTP response from a DomainGetReporterWithResponse call
func ParseDomainGetReporterResponse(rsp *http.Response) (*DomainGetReporterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainGetReporterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Reporter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainUpdateReporterResponse parses an HTTP response from a DomainUpdateReporterWithResponse call
func ParseDomainUpdateReporterResponse(rsp *http.Response) (*DomainUpdateReporterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainUpdateReporterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Reporter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseEnvironmentListDomainResourcesResponse parses an HTTP response from a EnvironmentListDomainResourcesWithResponse call
func ParseEnvironmentListDomainResourcesResponse(rsp *http.Response) (*EnvironmentListDomainResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentListDomainResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ServiceResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnvironmentCreateDomainResourceResponse parses an HTTP response from a EnvironmentCreateDomainResourceWithResponse call
func ParseEnvironmentCreateDomainResourceResponse(rsp *http.Response) (*EnvironmentCreateDomainResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentCreateDomainResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ServiceResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDomainDeleteResourceResponse parses an HTTP response from a DomainDeleteResourceWithResponse call
func ParseDomainDeleteResourceResponse(rsp *http.Response) (*DomainDeleteResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainDeleteResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDomainGetResourceResponse parses an HTTP response from a DomainGetResourceWithResponse call
func ParseDomainGetResourceResponse(rsp *http.Response) (*DomainGetResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainGetResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServiceResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainUpdateResourceResponse parses an HTTP response from a DomainUpdateResourceWithResponse call
func ParseDomainUpdateResourceResponse(rsp *http.Response) (*DomainUpdateResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainUpdateResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ServiceResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseEnvironmentListDomainRolesResponse parses an HTTP response from a EnvironmentListDomainRolesWithResponse call
func ParseEnvironmentListDomainRolesResponse(rsp *http.Response) (*EnvironmentListDomainRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentListDomainRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RolePage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnvironmentCreateDomainMemberRoleResponse parses an HTTP response from a EnvironmentCreateDomainMemberRoleWithResponse call
func ParseEnvironmentCreateDomainMemberRoleResponse(rsp *http.Response) (*EnvironmentCreateDomainMemberRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentCreateDomainMemberRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Role
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDomainDeleteRoleResponse parses an HTTP response from a DomainDeleteRoleWithResponse call
func ParseDomainDeleteRoleResponse(rsp *http.Response) (*DomainDeleteRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainDeleteRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDomainGetRoleResponse parses an HTTP response from a DomainGetRoleWithResponse call
func ParseDomainGetRoleResponse(rsp *http.Response) (*DomainGetRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainGetRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoleEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainUpdateRoleResponse parses an HTTP response from a DomainUpdateRoleWithResponse call
func ParseDomainUpdateRoleResponse(rsp *http.Response) (*DomainUpdateRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainUpdateRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RoleEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseEnvironmentListDomainScopesResponse parses an HTTP response from a EnvironmentListDomainScopesWithResponse call
func ParseEnvironmentListDomainScopesResponse(rsp *http.Response) (*EnvironmentListDomainScopesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentListDomainScopesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScopePage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnvironmentCreateDomainScopeResponse parses an HTTP response from a EnvironmentCreateDomainScopeWithResponse call
func ParseEnvironmentCreateDomainScopeResponse(rsp *http.Response) (*EnvironmentCreateDomainScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentCreateDomainScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Scope
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteScopeResponse parses an HTTP response from a DeleteScopeWithResponse call
func ParseDeleteScopeResponse(rsp *http.Response) (*DeleteScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDomainGetScopeResponse parses an HTTP response from a DomainGetScopeWithResponse call
func ParseDomainGetScopeResponse(rsp *http.Response) (*DomainGetScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainGetScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Scope
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchScopeResponse parses an HTTP response from a PatchScopeWithResponse call
func ParsePatchScopeResponse(rsp *http.Response) (*PatchScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Scope
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateScopeResponse parses an HTTP response from a UpdateScopeWithResponse call
func ParseUpdateScopeResponse(rsp *http.Response) (*UpdateScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Scope
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnvironmentListDomainThemesResponse parses an HTTP response from a EnvironmentListDomainThemesWithResponse call
func ParseEnvironmentListDomainThemesResponse(rsp *http.Response) (*EnvironmentListDomainThemesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentListDomainThemesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ThemeEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnvironmentCreateDomainThemeResponse parses an HTTP response from a EnvironmentCreateDomainThemeWithResponse call
func ParseEnvironmentCreateDomainThemeResponse(rsp *http.Response) (*EnvironmentCreateDomainThemeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentCreateDomainThemeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ThemeEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDomainDeleteThemeResponse parses an HTTP response from a DomainDeleteThemeWithResponse call
func ParseDomainDeleteThemeResponse(rsp *http.Response) (*DomainDeleteThemeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainDeleteThemeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDomainGetThemeResponse parses an HTTP response from a DomainGetThemeWithResponse call
func ParseDomainGetThemeResponse(rsp *http.Response) (*DomainGetThemeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainGetThemeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ThemeEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ThemeEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDomainUpdateThemeResponse parses an HTTP response from a DomainUpdateThemeWithResponse call
func ParseDomainUpdateThemeResponse(rsp *http.Response) (*DomainUpdateThemeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainUpdateThemeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ThemeEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ThemeEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseEnvironmentListDomainUsersResponse parses an HTTP response from a EnvironmentListDomainUsersWithResponse call
func ParseEnvironmentListDomainUsersResponse(rsp *http.Response) (*EnvironmentListDomainUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentListDomainUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnvironmentCreateDomainUserResponse parses an HTTP response from a EnvironmentCreateDomainUserWithResponse call
func ParseEnvironmentCreateDomainUserResponse(rsp *http.Response) (*EnvironmentCreateDomainUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentCreateDomainUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDomainDeleteUserResponse parses an HTTP response from a DomainDeleteUserWithResponse call
func ParseDomainDeleteUserResponse(rsp *http.Response) (*DomainDeleteUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainDeleteUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDomainGetUserResponse parses an HTTP response from a DomainGetUserWithResponse call
func ParseDomainGetUserResponse(rsp *http.Response) (*DomainGetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainGetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainUpdateUserResponse parses an HTTP response from a DomainUpdateUserWithResponse call
func ParseDomainUpdateUserResponse(rsp *http.Response) (*DomainUpdateUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainUpdateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseEnvironmentListDomainUserAuditsResponse parses an HTTP response from a EnvironmentListDomainUserAuditsWithResponse call
func ParseEnvironmentListDomainUserAuditsResponse(rsp *http.Response) (*EnvironmentListDomainUserAuditsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentListDomainUserAuditsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Audit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainGetUserAuditResponse parses an HTTP response from a DomainGetUserAuditWithResponse call
func ParseDomainGetUserAuditResponse(rsp *http.Response) (*DomainGetUserAuditResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainGetUserAuditResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Audit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainDeleteUserConsentsResponse parses an HTTP response from a DomainDeleteUserConsentsWithResponse call
func ParseDomainDeleteUserConsentsResponse(rsp *http.Response) (*DomainDeleteUserConsentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainDeleteUserConsentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEnvironmentListDomainUserConsentsResponse parses an HTTP response from a EnvironmentListDomainUserConsentsWithResponse call
func ParseEnvironmentListDomainUserConsentsResponse(rsp *http.Response) (*EnvironmentListDomainUserConsentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentListDomainUserConsentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScopeApprovalEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainDeleteUserConsentResponse parses an HTTP response from a DomainDeleteUserConsentWithResponse call
func ParseDomainDeleteUserConsentResponse(rsp *http.Response) (*DomainDeleteUserConsentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainDeleteUserConsentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDomainGetUserConsentResponse parses an HTTP response from a DomainGetUserConsentWithResponse call
func ParseDomainGetUserConsentResponse(rsp *http.Response) (*DomainGetUserConsentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainGetUserConsentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScopeApprovalEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnvironmentListDomainUserCredentialsResponse parses an HTTP response from a EnvironmentListDomainUserCredentialsWithResponse call
func ParseEnvironmentListDomainUserCredentialsResponse(rsp *http.Response) (*EnvironmentListDomainUserCredentialsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentListDomainUserCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Credential
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainDeleteUserCredentialResponse parses an HTTP response from a DomainDeleteUserCredentialWithResponse call
func ParseDomainDeleteUserCredentialResponse(rsp *http.Response) (*DomainDeleteUserCredentialResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainDeleteUserCredentialResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDomainGetUserCredentialResponse parses an HTTP response from a DomainGetUserCredentialWithResponse call
func ParseDomainGetUserCredentialResponse(rsp *http.Response) (*DomainGetUserCredentialResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainGetUserCredentialResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Credential
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnvironmentListDomainUserDevicesResponse parses an HTTP response from a EnvironmentListDomainUserDevicesWithResponse call
func ParseEnvironmentListDomainUserDevicesResponse(rsp *http.Response) (*EnvironmentListDomainUserDevicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentListDomainUserDevicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainGetUserDeviceResponse parses an HTTP response from a DomainGetUserDeviceWithResponse call
func ParseDomainGetUserDeviceResponse(rsp *http.Response) (*DomainGetUserDeviceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainGetUserDeviceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEnvironmentListDomainUserFactorsResponse parses an HTTP response from a EnvironmentListDomainUserFactorsWithResponse call
func ParseEnvironmentListDomainUserFactorsResponse(rsp *http.Response) (*EnvironmentListDomainUserFactorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentListDomainUserFactorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EnrolledFactorEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainDeleteUserFactorResponse parses an HTTP response from a DomainDeleteUserFactorWithResponse call
func ParseDomainDeleteUserFactorResponse(rsp *http.Response) (*DomainDeleteUserFactorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainDeleteUserFactorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEnvironmentLockDomainUserResponse parses an HTTP response from a EnvironmentLockDomainUserWithResponse call
func ParseEnvironmentLockDomainUserResponse(rsp *http.Response) (*EnvironmentLockDomainUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentLockDomainUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEnvironmentResetDomainUserPasswordResponse parses an HTTP response from a EnvironmentResetDomainUserPasswordWithResponse call
func ParseEnvironmentResetDomainUserPasswordResponse(rsp *http.Response) (*EnvironmentResetDomainUserPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentResetDomainUserPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEnvironmentListDomainUserRolesResponse parses an HTTP response from a EnvironmentListDomainUserRolesWithResponse call
func ParseEnvironmentListDomainUserRolesResponse(rsp *http.Response) (*EnvironmentListDomainUserRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentListDomainUserRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Role
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainAddOrUpdateUserRoleResponse parses an HTTP response from a DomainAddOrUpdateUserRoleWithResponse call
func ParseDomainAddOrUpdateUserRoleResponse(rsp *http.Response) (*DomainAddOrUpdateUserRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainAddOrUpdateUserRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDomainDeleteUserRoleResponse parses an HTTP response from a DomainDeleteUserRoleWithResponse call
func ParseDomainDeleteUserRoleResponse(rsp *http.Response) (*DomainDeleteUserRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainDeleteUserRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEnvironmentSendDomainUserRegistrationConfirmationResponse parses an HTTP response from a EnvironmentSendDomainUserRegistrationConfirmationWithResponse call
func ParseEnvironmentSendDomainUserRegistrationConfirmationResponse(rsp *http.Response) (*EnvironmentSendDomainUserRegistrationConfirmationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentSendDomainUserRegistrationConfirmationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDomainUpdateUserStatusResponse parses an HTTP response from a DomainUpdateUserStatusWithResponse call
func ParseDomainUpdateUserStatusResponse(rsp *http.Response) (*DomainUpdateUserStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DomainUpdateUserStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseEnvironmentUnlockDomainUserResponse parses an HTTP response from a EnvironmentUnlockDomainUserWithResponse call
func ParseEnvironmentUnlockDomainUserResponse(rsp *http.Response) (*EnvironmentUnlockDomainUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentUnlockDomainUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseEnvironmentResetDomainUserNameResponse parses an HTTP response from a EnvironmentResetDomainUserNameWithResponse call
func ParseEnvironmentResetDomainUserNameResponse(rsp *http.Response) (*EnvironmentResetDomainUserNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentResetDomainUserNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseEnvironmentListMemberPermissionsResponse parses an HTTP response from a EnvironmentListMemberPermissionsWithResponse call
func ParseEnvironmentListMemberPermissionsResponse(rsp *http.Response) (*EnvironmentListMemberPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnvironmentListMemberPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrganizationListPlatfomFormTemplatesResponse parses an HTTP response from a OrganizationListPlatfomFormTemplatesWithResponse call
func ParseOrganizationListPlatfomFormTemplatesResponse(rsp *http.Response) (*OrganizationListPlatfomFormTemplatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationListPlatfomFormTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseOrganizationCreatePlatfomFormTemplateResponse parses an HTTP response from a OrganizationCreatePlatfomFormTemplateWithResponse call
func ParseOrganizationCreatePlatfomFormTemplateResponse(rsp *http.Response) (*OrganizationCreatePlatfomFormTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationCreatePlatfomFormTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseOrganizationDeletePlatfomFormTemplateResponse parses an HTTP response from a OrganizationDeletePlatfomFormTemplateWithResponse call
func ParseOrganizationDeletePlatfomFormTemplateResponse(rsp *http.Response) (*OrganizationDeletePlatfomFormTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationDeletePlatfomFormTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseOrganizationUpdatePlatfomFormTemplateResponse parses an HTTP response from a OrganizationUpdatePlatfomFormTemplateWithResponse call
func ParseOrganizationUpdatePlatfomFormTemplateResponse(rsp *http.Response) (*OrganizationUpdatePlatfomFormTemplateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationUpdatePlatfomFormTemplateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Form
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseOrganizationListPlatformGroupsResponse parses an HTTP response from a OrganizationListPlatformGroupsWithResponse call
func ParseOrganizationListPlatformGroupsResponse(rsp *http.Response) (*OrganizationListPlatformGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationListPlatformGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrganizationCreatePlatformGroupResponse parses an HTTP response from a OrganizationCreatePlatformGroupWithResponse call
func ParseOrganizationCreatePlatformGroupResponse(rsp *http.Response) (*OrganizationCreatePlatformGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationCreatePlatformGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseOrganizationDeletePlatformGroupResponse parses an HTTP response from a OrganizationDeletePlatformGroupWithResponse call
func ParseOrganizationDeletePlatformGroupResponse(rsp *http.Response) (*OrganizationDeletePlatformGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationDeletePlatformGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseOrganizationGetPlatformGroupResponse parses an HTTP response from a OrganizationGetPlatformGroupWithResponse call
func ParseOrganizationGetPlatformGroupResponse(rsp *http.Response) (*OrganizationGetPlatformGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationGetPlatformGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrganizationUpdatePlatformGroupResponse parses an HTTP response from a OrganizationUpdatePlatformGroupWithResponse call
func ParseOrganizationUpdatePlatformGroupResponse(rsp *http.Response) (*OrganizationUpdatePlatformGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationUpdatePlatformGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseOrganizationListPlatformGroupMembersResponse parses an HTTP response from a OrganizationListPlatformGroupMembersWithResponse call
func ParseOrganizationListPlatformGroupMembersResponse(rsp *http.Response) (*OrganizationListPlatformGroupMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationListPlatformGroupMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrganizationRemovePlatformGroupMemberResponse parses an HTTP response from a OrganizationRemovePlatformGroupMemberWithResponse call
func ParseOrganizationRemovePlatformGroupMemberResponse(rsp *http.Response) (*OrganizationRemovePlatformGroupMemberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationRemovePlatformGroupMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseOrganizationAddPlatformGroupMemberResponse parses an HTTP response from a OrganizationAddPlatformGroupMemberWithResponse call
func ParseOrganizationAddPlatformGroupMemberResponse(rsp *http.Response) (*OrganizationAddPlatformGroupMemberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationAddPlatformGroupMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseOrganizationListPlatformIdentityProvidersResponse parses an HTTP response from a OrganizationListPlatformIdentityProvidersWithResponse call
func ParseOrganizationListPlatformIdentityProvidersResponse(rsp *http.Response) (*OrganizationListPlatformIdentityProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationListPlatformIdentityProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FilteredIdentityProviderInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrganizationCreatePlatformIdentityProviderResponse parses an HTTP response from a OrganizationCreatePlatformIdentityProviderWithResponse call
func ParseOrganizationCreatePlatformIdentityProviderResponse(rsp *http.Response) (*OrganizationCreatePlatformIdentityProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationCreatePlatformIdentityProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseOrganizationDeletePlatformIdentityProviderResponse parses an HTTP response from a OrganizationDeletePlatformIdentityProviderWithResponse call
func ParseOrganizationDeletePlatformIdentityProviderResponse(rsp *http.Response) (*OrganizationDeletePlatformIdentityProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationDeletePlatformIdentityProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseOrganizationGetPlatformIdentityProviderResponse parses an HTTP response from a OrganizationGetPlatformIdentityProviderWithResponse call
func ParseOrganizationGetPlatformIdentityProviderResponse(rsp *http.Response) (*OrganizationGetPlatformIdentityProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationGetPlatformIdentityProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IdentityProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrganizationUpdatePlatformIdentityProviderResponse parses an HTTP response from a OrganizationUpdatePlatformIdentityProviderWithResponse call
func ParseOrganizationUpdatePlatformIdentityProviderResponse(rsp *http.Response) (*OrganizationUpdatePlatformIdentityProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationUpdatePlatformIdentityProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest IdentityProvider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseOrganizationListPlatformMembersResponse parses an HTTP response from a OrganizationListPlatformMembersWithResponse call
func ParseOrganizationListPlatformMembersResponse(rsp *http.Response) (*OrganizationListPlatformMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationListPlatformMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MembershipListItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrganizationAddOrUpdatePlatformMemberResponse parses an HTTP response from a OrganizationAddOrUpdatePlatformMemberWithResponse call
func ParseOrganizationAddOrUpdatePlatformMemberResponse(rsp *http.Response) (*OrganizationAddOrUpdatePlatformMemberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationAddOrUpdatePlatformMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseOrganizationRemovePlatformMemberResponse parses an HTTP response from a OrganizationRemovePlatformMemberWithResponse call
func ParseOrganizationRemovePlatformMemberResponse(rsp *http.Response) (*OrganizationRemovePlatformMemberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationRemovePlatformMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseOrganizationListPlatformRolesResponse parses an HTTP response from a OrganizationListPlatformRolesWithResponse call
func ParseOrganizationListPlatformRolesResponse(rsp *http.Response) (*OrganizationListPlatformRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationListPlatformRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrganizationCreatePlatformRoleResponse parses an HTTP response from a OrganizationCreatePlatformRoleWithResponse call
func ParseOrganizationCreatePlatformRoleResponse(rsp *http.Response) (*OrganizationCreatePlatformRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationCreatePlatformRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseOrganizationDeletePlatformRoleResponse parses an HTTP response from a OrganizationDeletePlatformRoleWithResponse call
func ParseOrganizationDeletePlatformRoleResponse(rsp *http.Response) (*OrganizationDeletePlatformRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationDeletePlatformRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseOrganizationGetPlatformRoleResponse parses an HTTP response from a OrganizationGetPlatformRoleWithResponse call
func ParseOrganizationGetPlatformRoleResponse(rsp *http.Response) (*OrganizationGetPlatformRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationGetPlatformRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoleEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrganizationUpdatePlatformRoleResponse parses an HTTP response from a OrganizationUpdatePlatformRoleWithResponse call
func ParseOrganizationUpdatePlatformRoleResponse(rsp *http.Response) (*OrganizationUpdatePlatformRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationUpdatePlatformRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RoleEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseOrganizationGetPlatformSettingsResponse parses an HTTP response from a OrganizationGetPlatformSettingsWithResponse call
func ParseOrganizationGetPlatformSettingsResponse(rsp *http.Response) (*OrganizationGetPlatformSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationGetPlatformSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrganizationUpdatePlatformSettingsResponse parses an HTTP response from a OrganizationUpdatePlatformSettingsWithResponse call
func ParseOrganizationUpdatePlatformSettingsResponse(rsp *http.Response) (*OrganizationUpdatePlatformSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationUpdatePlatformSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Domain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrganizationListPlatformShardingTagsResponse parses an HTTP response from a OrganizationListPlatformShardingTagsWithResponse call
func ParseOrganizationListPlatformShardingTagsResponse(rsp *http.Response) (*OrganizationListPlatformShardingTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationListPlatformShardingTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Domain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrganizationCreatePlatformShardingTagResponse parses an HTTP response from a OrganizationCreatePlatformShardingTagWithResponse call
func ParseOrganizationCreatePlatformShardingTagResponse(rsp *http.Response) (*OrganizationCreatePlatformShardingTagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationCreatePlatformShardingTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseOrganizationDeletePlatformShardingTagResponse parses an HTTP response from a OrganizationDeletePlatformShardingTagWithResponse call
func ParseOrganizationDeletePlatformShardingTagResponse(rsp *http.Response) (*OrganizationDeletePlatformShardingTagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationDeletePlatformShardingTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseOrganizationGetPlatformShardingTagResponse parses an HTTP response from a OrganizationGetPlatformShardingTagWithResponse call
func ParseOrganizationGetPlatformShardingTagResponse(rsp *http.Response) (*OrganizationGetPlatformShardingTagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationGetPlatformShardingTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrganizationUpdatePlatformShardingTagResponse parses an HTTP response from a OrganizationUpdatePlatformShardingTagWithResponse call
func ParseOrganizationUpdatePlatformShardingTagResponse(rsp *http.Response) (*OrganizationUpdatePlatformShardingTagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationUpdatePlatformShardingTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrganizationListPlatformUsersResponse parses an HTTP response from a OrganizationListPlatformUsersWithResponse call
func ParseOrganizationListPlatformUsersResponse(rsp *http.Response) (*OrganizationListPlatformUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationListPlatformUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Page
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrganizationCreatePlatformUserResponse parses an HTTP response from a OrganizationCreatePlatformUserWithResponse call
func ParseOrganizationCreatePlatformUserResponse(rsp *http.Response) (*OrganizationCreatePlatformUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationCreatePlatformUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseOrganizationDeletePlatformUserResponse parses an HTTP response from a OrganizationDeletePlatformUserWithResponse call
func ParseOrganizationDeletePlatformUserResponse(rsp *http.Response) (*OrganizationDeletePlatformUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationDeletePlatformUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseOrganizationGetPlatformUserResponse parses an HTTP response from a OrganizationGetPlatformUserWithResponse call
func ParseOrganizationGetPlatformUserResponse(rsp *http.Response) (*OrganizationGetPlatformUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationGetPlatformUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrganizationUpdatePlatformUserResponse parses an HTTP response from a OrganizationUpdatePlatformUserWithResponse call
func ParseOrganizationUpdatePlatformUserResponse(rsp *http.Response) (*OrganizationUpdatePlatformUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationUpdatePlatformUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseOrganizationResetPlatformUserPasswordResponse parses an HTTP response from a OrganizationResetPlatformUserPasswordWithResponse call
func ParseOrganizationResetPlatformUserPasswordResponse(rsp *http.Response) (*OrganizationResetPlatformUserPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationResetPlatformUserPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseOrganizationUpdatePlatformUserStatusResponse parses an HTTP response from a OrganizationUpdatePlatformUserStatusWithResponse call
func ParseOrganizationUpdatePlatformUserStatusResponse(rsp *http.Response) (*OrganizationUpdatePlatformUserStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationUpdatePlatformUserStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseOrganizationUpdatePlatformUserNameResponse parses an HTTP response from a OrganizationUpdatePlatformUserNameWithResponse call
func ParseOrganizationUpdatePlatformUserNameResponse(rsp *http.Response) (*OrganizationUpdatePlatformUserNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrganizationUpdatePlatformUserNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePlatformListAuditEventTypesResponse parses an HTTP response from a PlatformListAuditEventTypesWithResponse call
func ParsePlatformListAuditEventTypesResponse(rsp *http.Response) (*PlatformListAuditEventTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlatformListAuditEventTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePlatformAlertStatusResponse parses an HTTP response from a PlatformAlertStatusWithResponse call
func ParsePlatformAlertStatusResponse(rsp *http.Response) (*PlatformAlertStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlatformAlertStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AlertServiceStatusEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePlatformGetFlowSchemaResponse parses an HTTP response from a PlatformGetFlowSchemaWithResponse call
func ParsePlatformGetFlowSchemaResponse(rsp *http.Response) (*PlatformGetFlowSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlatformGetFlowSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePlatformGetSpelGrammarResponse parses an HTTP response from a PlatformGetSpelGrammarWithResponse call
func ParsePlatformGetSpelGrammarResponse(rsp *http.Response) (*PlatformGetSpelGrammarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlatformGetSpelGrammarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePlatformGetInstallationResponse parses an HTTP response from a PlatformGetInstallationWithResponse call
func ParsePlatformGetInstallationResponse(rsp *http.Response) (*PlatformGetInstallationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlatformGetInstallationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InstallationEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePlatformListPluginAuthDeviceNotifiersResponse parses an HTTP response from a PlatformListPluginAuthDeviceNotifiersWithResponse call
func ParsePlatformListPluginAuthDeviceNotifiersResponse(rsp *http.Response) (*PlatformListPluginAuthDeviceNotifiersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlatformListPluginAuthDeviceNotifiersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePlatformGetPluginAuthDeviceNotifierResponse parses an HTTP response from a PlatformGetPluginAuthDeviceNotifierWithResponse call
func ParsePlatformGetPluginAuthDeviceNotifierResponse(rsp *http.Response) (*PlatformGetPluginAuthDeviceNotifierResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlatformGetPluginAuthDeviceNotifierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePlatformGetPluginAuthDeviceNotifierSchemaResponse parses an HTTP response from a PlatformGetPluginAuthDeviceNotifierSchemaWithResponse call
func ParsePlatformGetPluginAuthDeviceNotifierSchemaResponse(rsp *http.Response) (*PlatformGetPluginAuthDeviceNotifierSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlatformGetPluginAuthDeviceNotifierSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePlatformListPluginBotDetectionsResponse parses an HTTP response from a PlatformListPluginBotDetectionsWithResponse call
func ParsePlatformListPluginBotDetectionsResponse(rsp *http.Response) (*PlatformListPluginBotDetectionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlatformListPluginBotDetectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePlatformGetPluginBotDetectionResponse parses an HTTP response from a PlatformGetPluginBotDetectionWithResponse call
func ParsePlatformGetPluginBotDetectionResponse(rsp *http.Response) (*PlatformGetPluginBotDetectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlatformGetPluginBotDetectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePlatformGetPluginBotDetectionSchemaResponse parses an HTTP response from a PlatformGetPluginBotDetectionSchemaWithResponse call
func ParsePlatformGetPluginBotDetectionSchemaResponse(rsp *http.Response) (*PlatformGetPluginBotDetectionSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlatformGetPluginBotDetectionSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePlatformListPluginCertificatesResponse parses an HTTP response from a PlatformListPluginCertificatesWithResponse call
func ParsePlatformListPluginCertificatesResponse(rsp *http.Response) (*PlatformListPluginCertificatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlatformListPluginCertificatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePlatformGetPluginCertificateResponse parses an HTTP response from a PlatformGetPluginCertificateWithResponse call
func ParsePlatformGetPluginCertificateResponse(rsp *http.Response) (*PlatformGetPluginCertificateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlatformGetPluginCertificateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePlatformGetPluginCertificateSchemaResponse parses an HTTP response from a PlatformGetPluginCertificateSchemaWithResponse call
func ParsePlatformGetPluginCertificateSchemaResponse(rsp *http.Response) (*PlatformGetPluginCertificateSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlatformGetPluginCertificateSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePlatformListDeviceIdentifierPluginsResponse parses an HTTP response from a PlatformListDeviceIdentifierPluginsWithResponse call
func ParsePlatformListDeviceIdentifierPluginsResponse(rsp *http.Response) (*PlatformListDeviceIdentifierPluginsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlatformListDeviceIdentifierPluginsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePlatformGetDeviceIdentifierPluginResponse parses an HTTP response from a PlatformGetDeviceIdentifierPluginWithResponse call
func ParsePlatformGetDeviceIdentifierPluginResponse(rsp *http.Response) (*PlatformGetDeviceIdentifierPluginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlatformGetDeviceIdentifierPluginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePlatformGetDeviceIdentifierPluginSchemaResponse parses an HTTP response from a PlatformGetDeviceIdentifierPluginSchemaWithResponse call
func ParsePlatformGetDeviceIdentifierPluginSchemaResponse(rsp *http.Response) (*PlatformGetDeviceIdentifierPluginSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlatformGetDeviceIdentifierPluginSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePlatformListPluginExtensionGrantsResponse parses an HTTP response from a PlatformListPluginExtensionGrantsWithResponse call
func ParsePlatformListPluginExtensionGrantsResponse(rsp *http.Response) (*PlatformListPluginExtensionGrantsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlatformListPluginExtensionGrantsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePlatformGetPluginExtensionGrantResponse parses an HTTP response from a PlatformGetPluginExtensionGrantWithResponse call
func ParsePlatformGetPluginExtensionGrantResponse(rsp *http.Response) (*PlatformGetPluginExtensionGrantResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlatformGetPluginExtensionGrantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePlatformGetPluginExtensionGrantSchemaResponse parses an HTTP response from a PlatformGetPluginExtensionGrantSchemaWithResponse call
func ParsePlatformGetPluginExtensionGrantSchemaResponse(rsp *http.Response) (*PlatformGetPluginExtensionGrantSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlatformGetPluginExtensionGrantSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePlatformListPluginFactorsResponse parses an HTTP response from a PlatformListPluginFactorsWithResponse call
func ParsePlatformListPluginFactorsResponse(rsp *http.Response) (*PlatformListPluginFactorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlatformListPluginFactorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePlatformGetPluginFactorResponse parses an HTTP response from a PlatformGetPluginFactorWithResponse call
func ParsePlatformGetPluginFactorResponse(rsp *http.Response) (*PlatformGetPluginFactorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlatformGetPluginFactorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePlatformGetPluginFactorSchemaResponse parses an HTTP response from a PlatformGetPluginFactorSchemaWithResponse call
func ParsePlatformGetPluginFactorSchemaResponse(rsp *http.Response) (*PlatformGetPluginFactorSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlatformGetPluginFactorSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePlatformListProviderPluginsResponse parses an HTTP response from a PlatformListProviderPluginsWithResponse call
func ParsePlatformListProviderPluginsResponse(rsp *http.Response) (*PlatformListProviderPluginsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlatformListProviderPluginsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePlatformGetIdentityProviderPluginResponse parses an HTTP response from a PlatformGetIdentityProviderPluginWithResponse call
func ParsePlatformGetIdentityProviderPluginResponse(rsp *http.Response) (*PlatformGetIdentityProviderPluginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlatformGetIdentityProviderPluginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePlatformGetIdentityProviderPluginSchemaResponse parses an HTTP response from a PlatformGetIdentityProviderPluginSchemaWithResponse call
func ParsePlatformGetIdentityProviderPluginSchemaResponse(rsp *http.Response) (*PlatformGetIdentityProviderPluginSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlatformGetIdentityProviderPluginSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePlatformListPluginNotifiersResponse parses an HTTP response from a PlatformListPluginNotifiersWithResponse call
func ParsePlatformListPluginNotifiersResponse(rsp *http.Response) (*PlatformListPluginNotifiersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlatformListPluginNotifiersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []NotifierPlugin
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePlatformGetPluginNotifierResponse parses an HTTP response from a PlatformGetPluginNotifierWithResponse call
func ParsePlatformGetPluginNotifierResponse(rsp *http.Response) (*PlatformGetPluginNotifierResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlatformGetPluginNotifierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NotifierPlugin
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePlatformGetPluginNotifierSchemaResponse parses an HTTP response from a PlatformGetPluginNotifierSchemaWithResponse call
func ParsePlatformGetPluginNotifierSchemaResponse(rsp *http.Response) (*PlatformGetPluginNotifierSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlatformGetPluginNotifierSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePlatformListPluginPoliciesResponse parses an HTTP response from a PlatformListPluginPoliciesWithResponse call
func ParsePlatformListPluginPoliciesResponse(rsp *http.Response) (*PlatformListPluginPoliciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlatformListPluginPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePlatformGetPluginPolicyResponse parses an HTTP response from a PlatformGetPluginPolicyWithResponse call
func ParsePlatformGetPluginPolicyResponse(rsp *http.Response) (*PlatformGetPluginPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlatformGetPluginPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePlatformGetPluginPolicyDocumentationResponse parses an HTTP response from a PlatformGetPluginPolicyDocumentationWithResponse call
func ParsePlatformGetPluginPolicyDocumentationResponse(rsp *http.Response) (*PlatformGetPluginPolicyDocumentationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlatformGetPluginPolicyDocumentationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePlatformGetPluginPolicySchemaResponse parses an HTTP response from a PlatformGetPluginPolicySchemaWithResponse call
func ParsePlatformGetPluginPolicySchemaResponse(rsp *http.Response) (*PlatformGetPluginPolicySchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlatformGetPluginPolicySchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePlatformListPluginReportersResponse parses an HTTP response from a PlatformListPluginReportersWithResponse call
func ParsePlatformListPluginReportersResponse(rsp *http.Response) (*PlatformListPluginReportersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlatformListPluginReportersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePlatformGetPluginReporterResponse parses an HTTP response from a PlatformGetPluginReporterWithResponse call
func ParsePlatformGetPluginReporterResponse(rsp *http.Response) (*PlatformGetPluginReporterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlatformGetPluginReporterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePlatformGetPluginReporterSchemaResponse parses an HTTP response from a PlatformGetPluginReporterSchemaWithResponse call
func ParsePlatformGetPluginReporterSchemaResponse(rsp *http.Response) (*PlatformGetPluginReporterSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlatformGetPluginReporterSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePlatformListPluginResourcesResponse parses an HTTP response from a PlatformListPluginResourcesWithResponse call
func ParsePlatformListPluginResourcesResponse(rsp *http.Response) (*PlatformListPluginResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlatformListPluginResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePlatformGetPluginResourceResponse parses an HTTP response from a PlatformGetPluginResourceWithResponse call
func ParsePlatformGetPluginResourceResponse(rsp *http.Response) (*PlatformGetPluginResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlatformGetPluginResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePlatformGetPluginResourceSchemaResponse parses an HTTP response from a PlatformGetPluginResourceSchemaWithResponse call
func ParsePlatformGetPluginResourceSchemaResponse(rsp *http.Response) (*PlatformGetPluginResourceSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlatformGetPluginResourceSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePlatformRoleResponse parses an HTTP response from a PlatformRoleWithResponse call
func ParsePlatformRoleResponse(rsp *http.Response) (*PlatformRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlatformRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Role
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCurrentUserGetResponse parses an HTTP response from a CurrentUserGetWithResponse call
func ParseCurrentUserGetResponse(rsp *http.Response) (*CurrentUserGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CurrentUserGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCurrentUserSubscribeNewsletterResponse parses an HTTP response from a CurrentUserSubscribeNewsletterWithResponse call
func ParseCurrentUserSubscribeNewsletterResponse(rsp *http.Response) (*CurrentUserSubscribeNewsletterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CurrentUserSubscribeNewsletterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCurrentUserGetNewsletterTaglinesResponse parses an HTTP response from a CurrentUserGetNewsletterTaglinesWithResponse call
func ParseCurrentUserGetNewsletterTaglinesResponse(rsp *http.Response) (*CurrentUserGetNewsletterTaglinesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CurrentUserGetNewsletterTaglinesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCurrentUserListNotificationsResponse parses an HTTP response from a CurrentUserListNotificationsWithResponse call
func ParseCurrentUserListNotificationsResponse(rsp *http.Response) (*CurrentUserListNotificationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CurrentUserListNotificationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserNotificationContent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCurrentUserMarkNotificationAsReadResponse parses an HTTP response from a CurrentUserMarkNotificationAsReadWithResponse call
func ParseCurrentUserMarkNotificationAsReadResponse(rsp *http.Response) (*CurrentUserMarkNotificationAsReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CurrentUserMarkNotificationAsReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
